<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Python Exception Handling Techniques - Doug Hellmann</title>

<link rel="stylesheet" href="../../_static/default.css" 
    type="text/css" />
<style>
    body {
        margin: 8px;
    }
    .highlight {
        background-color: white;
        border: 0;
    }
    .highlight pre {
        background-color: white;
    }
</style>

<link href="/static/css/leaves.css" rel="stylesheet" type="text/css" />



<script type="text/javascript">
  var DOCUMENTATION_OPTIONS = {
      URL_ROOT:    '../../',
      VERSION:     '',
      COLLAPSE_MODINDEX: false,
      FILE_SUFFIX: '.html'
  };
</script>

<script type="text/javascript" src="../../_static/jquery.js"></script>
<script type="text/javascript" src="../../_static/doctools.js"></script>
    <link rel="top" title="Articles v documentation" href="../../index.html" />
    <link rel="up" title="Tutorials" href="../index.html" />
    <link rel="next" title="Defining Custom Roles in Sphinx" href="../sphinx-custom-roles/index.html" />
    <link rel="prev" title="Tutorials" href="../index.html" />

<meta name="verify-v1" content="5saTcOa2HLac4V85yUg3SARfun1PqT5Upu7IR/6fpv4="/>
</head>
<body>
    
<div id="container">
    
<div id="header">
  <h1>Doug Hellmann</h1>
  <p></p>
  <a id="admin-link" href="/admin/">admin</a>
</div>

<div id="sidebar_left_wrapper">

<div id="navigation"> 
	<ul id="navlist">
		<li><a href="/">Home</a></li>
		<li><a href="/PyMOTW/">PyMOTW</a></li>
		<li><a href="http://blog.doughellmann.com/" target="_">Blog</a></li>
		<li><a href="/articles/">Articles</a></li>
		<li><a href="/projects/">Projects</a></li>
		<li><a href="http://code.doughellmann.com/" target="_">Code</a></li>
		<li><a href="/about/">About</a></li>
	</ul>
</div>



</div>

<div id="sidebar">

  <h3>Page Contents</h3>
  <ul>
<li><a class="reference external" href="">Python Exception Handling Techniques</a><ul>
<li><a class="reference external" href="#throwing-and-catching">Throwing and Catching</a></li>
<li><a class="reference external" href="#logging-exceptions">Logging Exceptions</a></li>
<li><a class="reference external" href="#cleaning-up-and-re-raising">Cleaning Up and Re-raising</a></li>
<li><a class="reference external" href="#re-raising-exceptions">Re-raising Exceptions</a></li>
<li><a class="reference external" href="#preserving-tracebacks">Preserving Tracebacks</a></li>
</ul>
</li>
</ul>


    <p>
  <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/us/" rel="license"><img alt="Creative Commons License" style="border-width:0; align: center;" src="http://i.creativecommons.org/l/by-nc-sa/3.0/us/88x31.png"/></a>
    </p>

    
    <p class="ads">
    <script type="text/javascript"><!--
    google_ad_client = "pub-3205160560229413";
    google_ad_width = 120;
    google_ad_height = 600;
    google_ad_format = "120x600_as";
    google_ad_type = "text";
    //2007-10-27: www.doughellmann.com
    google_ad_channel = "0828653884";
    google_color_border = "FFFFFF";
    google_color_bg = "FFFFFF";
    google_color_link = "CC6714";
    google_color_text = "000000";
    google_color_url = "999999";
    google_ui_features = "rc:0";
    //-->
    </script>
    <script type="text/javascript"
      src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
    </script>
    </p>

</div>
	  
<div id="content">

    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../../genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="../sphinx-custom-roles/index.html" title="Defining Custom Roles in Sphinx"
             accesskey="N">next</a> |</li>
        <li class="right" >
          <a href="../index.html" title="Tutorials"
             accesskey="P">previous</a> |</li>
        <li><a href="../../index.html">Articles</a> &raquo;</li>
          <li><a href="../index.html" accesskey="U">Tutorials</a> &raquo;</li> 
      </ul>
    </div>

  <div class="section" id="python-exception-handling-techniques">
<span id="index-245"></span><h1>Python Exception Handling Techniques<a class="headerlink" href="#python-exception-handling-techniques" title="Permalink to this headline">¶</a></h1>
<p class="deck">Error reporting and processing through exceptions is one of
Python&#8217;s key features. Care must be taken when handling exceptions
to ensure proper application cleanup while maintaining useful
error reporting.</p>
<p>Error reporting and processing through exceptions is one of Python&#8217;s
key features. Unlike C, where the common way to report errors is
through function return values that then have to be checked on every
invocation, in Python a programmer can raise an exception at any point
in a program. When the exception is raised, program execution is
interrupted as the interpreter searches back up the stack to find a
context with an exception handler. This search algorithm allows error
handling to be organized cleanly in a central or high-level place
within the program structure. Libraries may not need to do any
exception handling at all, and simple scripts can frequently get away
with wrapping a portion of the main program in an exception handler to
print a nicely formatted error. Proper exception handling in more
complicated situations can be a little tricky, though, especially in
cases where the program has to clean up after itself as the exception
propagates back up the stack.</p>
<div class="section" id="throwing-and-catching">
<h2>Throwing and Catching<a class="headerlink" href="#throwing-and-catching" title="Permalink to this headline">¶</a></h2>
<p>The statements used to deal with exceptions are <tt class="docutils literal"><span class="pre">raise</span></tt> and
<tt class="docutils literal"><span class="pre">except</span></tt>.  Both are language keywords.  The most common form of
throwing an exception with <tt class="docutils literal"><span class="pre">raise</span></tt> uses an instance of an exception
class.</p>
<div class="highlight-python"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></div></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>

<span class="k">def</span> <span class="nf">throws</span><span class="p">():</span>
    <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&#39;this is the error message&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">throws</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</td></tr></table></div>
<p>The arguments needed by the exception class vary, but usually include
a message string to explain the problem encountered.</p>
<p>If the exception is left unhandled, the default behavior is for the
interpreter to print a full traceback and the error message included
in the exception.</p>
<div class="highlight-python"><pre>$ python throwing.py
Traceback (most recent call last):
  File "throwing.py", line 10, in &lt;module&gt;
    main()
  File "throwing.py", line 7, in main
    throws()
  File "throwing.py", line 4, in throws
    raise RuntimeError('this is the error message')
RuntimeError: this is the error message</pre>
</div>
<p>For some scripts this behavior is sufficient, but it is nicer to catch
the exception and print a more user-friendly version of the error.</p>
<div class="highlight-python"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></div></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>

<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">def</span> <span class="nf">throws</span><span class="p">():</span>
    <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&#39;this is the error message&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">throws</span><span class="p">()</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">err</span><span class="p">:</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;ERROR: </span><span class="si">%s</span><span class="se">\n</span><span class="s">&#39;</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">err</span><span class="p">))</span>
        <span class="k">return</span> <span class="mi">1</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
</td></tr></table></div>
<p>In the example above, all exceptions derived from <tt class="docutils literal"><span class="pre">Exception</span></tt> are
caught, and just the error message is printed to stderr.  The program
follows the Unix convention of returning an exit code indicating
whether there was an error or not.</p>
<div class="highlight-python"><pre>$ python catching.py
ERROR: this is the error message</pre>
</div>
</div>
<div class="section" id="logging-exceptions">
<h2>Logging Exceptions<a class="headerlink" href="#logging-exceptions" title="Permalink to this headline">¶</a></h2>
<p id="index-246">For daemons or other background processes, printing directly to stderr
may not be an option.  The file descriptor might have been closed, or
it may be redirected somewhere that errors are hard to find.  A better
option is to use the logging module to log the error, including the
full traceback.</p>
<div class="highlight-python"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>

<span class="kn">import</span> <span class="nn">logging</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">def</span> <span class="nf">throws</span><span class="p">():</span>
    <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&#39;this is the error message&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">WARNING</span><span class="p">)</span>
    <span class="n">log</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="s">&#39;example&#39;</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">throws</span><span class="p">()</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">err</span><span class="p">:</span>
        <span class="n">log</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="s">&#39;Error from throws():&#39;</span><span class="p">)</span>
        <span class="k">return</span> <span class="mi">1</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
</td></tr></table></div>
<p>In this example, the logger is configured to to use the default
behavior of sending its output to stderr, but that can easily be
adjusted.  Saving tracebacks to a log file can make it easier to debug
problems that are otherwise hard to reproduce outside of a production
environment.</p>
<div class="highlight-python"><pre>$ python logging_errors.py
ERROR:example:Error from throws():
Traceback (most recent call last):
  File "logging_errors.py", line 13, in main
    throws()
  File "logging_errors.py", line 7, in throws
    raise RuntimeError('this is the error message')
RuntimeError: this is the error message</pre>
</div>
</div>
<div class="section" id="cleaning-up-and-re-raising">
<h2>Cleaning Up and Re-raising<a class="headerlink" href="#cleaning-up-and-re-raising" title="Permalink to this headline">¶</a></h2>
<p>In many programs, simply reporting the error isn&#8217;t enough.  If an
error occurs part way through a lengthy process, you may need to undo
some of the work already completed.  For example, changes to a
database may need to be rolled back or temporary files may need to be
deleted.  There are two ways to handle cleanup operations, using a
<tt class="docutils literal"><span class="pre">finally</span></tt> stanza coupled to the exception handler, or within an
explicit exception handler that raises the exception after cleanup is
done.</p>
<p>For cleanup operations that should always be performed, the simplest
implementation is to use <tt class="docutils literal"><span class="pre">try:finally</span></tt>.  The <tt class="docutils literal"><span class="pre">finally</span></tt> stanza is
guaranteed to be run, even if the code inside the <tt class="docutils literal"><span class="pre">try</span></tt> block raises
an exception.</p>
<div class="highlight-python"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></div></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>

<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">def</span> <span class="nf">throws</span><span class="p">():</span>
    <span class="k">print</span> <span class="s">&#39;Starting throws()&#39;</span>
    <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&#39;this is the error message&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">throws</span><span class="p">()</span>
            <span class="k">return</span> <span class="mi">0</span>
        <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">err</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">&#39;Caught an exception&#39;</span>
            <span class="k">return</span> <span class="mi">1</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">&#39;In finally block for cleanup&#39;</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
</td></tr></table></div>
<p>This old-style example wraps a <tt class="docutils literal"><span class="pre">try:except</span></tt> block with a
<tt class="docutils literal"><span class="pre">try:finally</span></tt> block to ensure that the cleanup code is called no
matter what happens inside the main program.</p>
<div class="highlight-python"><pre>$ python try_finally_oldstyle.py
Starting throws()
Caught an exception
In finally block for cleanup</pre>
</div>
<p>While you may continue to see that style in older code, since Python
2.5 it has been possible to combine <tt class="docutils literal"><span class="pre">try:except</span></tt> and <tt class="docutils literal"><span class="pre">try:finally</span></tt>
blocks into a single level.  Since the newer style uses fewer levels
of indentation and the resulting code is easier to read, it is being
adopted quickly.</p>
<div class="highlight-python"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>

<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">def</span> <span class="nf">throws</span><span class="p">():</span>
    <span class="k">print</span> <span class="s">&#39;Starting throws()&#39;</span>
    <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&#39;this is the error message&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">throws</span><span class="p">()</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">err</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">&#39;Caught an exception&#39;</span>
        <span class="k">return</span> <span class="mi">1</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">&#39;In finally block for cleanup&#39;</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
</td></tr></table></div>
<p>The resulting output is the same:</p>
<div class="highlight-python"><pre>$ python try_finally.py
Starting throws()
Caught an exception
In finally block for cleanup</pre>
</div>
</div>
<div class="section" id="re-raising-exceptions">
<h2>Re-raising Exceptions<a class="headerlink" href="#re-raising-exceptions" title="Permalink to this headline">¶</a></h2>
<p>Sometimes the cleanup action you need to take for an error is
different than when an operation succeeds.  For example, with a
database you may need to rollback the transaction if there is an error
but commit otherwise.  In such cases, you will have to catch the
exception and handle it.  It may be necessary to catch the exception
in an intermediate layer of your application to undo part of the
processing, then throw it again to continue propagating the error
handling.</p>
<div class="highlight-python"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59</pre></div></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>
<span class="sd">&quot;&quot;&quot;Illustrate database transaction management using sqlite3.</span>
<span class="sd">&quot;&quot;&quot;</span>

<span class="kn">import</span> <span class="nn">logging</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sqlite3</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="n">DB_NAME</span> <span class="o">=</span> <span class="s">&#39;mydb.sqlite&#39;</span>
<span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">)</span>
<span class="n">log</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="s">&#39;db_example&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">throws</span><span class="p">():</span>
    <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&#39;this is the error message&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">create_tables</span><span class="p">(</span><span class="n">cursor</span><span class="p">):</span>
    <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;Creating tables&#39;</span><span class="p">)</span>
    <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;create table module (name text, description text)&quot;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">insert_data</span><span class="p">(</span><span class="n">cursor</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">module</span><span class="p">,</span> <span class="n">description</span> <span class="ow">in</span> <span class="p">[(</span><span class="s">&#39;logging&#39;</span><span class="p">,</span> <span class="s">&#39;error reporting and auditing&#39;</span><span class="p">),</span>
                                <span class="p">(</span><span class="s">&#39;os&#39;</span><span class="p">,</span> <span class="s">&#39;Operating system services&#39;</span><span class="p">),</span>
                                <span class="p">(</span><span class="s">&#39;sqlite3&#39;</span><span class="p">,</span> <span class="s">&#39;SQLite database access&#39;</span><span class="p">),</span>
                                <span class="p">(</span><span class="s">&#39;sys&#39;</span><span class="p">,</span> <span class="s">&#39;Runtime services&#39;</span><span class="p">),</span>
                                <span class="p">]:</span>
        <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;Inserting </span><span class="si">%s</span><span class="s"> (</span><span class="si">%s</span><span class="s">)&#39;</span><span class="p">,</span> <span class="n">module</span><span class="p">,</span> <span class="n">description</span><span class="p">)</span>
        <span class="n">cursor</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&quot;insert into module values (?, ?)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">module</span><span class="p">,</span> <span class="n">description</span><span class="p">))</span>
    <span class="k">return</span>

<span class="k">def</span> <span class="nf">do_database_work</span><span class="p">(</span><span class="n">do_create</span><span class="p">):</span>
    <span class="n">db</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">DB_NAME</span><span class="p">)</span>        
    <span class="k">try</span><span class="p">:</span>
        <span class="n">cursor</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">do_create</span><span class="p">:</span>
            <span class="n">create_tables</span><span class="p">(</span><span class="n">cursor</span><span class="p">)</span>
        <span class="n">insert_data</span><span class="p">(</span><span class="n">cursor</span><span class="p">)</span>
        <span class="n">throws</span><span class="p">()</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="n">db</span><span class="o">.</span><span class="n">rollback</span><span class="p">()</span>
        <span class="n">log</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s">&#39;Rolling back transaction&#39;</span><span class="p">)</span>
        <span class="k">raise</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;Committing transaction&#39;</span><span class="p">)</span>
        <span class="n">db</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
    <span class="k">return</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">do_create</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">DB_NAME</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">do_database_work</span><span class="p">(</span><span class="n">do_create</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">err</span><span class="p">:</span>
        <span class="n">log</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="s">&#39;Error while doing database work&#39;</span><span class="p">)</span>
        <span class="k">return</span> <span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
</td></tr></table></div>
<p>This example uses a separate exception handler in
<tt class="docutils literal"><span class="pre">do_database_work()</span></tt> to undo the changes made in the database, then
a global exception handler to report the error message.</p>
<div class="highlight-python"><pre>$ python sqlite_error.py
INFO:db_example:Creating tables
INFO:db_example:Inserting logging (error reporting and auditing)
INFO:db_example:Inserting os (Operating system services)
INFO:db_example:Inserting sqlite3 (SQLite database access)
INFO:db_example:Inserting sys (Runtime services)
ERROR:db_example:Rolling back transaction
ERROR:db_example:Error while doing database work
Traceback (most recent call last):
  File "sqlite_error.py", line 51, in main
    do_database_work(do_create)
  File "sqlite_error.py", line 38, in do_database_work
    throws()
  File "sqlite_error.py", line 15, in throws
    raise RuntimeError('this is the error message')
RuntimeError: this is the error message</pre>
</div>
</div>
<div class="section" id="preserving-tracebacks">
<h2>Preserving Tracebacks<a class="headerlink" href="#preserving-tracebacks" title="Permalink to this headline">¶</a></h2>
<p>Frequently the cleanup operation itself introduces another opportunity
for an error condition in your program.  This is especially the case
when a system runs out of resources (memory, disk space, etc.).
Exceptions raised from within an exception handler can mask the
original error if they aren&#8217;t handled locally.</p>
<div class="highlight-python"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28</pre></div></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>

<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">traceback</span>

<span class="k">def</span> <span class="nf">throws</span><span class="p">():</span>
    <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&#39;error from throws&#39;</span><span class="p">)</span>
    
<span class="k">def</span> <span class="nf">nested</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">throws</span><span class="p">()</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="n">cleanup</span><span class="p">()</span>
        <span class="k">raise</span>

<span class="k">def</span> <span class="nf">cleanup</span><span class="p">():</span>
    <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&#39;error from cleanup&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">nested</span><span class="p">()</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">err</span><span class="p">:</span>
        <span class="n">traceback</span><span class="o">.</span><span class="n">print_exc</span><span class="p">()</span>
        <span class="k">return</span> <span class="mi">1</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
</td></tr></table></div>
<p>When <tt class="docutils literal"><span class="pre">cleanup()</span></tt> raises an exception while the original error is
being processed, the exception handling machinery is reset to deal
with the new error.</p>
<div class="highlight-python"><pre>$ python masking_exceptions.py
Traceback (most recent call last):
  File "masking_exceptions.py", line 21, in main
    nested()
  File "masking_exceptions.py", line 13, in nested
    cleanup()
  File "masking_exceptions.py", line 17, in cleanup
    raise RuntimeError('error from cleanup')
RuntimeError: error from cleanup</pre>
</div>
<p>Even catching the second exception does not guarantee that the
original error message will be preserved.</p>
<div class="highlight-python"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></div></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>

<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">traceback</span>

<span class="k">def</span> <span class="nf">throws</span><span class="p">():</span>
    <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&#39;error from throws&#39;</span><span class="p">)</span>
    
<span class="k">def</span> <span class="nf">nested</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">throws</span><span class="p">()</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">cleanup</span><span class="p">()</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">pass</span> <span class="c"># ignore errors in cleanup</span>
        <span class="k">raise</span> <span class="c"># we want to re-raise the original error</span>

<span class="k">def</span> <span class="nf">cleanup</span><span class="p">():</span>
    <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&#39;error from cleanup&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">nested</span><span class="p">()</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">err</span><span class="p">:</span>
        <span class="n">traceback</span><span class="o">.</span><span class="n">print_exc</span><span class="p">()</span>
        <span class="k">return</span> <span class="mi">1</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
</td></tr></table></div>
<p>Here, even though we have wrapped the <tt class="docutils literal"><span class="pre">cleanup()</span></tt> call in an
exception handler that ignores the exception, the error in
<tt class="docutils literal"><span class="pre">cleanup()</span></tt> hides the original error because only one exception
context is maintained.</p>
<div class="highlight-python"><pre>$ python masking_exceptions_catch.py
Traceback (most recent call last):
  File "masking_exceptions_catch.py", line 24, in main
    nested()
  File "masking_exceptions_catch.py", line 14, in nested
    cleanup()
  File "masking_exceptions_catch.py", line 20, in cleanup
    raise RuntimeError('error from cleanup')
RuntimeError: error from cleanup</pre>
</div>
<p>A naive solution is to catch the original exception and retain it in a
variable, then re-raise it explicitly.</p>
<div class="highlight-python"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></div></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>

<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">traceback</span>

<span class="k">def</span> <span class="nf">throws</span><span class="p">():</span>
    <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&#39;error from throws&#39;</span><span class="p">)</span>
    
<span class="k">def</span> <span class="nf">nested</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">throws</span><span class="p">()</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">original_error</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">cleanup</span><span class="p">()</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">pass</span> <span class="c"># ignore errors in cleanup</span>
        <span class="k">raise</span> <span class="n">original_error</span>

<span class="k">def</span> <span class="nf">cleanup</span><span class="p">():</span>
    <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&#39;error from cleanup&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">nested</span><span class="p">()</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">err</span><span class="p">:</span>
        <span class="n">traceback</span><span class="o">.</span><span class="n">print_exc</span><span class="p">()</span>
        <span class="k">return</span> <span class="mi">1</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
</td></tr></table></div>
<p>As you can see, this does not preserve the full traceback.  The stack
trace printed does not include the <tt class="docutils literal"><span class="pre">throws()</span></tt> function at all, even
though that is the original source of the error.</p>
<div class="highlight-python"><pre>$ python masking_exceptions_reraise.py
Traceback (most recent call last):
  File "masking_exceptions_reraise.py", line 24, in main
    nested()
  File "masking_exceptions_reraise.py", line 17, in nested
    raise original_error
RuntimeError: error from throws</pre>
</div>
<p>A better solution is to re-raise the original exception <em>first</em>, and
handle the clean up in a <tt class="docutils literal"><span class="pre">try:finally</span></tt> block.</p>
<div class="highlight-python"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33</pre></div></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>

<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">traceback</span>

<span class="k">def</span> <span class="nf">throws</span><span class="p">():</span>
    <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&#39;error from throws&#39;</span><span class="p">)</span>
    
<span class="k">def</span> <span class="nf">nested</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">throws</span><span class="p">()</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">original_error</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">raise</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">cleanup</span><span class="p">()</span>
            <span class="k">except</span><span class="p">:</span>
                <span class="k">pass</span> <span class="c"># ignore errors in cleanup</span>

<span class="k">def</span> <span class="nf">cleanup</span><span class="p">():</span>
    <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&#39;error from cleanup&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">nested</span><span class="p">()</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">err</span><span class="p">:</span>
        <span class="n">traceback</span><span class="o">.</span><span class="n">print_exc</span><span class="p">()</span>
        <span class="k">return</span> <span class="mi">1</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre></div>
</td></tr></table></div>
<p>This construction prevents the original exception from being
overwritten by the latter, and preserves the full stack in the
traceback.</p>
<div class="highlight-python"><pre>$ python masking_exceptions_finally.py
Traceback (most recent call last):
  File "masking_exceptions_finally.py", line 26, in main
    nested()
  File "masking_exceptions_finally.py", line 11, in nested
    throws()
  File "masking_exceptions_finally.py", line 7, in throws
    raise RuntimeError('error from throws')
RuntimeError: error from throws</pre>
</div>
<p>The extra indention levels aren&#8217;t pretty, but it gives the output we
want.  The error reported is for the original exception, including the
full stack trace.</p>
<div class="admonition-see-also admonition seealso">
<p class="first admonition-title">See also</p>
<dl class="last docutils">
<dt><a class="reference external" href="http://docs.python.org/tutorial/errors.html">Errors and Exceptions</a></dt>
<dd>The standard library documentation tutorial on handling errors and exceptions in your code.</dd>
<dt><a class="reference external" href="http://www.doughellmann.com/PyMOTW/exceptions/">PyMOTW: exceptions</a></dt>
<dd>Python Module of the Week article about the exceptions module.</dd>
<dt><a class="reference external" href="http://docs.python.org/library/exceptions.html">exceptions module</a></dt>
<dd>Standard library documentation about the exceptions module.</dd>
<dt><a class="reference external" href="http://www.doughellmann.com/PyMOTW/logging/">PyMOTW: logging</a></dt>
<dd>Python Module of the Week article about the logging module.</dd>
<dt><a class="reference external" href="http://docs.python.org/library/logging.html">logging module</a></dt>
<dd>Standard library documentation about the logging module.</dd>
</dl>
</div>
</div>
</div>


    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../../genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="../sphinx-custom-roles/index.html" title="Defining Custom Roles in Sphinx"
             >next</a> |</li>
        <li class="right" >
          <a href="../index.html" title="Tutorials"
             >previous</a> |</li>
        <li><a href="../../index.html">Articles</a> &raquo;</li>
          <li><a href="../index.html" >Tutorials</a> &raquo;</li> 
      </ul>
    </div>



<div id="addthis"><a href="http://www.addthis.com/bookmark.php" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="http://s7.addthis.com/static/btn/lg-share-en.gif" width="125" height="16" border="0" alt="Bookmark and Share" /></a><script type="text/javascript">var addthis_pub = "dhellmann";</script><script type="text/javascript" src="http://s7.addthis.com/js/widget.php?v=10"></script></div>



<!-- Disqus -->
<div id="disqus_wrapper">
<div id="disqus_thread"></div><script type="text/javascript" src="http://disqus.com/forums/doughellmann/embed.js"></script><noscript><a href="http://doughellmann.disqus.com/?url=ref">View the discussion thread.</a></noscript><a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>
</div>

</div>

<div id="footer_ads">

    <p><script type="text/javascript"><!--
    google_ad_client = "pub-3205160560229413";
    google_ad_width = 728;
    google_ad_height = 90;
    google_ad_format = "728x90_as";
    google_ad_type = "text";
    //2007-10-21: www.doughellmann.com
    google_ad_channel = "0828653884";
    google_color_border = "FFFFFF";
    google_color_bg = "FFFFFF";
    google_color_link = "CC6714";
    google_color_text = "000000";
    google_color_url = "999999";
    google_ui_features = "rc:0";
    //-->
    </script>
    <script type="text/javascript"
      src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
    </script></p>
</div>

<div id="footer">
 
<p>
    &copy; Copyright 2008, 2009, 2010 Doug Hellmann.
   | Created using <a href="http://sphinx.pocoo.org/">Sphinx</a>.
   | Design based on "Leaves" by <a href="http://smallpark.org">SmallPark</a>
</p>
   
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript" />
<script type="text/javascript">
  _uacct = "UA-1847381-1";
  urchinTracker();
</script>

</div>

</div>

<!-- Disqus -->
<script type="text/javascript">
//<![CDATA[
(function() {
		var links = document.getElementsByTagName('a');
		var query = '?';
		for(var i = 0; i < links.length; i++) {
			if(links[i].href.indexOf('#disqus_thread') >= 0) {
				query += 'url' + i + '=' + encodeURIComponent(links[i].href) + '&';
			}
		}
		document.write('<script type="text/javascript" src="http://disqus.com/forums/doughellmann/get_num_replies.js' + query + '"></' + 'script>');
	})();
//]]>
</script>


</body>
</html>