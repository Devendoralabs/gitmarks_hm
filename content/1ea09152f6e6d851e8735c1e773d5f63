<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>ystockquote.py | Python API For Yahoo Finance Stock Data</title>
    <link rel="stylesheet" type="text/css" href="./style.css" />
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
    <meta http-equiv="Content-Language" content="en" />
    <meta name="description" content="Python Yahoo Finance Stock Quote Module by Corey Goldberg" />
    <meta name="keywords" content="python, yahoo finance, stock quote" />
</head>

<body>

<div id="hdrimg">
    <a href="http://feeds.feedburner.com/goldblog" style="position:absolute;top:30px;right:30px">Subscribe To Corey's Blog
        <img src="http://www.feedburner.com/fb/images/pub/feed-icon32x32.png" alt="Subscribe To Goldblog" style="vertical-align:middle;border:2"/>
    </a>
    <a href="./">
        <img src="images/button_goldborg_home.png" alt="goldb.org home" style="position:absolute;top:80px;left:30px"></img>
    </a>
    <!-- 
    <ul id="nav">
        <li><a href="" title="" id="current">home</a></li>
    </ul>
    -->
</div>

<div class="rowcontainer">
    <div class="fullcolumn">
        <h2>ystockquote.py | Python API For Yahoo Finance Stock Data</h2>
        <h3><em>by Corey Goldberg</em></h3>
        <p>The <strong>ystockquote</strong> module provides a Python API for retrieving stock data from Yahoo Finance.<br /><br /></p>
        <p>This module contains the following functions:</p>
        <ul>
            <li>get_all(symbol)</li>
            <li>get_price(symbol)</li>
            <li>get_change(symbol)</li>
            <li>get_volume(symbol)</li>
            <li>get_avg_daily_volume(symbol)</li>
            <li>get_stock_exchange(symbol)</li>
            <li>get_market_cap(symbol)</li>
            <li>get_book_value(symbol)</li>
            <li>get_ebitda(symbol)</li>
            <li>get_dividend_per_share(symbol)</li>
            <li>get_dividend_yield(symbol)</li>
            <li>get_earnings_per_share(symbol)</li>
            <li>get_52_week_high(symbol)</li>
            <li>get_52_week_low(symbol)</li>
            <li>get_50day_moving_avg(symbol)</li>
            <li>get_200day_moving_avg(symbol)</li>
            <li>get_price_earnings_ratio(symbol)</li>
            <li>get_price_earnings_growth_ratio(symbol)</li>
            <li>get_price_sales_ratio(symbol)</li>
            <li>get_price_book_ratio(symbol)</li>
            <li>get_short_ratio(symbol)</li>
            <li>get_historical_prices(symbol, start_yyyymmdd, end_yyyymmdd)</li>
        </ul>
    </div>
    
    <div class="fullcolumn">
        <h3>Sample Usage:</h3>
        <pre><code>
>>> import ystockquote
>>> print ystockquote.get_price('GOOG')
529.46
>>> print ystockquote.get_all('MSFT')
{'stock_exchange': '"NasdaqNM"', 'market_cap': '268.6B', '200day_moving_avg': '29.2879', 
'52_week_high': '31.84', 'price_earnings_growth_ratio': '1.45', 'price_sales_ratio': '5.33', 
'price': '28.65', 'earnings_per_share': '1.423', '50day_moving_avg': '28.7981', 
'avg_daily_volume': '55579700', 'volume': '25330856', '52_week_low': '26.48', 'short_ratio': '1.60', 
'price_earnings_ratio': '28.65', 'dividend_yield': '1.38', 'dividend_per_share': '0.40', 
'price_book_ratio': '8.76', 'ebitda': '20.441B', 'change': '-0.39', 'book_value': '3.315'}
        </code></pre>
    </div>


    <div class="fullcolumn">
        <h3>Code:</h3>
        <pre><code>
#!/usr/bin/env python
#
#  Copyright (c) 2007-2008, Corey Goldberg (corey@goldb.org)
#
#  license: GNU LGPL
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.


import urllib


"""
This is the "ystockquote" module.

This module provides a Python API for retrieving stock data from Yahoo Finance.

sample usage:
>>> import ystockquote
>>> print ystockquote.get_price('GOOG')
529.46
"""


def __request(symbol, stat):
    url = 'http://finance.yahoo.com/d/quotes.csv?s=%s&amp;f=%s' % (symbol, stat)
    return urllib.urlopen(url).read().strip().strip('"')


def get_all(symbol):
    """
    Get all available quote data for the given ticker symbol.
    
    Returns a dictionary.
    """
    values = __request(symbol, 'l1c1va2xj1b4j4dyekjm3m4rr5p5p6s7').split(',')
    data = {}
    data['price'] = values[0]
    data['change'] = values[1]
    data['volume'] = values[2]
    data['avg_daily_volume'] = values[3]
    data['stock_exchange'] = values[4]
    data['market_cap'] = values[5]
    data['book_value'] = values[6]
    data['ebitda'] = values[7]
    data['dividend_per_share'] = values[8]
    data['dividend_yield'] = values[9]
    data['earnings_per_share'] = values[10]
    data['52_week_high'] = values[11]
    data['52_week_low'] = values[12]
    data['50day_moving_avg'] = values[13]
    data['200day_moving_avg'] = values[14]
    data['price_earnings_ratio'] = values[15]
    data['price_earnings_growth_ratio'] = values[16]
    data['price_sales_ratio'] = values[17]
    data['price_book_ratio'] = values[18]
    data['short_ratio'] = values[19]
    return data
    
    
def get_price(symbol): 
    return __request(symbol, 'l1')


def get_change(symbol):
    return __request(symbol, 'c1')
    
    
def get_volume(symbol): 
    return __request(symbol, 'v')


def get_avg_daily_volume(symbol): 
    return __request(symbol, 'a2')
    
    
def get_stock_exchange(symbol): 
    return __request(symbol, 'x')
    
    
def get_market_cap(symbol):
    return __request(symbol, 'j1')
   
   
def get_book_value(symbol):
    return __request(symbol, 'b4')


def get_ebitda(symbol): 
    return __request(symbol, 'j4')
    
    
def get_dividend_per_share(symbol):
    return __request(symbol, 'd')


def get_dividend_yield(symbol): 
    return __request(symbol, 'y')
    
    
def get_earnings_per_share(symbol): 
    return __request(symbol, 'e')


def get_52_week_high(symbol): 
    return __request(symbol, 'k')
    
    
def get_52_week_low(symbol): 
    return __request(symbol, 'j')


def get_50day_moving_avg(symbol): 
    return __request(symbol, 'm3')
    
    
def get_200day_moving_avg(symbol): 
    return __request(symbol, 'm4')
    
    
def get_price_earnings_ratio(symbol): 
    return __request(symbol, 'r')


def get_price_earnings_growth_ratio(symbol): 
    return __request(symbol, 'r5')


def get_price_sales_ratio(symbol): 
    return __request(symbol, 'p5')
    
    
def get_price_book_ratio(symbol): 
    return __request(symbol, 'p6')
       
       
def get_short_ratio(symbol): 
    return __request(symbol, 's7')
    
    
def get_historical_prices(symbol, start_date, end_date):
    """
    Get historical prices for the given ticker symbol.
    Date format is 'YYYYMMDD'
    
    Returns a nested list.
    """
    url = 'http://ichart.yahoo.com/table.csv?s=%s&amp;' % symbol + \
          'd=%s&amp;' % str(int(end_date[4:6]) - 1) + \
          'e=%s&amp;' % str(int(end_date[6:8])) + \
          'f=%s&amp;' % str(int(end_date[0:4])) + \
          'g=d&amp;' + \
          'a=%s&amp;' % str(int(start_date[4:6]) - 1) + \
          'b=%s&amp;' % str(int(start_date[6:8])) + \
          'c=%s&amp;' % str(int(start_date[0:4])) + \
          'ignore=.csv'
    days = urllib.urlopen(url).readlines()
    data = [day[:-2].split(',') for day in days]
    return data
        </code></pre>
    </div>

</div>

<div id="bttmbar"> 
    <span id="copyright">Copyright &copy; 2006-2008 Corey Goldberg&nbsp;&nbsp;|&nbsp;
        <script type="text/javascript">
            <!--
            var name = "corey"
            var emailHost = "goldb.org"
            document.write("<a href=" + "mail" + "to:" + name + "@" + emailHost + ">" + name + "@" + emailHost + "</a>")
            //-->
        </script>
         &nbsp;
    </span>
</div>


<!-- Google Analytics - cmg -->
<script type='text/javascript'>
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type='text/javascript'>
try{
var pageTracker = _gat._getTracker("UA-6011612-2");
pageTracker._trackPageview();
} catch(err) {}</script>


</body>
</html>