<!DOCTYPE html>
<html b:version='2' class='v2' dir='ltr'>
<head>
<meta content='IE=EmulateIE7' http-equiv='X-UA-Compatible'/>
<meta content='width=1100' name='viewport'/>
<meta content='text/html; charset=UTF-8' http-equiv='Content-Type'/>
<script type="text/javascript">(function() { var a=window;function c(b){this.t={};this.tick=function(d,i,e){e=e?e:(new Date).getTime();this.t[d]=[e,i]};this.tick("start",null,b)}var f=new c;a.jstiming={Timer:c,load:f};try{var g=null;if(a.chrome&&a.chrome.csi)g=Math.floor(a.chrome.csi().pageT);if(g==null)if(a.gtbExternal)g=a.gtbExternal.pageT();if(g==null)if(a.external)g=a.external.pageT;if(g)a.jstiming.pt=g}catch(h){};a.tickAboveFold=function(b){b=b;var d=0;if(b.offsetParent){do d+=b.offsetTop;while(b=b.offsetParent)}b=d;b<=750&&a.jstiming.load.tick("aft")};var j=false;function k(){if(!j){j=true;a.jstiming.load.tick("firstScrollTime")}}a.addEventListener?a.addEventListener("scroll",k,false):a.attachEvent("onscroll",k);
 })();</script>
<meta content='true' name='MSSmartTagsPreventParsing'/>
<meta content='blogger' name='generator'/>
<link href='http://www.blogger.com/favicon.ico' rel='icon' type='image/vnd.microsoft.icon'/>
<link href='http://blog.doughellmann.com/2009/04/pymotw-multiprocessing-part-1.html' rel='canonical'/>
<link rel="alternate" type="application/atom+xml" title="Doug Hellmann - Atom" href="http://blog.doughellmann.com/feeds/posts/default" />
<link rel="alternate" type="application/rss+xml" title="Doug Hellmann - RSS" href="http://blog.doughellmann.com/feeds/posts/default?alt=rss" />
<link rel="service.post" type="application/atom+xml" title="Doug Hellmann - Atom" href="http://www.blogger.com/feeds/5440028356946346379/posts/default" />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.blogger.com/rsd.g?blogID=5440028356946346379" />
<link rel="alternate" type="application/atom+xml" title="Doug Hellmann - Atom" href="http://blog.doughellmann.com/feeds/6368045911440149473/comments/default" />
<!--[if IE]><script type="text/javascript" src="http://www.blogger.com/static/v1/jsbin/3168568070-ieretrofit.js"></script>
<![endif]-->
<!--[if IE]> <script> (function() { var html5 = ("abbr,article,aside,audio,canvas,datalist,details," + "figure,footer,header,hgroup,mark,menu,meter,nav,output," + "progress,section,time,video").split(','); for (var i = 0; i < html5.length; i++) { document.createElement(html5[i]); } })(); </script> <![endif]-->
<title>Doug Hellmann: PyMOTW: multiprocessing, part 1</title>
<link type='text/css' rel='stylesheet' href='http://www.blogger.com/static/v1/widgets/3671631648-widget_css_2_bundle.css' />
 <link rel="stylesheet" type="text/css" href="http://www.blogger.com/dyn-css/authorization.css?targetBlogID=5440028356946346379&zx=364cce75-f180-446a-8ffb-91860b241095"/>
<style type="text/css">#navbar-iframe { display:block }
</style>

<style id='page-skin-1' type='text/css'><!--
/*
-----------------------------------------------
Blogger Template Style
Name:     Simple
Designer: Josh Peterson
URL:      www.noaesthetic.com
----------------------------------------------- */
/* Variable definitions
====================
<Variable name="keycolor" description="Main Color" type="color" default="#66bbdd"/>
<Group description="Page Text" selector="body">
<Variable name="body.font" description="Font" type="font"
default="normal normal 12px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
<Variable name="body.text.color" description="Text Color" type="color" default="#222222"/>
</Group>
<Group description="Backgrounds" selector=".body-fauxcolumns-outer">
<Variable name="body.background.color" description="Outer Background" type="color" default="#66bbdd"/>
<Variable name="content.background.color" description="Main Background" type="color" default="#ffffff"/>
<Variable name="header.background.color" description="Header Background" type="color" default="transparent"/>
</Group>
<Group description="Links" selector=".main-outer">
<Variable name="link.color" description="Link Color" type="color" default="#2288bb"/>
<Variable name="link.visited.color" description="Visited Color" type="color" default="#888888"/>
<Variable name="link.hover.color" description="Hover Color" type="color" default="#33aaff"/>
</Group>
<Group description="Blog Title" selector=".header h1">
<Variable name="header.font" description="Font" type="font"
default="normal normal 60px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
<Variable name="header.text.color" description="Title Color" type="color" default="#3399bb" />
</Group>
<Group description="Blog Description" selector=".header .description">
<Variable name="description.text.color" description="Description Color" type="color"
default="#777777" />
</Group>
<Group description="Tabs Text" selector=".tabs-inner .widget li a">
<Variable name="tabs.font" description="Font" type="font"
default="normal normal 14px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
<Variable name="tabs.text.color" description="Text Color" type="color" default="#999999"/>
<Variable name="tabs.selected.text.color" description="Selected Color" type="color" default="#000000"/>
</Group>
<Group description="Tabs Background" selector=".tabs-outer .PageList">
<Variable name="tabs.background.color" description="Background Color" type="color" default="#f5f5f5"/>
<Variable name="tabs.selected.background.color" description="Selected Color" type="color" default="#eeeeee"/>
</Group>
<Group description="Post Title" selector="h3.post-title, .comments h4">
<Variable name="post.title.font" description="Font" type="font"
default="normal normal 22px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
</Group>
<Group description="Date Header" selector=".date-header">
<Variable name="date.header.color" description="Text Color" type="color"
default="#222222"/>
<Variable name="date.header.background.color" description="Background Color" type="color"
default="transparent"/>
</Group>
<Group description="Post Footer" selector=".post-footer">
<Variable name="post.footer.text.color" description="Text Color" type="color" default="#666666"/>
<Variable name="post.footer.background.color" description="Background Color" type="color"
default="#f9f9f9"/>
<Variable name="post.footer.border.color" description="Shadow Color" type="color" default="#eeeeee"/>
</Group>
<Group description="Gadgets" selector="h2">
<Variable name="widget.title.font" description="Title Font" type="font"
default="normal bold 11px Arial, Tahoma, Helvetica, FreeSans, sans-serif"/>
<Variable name="widget.title.text.color" description="Title Color" type="color" default="#000000"/>
<Variable name="widget.alternate.text.color" description="Alternate Color" type="color" default="#999999"/>
</Group>
<Group description="Images" selector=".main-inner">
<Variable name="image.background.color" description="Background Color" type="color" default="#ffffff"/>
<Variable name="image.border.color" description="Border Color" type="color" default="#eeeeee"/>
<Variable name="image.text.color" description="Caption Text Color" type="color" default="#222222"/>
</Group>
<Group description="Accents" selector=".content-inner">
<Variable name="body.rule.color" description="Separator Line Color" type="color" default="#eeeeee"/>
<Variable name="tabs.border.color" description="Tabs Border Color" type="color" default="#eeeeee"/>
</Group>
<Variable name="body.background" description="Body Background" type="background"
color="#eeaa00" default="$(color) none repeat scroll top left"/>
<Variable name="body.background.override" description="Body Background Override" type="string" default=""/>
<Variable name="body.background.gradient.cap" description="Body Gradient Cap" type="url"
default="url(http://www.blogblog.com/1kt/simple/gradients_light.png)"/>
<Variable name="body.background.gradient.tile" description="Body Gradient Tile" type="url"
default="url(http://www.blogblog.com/1kt/simple/body_gradient_tile_light.png)"/>
<Variable name="content.background.color.selector" description="Content Background Color Selector" type="string" default=".content-inner"/>
<Variable name="content.padding" description="Content Padding" type="length" default="10px"/>
<Variable name="content.padding.horizontal" description="Content Horizontal Padding" type="length" default="10px"/>
<Variable name="content.shadow.spread" description="Content Shadow Spread" type="length" default="40px"/>
<Variable name="content.shadow.spread.webkit" description="Content Shadow Spread (WebKit)" type="length" default="5px"/>
<Variable name="content.shadow.spread.ie" description="Content Shadow Spread (IE)" type="length" default="10px"/>
<Variable name="main.border.width" description="Main Border Width" type="length" default="0"/>
<Variable name="header.background.gradient" description="Header Gradient" type="url" default="none"/>
<Variable name="header.shadow.offset.left" description="Header Shadow Offset Left" type="length" default="-1px"/>
<Variable name="header.shadow.offset.top" description="Header Shadow Offset Top" type="length" default="-1px"/>
<Variable name="header.shadow.spread" description="Header Shadow Spread" type="length" default="1px"/>
<Variable name="header.padding" description="Header Padding" type="length" default="30px"/>
<Variable name="header.border.size" description="Header Border Size" type="length" default="1px"/>
<Variable name="header.bottom.border.size" description="Header Bottom Border Size" type="length" default="0"/>
<Variable name="header.border.horizontalsize" description="Header Horizontal Border Size" type="length" default="0"/>
<Variable name="description.text.size" description="Description Text Size" type="string" default="140%"/>
<Variable name="tabs.margin.top" description="Tabs Margin Top" type="length" default="0" />
<Variable name="tabs.margin.side" description="Tabs Side Margin" type="length" default="30px" />
<Variable name="tabs.background.gradient" description="Tabs Background Gradient" type="url"
default="url(http://www.blogblog.com/1kt/simple/gradients_light.png)"/>
<Variable name="tabs.border.width" description="Tabs Border Width" type="length" default="1px"/>
<Variable name="tabs.bevel.border.width" description="Tabs Bevel Border Width" type="length" default="1px"/>
<Variable name="date.header.padding" description="Date Header Padding" type="string" default="inherit"/>
<Variable name="date.header.letterspacing" description="Date Header Letter Spacing" type="string" default="inherit"/>
<Variable name="date.header.margin" description="Date Header Margin" type="string" default="inherit"/>
<Variable name="post.margin.bottom" description="Post Bottom Margin" type="length" default="25px"/>
<Variable name="image.border.small.size" description="Image Border Small Size" type="length" default="2px"/>
<Variable name="image.border.large.size" description="Image Border Large Size" type="length" default="5px"/>
<Variable name="page.width.selector" description="Page Width Selector" type="string" default=".region-inner"/>
<Variable name="page.width" description="Page Width" type="string" default="auto"/>
<Variable name="main.section.margin" description="Main Section Margin" type="length" default="15px"/>
<Variable name="main.padding" description="Main Padding" type="length" default="15px"/>
<Variable name="main.padding.top" description="Main Padding Top" type="length" default="30px"/>
<Variable name="main.padding.bottom" description="Main Padding Bottom" type="length" default="30px"/>
<Variable name="paging.background"
color="#ffffff"
description="Background of blog paging area" type="background"
default="transparent none no-repeat scroll top center"/>
<Variable name="footer.bevel" description="Bevel border length of footer" type="length" default="0"/>
<Variable name="startSide" description="Side where text starts in blog language" type="automatic" default="left"/>
<Variable name="endSide" description="Side where text ends in blog language" type="automatic" default="right"/>
*/
/* Content
----------------------------------------------- */
body {
font: normal normal 12px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
color: #222222;
background: #eeaa00 none repeat scroll top left;
padding: 0 40px 40px 40px;
}
html body .region-inner {
min-width: 0;
max-width: 100%;
width: auto;
}
a:link {
text-decoration:none;
color: #cc6611;
}
a:visited {
text-decoration:none;
color: #888888;
}
a:hover {
text-decoration:underline;
color: #ff9900;
}
.body-fauxcolumn-outer .fauxcolumn-inner {
background: transparent url(http://www.blogblog.com/1kt/simple/body_gradient_tile_light.png) repeat scroll top left;
_background-image: none;
}
.body-fauxcolumn-outer .cap-top {
position: absolute;
z-index: 1;
height: 400px;
width: 100%;
background: #eeaa00 none repeat scroll top left;
}
.body-fauxcolumn-outer .cap-top .cap-left {
width: 100%;
background: transparent url(http://www.blogblog.com/1kt/simple/gradients_light.png) repeat-x scroll top left;
_background-image: none;
}
.content-outer {
-moz-box-shadow: 0 0 40px rgba(0, 0, 0, .15);
-webkit-box-shadow: 0 0 5px rgba(0, 0, 0, .15);
-goog-ms-box-shadow: 0 0 10px #333333;
box-shadow: 0 0 40px rgba(0, 0, 0, .15);
margin-bottom: 1px;
}
.content-inner {
padding: 10px 10px;
}
.content-inner {
background-color: #ffffff;
}
/* Header
----------------------------------------------- */
.header-outer {
background: #cc6611 url(http://www.blogblog.com/1kt/simple/gradients_light.png) repeat-x scroll 0 -400px;
_background-image: none;
}
.Header h1 {
font: normal normal 60px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
color: #ffffff;
text-shadow: 1px 2px 3px rgba(0, 0, 0, .2);
}
.Header h1 a {
color: #ffffff;
}
.Header .description {
font-size: 140%;
color: #ffffff;
}
.header-inner .Header .titlewrapper {
padding: 22px 30px;
}
.header-inner .Header .descriptionwrapper {
padding: 0 30px;
}
/* Tabs
----------------------------------------------- */
.tabs-inner .section:first-child {
border-top: 0 solid #eeeeee;
}
.tabs-inner .section:first-child ul {
margin-top: -0;
border-top: 0 solid #eeeeee;
border-left: 0 solid #eeeeee;
border-right: 0 solid #eeeeee;
}
.tabs-inner .widget ul {
background: #f5f5f5 url(http://www.blogblog.com/1kt/simple/gradients_light.png) repeat-x scroll 0 -800px;
_background-image: none;
border-bottom: 1px solid #eeeeee;
margin-top: 0;
margin-left: -30px;
margin-right: -30px;
}
.tabs-inner .widget li a {
display: inline-block;
padding: .6em 1em;
font: normal normal 14px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
color: #999999;
border-left: 1px solid #ffffff;
border-right: 1px solid #eeeeee;
}
.tabs-inner .widget li:first-child a {
border-left: none;
}
.tabs-inner .widget li.selected a, .tabs-inner .widget li a:hover {
color: #000000;
background-color: #eeeeee;
text-decoration: none;
}
/* Columns
----------------------------------------------- */
.main-outer {
border-top: 0 solid #eeeeee;
}
.fauxcolumn-left-outer .fauxcolumn-inner {
border-right: 1px solid #eeeeee;
}
.fauxcolumn-right-outer .fauxcolumn-inner {
border-left: 1px solid #eeeeee;
}
/* Headings
----------------------------------------------- */
h2 {
margin: 0 0 1em 0;
font: normal bold 11px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
color: #000000;
text-transform: uppercase;
}
/* Widgets
----------------------------------------------- */
.widget .zippy {
color: #999999;
text-shadow: 2px 2px 1px rgba(0, 0, 0, .1);
}
.widget .popular-posts ul {
list-style: none;
}
/* Posts
----------------------------------------------- */
.date-header span {
background-color: transparent;
color: #222222;
padding: inherit;
letter-spacing: inherit;
margin: inherit;
}
.main-inner {
padding-top: 30px;
padding-bottom: 30px;
}
.main-inner .column-center-inner {
padding: 0 15px;
}
.main-inner .column-center-inner .section {
margin: 0 15px;
}
.post {
margin: 0 0 25px 0;
}
h3.post-title, .comments h4 {
font: normal normal 22px Arial, Tahoma, Helvetica, FreeSans, sans-serif;
margin: .75em 0 0;
}
.post-body {
font-size: 110%;
line-height: 1.4;
position: relative;
}
.post-body img, .post-body .tr-caption-container, .Profile img, .Image img,
.BlogList .item-thumbnail img {
padding: 2px;
background: #ffffff;
border: 1px solid #eeeeee;
-moz-box-shadow: 1px 1px 5px rgba(0, 0, 0, .1);
-webkit-box-shadow: 1px 1px 5px rgba(0, 0, 0, .1);
box-shadow: 1px 1px 5px rgba(0, 0, 0, .1);
}
.post-body img, .post-body .tr-caption-container {
padding: 5px;
}
.post-body .tr-caption-container {
color: #222222;
}
.post-body .tr-caption-container img {
padding: 0;
background: transparent;
border: none;
-moz-box-shadow: 0 0 0 rgba(0, 0, 0, .1);
-webkit-box-shadow: 0 0 0 rgba(0, 0, 0, .1);
box-shadow: 0 0 0 rgba(0, 0, 0, .1);
}
.post-header {
margin: 0 0 1.5em;
line-height: 1.6;
font-size: 90%;
}
.post-footer {
margin: 20px -2px 0;
padding: 5px 10px;
color: #666666;
background-color: #f9f9f9;
border-bottom: 1px solid #eeeeee;
line-height: 1.6;
font-size: 90%;
}
#comments .comment-author {
padding-top: 1.5em;
border-top: 1px solid #eeeeee;
background-position: 0 1.5em;
}
#comments .comment-author:first-child {
padding-top: 0;
border-top: none;
}
.avatar-image-container {
margin: .2em 0 0;
}
#comments .avatar-image-container img {
border: 1px solid #eeeeee;
}
/* Accents
---------------------------------------------- */
.section-columns td.columns-cell {
border-left: 1px solid #eeeeee;
}
.blog-pager {
background: transparent none no-repeat scroll top center;
}
.blog-pager-older-link, .home-link,
.blog-pager-newer-link {
background-color: #ffffff;
padding: 5px;
}
.footer-outer {
border-top: 0 dashed #bbbbbb;
}
/* Mobile
----------------------------------------------- */
body.mobile  {
padding: 0;
}
.mobile .content-inner {
padding: 0;
}
.mobile .content-outer {
-webkit-box-shadow: 0 0 3px rgba(0, 0, 0, .15);
box-shadow: 0 0 3px rgba(0, 0, 0, .15);
padding: 0 40px;
}
body.mobile .AdSense {
margin-left: -40px;
}
.mobile .tabs-inner .widget ul {
margin-left: 0;
margin-right: 0;
}
.mobile .post {
margin: 0;
}
.mobile .main-inner .column-center-inner .section {
margin: 0;
}
.mobile .main-inner {
padding-top: 20px;
padding-bottom: 20px;
}
.mobile .main-inner .column-center-inner {
padding: 0;
}
.mobile .date-header span {
padding: 0.4em 10px;
margin: 0 -10px;
}
.mobile h3.post-title {
margin: 0;
}
.mobile .blog-pager {
background: transparent;
}
.mobile .footer-outer {
border-top: none;
}
.mobile .main-inner, .mobile .footer-inner {
background-color: #ffffff;
}
.mobile-link-button {
background-color: #cc6611;
}
.mobile-link-button a:link, .mobile-link-button a:visited {
color: #ffffff;
}

--></style>
<style id='template-skin-1' type='text/css'><!--
body {
min-width: 930px;
}
.content-outer, .content-fauxcolumn-outer, .region-inner {
min-width: 930px;
max-width: 930px;
_width: 930px;
}
.main-inner .columns {
padding-left: 0;
padding-right: 360px;
}
.main-inner .fauxcolumn-center-outer {
left: 0;
right: 360px;
/* IE6 does not respect left and right together */
_width: expression(this.parentNode.offsetWidth -
parseInt("0") -
parseInt("360px") + 'px');
}
.main-inner .fauxcolumn-left-outer {
width: 0;
}
.main-inner .fauxcolumn-right-outer {
width: 360px;
}
.main-inner .column-left-outer {
width: 0;
right: 100%;
margin-left: -0;
}
.main-inner .column-right-outer {
width: 360px;
margin-right: -360px;
}
#layout {
min-width: 0;
}
#layout .content-outer {
min-width: 0;
width: 800px;
}
#layout .region-inner {
min-width: 0;
width: auto;
}
--></style>
<script type="text/javascript">
if (window.jstiming) window.jstiming.load.tick('headEnd');
</script></head>
<body class='loading'>
<div class='navbar section' id='navbar'><div class='widget Navbar' id='Navbar1'><script type="text/javascript">
    function setAttributeOnload(object, attribute, val) {
      if(window.addEventListener) {
        window.addEventListener("load",
          function(){ object[attribute] = val; }, false);
      } else {
        window.attachEvent('onload', function(){ object[attribute] = val; });
      }
    }
  </script>
<iframe src="http://www.blogger.com/navbar.g?targetBlogID=5440028356946346379&amp;blogName=Doug+Hellmann&amp;publishMode=PUBLISH_MODE_HOSTED&amp;navbarType=LIGHT&amp;layoutType=LAYOUTS&amp;searchRoot=http%3A%2F%2Fblog.doughellmann.com%2Fsearch&amp;blogLocale=en_US&amp;homepageUrl=http%3A%2F%2Fblog.doughellmann.com%2F&amp;targetPostID=6368045911440149473" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" height="30px" width="100%" id="navbar-iframe" allowtransparency="true" title="Blogger Navigation and Search"></iframe>
<div></div></div></div>
<div class='body-fauxcolumns'>
<div class='fauxcolumn-outer body-fauxcolumn-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</div>
<div class='content'>
<div class='content-fauxcolumns'>
<div class='fauxcolumn-outer content-fauxcolumn-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</div>
<div class='content-outer'>
<div class='content-cap-top cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left content-fauxborder-left'>
<div class='fauxborder-right content-fauxborder-right'></div>
<div class='content-inner'>
<header>
<div class='header-outer'>
<div class='header-cap-top cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left header-fauxborder-left'>
<div class='fauxborder-right header-fauxborder-right'></div>
<div class='region-inner header-inner'>
<div class='header section' id='header'><div class='widget Header' id='Header1'>
<div id='header-inner'>
<div class='titlewrapper'>
<h1 class='title'>
<a href='http://blog.doughellmann.com/'>Doug Hellmann</a>
</h1>
</div>
<div class='descriptionwrapper'>
<p class='description'><span><p><i>Code Interstices</i></p>

<p>All the little things that happen between bouts of coding.  Covering internet technologies, Python, Mac OS X, and open source.</p></span></p>
</div>
</div>
</div></div>
</div>
</div>
<div class='header-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</header>
<div class='tabs-outer'>
<div class='tabs-cap-top cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left tabs-fauxborder-left'>
<div class='fauxborder-right tabs-fauxborder-right'></div>
<div class='region-inner tabs-inner'>
<div class='tabs section' id='crosscol'></div>
<div class='tabs section' id='crosscol-overflow'></div>
</div>
</div>
<div class='tabs-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<div class='main-outer'>
<div class='main-cap-top cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left main-fauxborder-left'>
<div class='fauxborder-right main-fauxborder-right'></div>
<div class='region-inner main-inner'>
<div class='columns fauxcolumns'>
<div class='fauxcolumn-outer fauxcolumn-center-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<div class='fauxcolumn-outer fauxcolumn-left-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<div class='fauxcolumn-outer fauxcolumn-right-outer'>
<div class='cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left'>
<div class='fauxborder-right'></div>
<div class='fauxcolumn-inner'>
</div>
</div>
<div class='cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<!-- corrects IE6 width calculation -->
<div class='columns-inner'>
<div class='column-center-outer'>
<div class='column-center-inner'>
<div class='main section' id='main'><div class='widget Blog' id='Blog1'>
<div class='blog-posts hfeed'>
<!-- google_ad_section_start(name=default) -->

          <div class="date-outer">
        
<h2 class='date-header'><span>Sunday, April 19, 2009</span></h2>

          <div class="date-posts">
        
<div class='post-outer'>
<div class='post hentry'>
<a name='6368045911440149473'></a>
<h3 class='post-title entry-title'>
PyMOTW: multiprocessing, part 1
</h3>
<div class='post-header'>
<div class='post-header-line-1'></div>
</div>
<div class='post-body entry-content'>
<div class="section" id="multiprocessing-basics"><h1><a title="Manage processes like threads." class="reference external" href="index.html#module-multiprocessing"><tt class="xref docutils literal"><span class="pre">multiprocessing</span></tt></a> Basics</h1><table class="docutils field-list" frame="void" rules="none"><col class="field-name"></col><col class="field-body"></col><tbody valign="top"><tr class="field"><th class="field-name">Purpose:</th><td class="field-body">Provides an API for managing processes.</td></tr><tr class="field"><th class="field-name">Python Version:</th><td class="field-body">2.6</td></tr></tbody></table><p>The multiprocessing module includes a relatively simple API for dividing work up between multiple processes.  It is based on the API for <tt class="xref docutils literal"><span class="pre">threading</span></tt>, and in some cases is a drop-in replacement.  Due to the similarity, the first few examples here are modified from the threading examples.  Features provided by multiprocessing but not available in threading are covered later.</p><div class="section" id="process-objects"><h2>Process objects</h2><p>The simplest way to use a sub-process is to instantiate it with a target function<br />and call start() to let it begin working.</p><div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">multiprocessing</span><br /><br /><span class="k">def</span> <span class="nf">worker</span><span class="p">():</span><br />    <span class="sd">&quot;&quot;&quot;worker function&quot;&quot;&quot;</span><br />    <span class="k">print</span> <span class="s">&#39;Worker&#39;</span><br />    <span class="k">return</span><br /><br /><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span><br />    <span class="n">jobs</span> <span class="o">=</span> <span class="p">[]</span><br />    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mf">5</span><span class="p">):</span><br />        <span class="n">p</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">worker</span><span class="p">)</span><br />        <span class="n">jobs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><br />        <span class="n">p</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><br /></pre></div></div><p>The output includes the word &#8220;Worker&#8221; printed five times, although it may not be entirely clean depending on the order of execution.  A later example illustrates using a lock to ensure that only one worker can print to stdout at a time.</p><div class="highlight-python"><pre>$ python multiprocessing_simple.py<br />Worker<br />Worker<br />Worker<br />Worker<br />Worker</pre><br /></div><p>It usually more useful to be able to spawn a process with arguments to tell it what<br />work to do.  Unlike with <tt class="xref docutils literal"><span class="pre">threading</span></tt>, to pass arguments to a <a title="Manage processes like threads." class="reference external" href="index.html#module-multiprocessing"><tt class="xref docutils literal"><span class="pre">multiprocessing</span></tt></a> Process the argument must be able to be pickled.  As a simple example we could pass each<br />worker a number so the output is a little more interesting in the second<br />example.</p><div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">multiprocessing</span><br /><br /><span class="k">def</span> <span class="nf">worker</span><span class="p">(</span><span class="n">num</span><span class="p">):</span><br />    <span class="sd">&quot;&quot;&quot;thread worker function&quot;&quot;&quot;</span><br />    <span class="k">print</span> <span class="s">&#39;Worker:&#39;</span><span class="p">,</span> <span class="n">num</span><br />    <span class="k">return</span><br /><br /><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span><br />    <span class="n">jobs</span> <span class="o">=</span> <span class="p">[]</span><br />    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mf">5</span><span class="p">):</span><br />        <span class="n">p</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">worker</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">i</span><span class="p">,))</span><br />        <span class="n">jobs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><br />        <span class="n">p</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><br /></pre></div></div><p>The integer argument is now included in the message printed by each worker:</p><div class="highlight-python"><pre>$ python multiprocessing_simpleargs.py<br />Worker: 0<br />Worker: 1<br />Worker: 2<br />Worker: 3<br />Worker: 4</pre><br /></div></div><div class="section" id="importable-target-functions"><h2>Importable Target Functions</h2><p>One difference you will notice between the <tt class="xref docutils literal"><span class="pre">threading</span></tt> and <a title="Manage processes like threads." class="reference external" href="index.html#module-multiprocessing"><tt class="xref docutils literal"><span class="pre">multiprocessing</span></tt></a> examples is the extra protection for <tt class="docutils literal"><span class="pre">__main__</span></tt> used here.  Due to the way the new processes are started, the child process needs to be able to import the script containing the target function.  In these examples I accomplish that by wrapping the main part of the application so it is not run recursively in each child.  You could also import the target function from a separate script.</p><p>For example, this main program:</p><div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">multiprocessing</span><br /><span class="kn">import</span> <span class="nn">multiprocessing_import_worker</span><br /><br /><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span><br />    <span class="n">jobs</span> <span class="o">=</span> <span class="p">[]</span><br />    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mf">5</span><span class="p">):</span><br />        <span class="n">p</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">multiprocessing_import_worker</span><span class="o">.</span><span class="n">worker</span><span class="p">)</span><br />        <span class="n">jobs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><br />        <span class="n">p</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><br /></pre></div></div><p>uses this worker function, defined in a separate module:</p><div class="highlight-python"><div class="highlight"><pre><span class="k">def</span> <span class="nf">worker</span><span class="p">():</span><br />    <span class="sd">&quot;&quot;&quot;worker function&quot;&quot;&quot;</span><br />    <span class="k">print</span> <span class="s">&#39;Worker&#39;</span><br />    <span class="k">return</span><br /></pre></div></div><p>and produces output like the first example above:</p><div class="highlight-python"><pre>$ python multiprocessing_import_main.py<br />Worker<br />Worker<br />Worker<br />Worker<br />Worker</pre><br /></div></div><div class="section" id="determining-the-current-process"><h2>Determining the Current Process</h2><p>Passing arguments to identify or name the process is cumbersome, and unnecessary.<br />Each Process instance has a name with a default value that you can change as<br />the process is created. Naming processes is useful if you have a server<br />with multiple service children handling different operations.</p><div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">multiprocessing</span><br /><span class="kn">import</span> <span class="nn">time</span><br /><br /><span class="k">def</span> <span class="nf">worker</span><span class="p">():</span><br />    <span class="n">name</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">current_process</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><br />    <span class="k">print</span> <span class="n">name</span><span class="p">,</span> <span class="s">&#39;Starting&#39;</span><br />    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">2</span><span class="p">)</span><br />    <span class="k">print</span> <span class="n">name</span><span class="p">,</span> <span class="s">&#39;Exiting&#39;</span><br /><br /><span class="k">def</span> <span class="nf">my_service</span><span class="p">():</span><br />    <span class="n">name</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">current_process</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><br />    <span class="k">print</span> <span class="n">name</span><span class="p">,</span> <span class="s">&#39;Starting&#39;</span><br />    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">3</span><span class="p">)</span><br />    <span class="k">print</span> <span class="n">name</span><span class="p">,</span> <span class="s">&#39;Exiting&#39;</span><br /><br /><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span><br />    <span class="n">service</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;my_service&#39;</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="n">my_service</span><span class="p">)</span><br />    <span class="n">worker_1</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;worker 1&#39;</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="n">worker</span><span class="p">)</span><br />    <span class="n">worker_2</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">worker</span><span class="p">)</span> <span class="c"># use default name</span><br /><br />    <span class="n">worker_1</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><br />    <span class="n">worker_2</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><br />    <span class="n">service</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><br /></pre></div></div><p>The debug output includes the name of the current process on each line. The<br />lines with &#8220;Process-3&#8221; in the name column correspond to the unnamed<br />process w2.</p><div class="highlight-python"><pre>$ python multiprocessing_names.py<br />worker 1 Starting<br />worker 1 Exiting<br />Process-3 Starting<br />Process-3 Exiting<br />my_service Starting<br />my_service Exiting</pre><br /></div></div><div class="section" id="daemon-processes"><br /><h2>Daemon Processes</h2><p>By default the main program will not exit until all of the children have exited. There are<br />times when you want to start a background process and let it run without blocking the main<br />program from exiting. Using daemon processes like this is useful for services where there may<br />not be an easy way to interrupt the worker or where letting it die in the middle of its work<br />does not lose or corrupt data (for example, a task that generates &#8220;heart beats&#8221; for a service<br />monitoring tool). To mark a process as a daemon, set its <tt class="docutils literal"><span class="pre">daemon</span></tt> attribute with a boolean<br />value. The default is for processes to not be daemons, so passing True turns the daemon mode<br />on.</p><div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">multiprocessing</span><br /><span class="kn">import</span> <span class="nn">time</span><br /><span class="kn">import</span> <span class="nn">sys</span><br /><br /><span class="k">def</span> <span class="nf">daemon</span><span class="p">():</span><br />    <span class="k">print</span> <span class="s">&#39;Starting:&#39;</span><span class="p">,</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">current_process</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><br />    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">2</span><span class="p">)</span><br />    <span class="k">print</span> <span class="s">&#39;Exiting :&#39;</span><span class="p">,</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">current_process</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><br /><br /><span class="k">def</span> <span class="nf">non_daemon</span><span class="p">():</span><br />    <span class="k">print</span> <span class="s">&#39;Starting:&#39;</span><span class="p">,</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">current_process</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><br />    <span class="k">print</span> <span class="s">&#39;Exiting :&#39;</span><span class="p">,</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">current_process</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><br /><br /><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span><br />    <span class="n">d</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;daemon&#39;</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="n">daemon</span><span class="p">)</span><br />    <span class="n">d</span><span class="o">.</span><span class="n">daemon</span> <span class="o">=</span> <span class="bp">True</span><br /><br />    <span class="n">n</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;non-daemon&#39;</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="n">non_daemon</span><span class="p">)</span><br />    <span class="n">n</span><span class="o">.</span><span class="n">daemon</span> <span class="o">=</span> <span class="bp">False</span><br /><br />    <span class="n">d</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><br />    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">1</span><span class="p">)</span><br />    <span class="n">n</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><br /></pre></div></div><p>Notice that the output does not include the &#8220;Exiting&#8221; message from the daemon<br />process, since all of the non-daemon processes (including the main program) exit<br />before the daemon process wakes up from its 2 second sleep.</p><div class="highlight-python"><pre>$ python multiprocessing_daemon.py<br />Starting: non-daemon<br />Exiting : non-daemon</pre><br /></div><p>The daemon process is terminated before the main program exits, to avoid leaving orphaned processes running.</p></div><div class="section" id="waiting-for-processes"><br /><h2>Waiting for Processes</h2><p>To wait until a process has completed its work and exited, use the <tt class="docutils literal"><span class="pre">join()</span></tt> method.</p><div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">multiprocessing</span><br /><span class="kn">import</span> <span class="nn">time</span><br /><span class="kn">import</span> <span class="nn">sys</span><br /><br /><span class="k">def</span> <span class="nf">daemon</span><span class="p">():</span><br />    <span class="k">print</span> <span class="s">&#39;Starting:&#39;</span><span class="p">,</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">current_process</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><br />    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">2</span><span class="p">)</span><br />    <span class="k">print</span> <span class="s">&#39;Exiting :&#39;</span><span class="p">,</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">current_process</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><br /><br /><span class="k">def</span> <span class="nf">non_daemon</span><span class="p">():</span><br />    <span class="k">print</span> <span class="s">&#39;Starting:&#39;</span><span class="p">,</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">current_process</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><br />    <span class="k">print</span> <span class="s">&#39;Exiting :&#39;</span><span class="p">,</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">current_process</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><br /><br /><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span><br />    <span class="n">d</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;daemon&#39;</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="n">daemon</span><span class="p">)</span><br />    <span class="n">d</span><span class="o">.</span><span class="n">daemon</span> <span class="o">=</span> <span class="bp">True</span><br /><br />    <span class="n">n</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;non-daemon&#39;</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="n">non_daemon</span><span class="p">)</span><br />    <span class="n">n</span><span class="o">.</span><span class="n">daemon</span> <span class="o">=</span> <span class="bp">False</span><br /><br />    <span class="n">d</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><br />    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">1</span><span class="p">)</span><br />    <span class="n">n</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><br /><br />    <span class="n">d</span><span class="o">.</span><span class="n">join</span><span class="p">()</span><br />    <span class="n">n</span><span class="o">.</span><span class="n">join</span><span class="p">()</span><br /></pre></div></div><p>Since we wait for the daemon to exit using <tt class="docutils literal"><span class="pre">join()</span></tt>, we do see its<br />&#8220;Exiting&#8221; message.</p><div class="highlight-python"><pre>$ python multiprocessing_daemon_join.py<br />Starting: non-daemon<br />Exiting : non-daemon<br />Starting: daemon<br />Exiting : daemon</pre><br /></div><p>By default, <tt class="docutils literal"><span class="pre">join()</span></tt> blocks indefinitely. It is also possible to pass a timeout<br />argument (a float representing the number of seconds to wait for the process to<br />become inactive). If the process does not complete within the timeout period,<br /><tt class="docutils literal"><span class="pre">join()</span></tt> returns anyway.</p><div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">multiprocessing</span><br /><span class="kn">import</span> <span class="nn">time</span><br /><span class="kn">import</span> <span class="nn">sys</span><br /><br /><span class="k">def</span> <span class="nf">daemon</span><span class="p">():</span><br />    <span class="k">print</span> <span class="s">&#39;Starting:&#39;</span><span class="p">,</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">current_process</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><br />    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">2</span><span class="p">)</span><br />    <span class="k">print</span> <span class="s">&#39;Exiting :&#39;</span><span class="p">,</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">current_process</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><br /><br /><span class="k">def</span> <span class="nf">non_daemon</span><span class="p">():</span><br />    <span class="k">print</span> <span class="s">&#39;Starting:&#39;</span><span class="p">,</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">current_process</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><br />    <span class="k">print</span> <span class="s">&#39;Exiting :&#39;</span><span class="p">,</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">current_process</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><br /><br /><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span><br />    <span class="n">d</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;daemon&#39;</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="n">daemon</span><span class="p">)</span><br />    <span class="n">d</span><span class="o">.</span><span class="n">daemon</span> <span class="o">=</span> <span class="bp">True</span><br /><br />    <span class="n">n</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;non-daemon&#39;</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="n">non_daemon</span><span class="p">)</span><br />    <span class="n">n</span><span class="o">.</span><span class="n">daemon</span> <span class="o">=</span> <span class="bp">False</span><br /><br />    <span class="n">d</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><br />    <span class="n">n</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><br /><br />    <span class="n">d</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="mf">1</span><span class="p">)</span><br />    <span class="k">print</span> <span class="s">&#39;d.is_alive()&#39;</span><span class="p">,</span> <span class="n">d</span><span class="o">.</span><span class="n">is_alive</span><span class="p">()</span><br />    <span class="n">n</span><span class="o">.</span><span class="n">join</span><span class="p">()</span><br /></pre></div></div><p>Since the timeout passed is less than the amount of time the daemon<br />sleeps, the process is still &#8220;alive&#8221; after <tt class="docutils literal"><span class="pre">join()</span></tt> returns.</p><div class="highlight-python"><pre>$ python multiprocessing_daemon_join_timeout.py<br />Starting: non-daemon<br />Exiting : non-daemon<br />d.is_alive() True</pre><br /></div></div><div class="section" id="terminating-processes"><br /><h2>Terminating Processes</h2><p>Although it is better to use the <em>poison pill</em> method of signaling to a process that it should exit, if a process appears hung or deadlocked it can be useful to be able to kill it forcibly.  Calling <tt class="docutils literal"><span class="pre">terminate()</span></tt> on a process object kills the child process.</p><div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">multiprocessing</span><br /><span class="kn">import</span> <span class="nn">time</span><br /><br /><span class="k">def</span> <span class="nf">slow_worker</span><span class="p">():</span><br />    <span class="k">print</span> <span class="s">&#39;Starting worker&#39;</span><br />    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span><br />    <span class="k">print</span> <span class="s">&#39;Finished worker&#39;</span><br /><br /><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span><br />    <span class="n">p</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">slow_worker</span><span class="p">)</span><br />    <span class="k">print</span> <span class="s">&#39;BEFORE:&#39;</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">is_alive</span><span class="p">()</span><br />    <br />    <span class="n">p</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><br />    <span class="k">print</span> <span class="s">&#39;DURING:&#39;</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">is_alive</span><span class="p">()</span><br />    <br />    <span class="n">p</span><span class="o">.</span><span class="n">terminate</span><span class="p">()</span><br />    <span class="k">print</span> <span class="s">&#39;TERMINATED:&#39;</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">is_alive</span><span class="p">()</span><br /><br />    <span class="n">p</span><span class="o">.</span><span class="n">join</span><span class="p">()</span><br />    <span class="k">print</span> <span class="s">&#39;JOINED:&#39;</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">is_alive</span><span class="p">()</span><br /></pre></div></div><div class="admonition note"><p class="first admonition-title">Note</p><p class="last">It is important to <tt class="docutils literal"><span class="pre">join()</span></tt> the process after terminating it in order to give the background machinery time to update the status of the object to reflect the termination.</p></div><div class="highlight-python"><pre>$ python multiprocessing_terminate.py<br />BEFORE: &lt;Process(Process-1, initial)&gt; False<br />DURING: &lt;Process(Process-1, started)&gt; True<br />TERMINATED: &lt;Process(Process-1, started)&gt; True<br />JOINED: &lt;Process(Process-1, stopped[SIGTERM])&gt; False</pre><br /></div></div><div class="section" id="process-exit-status"><h2>Process Exit Status</h2><p>The status code produced when the process exits can be accessed via the <tt class="docutils literal"><span class="pre">exitcode</span></tt> attribute.</p><p>For <tt class="docutils literal"><span class="pre">exitcode</span></tt> values</p><br /><ul class="simple"><li><tt class="docutils literal"><span class="pre">==</span> <span class="pre">0</span></tt> &#8211; no error was produced</li><li><tt class="docutils literal"><span class="pre">&gt;</span> <span class="pre">0</span></tt> &#8211; the process had an error, and exited with that code</li><li><tt class="docutils literal"><span class="pre">&lt;</span> <span class="pre">0</span></tt> &#8211; the process was killed with a signal of <tt class="docutils literal"><span class="pre">-1</span> <span class="pre">*</span> <span class="pre">exitcode</span></tt></li></ul><div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">multiprocessing</span><br /><span class="kn">import</span> <span class="nn">sys</span><br /><span class="kn">import</span> <span class="nn">time</span><br /><br /><span class="k">def</span> <span class="nf">exit_error</span><span class="p">():</span><br />    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mf">1</span><span class="p">)</span><br /><br /><span class="k">def</span> <span class="nf">exit_ok</span><span class="p">():</span><br />    <span class="k">return</span><br /><br /><span class="k">def</span> <span class="nf">return_value</span><span class="p">():</span><br />    <span class="k">return</span> <span class="mf">1</span><br /><br /><span class="k">def</span> <span class="nf">raises</span><span class="p">():</span><br />    <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&#39;There was an error!&#39;</span><span class="p">)</span><br /><br /><span class="k">def</span> <span class="nf">terminated</span><span class="p">():</span><br />    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">3</span><span class="p">)</span><br /><br /><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span><br />    <span class="n">jobs</span> <span class="o">=</span> <span class="p">[]</span><br />    <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="p">[</span><span class="n">exit_error</span><span class="p">,</span> <span class="n">exit_ok</span><span class="p">,</span> <span class="n">return_value</span><span class="p">,</span> <span class="n">raises</span><span class="p">,</span> <span class="n">terminated</span><span class="p">]:</span><br />        <span class="k">print</span> <span class="s">&#39;Starting process for&#39;</span><span class="p">,</span> <span class="n">f</span><span class="o">.</span><span class="n">func_name</span><br />        <span class="n">j</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">f</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">f</span><span class="o">.</span><span class="n">func_name</span><span class="p">)</span><br />        <span class="n">jobs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">j</span><span class="p">)</span><br />        <span class="n">j</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><br />        <br />    <span class="n">jobs</span><span class="p">[</span><span class="o">-</span><span class="mf">1</span><span class="p">]</span><span class="o">.</span><span class="n">terminate</span><span class="p">()</span><br /><br />    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">jobs</span><span class="p">:</span><br />        <span class="n">j</span><span class="o">.</span><span class="n">join</span><span class="p">()</span><br />        <span class="k">print</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s">.exitcode = </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">j</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">j</span><span class="o">.</span><span class="n">exitcode</span><span class="p">)</span><br /></pre></div></div><p>Processes that raise an exception automatically get an <tt class="docutils literal"><span class="pre">exitcode</span></tt> of 1.</p><div class="highlight-python"><pre>$ python multiprocessing_exitcode.py<br />Starting process for exit_error<br />Starting process for exit_ok<br />Starting process for return_value<br />Starting process for raises<br />Process raises:<br />Traceback (most recent call last):<br />  File "/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/multiprocessing/process.py", line 231, in _bootstrap<br />    self.run()<br />  File "/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/multiprocessing/process.py", line 88, in run<br />    self._target(*self._args, **self._kwargs)<br />  File "multiprocessing_exitcode.py", line 24, in raises<br />    raise RuntimeError('There was an error!')<br />RuntimeError: There was an error!<br />Starting process for terminated<br />exit_error.exitcode = 1<br />exit_ok.exitcode = 0<br />return_value.exitcode = 0<br />raises.exitcode = 1<br />terminated.exitcode = -15</pre><br /></div></div><div class="section" id="logging"><h2>Logging</h2><p>When debugging concurrency issues, it can be useful to have access to the internals of the objects provided by <a title="Manage processes like threads." class="reference external" href="index.html#module-multiprocessing"><tt class="xref docutils literal"><span class="pre">multiprocessing</span></tt></a>.  There is a convenient module-level function to enable logging called <tt class="xref docutils literal"><span class="pre">log_to_stderr()</span></tt>.  It sets up a logger object using <tt class="xref docutils literal"><span class="pre">logging</span></tt> and adds a handler so that log messages are sent to the standard error channel.</p><div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">multiprocessing</span><br /><span class="kn">import</span> <span class="nn">logging</span><br /><span class="kn">import</span> <span class="nn">sys</span><br /><br /><span class="k">def</span> <span class="nf">worker</span><span class="p">():</span><br />    <span class="k">print</span> <span class="s">&#39;Doing some work&#39;</span><br />    <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span><br /><br /><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span><br />    <span class="n">multiprocessing</span><span class="o">.</span><span class="n">log_to_stderr</span><span class="p">(</span><span class="n">logging</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">)</span><br />    <span class="n">p</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">worker</span><span class="p">)</span><br />    <span class="n">p</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><br />    <span class="n">p</span><span class="o">.</span><span class="n">join</span><span class="p">()</span><br />    <br /></pre></div></div><p>By default the logging level is set to <tt class="docutils literal"><span class="pre">NOTSET</span></tt> so no messages are produced.  Pass a different level to initialize the logger to the level of detail you want.</p><div class="highlight-python"><pre>$ python multiprocessing_log_to_stderr.py<br />[INFO/Process-1] child process calling self.run()<br />Doing some work<br />[INFO/Process-1] process shutting down<br />[DEBUG/Process-1] running all "atexit" finalizers with priority &gt;= 0<br />[DEBUG/Process-1] running the remaining "atexit" finalizers<br />[INFO/Process-1] process exiting with exitcode 0<br />[INFO/MainProcess] process shutting down<br />[DEBUG/MainProcess] running all "atexit" finalizers with priority &gt;= 0<br />[DEBUG/MainProcess] running the remaining "atexit" finalizers</pre><br /></div><p>To manipulate the logger directly (change its level setting or add handlers), use <tt class="xref docutils literal"><span class="pre">get_logger()</span></tt>.</p><div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">multiprocessing</span><br /><span class="kn">import</span> <span class="nn">logging</span><br /><span class="kn">import</span> <span class="nn">sys</span><br /><br /><span class="k">def</span> <span class="nf">worker</span><span class="p">():</span><br />    <span class="k">print</span> <span class="s">&#39;Doing some work&#39;</span><br />    <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span><br /><br /><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span><br />    <span class="n">multiprocessing</span><span class="o">.</span><span class="n">log_to_stderr</span><span class="p">()</span><br />    <span class="n">logger</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">get_logger</span><span class="p">()</span><br />    <span class="n">logger</span><span class="o">.</span><span class="n">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">)</span><br />    <span class="n">p</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">worker</span><span class="p">)</span><br />    <span class="n">p</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><br />    <span class="n">p</span><span class="o">.</span><span class="n">join</span><span class="p">()</span><br /></pre></div></div><p>The logger can also be configured through the <tt class="xref docutils literal"><span class="pre">logging</span></tt> configuration file API, using the name <tt class="docutils literal"><span class="pre">multiprocessing</span></tt>.</p><div class="highlight-python"><pre>$ python multiprocessing_get_logger.py<br />[INFO/Process-1] child process calling self.run()<br />Doing some work<br />[INFO/Process-1] process shutting down<br />[INFO/Process-1] process exiting with exitcode 0<br />[INFO/MainProcess] process shutting down</pre><br /></div></div><div class="section" id="subclassing-process"><h2>Subclassing Process</h2><p>Although the simplest way to start a job in a separate process is to use <tt class="xref docutils literal"><span class="pre">Process</span></tt> and pass a target function, it is also possible to use a custom subclass.  The derived class should override <tt class="xref docutils literal"><span class="pre">run()</span></tt> to do its work.</p><div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">multiprocessing</span><br /><br /><span class="k">class</span> <span class="nc">Worker</span><span class="p">(</span><span class="n">multiprocessing</span><span class="o">.</span><span class="n">Process</span><span class="p">):</span><br /><br />    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span><br />        <span class="k">print</span> <span class="s">&#39;In </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><br />        <span class="k">return</span><br /><br /><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span><br />    <span class="n">jobs</span> <span class="o">=</span> <span class="p">[]</span><br />    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mf">5</span><span class="p">):</span><br />        <span class="n">p</span> <span class="o">=</span> <span class="n">Worker</span><span class="p">()</span><br />        <span class="n">jobs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><br />        <span class="n">p</span><span class="o">.</span><span class="n">start</span><span class="p">()</span><br />    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">jobs</span><span class="p">:</span><br />        <span class="n">j</span><span class="o">.</span><span class="n">join</span><span class="p">()</span><br /></pre></div></div><div class="highlight-python"><pre>$ python multiprocessing_subclass.py<br />In Worker-1<br />In Worker-2<br />In Worker-3<br />In Worker-4<br />In Worker-5</pre></div><br /><div class="admonition-see-also admonition seealso"><p class="first admonition-title">See also</p><dl class="last docutils"><dt><a class="reference external" href="http://docs.python.org/library/multiprocessing.html">multiprocessing</a></dt><dd>The standard library documentation for this module.</dd><dt><tt class="xref docutils literal"><span class="pre">threading</span></tt></dt><dd>High-level API for working with threads.</dd></dl></div></div><p><a class="reference external" href="http://www.doughellmann.com/PyMOTW/">PyMOTW Home</a></p>
<div style='clear: both;'></div>
</div>
<div class='post-footer'>
<div class='post-footer-line post-footer-line-1'><span class='post-author vcard'>
Posted by
<span class='fn'>Doug Hellmann</span>
</span>
<span class='post-timestamp'>
at
<a class='timestamp-link' href='http://blog.doughellmann.com/2009/04/pymotw-multiprocessing-part-1.html' rel='bookmark' title='permanent link'><abbr class='published' title='2009-04-19T12:52:00-04:00'>12:52 PM</abbr></a>
</span>
<span class='post-comment-link'>
</span>
<span class='post-icons'>
<span class='item-action'>
<a href='http://www.blogger.com/email-post.g?blogID=5440028356946346379&postID=6368045911440149473' title='Email Post'>
<img alt='' class='icon-action' height='13' src='http://img1.blogblog.com/img/icon18_email.gif' width='18'/>
</a>
</span>
<span class='item-control blog-admin pid-911325318'>
<a href='http://www.blogger.com/post-edit.g?blogID=5440028356946346379&postID=6368045911440149473' title='Edit Post'>
<img alt='' class='icon-action' height='18' src='http://img2.blogblog.com/img/icon18_edit_allbkg.gif' width='18'/>
</a>
</span>
</span>
</div>
<div class='post-footer-line post-footer-line-2'><span class='post-labels'>
Labels:
<a href='http://blog.doughellmann.com/search/label/PyMOTW' rel='tag'>PyMOTW</a>,
<a href='http://blog.doughellmann.com/search/label/python' rel='tag'>python</a>
</span>
</div>
<div class='post-footer-line post-footer-line-3'><span class='post-location'>
</span>
</div>
</div>
</div>
<div class='comments' id='comments'>
<a name='comments'></a>
<h4>
6
comments:
        
</h4>
<div id='Blog1_comments-block-wrapper'>
<dl class='avatar-comment-indent' id='comments-block'>
<dt class='comment-author ' id='c5418122026303708709'>
<a name='c5418122026303708709'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-5418122026303708709'>
<p>
I think in the logging section that the effective logging level is WARNING as that is what is set by the logging package for the root logger. Any child loggers such as the multiprocessing logger have a NOTSET level which means use the parent's level - which will normally be WARNING when the default configuration is used.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.doughellmann.com/2009/04/pymotw-multiprocessing-part-1.html?showComment=1240212360000#c5418122026303708709' title='comment permalink'>
April 20, 2009 3:26 AM
</a>
<span class='item-control blog-admin pid-1238645063'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=5440028356946346379&postID=5418122026303708709' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c3132120469162778147'>
<a name='c3132120469162778147'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/01892352754222143463" rel="nofollow" onclick="" class="avatar-hovercard" id="av-1-01892352754222143463"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://1.bp.blogspot.com/_--Fv8pzwveE/SdoPuMPwwcI/AAAAAAAAAMA/wnOnSVLJWpQ/S45/75x75.jpg" title="Doug Hellmann">

<noscript><img src="http://1.bp.blogspot.com/_--Fv8pzwveE/SdoPuMPwwcI/AAAAAAAAAMA/wnOnSVLJWpQ/S45/75x75.jpg" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/01892352754222143463' rel='nofollow'>Doug Hellmann</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3132120469162778147'>
<p>
A quick test without including the log level value shows that no output is printed.  That may depend on whether any earlier configuration is done for the root logger, though.  I didn't do anything to set up logging in my sample script other than calling log_to_stderr().
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.doughellmann.com/2009/04/pymotw-multiprocessing-part-1.html?showComment=1240236000000#c3132120469162778147' title='comment permalink'>
April 20, 2009 10:00 AM
</a>
<span class='item-control blog-admin pid-911325318'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=5440028356946346379&postID=3132120469162778147' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1771435508119595552'>
<a name='c1771435508119595552'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1771435508119595552'>
<p>
<B>A later example illustrates using a lock to ensure that only one worker can print to stdout at a time</B>Where is it? :)
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.doughellmann.com/2009/04/pymotw-multiprocessing-part-1.html?showComment=1240325040000#c1771435508119595552' title='comment permalink'>
April 21, 2009 10:44 AM
</a>
<span class='item-control blog-admin pid-1838566903'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=5440028356946346379&postID=1771435508119595552' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c5765921501232982924'>
<a name='c5765921501232982924'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/01892352754222143463" rel="nofollow" onclick="" class="avatar-hovercard" id="av-3-01892352754222143463"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://1.bp.blogspot.com/_--Fv8pzwveE/SdoPuMPwwcI/AAAAAAAAAMA/wnOnSVLJWpQ/S45/75x75.jpg" title="Doug Hellmann">

<noscript><img src="http://1.bp.blogspot.com/_--Fv8pzwveE/SdoPuMPwwcI/AAAAAAAAAMA/wnOnSVLJWpQ/S45/75x75.jpg" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/01892352754222143463' rel='nofollow'>Doug Hellmann</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-5765921501232982924'>
<p>
D'oh!  You found a spot where I copied some of the text around the threading example into the new post.  I'll clean that up in the official version of this document on my site.<br /><br />As far as the specific problem, the logging module doesn't ensure cross-process locking.  It would be possible to use the locks provided by multiprocessing, but you'd have to do it yourself.  It would be easier and safer to have the processes log to separate files or go through a log daemon such as syslogd.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.doughellmann.com/2009/04/pymotw-multiprocessing-part-1.html?showComment=1240325520000#c5765921501232982924' title='comment permalink'>
April 21, 2009 10:52 AM
</a>
<span class='item-control blog-admin pid-911325318'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=5440028356946346379&postID=5765921501232982924' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7053171353267755510'>
<a name='c7053171353267755510'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/01178295953897193794" rel="nofollow" onclick="" class="avatar-hovercard" id="av-4-01178295953897193794"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Vitaly Babiy">

</a></span></div>
<a href='http://www.blogger.com/profile/01178295953897193794' rel='nofollow'>Vitaly Babiy</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7053171353267755510'>
<p>
Hey can you explain this more I am not sure I get what you mean in this section<br /><I>The daemon process is terminated before the main program exits, to avoid leaving orphaned processes running.</I>Is this done automatically?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.doughellmann.com/2009/04/pymotw-multiprocessing-part-1.html?showComment=1241142600000#c7053171353267755510' title='comment permalink'>
April 30, 2009 9:50 PM
</a>
<span class='item-control blog-admin pid-1873248381'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=5440028356946346379&postID=7053171353267755510' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c5749595838814640706'>
<a name='c5749595838814640706'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/01892352754222143463" rel="nofollow" onclick="" class="avatar-hovercard" id="av-5-01892352754222143463"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://1.bp.blogspot.com/_--Fv8pzwveE/SdoPuMPwwcI/AAAAAAAAAMA/wnOnSVLJWpQ/S45/75x75.jpg" title="Doug Hellmann">

<noscript><img src="http://1.bp.blogspot.com/_--Fv8pzwveE/SdoPuMPwwcI/AAAAAAAAAMA/wnOnSVLJWpQ/S45/75x75.jpg" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/01892352754222143463' rel='nofollow'>Doug Hellmann</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-5749595838814640706'>
<p>
@Vitaly - Yes, multiprocessing takes care of killing your daemon subprocesses automatically.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.doughellmann.com/2009/04/pymotw-multiprocessing-part-1.html?showComment=1241265540000#c5749595838814640706' title='comment permalink'>
May 2, 2009 7:59 AM
</a>
<span class='item-control blog-admin pid-911325318'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=5440028356946346379&postID=5749595838814640706' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
</dl>
</div>
<p class='comment-footer'>
<a href='https://www.blogger.com/comment.g?blogID=5440028356946346379&postID=6368045911440149473' onclick=''>Post a Comment</a>
</p>
<div id='backlinks-container'>
<div id='Blog1_backlinks-container'>
</div>
</div>
</div>
</div>
<div id="latency-6368045911440149473"></div><script type="text/javascript">if (window['tickAboveFold']) {window['tickAboveFold'](document.getElementById("latency-6368045911440149473")); } </script>

        </div></div>
      
<!-- google_ad_section_end -->
</div>
<div class='blog-pager' id='blog-pager'>
<span id='blog-pager-newer-link'>
<a class='blog-pager-newer-link' href='http://blog.doughellmann.com/2009/04/pymotw-multiprocessing-part-2.html' id='Blog1_blog-pager-newer-link' title='Newer Post'>Newer Post</a>
</span>
<span id='blog-pager-older-link'>
<a class='blog-pager-older-link' href='http://blog.doughellmann.com/2009/04/configuring-firefox-so-its-tabwindow.html' id='Blog1_blog-pager-older-link' title='Older Post'>Older Post</a>
</span>
<a class='home-link' href='http://blog.doughellmann.com/'>Home</a>
</div>
<div class='clear'></div>
<div class='post-feeds'>
<div class='feed-links'>
Subscribe to:
<a class='feed-link' href='http://blog.doughellmann.com/feeds/6368045911440149473/comments/default' target='_blank' type='application/atom+xml'>Post Comments (Atom)</a>
</div>
</div>
</div></div>
</div>
</div>
<div class='column-left-outer'>
<div class='column-left-inner'>
<aside>
</aside>
</div>
</div>
<div class='column-right-outer'>
<div class='column-right-inner'>
<aside>
<div class='sidebar section' id='sidebar-right-1'><div class='widget HTML' id='HTML4'>
<script type='text/javascript'>
                //disqus widget v1.1
                var disqus_shortname = 'doughellmann';
                var disqus_blogger_current_url = 'http://blog.doughellmann.com/2009/04/pymotw-multiprocessing-part-1.html';
            </script>
<style type='text/css'>
                    #comments {display:none;}
                </style>
<script type='text/javascript'>
                    (function() {
                        var get_comment_block = function() {
                            return document.getElementById('comments');
                        };
                        var comment_block = get_comment_block();
                        if (!!comment_block) {
                        var disqus_div = document.createElement('div'); disqus_div.id = 'disqus_thread';
                        comment_block.innerHTML = '';
                        comment_block.appendChild(disqus_div);
                        var disqus_url = disqus_blogger_current_url;
                        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                        dsq.src = 'http://'+disqus_shortname+'.disqus.com/embed.js';
                        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                        comment_block.style.display = 'block';
                        }
                    })();
                </script>
<style type='text/css'>
                    .post-comment-link { visibility: hidden; }
                </style>
<script type='text/javascript'>
                (function() {
                    var get_blog_block = function() {
                        var block;
                        for(var i = 0;Math.min(i,19) != 19; i++) {
                            block = document.getElementById('Blog'+i);
                            if (!!block) break;
                        }
                        return block;
                    };
                    var change_links = function(post) {
                        var spans = post.getElementsByTagName('span');
                        var anchors, changelist = [], permalink = '', tempanchor;
                        for(var i = 0; Math.min(i, spans.length) != (spans.length); i++) {
                            if (/post-timestamp/.test(spans[i].className)) {
                                anchors = spans[i].getElementsByTagName('a');
                                for (var k=0; Math.min(k, anchors.length) != (anchors.length); k++) {
                                    if (/timestamp-link/.test(anchors[k].className))
                                        permalink = anchors[k].href;
                                }
                            }
                            if (/post-comment-link/.test(spans[i].className))
                                changelist.push(spans[i]);
                        }
                        tempanchor = document.createElement('a');
                        tempanchor.className = 'comment-link';
                        tempanchor.href = permalink + '#disqus_thread';
                        for (var j=0; Math.min(j, changelist.length) != (changelist.length); j++) {
                            changelist[j].innerHTML = '';
                            changelist[j].appendChild(tempanchor);
                            changelist[j].style.visibility = 'visible';
                        }
                        if (changelist.length == 0) {
                            for(var h = 0; Math.min(h, spans.length) != (spans.length); h++) {
                                if (/post-timestamp/.test(spans[h].className))
                                    spans[h].appendChild(tempanchor);
                            }
                        }
                    }
                    var blog_block = get_blog_block();
                    if (!!blog_block) {
                    var posts = blog_block.getElementsByTagName('div');
                    for(var i = 0; Math.min(i, posts.length) != (posts.length); i++) {
                        if (!/hentry/.test(posts[i].className) || posts[0].id=='post') continue;
                        change_links(posts[i]);
                    }
                    (function () {
                    var s = document.createElement('script'); s.async = true;
                    s.src = 'http://disqus.com/forums/'+disqus_shortname+'/count.js';
                    (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
                    }());
                    }
                })();
                </script>
</div></div>
<table border='0' cellpadding='0' cellspacing='0' class='section-columns columns-2'>
<tbody>
<tr>
<td class='first columns-cell'>
<div class='sidebar section' id='sidebar-right-2-1'><div class='widget HTML' id='HTML5'>
<h2 class='title'>Contact</h2>
<div class='widget-content'>
<p>Contact me at: doug <em>dot</em> hellmann <em>at</em> gmail <em>dot</em> com or via one of the other services listed <a href="http://www.doughellmann.com/about/">here</a>.</p>

<p><a href="http://creativecommons.org/licenses/by-nc-sa/3.0/us/" rel="license"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/3.0/us/88x31.png" /></a></p>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='http://www.blogger.com/rearrange?blogID=5440028356946346379&widgetType=HTML&widgetId=HTML5&action=editWidget' onclick='return _WidgetManager._PopupConfig(document.getElementById("HTML5"));' target='configHTML5' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div><div class='widget LinkList' id='LinkList1'>
<h2>Links</h2>
<div class='widget-content'>
<ul>
<li><a href='http://www.doughellmann.com/projects/'>My Projects</a></li>
<li><a href='http://www.doughellmann.com/PyMOTW/'>PyMOTW</a></li>
<li><a href='http://www.oreillynet.com/pub/au/3123'>My O'Reilly Profile</a></li>
<li><a href='http://www.google.com/reader/shared/14818162495115447707'>Link Blog</a></li>
<li><a href='http://del.icio.us/dhellmann'>Del.icio.us</a></li>
</ul>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='http://www.blogger.com/rearrange?blogID=5440028356946346379&widgetType=LinkList&widgetId=LinkList1&action=editWidget' onclick='return _WidgetManager._PopupConfig(document.getElementById("LinkList1"));' target='configLinkList1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div><div class='widget BlogArchive' id='BlogArchive1'>
<h2>Blog Archive</h2>
<div class='widget-content'>
<div id='ArchiveList'>
<div id='BlogArchive1_ArchiveList'>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/search?updated-min=2010-01-01T00%3A00%3A00-05%3A00&updated-max=2011-01-01T00%3A00%3A00-05%3A00&max-results=31'>2010</a>
<span class='post-count' dir='ltr'>(31)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2010_10_01_archive.html'>October 2010</a>
<span class='post-count' dir='ltr'>(4)</span>
<ul class='posts'>
<li><a href='http://blog.doughellmann.com/2010/10/pymotw-configparser-work-with.html'>PyMOTW: ConfigParser - Work with configuration fil...</a></li>
<li><a href='http://blog.doughellmann.com/2010/10/pymotw-sqlite3-embedded-relational.html'>PyMOTW: sqlite3 - Embedded Relational Database</a></li>
<li><a href='http://blog.doughellmann.com/2010/10/pymotw-random-pseudorandom-number.html'>PyMOTW: random - Pseudorandom number generators</a></li>
<li><a href='http://blog.doughellmann.com/2010/10/pymotw-select-wait-for-io-efficiently.html'>PyMOTW: select - Wait for I/O Efficiently</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2010_09_01_archive.html'>September 2010</a>
<span class='post-count' dir='ltr'>(5)</span>
<ul class='posts'>
<li><a href='http://blog.doughellmann.com/2010/09/pymotw-socket-network-communication.html'>PyMOTW: socket - Network Communication</a></li>
<li><a href='http://blog.doughellmann.com/2010/09/oblong-spiral-puzzle.html'>Oblong Spiral Puzzle</a></li>
<li><a href='http://blog.doughellmann.com/2010/09/pymotw-sysconfig-interpreter-compile.html'>PyMOTW: sysconfig - Interpreter Compile-time Confi...</a></li>
<li><a href='http://blog.doughellmann.com/2010/09/pymotw-pdb-interactive-debugger.html'>PyMOTW: pdb - Interactive Debugger</a></li>
<li><a href='http://blog.doughellmann.com/2010/09/pymotw-re-regular-expressions.html'>PyMOTW: re - Regular Expressions</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2010_08_01_archive.html'>August 2010</a>
<span class='post-count' dir='ltr'>(4)</span>
<ul class='posts'>
<li><a href='http://blog.doughellmann.com/2010/08/pymotw-codecs-string-encoding-and.html'>PyMOTW: codecs - String encoding and decoding</a></li>
<li><a href='http://blog.doughellmann.com/2010/08/pymotw-math-mathematical-functions.html'>PyMOTW: math - Mathematical functions</a></li>
<li><a href='http://blog.doughellmann.com/2010/08/pymotw-doctest-testing-through.html'>PyMOTW: doctest - Testing through documentation</a></li>
<li><a href='http://blog.doughellmann.com/2010/08/pymotw-argparse-command-line-option-and.html'>PyMOTW: argparse - Command line option and argumen...</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2010_07_01_archive.html'>July 2010</a>
<span class='post-count' dir='ltr'>(1)</span>
<ul class='posts'>
<li><a href='http://blog.doughellmann.com/2010/07/pymotw-gc-garbage-collector.html'>PyMOTW: gc - Garbage Collector</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2010_06_01_archive.html'>June 2010</a>
<span class='post-count' dir='ltr'>(1)</span>
<ul class='posts'>
<li><a href='http://blog.doughellmann.com/2010/06/pymotw-site-site-wide-configuration.html'>PyMOTW: site - Site-wide configuration</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2010_05_01_archive.html'>May 2010</a>
<span class='post-count' dir='ltr'>(1)</span>
<ul class='posts'>
<li><a href='http://blog.doughellmann.com/2010/05/sphinx-extension-for-linking-to.html'>a Sphinx extension for linking to BitBucket resour...</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2010_04_01_archive.html'>April 2010</a>
<span class='post-count' dir='ltr'>(4)</span>
<ul class='posts'>
<li><a href='http://blog.doughellmann.com/2010/04/virtualenvwrapper-docs-translated-to.html'>virtualenvwrapper docs translated to Spanish</a></li>
<li><a href='http://blog.doughellmann.com/2010/04/itunes-91-smart-playlist-order-fix.html'>iTunes 9.1 Smart Playlist Order Fix</a></li>
<li><a href='http://blog.doughellmann.com/2010/04/more-virtualenvwrapper-enhancements.html'>more virtualenvwrapper enhancements</a></li>
<li><a href='http://blog.doughellmann.com/2010/04/major-new-release-of-virtualenvwrapper.html'>major new release of virtualenvwrapper</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2010_03_01_archive.html'>March 2010</a>
<span class='post-count' dir='ltr'>(5)</span>
<ul class='posts'>
<li><a href='http://blog.doughellmann.com/2010/03/pymotw-fileinput-process-lines-from.html'>PyMOTW: fileinput - Process lines from input strea...</a></li>
<li><a href='http://blog.doughellmann.com/2010/03/pymotw-turns-3.html'>PyMOTW turns 3</a></li>
<li><a href='http://blog.doughellmann.com/2010/03/pymotw-creating-xml-documents-with.html'>PyMOTW: Creating XML Documents with ElementTree</a></li>
<li><a href='http://blog.doughellmann.com/2010/03/pymotw-parsing-xml-documents-with.html'>PyMOTW: Parsing XML Documents with ElementTree</a></li>
<li><a href='http://blog.doughellmann.com/2010/03/pymotw-tabnanny-indentation-validator.html'>PyMOTW: tabnanny - Indentation validator</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2010_02_01_archive.html'>February 2010</a>
<span class='post-count' dir='ltr'>(1)</span>
<ul class='posts'>
<li><a href='http://blog.doughellmann.com/2010/02/book-review-practical-virtualization.html'>Book Review: Practical Virtualization Solutions</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2010_01_01_archive.html'>January 2010</a>
<span class='post-count' dir='ltr'>(5)</span>
<ul class='posts'>
<li><a href='http://blog.doughellmann.com/2010/01/pymotw-cgitb-detailed-traceback-reports.html'>PyMOTW: cgitb - Detailed traceback reports</a></li>
<li><a href='http://blog.doughellmann.com/2010/01/book-review-matplotlib-for-python.html'>Book Review: Matplotlib for Python Developers</a></li>
<li><a href='http://blog.doughellmann.com/2010/01/virtualenvwrapper-tips-and-tricks.html'>virtualenvwrapper tips and tricks</a></li>
<li><a href='http://blog.doughellmann.com/2010/01/book-review-dive-into-python-3.html'>Book Review: Dive Into Python 3</a></li>
<li><a href='http://blog.doughellmann.com/2010/01/evaluating-tools-for-developing-with.html'>Evaluating Tools for Developing with SOAP in Pytho...</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate expanded'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy toggle-open'>&#9660;&#160;</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/search?updated-min=2009-01-01T00%3A00%3A00-05%3A00&updated-max=2010-01-01T00%3A00%3A00-05%3A00&max-results=50'>2009</a>
<span class='post-count' dir='ltr'>(79)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2009_12_01_archive.html'>December 2009</a>
<span class='post-count' dir='ltr'>(4)</span>
<ul class='posts'>
<li><a href='http://blog.doughellmann.com/2009/12/book-review-citizen-engineer.html'>Book Review: Citizen Engineer</a></li>
<li><a href='http://blog.doughellmann.com/2009/12/you-gotta-love-backwards-compatibility.html'>you gotta love backwards compatibility</a></li>
<li><a href='http://blog.doughellmann.com/2009/12/switching-development-contexts-with.html'>Switching development contexts with virtualenvwrap...</a></li>
<li><a href='http://blog.doughellmann.com/2009/12/garlic-chili-recipe.html'>Garlic Chili Recipe</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2009_11_01_archive.html'>November 2009</a>
<span class='post-count' dir='ltr'>(6)</span>
<ul class='posts'>
<li><a href='http://blog.doughellmann.com/2009/11/pymotw-plistlib-manipulate-os-x.html'>PyMOTW: plistlib - Manipulate OS X property list f...</a></li>
<li><a href='http://blog.doughellmann.com/2009/11/pymotw-sys-part-7-modules-and-imports.html'>PyMOTW: sys, Part 7: Modules and Imports</a></li>
<li><a href='http://blog.doughellmann.com/2009/11/automatically-back-up-thumb-drives-on.html'>Automatically back up thumb drives on your Mac</a></li>
<li><a href='http://blog.doughellmann.com/2009/11/pymotw-sys-part-6-low-level-thread.html'>PyMOTW: sys, Part 6: Low-level Thread Support</a></li>
<li><a href='http://blog.doughellmann.com/2009/11/pymotw-sys-part-5-tracing-your-program.html'>PyMOTW: sys, Part 5: Tracing Your Program As It Ru...</a></li>
<li><a href='http://blog.doughellmann.com/2009/11/pymotw-sys-part-4-exception-handling.html'>PyMOTW: sys, Part 4: Exception Handling</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2009_10_01_archive.html'>October 2009</a>
<span class='post-count' dir='ltr'>(4)</span>
<ul class='posts'>
<li><a href='http://blog.doughellmann.com/2009/10/pymotw-sys-part-3-memory-management-and.html'>PyMOTW: sys, Part 3: Memory Management and Limits</a></li>
<li><a href='http://blog.doughellmann.com/2009/10/pymotw-sys-part-2-runtime-environment.html'>PyMOTW: sys Part 2: Runtime Environment</a></li>
<li><a href='http://blog.doughellmann.com/2009/10/pymotw-sys-part-1-interpreter-settings.html'>PyMOTW: sys, Part 1: Interpreter Settings</a></li>
<li><a href='http://blog.doughellmann.com/2009/10/duplication-of-effort-or-evolution.html'>Duplication of effort or evolution?</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2009_09_01_archive.html'>September 2009</a>
<span class='post-count' dir='ltr'>(4)</span>
<ul class='posts'>
<li><a href='http://blog.doughellmann.com/2009/09/updating-python-3x-docs-for-ghop.html'>Updating Python 3.x docs for GHOP</a></li>
<li><a href='http://blog.doughellmann.com/2009/09/pymotw-resource-system-resource.html'>PyMOTW: resource - System resource management</a></li>
<li><a href='http://blog.doughellmann.com/2009/09/book-review-success-of-open-source.html'>Book Review: The Success of Open Source</a></li>
<li><a href='http://blog.doughellmann.com/2009/09/pymotw-fractions-rational-numbers.html'>PyMOTW: fractions - Rational Numbers</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2009_08_01_archive.html'>August 2009</a>
<span class='post-count' dir='ltr'>(9)</span>
<ul class='posts'>
<li><a href='http://blog.doughellmann.com/2009/08/pymotw-decimal-fixed-and-floating-point.html'>PyMOTW: decimal - Fixed and floating point math</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2009_07_01_archive.html'>July 2009</a>
<span class='post-count' dir='ltr'>(9)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2009_06_01_archive.html'>June 2009</a>
<span class='post-count' dir='ltr'>(9)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2009_05_01_archive.html'>May 2009</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate expanded'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy toggle-open'>&#9660;&#160;</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2009_04_01_archive.html'>April 2009</a>
<span class='post-count' dir='ltr'>(5)</span>
<ul class='posts'>
<li><a href='http://blog.doughellmann.com/2009/04/implementing-mapreduce-with.html'>Implementing MapReduce with multiprocessing</a></li>
<li><a href='http://blog.doughellmann.com/2009/04/pymotw-multiprocessing-part-2.html'>PyMOTW: multiprocessing, part 2</a></li>
<li><a href='http://blog.doughellmann.com/2009/04/pymotw-multiprocessing-part-1.html'>PyMOTW: multiprocessing, part 1</a></li>
<li><a href='http://blog.doughellmann.com/2009/04/configuring-firefox-so-its-tabwindow.html'>Configuring Firefox so its Tab/Window Behavior isn...</a></li>
<li><a href='http://blog.doughellmann.com/2009/04/pymotw-pipes.html'>PyMOTW: pipes</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2009_03_01_archive.html'>March 2009</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2009_02_01_archive.html'>February 2009</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2009_01_01_archive.html'>January 2009</a>
<span class='post-count' dir='ltr'>(12)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/search?updated-min=2008-01-01T00%3A00%3A00-05%3A00&updated-max=2009-01-01T00%3A00%3A00-05%3A00&max-results=50'>2008</a>
<span class='post-count' dir='ltr'>(122)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2008_12_01_archive.html'>December 2008</a>
<span class='post-count' dir='ltr'>(9)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2008_11_01_archive.html'>November 2008</a>
<span class='post-count' dir='ltr'>(13)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2008_10_01_archive.html'>October 2008</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2008_09_01_archive.html'>September 2008</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2008_08_01_archive.html'>August 2008</a>
<span class='post-count' dir='ltr'>(8)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2008_07_01_archive.html'>July 2008</a>
<span class='post-count' dir='ltr'>(13)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2008_06_01_archive.html'>June 2008</a>
<span class='post-count' dir='ltr'>(16)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2008_05_01_archive.html'>May 2008</a>
<span class='post-count' dir='ltr'>(13)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2008_04_01_archive.html'>April 2008</a>
<span class='post-count' dir='ltr'>(10)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2008_03_01_archive.html'>March 2008</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2008_02_01_archive.html'>February 2008</a>
<span class='post-count' dir='ltr'>(8)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2008_01_01_archive.html'>January 2008</a>
<span class='post-count' dir='ltr'>(12)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/search?updated-min=2007-01-01T00%3A00%3A00-05%3A00&updated-max=2008-01-01T00%3A00%3A00-05%3A00&max-results=50'>2007</a>
<span class='post-count' dir='ltr'>(139)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2007_12_01_archive.html'>December 2007</a>
<span class='post-count' dir='ltr'>(19)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2007_11_01_archive.html'>November 2007</a>
<span class='post-count' dir='ltr'>(25)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2007_10_01_archive.html'>October 2007</a>
<span class='post-count' dir='ltr'>(12)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2007_09_01_archive.html'>September 2007</a>
<span class='post-count' dir='ltr'>(8)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2007_08_01_archive.html'>August 2007</a>
<span class='post-count' dir='ltr'>(11)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2007_07_01_archive.html'>July 2007</a>
<span class='post-count' dir='ltr'>(9)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2007_06_01_archive.html'>June 2007</a>
<span class='post-count' dir='ltr'>(8)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2007_05_01_archive.html'>May 2007</a>
<span class='post-count' dir='ltr'>(12)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2007_04_01_archive.html'>April 2007</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2007_03_01_archive.html'>March 2007</a>
<span class='post-count' dir='ltr'>(9)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2007_02_01_archive.html'>February 2007</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2007_01_01_archive.html'>January 2007</a>
<span class='post-count' dir='ltr'>(13)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/search?updated-min=2006-01-01T00%3A00%3A00-05%3A00&updated-max=2007-01-01T00%3A00%3A00-05%3A00&max-results=23'>2006</a>
<span class='post-count' dir='ltr'>(23)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.doughellmann.com/2006_12_01_archive.html'>December 2006</a>
<span class='post-count' dir='ltr'>(23)</span>
</li>
</ul>
</li>
</ul>
</div>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='http://www.blogger.com/rearrange?blogID=5440028356946346379&widgetType=BlogArchive&widgetId=BlogArchive1&action=editWidget' onclick='return _WidgetManager._PopupConfig(document.getElementById("BlogArchive1"));' target='configBlogArchive1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div><div class='widget Label' id='Label1'>
<h2>Labels</h2>
<div class='widget-content list-label-widget-content'>
<ul>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/AppleScript'>AppleScript</a>
<span dir='ltr'>(12)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/astronomy'>astronomy</a>
<span dir='ltr'>(4)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/AstronomyPictureOfTheDay'>AstronomyPictureOfTheDay</a>
<span dir='ltr'>(3)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/Automator'>Automator</a>
<span dir='ltr'>(3)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/BlogBackup'>BlogBackup</a>
<span dir='ltr'>(4)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/blogging'>blogging</a>
<span dir='ltr'>(17)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/books'>books</a>
<span dir='ltr'>(22)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/calendar'>calendar</a>
<span dir='ltr'>(3)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/CastSampler'>CastSampler</a>
<span dir='ltr'>(7)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/CherryPy'>CherryPy</a>
<span dir='ltr'>(1)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/codehosting'>codehosting</a>
<span dir='ltr'>(7)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/CommandLineApp'>CommandLineApp</a>
<span dir='ltr'>(4)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/csvcat'>csvcat</a>
<span dir='ltr'>(2)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/django'>django</a>
<span dir='ltr'>(22)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/django-links'>django-links</a>
<span dir='ltr'>(2)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/DVCS'>DVCS</a>
<span dir='ltr'>(2)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/emacs'>emacs</a>
<span dir='ltr'>(1)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/email'>email</a>
<span dir='ltr'>(8)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/feedcache'>feedcache</a>
<span dir='ltr'>(6)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/fish'>fish</a>
<span dir='ltr'>(1)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/food'>food</a>
<span dir='ltr'>(1)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/GHOP'>GHOP</a>
<span dir='ltr'>(8)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/HappyDoc'>HappyDoc</a>
<span dir='ltr'>(1)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/lifehack'>lifehack</a>
<span dir='ltr'>(3)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/LinkingToMe'>LinkingToMe</a>
<span dir='ltr'>(2)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/MailArchiveByDate'>MailArchiveByDate</a>
<span dir='ltr'>(4)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/mailbox2ics'>mailbox2ics</a>
<span dir='ltr'>(2)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/opensource'>opensource</a>
<span dir='ltr'>(8)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/OS%20X'>OS X</a>
<span dir='ltr'>(20)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/OSS'>OSS</a>
<span dir='ltr'>(4)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/podcasting'>podcasting</a>
<span dir='ltr'>(6)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/politics'>politics</a>
<span dir='ltr'>(2)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/PostgreSQL'>PostgreSQL</a>
<span dir='ltr'>(1)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/Proctor'>Proctor</a>
<span dir='ltr'>(6)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/productivity'>productivity</a>
<span dir='ltr'>(1)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/programming'>programming</a>
<span dir='ltr'>(9)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/PSF'>PSF</a>
<span dir='ltr'>(2)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/PyATL'>PyATL</a>
<span dir='ltr'>(17)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/PyCon'>PyCon</a>
<span dir='ltr'>(4)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/PyMOTW'>PyMOTW</a>
<span dir='ltr'>(165)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/python'>python</a>
<span dir='ltr'>(322)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/Python%20Magazine'>Python Magazine</a>
<span dir='ltr'>(53)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/PyUGraph'>PyUGraph</a>
<span dir='ltr'>(1)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/science'>science</a>
<span dir='ltr'>(1)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/spam'>spam</a>
<span dir='ltr'>(2)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/sphinx'>sphinx</a>
<span dir='ltr'>(5)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/sphinxcontrib.bitbucket'>sphinxcontrib.bitbucket</a>
<span dir='ltr'>(1)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/sphinxcontrib.paverutils'>sphinxcontrib.paverutils</a>
<span dir='ltr'>(1)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/sql'>sql</a>
<span dir='ltr'>(5)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/svnbackup'>svnbackup</a>
<span dir='ltr'>(5)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/telecommuting'>telecommuting</a>
<span dir='ltr'>(1)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/testing'>testing</a>
<span dir='ltr'>(7)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/UI'>UI</a>
<span dir='ltr'>(2)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/usability'>usability</a>
<span dir='ltr'>(3)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/virtualenvwrapper'>virtualenvwrapper</a>
<span dir='ltr'>(17)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/visualization'>visualization</a>
<span dir='ltr'>(7)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/writing'>writing</a>
<span dir='ltr'>(5)</span>
</li>
<li>
<a dir='ltr' href='http://blog.doughellmann.com/search/label/Zope%2FPlone'>Zope/Plone</a>
<span dir='ltr'>(2)</span>
</li>
</ul>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='http://www.blogger.com/rearrange?blogID=5440028356946346379&widgetType=Label&widgetId=Label1&action=editWidget' onclick='return _WidgetManager._PopupConfig(document.getElementById("Label1"));' target='configLabel1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div></div>
</td>
<td class='columns-cell'>
<div class='sidebar section' id='sidebar-right-2-2'><div class='widget HTML' id='HTML2'>
<h2 class='title'>Subscribe</h2>
<div class='widget-content'>
<p>

<a href="http://feeds.doughellmann.com/DougHellmann" rel="alternate" type="application/rss+xml"><img alt="" style="vertical-align:middle;border:0" src="http://www.feedburner.com/fb/images/pub/feed-icon16x16.png"/></a>&nbsp;<a href="http://feeds.doughellmann.com/DougHellmann" rel="alternate" type="application/rss+xml">RSS Feed</a>

or

<a href="http://www.feedburner.com/fb/a/emailverifySubmit?feedId=597385&amp;loc=en_US">Email Updates</a>

</p>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='http://www.blogger.com/rearrange?blogID=5440028356946346379&widgetType=HTML&widgetId=HTML2&action=editWidget' onclick='return _WidgetManager._PopupConfig(document.getElementById("HTML2"));' target='configHTML2' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div><div class='widget HTML' id='HTML1'>
<div class='widget-content'>
<script type="text/javascript"><!--
google_ad_client = "pub-3205160560229413";
google_ad_host = "pub-1556223355139109";
google_ad_host_channel="00000+00031+00032+00005";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text";
//2007-11-02: blog.doughellmann.com
google_ad_channel = "6782782700";
google_color_border = "ffffff";
google_color_bg = "eeeeee";
google_color_link = "000000";
google_color_text = "999999";
google_color_url = "993333";
google_ui_features = "rc:0";
//-->
</script>
<script src="http://pagead2.googlesyndication.com/pagead/show_ads.js" 
 type="text/javascript">
</script>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='http://www.blogger.com/rearrange?blogID=5440028356946346379&widgetType=HTML&widgetId=HTML1&action=editWidget' onclick='return _WidgetManager._PopupConfig(document.getElementById("HTML1"));' target='configHTML1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div></div>
</td>
</tr>
</tbody>
</table>
<div class='sidebar section' id='sidebar-right-3'></div>
</aside>
</div>
</div>
</div>
<div style='clear: both'></div>
<!-- columns -->
</div>
<!-- main -->
</div>
</div>
<div class='main-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
<footer>
<div class='footer-outer'>
<div class='footer-cap-top cap-top'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
<div class='fauxborder-left footer-fauxborder-left'>
<div class='fauxborder-right footer-fauxborder-right'></div>
<div class='region-inner footer-inner'>
<div class='foot section' id='footer-1'><div class='widget HTML' id='HTML3'>
<div class='widget-content'>
<script type="text/javascript"><!--
google_ad_client = "pub-3205160560229413";
google_ad_host = "pub-1556223355139109";
google_ad_host_channel="00000+00031+00032+00005";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "text";
//2007-11-02: blog.doughellmann.com
google_ad_channel = "6782782700";
google_color_border = "999999";
google_color_bg = "dddddd";
google_color_link = "993333";
google_color_text = "ffffff";
google_color_url = "993333";
google_ui_features = "rc:0";
//-->
</script>
<script src="http://pagead2.googlesyndication.com/pagead/show_ads.js" 
 type="text/javascript">
</script>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='http://www.blogger.com/rearrange?blogID=5440028356946346379&widgetType=HTML&widgetId=HTML3&action=editWidget' onclick='return _WidgetManager._PopupConfig(document.getElementById("HTML3"));' target='configHTML3' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div></div>
<table border='0' cellpadding='0' cellspacing='0' class='section-columns columns-2'>
<tbody>
<tr>
<td class='first columns-cell'>
<div class='foot section' id='footer-2-1'></div>
</td>
<td class='columns-cell'>
<div class='foot section' id='footer-2-2'></div>
</td>
</tr>
</tbody>
</table>
<!-- outside of the include in order to lock Attribution widget -->
<div class='foot section' id='footer-3'><div class='widget Attribution' id='Attribution1'>
<div class='widget-content' style='text-align: center;'>
Simple template. Powered by <a href='http://www.blogger.com' target='_blank'>Blogger</a>.
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='http://www.blogger.com/rearrange?blogID=5440028356946346379&widgetType=Attribution&widgetId=Attribution1&action=editWidget' onclick='return _WidgetManager._PopupConfig(document.getElementById("Attribution1"));' target='configAttribution1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div></div>
</div>
</div>
<div class='footer-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</footer>
<!-- content -->
</div>
</div>
<div class='content-cap-bottom cap-bottom'>
<div class='cap-left'></div>
<div class='cap-right'></div>
</div>
</div>
</div>
<script type='text/javascript'>
    window.setTimeout(function() {
        document.body.className = document.body.className.replace('loading', '');
      }, 10);
  </script>
<script type="text/javascript">
if (window.jstiming) window.jstiming.load.tick('widgetJsBefore');
</script><script type="text/javascript" src="http://www.blogger.com/static/v1/widgets/512629240-widgets.js"></script>
<script type='text/javascript'>
if (typeof(BLOG_attachCsiOnload) != 'undefined' && BLOG_attachCsiOnload != null) { window['blogger_templates_experiment_id'] = "templatesV2";window['blogger_blog_id'] = '5440028356946346379';BLOG_attachCsiOnload('item_'); }_WidgetManager._Init('http://www.blogger.com/rearrange?blogID=5440028356946346379','http://blog.doughellmann.com/2009/04/pymotw-multiprocessing-part-1.html','5440028356946346379');
_WidgetManager._SetPageActionUrl('http://www.blogger.com/display?blogID=5440028356946346379','aZiwNXcqptF62zynnZ_wpgHd4KE:1292854439173','AOuZoY6dDE8UoQzVYfRl6Wp7fPGm6J4h2Q:1292854439174');
_WidgetManager._SetDataContext([{'name': 'blog', 'data': {'title': 'Doug Hellmann', 'pageType': 'item', 'url': 'http://blog.doughellmann.com/2009/04/pymotw-multiprocessing-part-1.html', 'canonicalUrl': 'http://blog.doughellmann.com/2009/04/pymotw-multiprocessing-part-1.html', 'homepageUrl': 'http://blog.doughellmann.com/', 'enabledCommentProfileImages': true, 'searchLabel': '', 'searchQuery': '', 'pageName': 'PyMOTW: multiprocessing, part 1', 'pageTitle': 'Doug Hellmann: PyMOTW: multiprocessing, part 1', 'encoding': 'UTF-8', 'locale': 'en-US', 'isPrivate': false, 'isMobile': false, 'mobileClass': '', 'languageDirection': 'ltr', 'feedLinks': '\74link rel\75\42alternate\42 type\75\42application/atom+xml\42 title\75\42Doug Hellmann - Atom\42 href\75\42http://blog.doughellmann.com/feeds/posts/default\42 /\76\n\74link rel\75\42alternate\42 type\75\42application/rss+xml\42 title\75\42Doug Hellmann - RSS\42 href\75\42http://blog.doughellmann.com/feeds/posts/default?alt\75rss\42 /\76\n\74link rel\75\42service.post\42 type\75\42application/atom+xml\42 title\75\42Doug Hellmann - Atom\42 href\75\42http://www.blogger.com/feeds/5440028356946346379/posts/default\42 /\76\n\74link rel\75\42EditURI\42 type\75\42application/rsd+xml\42 title\75\42RSD\42 href\75\42http://www.blogger.com/rsd.g?blogID\0755440028356946346379\42 /\76\n\74link rel\75\42alternate\42 type\75\42application/atom+xml\42 title\75\42Doug Hellmann - Atom\42 href\75\42http://blog.doughellmann.com/feeds/6368045911440149473/comments/default\42 /\76\n', 'meTag': '', 'openIdOpTag': '', 'imageSrcTag': '', 'latencyHeadScript': '\74script type\75\42text/javascript\42\76(function() { var a\75window;function c(b){this.t\75{};this.tick\75function(d,i,e){e\75e?e:(new Date).getTime();this.t[d]\75[e,i]};this.tick(\42start\42,null,b)}var f\75new c;a.jstiming\75{Timer:c,load:f};try{var g\75null;if(a.chrome\46\46a.chrome.csi)g\75Math.floor(a.chrome.csi().pageT);if(g\75\75null)if(a.gtbExternal)g\75a.gtbExternal.pageT();if(g\75\75null)if(a.external)g\75a.external.pageT;if(g)a.jstiming.pt\75g}catch(h){};a.tickAboveFold\75function(b){b\75b;var d\0750;if(b.offsetParent){do d+\75b.offsetTop;while(b\75b.offsetParent)}b\75d;b\74\075750\46\46a.jstiming.load.tick(\42aft\42)};var j\75false;function k(){if(!j){j\75true;a.jstiming.load.tick(\42firstScrollTime\42)}}a.addEventListener?a.addEventListener(\42scroll\42,k,false):a.attachEvent(\42onscroll\42,k);\n })();\74/script\076', 'mobileHeadScript': '', 'ieCssRetrofitLinks': '\74!--[if IE]\76\74script type\75\42text/javascript\42 src\75\42http://www.blogger.com/static/v1/jsbin/3168568070-ieretrofit.js\42\76\74/script\76\n\74![endif]--\076'}}]);
_WidgetManager._RegisterWidget('_HeaderView', new _WidgetInfo('Header1', 'header'));
_WidgetManager._RegisterWidget('_AttributionView', new _WidgetInfo('Attribution1', 'footer-3', null, document.getElementById('Attribution1'), {'attribution': 'Simple template. Powered by \74a href\75\47http://www.blogger.com\47 target\75\47_blank\47\76Blogger\74/a\76.'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogView', new _WidgetInfo('Blog1', 'main', null, document.getElementById('Blog1'), {'cmtInteractionsEnabled': false, 'commentInteractionIframeUrl': 'http://www.blogger.com/comment-interaction-iframe.g?blogId\0755440028356946346379', 'mobile': false}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML4', 'sidebar-right-1', null, document.getElementById('HTML4'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML2', 'sidebar-right-2-2', null, document.getElementById('HTML2'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML1', 'sidebar-right-2-2', null, document.getElementById('HTML1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML5', 'sidebar-right-2-1', null, document.getElementById('HTML5'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_LinkListView', new _WidgetInfo('LinkList1', 'sidebar-right-2-1', null, document.getElementById('LinkList1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogArchiveView', new _WidgetInfo('BlogArchive1', 'sidebar-right-2-1', null, document.getElementById('BlogArchive1'), {'languageDirection': 'ltr'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_LabelView', new _WidgetInfo('Label1', 'sidebar-right-2-1', null, document.getElementById('Label1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_NavbarView', new _WidgetInfo('Navbar1', 'navbar'));
_WidgetManager._RegisterWidget('_HTMLView', new _WidgetInfo('HTML3', 'footer-1', null, document.getElementById('HTML3'), {}, 'displayModeFull'));
</script>
</body>
</html>