

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" >
<head><link type="text/css" rel="stylesheet" href="/getbytitle/site%3abase+CSS" /><title>
	Alistair.Cockburn.us | Software development as a cooperative game
</title><link rel="shortcut icon" href="/favicon.ico" />
    
    <!--[if lt IE 7]><link rel="stylesheet" type="text/css" href="/css/ie6.css" media="screen" /><![endif]-->
    <!--[if IE 7]><link rel="stylesheet" type="text/css" href="/css/ie7.css" media="screen" /><![endif]-->
    <link rel="stylesheet" type="text/css" href="/css/jquery.rating.css" media="screen" />
    
    <script type="text/javascript" src="/js/jquery.js"></script>
    <script type="text/javascript" src="/js/jquery.plugins.js"></script>
    <script type="text/javascript" src="/js/popup-vertcenter.js"></script>
    <script type="text/javascript" src="/js/audio-player.js"></script>
	
	<script type="text/javascript" src="/js/ac.common.js"></script>
	
	<!-- BEGIN FOXYCART FILES -->
  <script src="https://checkout.cockburn.us/files/foxycart_includes.js" type="text/javascript" charset="utf-8"></script>
  <script type="text/javascript" charset="utf-8">
	  jQuery.noConflict();
  </script>
  <link rel="stylesheet" href="https://checkout.cockburn.us/files/foxybox.css" type="text/css" media="screen" charset="utf-8" /><link rel="stylesheet" href="https://checkout.cockburn.us/themes/standard/theme.foxybox.css" type="text/css" media="screen" charset="utf-8" />
  <style type="text/css" media="screen">
    #fc_tb_closeWindowButtonBot { background-image:url(/images/cart/cart-continue-shopping.png); }
    #fc_tb_window, div.fc_tb_title, div.fc_tb_title { background-color:#ededed; }
  </style>
  <!-- END FOXYCART FILES -->
    
    
    <script type="text/javascript" src="/js/ac.muffin.js"></script>
<link rel="alternate" type="application/rss+xml" title="Rss" href="/articles-blog/new/rss" /></head>
<body>
    <form name="aspnetForm" method="post" action="/Software+development+as+a+cooperative+game" id="aspnetForm">
<div>
<input type="hidden" name="__LBD_VCT_default_ctl00_cphbody_ucform_captverify" id="__LBD_VCT_default_ctl00_cphbody_ucform_captverify" value="ab20c2ec62434466b3f458e857bcb4d3" />
<input type="hidden" name="__LBD_SGC_default_ctl00_cphbody_ucform_captverify" id="__LBD_SGC_default_ctl00_cphbody_ucform_captverify" value="0" />
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwULLTIwOTI3NTEyMzYPZBYCZg9kFgICAxBkZBYKAg0PFgIeC18hSXRlbUNvdW50AgkWEgIBD2QWAmYPFQMNIGNsYXNzPSdsYXN0JxhodHRwczovL3Nob3AuY29ja2J1cm4udXMEU2hvcGQCAg9kFgJmDxUDACsvUmVjZW50Q2hhbmdlcz92aWV3PWRhdGVsaXN0JnNob3d2ZXJzaW9ucz0xBlJlY2VudGQCAw9kFgJmDxUDABAvUG9lbXM/dmlldz1ncmlkBVBvZW1zZAIED2QWAmYPFQMABi9Cb29rcwVCb29rc2QCBQ9kFgJmDxUDABAvVGFsa3M/dmlldz1ncmlkBVRhbGtzZAIGD2QWAmYPFQMACS9BcnRpY2xlcwhBcnRpY2xlc2QCBw9kFgJmDxUDABAvQmxvZz92aWV3PWRsaXN0BEJsb2dkAggPZBYCZg8VAwAIL0NvdXJzZXMHQ291cnNlc2QCCQ9kFgJmDxUDABxodHRwOi8vYWxpc3RhaXIuY29ja2J1cm4udXMvBEhvbWVkAg8PD2QWAh4Fc3R5bGUFJGJhY2tncm91bmQ6dXJsKC9nZXQvMTgzNykgbm8tcmVwZWF0O2QCEQ8WAh8AAjQWaAIBD2QWAmYPFQIRQWdpbGUrZGV2ZWxvcG1lbnQRQWdpbGUgZGV2ZWxvcG1lbnRkAgIPZBYCZg8VAghBcnRpY2xlcwhBcnRpY2xlc2QCAw9kFgJmDxUCBUJlaW5nBUJlaW5nZAIED2QWAmYPFQIEQmxvZwRCbG9nZAIFD2QWAmYPFQIFQm9va3MFQm9va3NkAgYPZBYCZg8VAgtCdXJuK2NoYXJ0cwtCdXJuIGNoYXJ0c2QCBw9kFgJmDxUCCkNhdGVnb3JpZXMKQ2F0ZWdvcmllc2QCCA9kFgJmDxUCCENoaWxkcmVuCENoaWxkcmVuZAIJD2QWAmYPFQIKQ29tcGxhaW50cwpDb21wbGFpbnRzZAIKD2QWAmYPFQIQQ29vcGVyYXRpdmUrR2FtZRBDb29wZXJhdGl2ZSBHYW1lZAILD2QWAmYPFQILQ291cnNlK2xpc3QLQ291cnNlIGxpc3RkAgwPZBYCZg8VAgdDcnlzdGFsB0NyeXN0YWxkAg0PZBYCZg8VAglFZHVjYXRpb24JRWR1Y2F0aW9uZAIOD2QWAmYPFQIHRW1vdGlvbgdFbW90aW9uZAIPD2QWAmYPFQILRW52aXJvbm1lbnQLRW52aXJvbm1lbnRkAhAPZBYCZg8VAgZFdGhpY3MGRXRoaWNzZAIRD2QWAmYPFQIMRmFjaWxpdGF0aW9uDEZhY2lsaXRhdGlvbmQCEg9kFgJmDxUCBmh1bWFucwZodW1hbnNkAhMPZBYCZg8VAhJIdW1hbnMraW4rc29mdHdhcmUSSHVtYW5zIGluIHNvZnR3YXJlZAIUD2QWAmYPFQIFSHVtb3IFSHVtb3JkAhUPZBYCZg8VAgZJbWFnZXMGSW1hZ2VzZAIWD2QWAmYPFQIfSW5jb3JyZWN0bHkrVHJhbnNmZXJyZWQrTXVmZmlucx9JbmNvcnJlY3RseSBUcmFuc2ZlcnJlZCBNdWZmaW5zZAIXD2QWAmYPFQIZSW5jcmVtZW50cythbmQraXRlcmF0aW9ucxlJbmNyZW1lbnRzIGFuZCBpdGVyYXRpb25zZAIYD2QWAmYPFQIKSW50ZXJ2aWV3cwpJbnRlcnZpZXdzZAIZD2QWAmYPFQImSm91cm5hbCtvZitvYmplY3Qtb3JpZW50ZWQrcHJvZ3JhbW1pbmcmSm91cm5hbCBvZiBvYmplY3Qtb3JpZW50ZWQgcHJvZ3JhbW1pbmdkAhoPZBYCZg8VAgZsaXZpbmcGbGl2aW5nZAIbD2QWAmYPFQIKTWFuYWdlbWVudApNYW5hZ2VtZW50ZAIcD2QWAmYPFQICTWUCTWVkAh0PZBYCZg8VAgtNZXRhcGh5c2ljcwtNZXRhcGh5c2ljc2QCHg9kFgJmDxUCC01ldGhvZG9sb2d5C01ldGhvZG9sb2d5ZAIfD2QWAmYPFQIHTWV0aG9kcwdNZXRob2RzZAIgD2QWAmYPFQIETWlzYwRNaXNjZAIhD2QWAmYPFQIPTW90aXZhdGlvbittYXBzD01vdGl2YXRpb24gbWFwc2QCIg9kFgJmDxUCBU5vdGVzBU5vdGVzZAIjD2QWAmYPFQIPT2JqZWN0K01hZ2F6aW5lD09iamVjdCBNYWdhemluZWQCJA9kFgJmDxUCCU9PK2Rlc2lnbglPTyBkZXNpZ25kAiUPZBYCZg8VAghQYXR0ZXJucwhQYXR0ZXJuc2QCJg9kFgJmDxUCBlBlb3BsZQZQZW9wbGVkAicPZBYCZg8VAgVQb2VtcwVQb2Vtc2QCKA9kFgJmDxUCB1Byb2Nlc3MHUHJvY2Vzc2QCKQ9kFgJmDxUCElByb2plY3QrbWFuYWdlbWVudBJQcm9qZWN0IG1hbmFnZW1lbnRkAioPZBYCZg8VAgZRdW90ZXMGUXVvdGVzZAIrD2QWAmYPFQIMUmVxdWlyZW1lbnRzDFJlcXVpcmVtZW50c2QCLA9kFgJmDxUCBVNjcnVtBVNjcnVtZAItD2QWAmYPFQIEU0UySwRTRTJLZAIuD2QWAmYPFQIEU2l0ZQRTaXRlZAIvD2QWAmYPFQIUU29mdHdhcmUrZW5naW5lZXJpbmcUU29mdHdhcmUgZW5naW5lZXJpbmdkAjAPZBYCZg8VAhFTd2ltbWluZytjYXRlZ29yeRFTd2ltbWluZyBjYXRlZ29yeWQCMQ9kFgJmDxUCBVRhbGtzBVRhbGtzZAIyD2QWAmYPFQIGVHJhdmVsBlRyYXZlbGQCMw9kFgJmDxUCC1R5cGUrdGhlb3J5C1R5cGUgdGhlb3J5ZAI0D2QWAmYPFQIJVXNlK2Nhc2VzCVVzZSBjYXNlc2QCEw9kFgICBg8PFgIeAmlkApcQZBYCZg9kFgQCCw8WAh4HVmlzaWJsZWhkAhcPDxYCHg1PbkNsaWVudENsaWNrBTFyZXR1cm4gQ29tbWVudC52YWxpZGF0ZSgnY3RsMDBfY3BoQm9keV91Y0Zvcm1fJyk7ZGQCFQ8WAh4EVGV4dAUEMjAxMGQYAQUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgIFIGN0bDAwJGNwaEJvZHkkdWNGb3JtJGNoa1JlbWJlck1lBRFjdGwwMCRjaGtSZW1iZXJNZUvN5tsD7xy/gEepaUxQE/q2iq4s" />
</div>


<script src="/WebResource.axd?d=GRXMzSLvATRZcnyXM9MRpOBiWOLFVGal7QJ3K7Gp83WDoPCmIk_AAbNj9vVrsOby_CW3cKjpwC_MVt_RrSVLkQ2&amp;t=633783207159687500" type="text/javascript"></script>
<div>

	<input type="hidden" name="__EVENTVALIDATION" id="__EVENTVALIDATION" value="/wEWFwKX5MXPAQKUy6qgDgLDq4HgAgKFyPWFBgLE5ML0AgKR0uiIBQK/35XJDwKSrdCyDgLutOfQDwKhpJCYDQKo4IJHApOk0SMCiY/EDALojOSVCQLGzMXyBALl8P/aDAK3i67nAwLOiJTLBwKdj8gbAoHty7UFAsiqo6sOArTvh+wIApLB86sNwrP4H1AG0FKoA/m9D4tjntgVmWY=" />
</div>
    <!-- page -->
	<div id="page">
	    
		<!-- header -->
		<!--<div class="header">-->
		    <div class="header-wrapper">
			    <div class="header-column">
				    <!-- service menu -->
				    <ul class="serv-menu">
					    <li id="ctl00_linkSignUp"><a href="#signup" id="open_but" rel="nofollow">Sign up</a></li>
					    
					    
					    <li id="ctl00_linkSignIn">
						    <a id="sign-in" class="button" href="#" rel="nofollow">Sign in</a>
						    <div class="roll close">
							    <ul class="sign-in">
							        <li style="padding-top: 3px;">Email/Pw</li>
							        <li>
									    <div class="input-bg f-left">
										    <input name="ctl00$txtSignInEmail" type="text" id="ctl00_txtSignInEmail" class="text" />
									    </div>
								    </li>
								    <li>
									    <div class="input-bg f-left">
										    <input name="ctl00$txtSignInPassword" type="password" id="ctl00_txtSignInPassword" class="text" />
									    </div>
								    </li>
								    <li>
									    <a id="ctl00_lbSignInGo" class="sign-in-go" href="javascript:__doPostBack('ctl00$lbSignInGo','')">Go</a>
								    </li>
							    </ul>
						    </div>	
					    </li>
					    <li class="search-m">
						    <div>
							    <a class="button" href="#" id="header-search">Search</a>
							    <div class="inner">
								    <div class="input-bg">
									    <input name="ctl00$txtSearch" type="text" id="ctl00_txtSearch" class="text" />
								    </div>	
							    </div>
						    </div>	
					    </li>
				    </ul>	
				    <!-- main menu -->
            
                    <ul class="menu">
                
                    <li class='last'><a href='https://shop.cockburn.us'>Shop</a></li>
                
                    <li><a href='/RecentChanges?view=datelist&showversions=1'>Recent</a></li>
                
                    <li><a href='/Poems?view=grid'>Poems</a></li>
                
                    <li><a href='/Books'>Books</a></li>
                
                    <li><a href='/Talks?view=grid'>Talks</a></li>
                
                    <li><a href='/Articles'>Articles</a></li>
                
                    <li><a href='/Blog?view=dlist'>Blog</a></li>
                
                    <li><a href='/Courses'>Courses</a></li>
                
                    <li><a href='http://alistair.cockburn.us/'>Home</a></li>
                
                    </ul>
                
			    </div>
			</div>
			<div class="header-left">
			    <h1><a id="ctl00_hlH1" href="/" style="background:url(/get/1837) no-repeat;">Alistair Cockburn</a></h1>
			</div>
			<div class="clear"></div>
			<div id="header-cat-list-w">
			<div id="header-cat-list-t">
			  <div id="header-cat-list-b">
			    <div id="header-cat-list-l">
			      <div id="header-cat-list-r">
	            <div id="header-cat-list">
                
                      <ul>
                  
                      <li><a href='/Agile+development'>Agile development</a></li>
                  
                      <li><a href='/Articles'>Articles</a></li>
                  
                      <li><a href='/Being'>Being</a></li>
                  
                      <li><a href='/Blog'>Blog</a></li>
                  
                      <li><a href='/Books'>Books</a></li>
                  
                      <li><a href='/Burn+charts'>Burn charts</a></li>
                  
                      <li><a href='/Categories'>Categories</a></li>
                  
                      <li><a href='/Children'>Children</a></li>
                  
                      <li><a href='/Complaints'>Complaints</a></li>
                  
                      <li><a href='/Cooperative+Game'>Cooperative Game</a></li>
                  
                      <li><a href='/Course+list'>Course list</a></li>
                  
                      <li><a href='/Crystal'>Crystal</a></li>
                  
                      <li><a href='/Education'>Education</a></li>
                  
                      <li><a href='/Emotion'>Emotion</a></li>
                  
                      <li><a href='/Environment'>Environment</a></li>
                  
                      <li><a href='/Ethics'>Ethics</a></li>
                  
                      <li><a href='/Facilitation'>Facilitation</a></li>
                  
                      <li><a href='/humans'>humans</a></li>
                  
                      <li><a href='/Humans+in+software'>Humans in software</a></li>
                  
                      <li><a href='/Humor'>Humor</a></li>
                  
                      <li><a href='/Images'>Images</a></li>
                  
                      <li><a href='/Incorrectly+Transferred+Muffins'>Incorrectly Transferred Muffins</a></li>
                  
                      <li><a href='/Increments+and+iterations'>Increments and iterations</a></li>
                  
                      <li><a href='/Interviews'>Interviews</a></li>
                  
                      <li><a href='/Journal+of+object-oriented+programming'>Journal of object-oriented programming</a></li>
                  
                      <li><a href='/living'>living</a></li>
                  
                      <li><a href='/Management'>Management</a></li>
                  
                      <li><a href='/Me'>Me</a></li>
                  
                      <li><a href='/Metaphysics'>Metaphysics</a></li>
                  
                      <li><a href='/Methodology'>Methodology</a></li>
                  
                      <li><a href='/Methods'>Methods</a></li>
                  
                      <li><a href='/Misc'>Misc</a></li>
                  
                      <li><a href='/Motivation+maps'>Motivation maps</a></li>
                  
                      <li><a href='/Notes'>Notes</a></li>
                  
                      <li><a href='/Object+Magazine'>Object Magazine</a></li>
                  
                      <li><a href='/OO+design'>OO design</a></li>
                  
                      <li><a href='/Patterns'>Patterns</a></li>
                  
                      <li><a href='/People'>People</a></li>
                  
                      <li><a href='/Poems'>Poems</a></li>
                  
                      <li><a href='/Process'>Process</a></li>
                  
                      <li><a href='/Project+management'>Project management</a></li>
                  
                      <li><a href='/Quotes'>Quotes</a></li>
                  
                      <li><a href='/Requirements'>Requirements</a></li>
                  
                      <li><a href='/Scrum'>Scrum</a></li>
                  
                      <li><a href='/SE2K'>SE2K</a></li>
                  
                      <li><a href='/Site'>Site</a></li>
                  
                      <li><a href='/Software+engineering'>Software engineering</a></li>
                  
                      <li><a href='/Swimming+category'>Swimming category</a></li>
                  
                      <li><a href='/Talks'>Talks</a></li>
                  
                      <li><a href='/Travel'>Travel</a></li>
                  
                      <li><a href='/Type+theory'>Type theory</a></li>
                  
                      <li><a href='/Use+cases'>Use cases</a></li>
                  
                      </ul>
                  
                <div class="clear"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      </div>
      
	
    
	

<div class="title-border">
    <div class="title-wrapper">
        <div class="title-column">
            <h2 id="ctl00_cphBody_ucHeader_h2Tag" mid="2071" mvid="10768" mdid="3001" mdvid="12835" cur="True">Software development as a cooperative game</h2>
        </div>
    </div>
    <div class="title-right">
        <div id="ctl00_cphBody_ucHeader_divTitleRight" class="title-right-pad">
		    <div class="row links">
			    1/5/1999
			    <span id="ctl00_cphBody_ucHeader_spnPriCat">
			     &nbsp;|&nbsp; 
			    ARTICLES: <a id="ctl00_cphBody_ucHeader_hlPriCatPrev" href="What+do+I+call+this+pattern%3f">&lt; previous</a> &nbsp;|&nbsp;
			    <a id="ctl00_cphBody_ucHeader_hlPriCatNext" href="Alistair's+scum+talk">next &gt;</a>
			    </span>
		    </div>
		    <div id="ctl00_cphBody_ucHeader_divRating" class="row">	
                <ul>
			        <li>RATING: &nbsp;|&nbsp; </li>
		            <li>
		                <input name="rating" type="radio" class="rating" value="1" title="Frankly, sucks!"/>
                        <input name="rating" type="radio" class="rating" value="2" title="Not so good."/>
                        <input name="rating" type="radio" class="rating" value="3" title="Pretty good."/>
                        <input name="rating" type="radio" class="rating" value="4" title="Really good!"/> &nbsp;|&nbsp; 
                    </li>
			        <li id="ratingStats" style="color:#616263;">Avg 0.0 on 0</li>
			    </ul>
		    </div>
		    <div id="ctl00_cphBody_ucHeader_divActions" class="row links">
		        <strong>Content</strong> (<a id="ctl00_cphBody_ucHeader_hlContent" class="active" href="Software+development+as+a+cooperative+game">single</a> or <a id="ctl00_cphBody_ucHeader_hlMulti" href="Software+development+as+a+cooperative+game/v/multi">multi</a> view) &nbsp;|&nbsp; 
		        <a id="ctl00_cphBody_ucHeader_hlDisussion" class="discuss-link-nav" rel="nofollow" href="Software+development+as+a+cooperative+game#discussion">Discuss</a> &nbsp;|&nbsp; 
		        <a id="ctl00_cphBody_ucHeader_hlHistory" rel="nofollow" href="history/Software+development+as+a+cooperative+game">History</a> &nbsp;|&nbsp; 
		        <a id="ctl00_cphBody_ucHeader_hlEdit" rel="nofollow" href="edit/2071">Edit</a> 
		        
		        
		        
		    </div>
	    </div>
    </div>
    <div class="clear"></div>
</div>
<input type="hidden" name="ctl00$cphBody$ucHeader$txthRatingValue" id="ctl00_cphBody_ucHeader_txthRatingValue" value="0" />
<input type="hidden" name="ctl00$cphBody$ucHeader$txthMuffinId" id="ctl00_cphBody_ucHeader_txthMuffinId" value="2071" />
<input type="hidden" name="ctl00$cphBody$ucHeader$txthPersionId" id="ctl00_cphBody_ucHeader_txthPersionId" value="488328" />
	
	<div class="primary-border">
	    <div class="primary-wrapper">
		    <div class="primary-column">
			    
			    <div class="text-box">
				    
				    <p><a href="http://alistair.cockburn.us" target="_blank">&#42;Alistair A.R. Cockburn&#42;</a><br />
<strong>Humans and Technology</strong></p>
<p>Alistair Cockburn&#8217;s talk given at the 1999 ObjectActive conference in MidRand, South Africa.</p>
<p>Colloquially known as Alistair&#8217;s &#8220;scum&#8221; talk.</p>
<h3><img src='/get/2340' alt='Image45.gif' title='Image45.gif' /> </h3>
<p>My name is Alistair Cockburn &#8211; pronounced Co-burn,. In the U.S. they often forget to teach that &#8216;ck&#8217; is occasionally silent, as in my name.</p>
<p>I am a hardware and software engineer by training, but my chosen profession is that of a methodologist. That means that I study how people produce software, successfully, or unsuccessfully. To most programmers, software methodologists, like software process designers and marketing people, are among the lowest of life forms, &#8220;scum&#8221;, in the vernacular. To us, of course, we are essential agents of life, rather like blue-green algae. No doubt, to blue-green algae, other algae are attractive. But from a certain distance, and to a swimmer crossing the pond, they look mostly like scum.</p>
<p>I&#8217;m a methodologist, not a process designer. I have rather a distrust of most software proceses, as some of you will hav come to understand by now. I think most documented software processes are simply incorrect. But this is like saying I am really a blue algae, not a blue-green algae. To the swimmer, it makes no difference what color the scum is.</p>
<p>As a true-blue methodologist, I work by collecting raw data: A person says, &#8220;We did this. This happened.&#8221; I take that as a fact. Collect facts like that. Then I look at cognitive science, neuro-linguistic programming, sociology, ethnography, organizational theory and personality types, looking for their theories of what is at work, what is cause and what is effect &#8211; what is the &#8220;ecology&#8221; that surrounds programming. They are not facts, but ideas I can build on and test against my facts and observations. I keep the ones that I like and seem to explain something. Then I make a wild guess at at theory that fits some of the data.</p>
<p>Then I try to break the theory. Well, actually, I don&#8217;t really want to break it. I really want it to be right. So maybe I don&#8217;t try all that hard to break it. I don&#8217;t show it to my worst opponents, because they&#8217;ll break it too easily. But I announce the theory, preferably in the middle of programmers or in the middle of a project, and see how people react. However much I want the theory to be correct, I have found that I only make progress when they break it.</p>
<p>What I have observed in the last 10 years of doing this, is that there is this cycle. I start off fairly ignorant and with a guess. I learn and learn, and then think I know something. I am at the top of this turning wheel. I announce and try my theory, and immediately start discovering it doesn&#8217;t work. So my understanding starts dropping, until I end up convinced I know nothing and am totally depressed. At that point I notice something new or have an idea, and start collecting information again.</p>
<p>This wheel goes up, pauses, then comes down. I have been around that wheel approximately six times in the last 10 years, and have gotten to know the feeling.</p>
<p>I was giving a talk like this a cycle or so ago, and told all this to the audience. I said, &#8220;I have bad news for you. While preparing for this talk, I discovered that I am currently at the top of cycle. That means I can announce with perfect certainty and wonderful evidence what I believe, and be completely sure that it is wrong. However, I have no information as to where or how it is wrong. And what&#8217;s worse, since I have been around the circle 4 times, I can probably tell you where you are wrong, but you can&#8217;t tell me where I am wrong.&#8221; With that, I began my lecture.</p>
<p>You are in a better position today. Since I discovered that cycle, preparing for that talk, I decided to try to start on the next cycle even while I was still going up on the current cycle. So I am going up and down simultaneously on different ideas. So now I can describe theories I know hasn&#8217;t reached fruition yet, so I don&#8217;t know where they are going, and in the next breath tell you stuff that used to be true and is now suspect. And I have so many stories to make or break any theory that is just dizzying.</p>
<p>An aside before I go on with the reassuring and comforting part of this talk, which is the theory I am currently trying to convince you to use.</p>
<p>It appears to me that software development is happening in industry, not in the universities. Universities are great for problems that can be solved by sitting alone and thinking or experimenting for months on end. Universities were great for giving us automata theory, complexity analysis, compilers and the like. But universities are not at all well suited to understanding what is happening during software development.</p>
<p>Software development <del>at the moment</del> is much more like early manufacture of samurai swords, shields, and battlefield tactics. You make a pile of swords or war tactics, send them onto the battlefield, and see which ones worked better. Then you make different swords and tactics, and so on. You can&#8217;t figure out the right answer sitting alone in the room. You have to be on the battlefield. I can&#8217;t imagine learning the things I&#8217;ve learned while sitting peacefully in my office reflecting. Most of my original reflections and predictions were just wrong. So any one of you who is interested in this topic probably has to work as a developer or consultant, so you can see the moment-to-moment action and get raw data.</p>
<p>I took part in a discussion up at the University a short while ago, to discuss the idea of a &#8220;Software Engineering&#8221; curriculum, as distinct from Computer Science. Not to poke fun of this particular Univ. &#8211; the department head is very sympathetic to the concept, and the representative from the Dean&#8217;s office is a professor who is right in line with the common thinking in the academic segment of our industry. They were discussing &#8220;What People Would Think &#8211; How Other Academics Would React&#8221;. The were looking for a comparison faculty for this new curriculum. They wanted it to be like Chemical Engineering. That is a good, macho discipline. Good science, good engineering, good success rate, good money. But Software Engineering isn&#8217;t like Chemical Engineering, and they were aware of it. I got around to describing how software engineering research ought to be carried out &#8211; &#8220;rather like a social science, anthropology, for example&#8221;. The Dean&#8217;s representative snorted, &#8220;That&#8217;s just what we don&#8217;t need &#8211; to be contaminated with the status of a social science department!&#8221; </p>
<p>That struck me as rather odd, given the generally low opinion people have of the intellectual rigor of Computer Science as a discipline. Rather like the rocks on the bottom of the pond calling the mud &#8220;low&#8221;. However, he didn&#8217;t look to be in a particularly receptive mood at the time, so I didn&#8217;t mention it to him. I did, however, think it. To me, as a blue algae scum, a social anthropologist is a collegial lower life form, perhaps a brown algae. Also life giving, and something to learn from. At least sitting out in the field, learning how the big world works.</p>
<p>Anyway, here I am, true-blue algae though I might be, and trying to tell you my best current guess as to how this software development thing works. All of what I have to say is based on facts, backed by guessing and checking. Or guessing around facts and checks.</p>
<p>You will notice that my talk doesn&#8217;t follow the published slides in the proceedings. The reason for this is that I have had both inspiration and breakage since I sent in the slides. Derek can tell you how hard it was to get slides from me in time to publish &#8211; and I hated to send them, even then. I am always convinced I&#8217;ll learn something critical and damaging the day before the talk, so my preferred mode of operation is to write the talk from 11 pm to 4 am the night before the talk. But in this case, Derek prevailed. The talk slides are almost a month old, so of course I have found a new way to talk the material by now.</p>
<p>I&#8217;ll try to put this all into the smallest number of words and let those of you who get it right away get it right away. I believe these ideas are correct and will stand you in good stead on your current and next projects.</p>
<h3><hr/><hr/><hr/> 1. Communication </h3>
<p><img src='/get/2339' alt='Image45-.gif' title='Image45-.gif' /><u>The first thing to get is that no communication is ever perfect and complete</u>.</p>
<p>It just can&#8217;t be done. It is not even in the realm of possibility. Your listener, or the receiver of the communication, has to jump across a gap, at some point, and has to do that all on their own. You can&#8217;t do it for them. If they are very different from you, then they can&#8217;t jump a big gap. You have to explain some basic concepts to them, and then build forward until they build their own bridge of experience so they can finally get what you are saying. But however much you back up, there is someone who wouldn&#8217;t understand that, and you&#8217;d have to back up more. There is no final end point to this backing up. However, if you are communicating with someone who has a very similar background, you wave your hands and mutter a few phrases, and they get it. They can jump a huge distance, because they have a similar base of experience to draw from, and can fill the gap with accurate predictions of your meanings.</p>
<p>The way I say all of that in shortest form is, &#8220;All communication is touching into shared experience.&#8221; </p>
<p>The point is, we write these specification and design documents <em>as though</em> we could actually ever explain what we mean. And we can&#8217;t. We can never hope to completely specify the requirements or the design. Not even the faintest chance. When we write, we assume that the reader has a certain level of experience. If we can assume more experience, then we can write less. If we have to assume less experience, then we have to write more.</p>
<p>I was working with a US company that was employing programmers in Russia. They wanted me to teach them to write use cases in the US for programmers who knew neither English nor the domain. I said, &#8220;You can&#8217;t hope to teach them the domain inside the requirements document. First teach them the domain, then write a short requirements document that speaks to someone knowledgeable in the domain.&#8221; They decided to do one better. They decided to write the short version of the requirements document, and then fly one of their domain experts over to Russia for 2 weeks at a time to translate, explain and generally ensure that the programmers were doing the right thing.</p>
<p>See how that works? The domain specialist could jump the large gap presented by the brief use case document, and then back up, <em>as needed, and only as needed</em>, to fill in to get the size of gaps that the Russian programmers could jump.</p>
<p>So the first signifant idea I have to give you today is that complete communication is never possible, and so it is our task in on a software development project <em>to manage the incompleteness of our communications</em>. Estimate how much is needed, when we can quit, how we can help receivers to jump larger gaps, when and how to make the gaps smaller. Every time we try to make the gap smaller, it costs time and money, and software projects are short on both. So what we want is to find out how large of a gap &#8211; how much incompleteness in the communication &#8211; we can get away with, and stop there.</p>
<p><img src='/get/2341' alt='Image46-.gif' title='Image46-.gif' />There is a second moral to that story. How did the company decide to fill in the programmers&#8217; gaps? By making them read books? Sending them to a course (that&#8217;s what I suggested). No, by sending someone to talk with them, <em>face to face</em>. Because real-time, multi-modal, 3dimensional, face-to-face communcation with question and answer is the most effective way to transfer information and see that it was received. Two people standing at the white board, talking, questioning, drawing, maybe typing on the computer if that is the issue.</p>
<h3><hr/><hr/><hr/>- 2. Using Whiteboards </h3>
<p>So the second idea of the day is that as you remove those characteristics of two people at the whiteboard, you reduce the efficiency and effectiveness of the communication session.</p>
<p>That is what the graph shows. Take away part proximity, and you get video conferencing, and many of us have experienced how hard it is to collaborate over a video link. You lose 3dimensionality, the visual proximity that gives non-verbal cues. Back up one step further, put people on the phone and you lose all visual cues. Go to email and you lose tonal inflection, and timing. Go to videotape to get visuals back but lose question-and-answer. Go to audiotape and lose visuals again.</p>
<p>Go to paper and guess what? You&#8217;ve lost almost everything. The writer has to, very laboriously, I should note, guess who the audience is, guess their level of experience, guess what they understand, guess what their questions will be, and guess what the best answers to those questions are. What are the odds of them getting all that right? Very small. And expensive.</p>
<p>But how do we demand that people communicate on a project? Written text and drawings! In the light of this communications model, that is clearly absurb &#8211; and yet we do it. We demand that people communicate in the slowest, least effective medium, and downplay the most effective medium.</p>
<p>So if this theory is any good, we should be able to draw a prediction from it. All right, here is the prediction I get from looking at this graph. How should we create archival documentation of a design decision? Back up the curve to highest archivable communication medium, and we find Videotape.</p>
<p>This suggests the following documentation scenario. The designer gives a 10-20 minute, semi-prepared talk at the whiteboard, telling some other designers, who do not know the answer, how the system works. They get to ask questions. The designer will first fill in background details, give the simple solution, then add complexity. The questions will indicate where the designer has been vague, and the designer will explain. All this is videotaped. After the taping, someone transfers a couple of the key drawings, instances diagrams, collaboration diagrams, examples, whatever, to paper, so that the people can <em>recall from looking at the drawings</em>, what the conversation was. And, finally, someone puts index marks on the videotape for <em>where interesting bits of the discussion took place</em>, and publishes that index along with the draw. People can then review the drawings, recall the conversation, and look up the key discussion on the tape. All this would be relatively inexpensive and easy to to do. Certainly faster and more palatable to the person having to do the presentation, and plausibly more informative to the viewer.</p>
<p>I&#8217;ve been trying to find people who have done this or who are willing to try this out. So far, I have found that Gerald Weinberg made a similar suggestion a decade ago, by whatever reasoning he got to it. I found a woman at Lucent Technologies / Bell Labs who had actually done this once and said it worked great. Actually, she was the one who told me to put the index marks on the video tape and publish them. Recently, I have found a team lead over several projects who said he will try this sometime soon. So hopefully I&#8217;ll get back more than just the one answer as to whether this model gives good predictions. If any of you are willing to try this, please let me know: what you did, and what happened.</p>
<p>The upshot of this model is the conclusion that you want to encourage informal, face-to-face contact wherever possible. In fact, you want to <em>rely</em> on it. It should not be an accident, it should be core to your development process. Put the people in one room, if possible, in adjacent offices at least. Jim Coplien says that studiies show that as soon as people have to cross a stairwell, communication drops precipitously.</p>
<h3><hr/><hr/>&#8212;3. People are Active Devices </h3>
<p>This gets us to the third signifant idea: that software development processes use humans as the active components.</p>
<p>Humans are not linear devices, the way rods and hinges are. Even non-linear devices like transistors are easy to characterize compared with people. So when we talk about the software development process, we should first try to find out what are the active characteristics of these things called &#8220;people&#8221;.</p>
<p>People have lots of interesting characteristics, and we don&#8217;t know what they are &#8211; which makes it all the more absurd that we try to define methodologies and processes that incorporate them.</p>
<p>People are really good at just looking around, around the code, around the project, around the problem, and understanding what&#8217;s going on. So you don&#8217;t have to be all that precise, in many instances, you rely on people being able to look around. Program maintainers tell me this all the time. They expect the documentation to be out of date, so they just go and read the code.</p>
<p>People are really good at communicating with other people, face to face, of course.</p>
<p>People are really good at taking initiative, just seeing what needs to be done, and doing it. It is my experience that this is what saves most processes &#8211; people do whatever is needed, never mind what the process says. In my interviews with projects, when I ask how the project managed to deliver in the end, there is almost always some comment about &#8220;a few good people, who stepped in and just did whatever was necessary.&#8221; </p>
<p>However, people are typically inconsistent in their work, careless, sloppy and undisciplined. You can pretty much count on it. They don&#8217;t read the instructions. They goof off alternating with working hard. They resist learning and using new ideas. All of those make life hard on the process designer. Whatever the actual optimal process and design technique could manage to be, people will resist using it, and then use it sporadically and carelessly, and then have to step in with some personal heroics to make it all work out in the end.</p>
<p>This curse plagues all of us blue and blue-green algae &#8211; it doesn&#8217;t matter what great estimating, designing, programming, testing, managing techniques we discover and teach, people generally won&#8217;t use them anyway.</p>
<p>So these are some of the characteristics of people &#8211; their success modes, and their failure modes. I am trying to build my newest set of methodologies around them. Around apprenticeship programs, because that allows learning by example, on the job, in personal contact with another, with feedback. All these are important, and I&#8217;ll get back to some of them as we go along here.</p>
<p><img src='/get/2343' alt='Image47-.gif' title='Image47-.gif' />One of the most interesting discoveries I made while capturing one group&#8217;s methodology, was this milestone I call a &#8220;Declaration&#8221; milestone. I found 3 kinds of milestones, and have found them since on all projects. The first is one we expect: a Review. A review happens when a number of people congregate and stare at some work product and give feedback. The interesting questions about a review are &#8220;Who is there?&#8221;, &#8220;What are they staring at?&#8221; and &#8220;What does it mean to Fail the review?&#8221; </p>
<p>The second kind of milestone is &#8220;Publish&#8221;. Every time you check code back into the configuration management system that is a form of publish. Other Publish milestones involve deploying the software, circulating a document, and the like. These are also fairly obvious.</p>
<p>&#8220;Declaration&#8221; is, however, not obvious.. When does the technical writing group start writing the online help text? The answer I found was that the team lead would show up and say, &#8220;It&#8217;s ready&#8221;. The team lead doesn&#8217;t mean, &#8220;It&#8217;s complete, correct, done, defect free&#8221; or any of those things. The team lead simply means, &#8220;If you start writing now, I believer that the further changes we will make will be small compared to the total effort of writing.&#8221; (In my book, in the Risk Reduction Strategies section, there is a strategy called Gold Rush that discusses this sort of activity).</p>
<p>There is no double-check on the correctness of the team lead&#8217;s assertion. It just is &#8220;declared&#8221;. Since that time, I have found many examples of the Declaration milestone that are used in project scheduling. &#8220;The object model is stable enough for the DBAs to start designing from&#8221; is one. &#8220;Our software is ready for Alpha Release.&#8221; Alpha release? When is the software ready for Alpha Release? When it is bug-free? Of course not! When what? When someone decides that the defect state is low enough that the alpha users can tolerate it. It is simply a Declaration. Declaration milestones are an example of the way we manage the incompletenes of communication.</p>
<h3><hr/><hr/><hr/>&#8212;- 4. Games </h3>
<p>At this point I&#8217;m going to jump to the most powerful predictor I have come across for managing software development &#8211; considering it as a cooperative game.</p>
<p>Games are not just what children play, although those are also games. Games are invented by adults, by mathematicians, by novelists, by teenagers, and by children.</p>
<p>If you are sitting around the living room on a winter&#8217;s evening, and someone says, &#8220;Let&#8217;s play a game,&#8221; what could you play? You could play charades (play-acting to uncover a hidden phrase). You could play tic-tac-toe or checkers, poker or bridge. You could play hide-and-seek or table tennis. You could play &#8220;when I took a trip&#8230;&#8221;, a game in which each person adds a sentence onto a story that grows in the telling. You could end up having a wrestling match on the living room floor.</p>
<p>Checkers and tic-tac-toe are <em>positional</em> <em>games</em>. The entire state of the game at any moment is represented by the position on the board at that moment. These games have properties that mathematicians find interesting, and John Conway, in the book <u>On Numbers and Games</u>, shows how 2-person, positional games can be used to define all numbers, real, imaginary, finite or transfinite. He actually generates the notion of number from the notion of 2-person, positional games.</p>
<p>Most competitive games, such as checkers, tic-tac-toe, bridge and table tennis, are <em>zero</em>-<em>sum</em> games. Two sides play, one side wins, one side loses. If you score 1 point for winning, and -1 point for losing, at the end of the game the sum of the scores is zero. &#8220;Not everyone wins,&#8221; is a fact not lost on adults creating games for children&#8217;s parties.</p>
<p>Many of the games you would consider playing on that winter&#8217;s evening are not zero-sum games. In poker, gin rummy, parchesi and other group competitive games, only one person wins, the rest lose. In hide-and-seek, any number of the hiders may win (or lose) against the seeker.</p>
<p>But rock climbing, story-telling, and carpet wrestling are not about winning or losing; the game is all about having fun. As long as the guessing or the story-telling is interesting, the game is worth playing. These are <em>cooperative</em> games. The point of the game is to interact with each other, or perhaps to help each other.</p>
<p>Not all games even have an end! The story-telling game, the carpet-wrestling, and the musical session are not even _goal-seeking_games. It is not the purpose to reach a goal as fast as possible. They come to an end when enough people get tired of playing and step out. The game is expected to end, but has not particular endpoint.</p>
<p>There are, however, some games in which the primary intention is to NOT end &#8211; to keep the game going. These are called <em>infinite</em> games (all the other games must therefore be <em>finite</em>). If you start a club or a company, the purpose is to keep the club or company going. The way to keep the club going is to make it interesting for the participants. A person&#8217;s profession falls into the category of an infinite game. The person, wanting to to continue the profession, makes a set of moves which permit their practice of that profession to continue.</p>
<p><img src='/get/2362' alt='Image57-.gif' title='Image57-.gif' />So games come in all sorts of flavors. We have seen just a few possible dimensions: physical / mental / solo / team-based / competitive / cooperative / goal-seeking / finite / infinite.. It is therefore appropriate that the American Heritage Dictionary gives the first definition of game as: &#8220;A way amusing oneself.&#8221; </p>
<p>Getting slowly to software development, I&#8217;ll briefly consider rock climbing. In contrast with children playing Legos or jazz musicians jamming, climbers aim to reach the top. They evaluate the climb on how well they climbed together, and how much they enjoyed themselves, but the first measure of success is whether they reached the top. Reaching the endpoint is a primary goal, and the game is over when they reach the top. So rock-climbing is a goal-seeking, cooperative game.</p>
<p>Now if you are a rock climber, you might well interrupt me here. For many rock climbers, the moment of reaching the end of the climb is a sad one, for it signals the end of the game. That is true of cooperative games in general. The game comes to an end when the endpoint is reached, but if the players have been enjoying themselves, they may not want to stop. When we compare to software development, we do indeed see that sometimes software developers do not want to finish their design, because then the fun part of their work will be over. Software development is similar to rock-climbing in ways that I shall develop a little more fully in a minute.</p>
<p><img src='/get/2346' alt='Image49-.gif' title='Image49-.gif' />I would like you to consider software development as a <em>cooperative</em>, <em>finite</em>, <em>goal-seeking,</em> <em>group</em> game. The goal is to produce a working system. The group, or team, consists of the sponsor, manager, requirements or usage specialists, software designers, testers, and writers. Usually the goal is to produce the system as quickly as possible, but there other factors affect the time goal: ease of use, cost, defect freedom, and liability protection. In general, it is a resource-limited game, which affects how the moves are made.</p>
<p>The game is finite because it is officially over when the goal is reached. Sometimes the termination point is delivery of the system, sometimes it comes a bit later. But funding and motivation for the game change around the time the system is delivered, and a new game is defined. The new game may be to improve the system, to replace the system, to build an entirely different system, or possibly, to disband the group.</p>
<p>The game is cooperative because the people on the team help each other to reach the goal. The measure of their quality as a team is how well they cooperate and communicate during the game. This measure is used because that affects how well they reach the goal.</p>
<p>Although the software development game within the project is finite and cooperative, other games are being played at the same time, other games, with other characteristics.</p>
<p>Software development is <em>competitive</em> across teams. Teams in different companies &#8211; sometimes within the same company- compete to put the system out ahead of the other teams. The competitive game across teams is in play at the same time at the same time as each team is working its cooperative game (think here of team rock-climbing competitions).</p>
<p>Career management is an <em>infinite</em> game for the individual. The purpose of playing this game well is to be able to get the best position on the next game. As with the card game called &#8220;So long, sucker&#8221;, the teams and alliances in and individual&#8217;s career management change continually and without notice. The individual moves people make for their career affect the ways in which they collaborate with their alleged teammates.</p>
<p>Organizational survival is an <em>infinite</em> <em>group</em> game. It is cooperative within the organization (subject to the individual career game), and competitive across organizations.</p>
<p>This <em>game</em> model of software development has stood me in good stead recently, as I evaluate military software projects and open-source software development. In some of the military software projects, what we see is predominance of the career- and corporate-enhancing infinite games. It is quite clear that delivery of the software is a secondary concern, and growing the company, growing personal influence, or growing the career is what is many people&#8217;s minds. The logic of the funny contractor behavior doesn&#8217;t make sense until you realize they are playing a different game, in which different moves are called for. Then it suddenly all makes sense &#8211; even if you don&#8217;t like it.</p>
<p>Open-source development is different because it is not a resource-limited game, nor is it finite and end-point directed. Linus Torvald did not say, &#8220;We&#8217;ll make a shippable copy of Linux, and then we can all go home.&#8221; No, Linus is around, and it will evolve. The game is interesting as long as it is interesting. Any number of players may show up, and they are not on a time-line. The game will abandoned as soon as it stops being interesting for the players. In that sense, it is much more like musicians playing together, or carpet-wrestling, or lego building. It is a <em>cooperative game</em> that is not directed toward &#8220;reaching the goal&#8221;, and is not built around managing scant resources. And so the moves that make sense in open-source development naturally don&#8217;t make the same sense for a standard resource-limited, goal-seeking software development project.</p>
<p><img src='/get/2348' alt='Image50-.gif' title='Image50-.gif' />Of all the comparison partners for software development that I have seen, rock climbing has emerged as the best. Here are some of the words and phrases that we can link with rock climbing. You can see how well they transfer to software development (by the way, read Jim Highsmith&#8217;s new book, <u>Adaptive Software Development</u> for a more detailed look of the rock climbing comparison).</p>
<p>Rock climbing is Technical. The rock climber must have technical proficiency. The novice can only approach simple climbs. With practice, the climber can attack more and more difficult climbs. The better rock climber can simply do things that the others cannot. Similarly, software development is technical and requires technical proficiency, and there is a frank difference in what a more skilled person can do compared with a less skilled person.</p>
<p>Training. Rock climbers are continually training and searching for new techniques they can use, just as software designers do.</p>
<p>Technical Pass/Fail. A key point of comparison between rock climbing and software development, for me, is that not just any solution will do. The climbers must actually support their weight on their hand and feet; the software must actually run and produce reasonably accurate answers. This key characteristic is missing from most alternative activities that people select to compare software development with.</p>
<p>Individual and Team. Some people just naturally climb better than others. Some people will never handle certain climbs. At each moment on the climb, the person is drawing on their own capabilities, have to hold up their own weight. The same is true in software.</p>
<p>And yet, climbing is usually done in teams. There are a solo climbers, but they are in the minority. Under normal circumstances, climbers form a team for the purpose of a climb and the team has to actually work together to accomplish the climb. Similarly, software developers, while working on their individual assignments, must function as a team to get the software out. The &#8220;Team &#8211; Individual&#8221; dual aspects of software development form the basis for most of my current work in methodologies, and I&#8217;ll get back to it before I&#8217;m done.</p>
<p>Tools. Tools are a requirement for serious rock-climbing: chalk, chucks, harness, rope, caribeener, and so on. It is important to be able to reach for the right tool for the right moment. It is possible to climb very small distances with no tools. The longer the climb, the more critical the tool selection is. You software developers will recognize this. When you need a performance profiler, you really need it. You can&#8217;t funtion without the compiler. The team gets stuck without the version control system. And so on.</p>
<p>Planning and Improvising. Whether bouldering, doing a single-rope climb, or a multi-day climb, the climbers always make some sort of a plan. The longer the climb, the more extensive the plan must be, even though the team knows that the plan will be insufficient, and wrong in places.</p>
<p>Unforeseen, unforeseeable and purely chance obstacles are certain to show up on even the most meticulously planned climbing expeditions, unless the climb is short and the people have already done it several times before. Therefore, the climbers must be prepared to change their plans, to improvise, at a moment&#8217;s notice.</p>
<p>This dichotomy is part of what makes software development manages gnash their teeth. They want a plan, but have to deal with unforeseen difficulties. It is one of the reasons why incremental development is so critical to project success. (Does that sound like climbing in stages, and setting various base camps?)</p>
<p>Fun. Climbers climb because it is fun. Climbers experience a sense of <em>flow</em> while climbing, and this total occupation is part of what makes it fun. Similarly, programmers typically enjoy their work, and part of that enjoyment is getting into the flow of designing or programming. Flow in the case of rock climbing is both physical and mental. Flow in the case of programming is purely mental.</p>
<p>Challenging. Climbers climb because there is a challenge &#8211; can they really make it to the top? Most programmers crave this challenge, too. If programmers do not find their assignment challenging, they may quit, or start embellishing the system with design elements they find challenging.</p>
<p>Resource-limited. Rock climbing works against a time and energy budget, needing to be completed before the team is too tired, before the food runs out, by nightfall or before the snows come. In general, climbers plan their climbs to fit a resource budget. Similarly, commercial software development is governed by budget and need. It is in this sense that open-source development is different from commercial software development.</p>
<p>Dangerous. If you fall wrong on a rock climb, you can die or get maimed. This is probably the one aspect of rock climbing that does not transfer to software development. Rock climbers are fond of saying that climbing with proper care is less dangerous than driving a car. However, I have never heard programmers need to even compare the danger of programming with the danger of driving a car or crossing the street.</p>
<p><img src='/get/2350' alt='Image51-.gif' title='Image51-.gif' />Software development has been compared with math, science, engineering, poetry, theatre and jazz. It is useful to have such a comparison partner, because we can get some distance and clarity by comparing software development to its partner, and reflecting on whether that comparison holds in each particular case. I find rock climbing has more in common with software development than do all the comparison partners that have been used before.</p>
<p>Math, science and poetry are not games of same sort. Theatre is a finite, group, cooperative, planned/improvised game, but is not goal-seeking, and is missing the technical pass/fail nature of software and rock climbing. We could simply put on a terribly play and get away with it, if everything falls apart, but we cannot simply float up the rock climb or wish the software would run if it will not.</p>
<p>Engineering is too close to software development for us to stand outside of. In fact, I could be talking about engineering rather than software development here &#8211; it just happens to be about software.</p>
<p>There are two things that software development is not. *Science *is one of them. Of course, there has been much written as to just &#8220;what is&#8221; science, and I shall not try to recap it all here. However, there are several thoughts that can be usefully be considered for a moment.</p>
<p>The scientific method is oftan claimed to consist of &#8220;Observe, deduce, experiment, confirm.&#8221; This adage has been discredited for a long time. Many science writers have shown that scientists very often start with an answer or hypothesis in mind, and set out to prove it. We should not encourage software to be developed using this adage, because it does not fit the matter of developing software, and it does not describe science in the first place</p>
<p>A closer phrasing is &#8220;Observe, <em>invent</em>, experiment, confirm.&#8221; Where does the hypothesis come from? Invention. Sometimes invention after observation, sometimes invention on the basis of prior thinking on any number of topics. Having once invented an idea, a scientist quite often then sets out to demonstrate that the hypothesis is correct. This is also closer how many ideas reach fruition in software development. The designer observes, thinks, and invents some design. Sketches, prototypes and experiments are made to see if the idea &#8220;holds water&#8221;, and if so, then it proceeds.</p>
<p>While a more accurate phrase, it does not give us insights as to how to manage the development of software, as it does not cover more than a small part of the software development process. It does not say anything about requirements, implementation, testing, deployment, teams, tools or training, in particular.</p>
<p>Paul Feyerabend [<u>Against Method</u>] claimed that scientific progress has been so different, from case to case, that no method could be said to work for it. Here at last we have a partner to software development! Starting from Peter Naur in the 1960s, we hear programmers and designers defending software development as a unique and individual activity, one that cannot be scheduled, predicted or turned into a procedure. However, this thought applies only to the inventive part of software development. While a significant part, it is not all of software development. My goal is to be able to say something constructive about managing software projects, even if we accept Paur Feyerabend and Peter Naur&#8217;s thesis that there is no sure-fire, successful method for coming up with the invention.</p>
<p>Science is one thing that does not capture the essence of software development, and *Model building *is the other thing I wish to say that software development is not. Ivar Jacobson has actively promoted the view that &#8220;software development is model building&#8221;, over the last decade, and it has ended up as a catch-phrase in the the industry. It is, however, dangerously inaccurate.</p>
<p>When software development becomes model building, then a valid measure of the quality of the software or of the development process is the quality of the models, their fidelity to the real-world, their completeness. However, as I interviewed dozens of successful projects around the world, I was repeatedly told that the people on the project did not have the time to complete their models, or never drew them at all. Their common comments were:</p>
<p>&#8220;We don&#8217;t have time to create fancy or complete models. Often, we don&#8217;t have time to create models at all.&#8221; </p>
<p>or</p>
<p>&#8220;The interesting part of what we want to express doesn&#8217;t get captured in those models. The interesting part is what we say to each other while drawing on the board.&#8221; </p>
<p>In the cases where I have found people diligently creating models, software was not getting delivered. In other words, paying attention to the &#8220;models&#8221; interfered with developing the software.</p>
<p>How can we reconcile these interviews and many people&#8217;s personal experiences with what is, no doubt, Ivar&#8217;s voice of experience? The game description gives us an answer.</p>
<p>The game is to deliver the software. Any other activity is secondary. A model, or, indeed, any communication, is <em>sufficient,</em> <em>as soon as</em> it permits the next person to make their next move. The work products of the team, therefore, should be measured for <em>their sufficiency with respect to communicating to their target group</em></p>
<p>They should be measured for nothing else. It does not matter if the model is incomplete, drawn with incorrect syntax, and actually not like the real world &#8211; if it communicates sufficiently to its recipient. In some cases, people get the intended communication from surprisingly sparse messages . In other cases, a more detailed, accurate communication is required,. Understanding the nature of the game, the rules and variations on the game, gives us insight into how elaborate a model to build, or whether to build a model at all.</p>
<p>Software development is a game of invention and communication. Communication is so important, that we need to spend time absorbing the range of factors that affect the quality of the communication.</p>
<p>This reference to communication gets us back to my opening section about communication as never being perfect and complete, communication as touching into shared experience.</p>
<p>I&#8217;ll give you an example of how I use this two-legged model of software development as a goal-seeking game of invention and communication, and communication as touching into shared experience, never fully complete or perfect.</p>
<p>A project architect was telling me that sometimes a group of designers go to lunch, have an idea, and someone sketches out a design on a napkin. They go back and stick the napkin on their corkboard. For the next months, possibly longer, that napkin acts as the central touchpoint of the design &#8211; it is what people remember and point to when discussing the evolution of the design.</p>
<p>From my point of view, this is fine, and not merely fine, but very good. The napkin serves as a reminder. Because it is a napkin, the designers remember the restaurant, the room, the discussion. It has life in several sensory modes. It has shape, it has texture, it has, perhaps, grease stains. All of those anchor the memory of the discussion.</p>
<p>The architect was telling me that he had just hired a communications specialist. One of his ideas was that this communications specialist would walk around, and copy the contents of the napkin into some drawing tools so it would be pretty and archived for later reference.</p>
<p>In our discussion, we decided that copying that napkin into a drawing tool would cause it to <em>lose</em> information! The shape and texture of the napkin would be lost, the rectangles would be perfect instead of wobbly and different sizes. The memories associated with the napkin would be lost in the transfer.</p>
<p>But what alternative is there? Does the napkin just stay on the cork board &#8211; or is there some way to share it with the team? The answer was to scan the napkin into the computer, and put the scanned image into Lotus Notes or a Word file or whatever. Then the napkin itself becomes a design marker, complete with its bumpy texture and hand-drawn boxes. It is both cheaper and more informative than the redrawn version in the drawing tool. It fits both the communication model and the game model better. It is simply better for our purposes.</p>
<p>This was true on another project. A person came in and said, &#8220;Alistair, I know this is not a legitimate drawing in any known notation, but it is the best I can come up with.&#8221; And he presented a hand drawing of stick figures doing what would more or less be called a work-flow or collaboration diagram. Over the months, my colleagues and I tried redrawing his drawing in any number of different forms, but whenever we had difficulties, we went back to his original drawing, which we had photocopied and distributed, because it communicated to us in ways no other drawing did.</p>
<h3><hr/><hr/>&#8212; 5. Methodology per project </h3>
<p><img src='/get/2352' alt='Image52-.gif' title='Image52-.gif' /><u>The fifth point I&#8217;d like to make is that all projects are different, and so you need a different methodology on each project.</u></p>
<p>First, I have say, what do I mean by &#8220;methodology&#8221;. This is a repeat for those of you who came to my methodology tutorial.</p>
<p>Methodology, in the biggest sense of the word, is how your organization operates to deliver software, successfully, over and over again. Your methodology is your organization&#8217;s strategy for winning the game.</p>
<p>&#8220;Big-M&#8221; methodology is what gets your software out. It is a unique construction of your organization &#8211; it is, in fact, a social agreement within the organization. It is</p>
<p>who you hire and what you hire them for,</p>
<p>how they work together,</p>
<p>what they each produce,</p>
<p>how they share.</p>
<p>It is the combined job descriptions, procedures and conventions of everyone on your team.</p>
<p>All organizations have a big-M methodology. It is simply how they do business. Even just seven people in a group have a way of working, a way of trading information, separating work into pieces suited to different people, of putting their work back together as the final product. All founded on assumed values and cultural &#8220;norms&#8221;.</p>
<p>Only a few companies bother to try to write it all down, usually the large consulting houses: Andersen, Coopers &amp; Lybrand, Ernst &amp; Young, and so on. A few have gone so far as to create an expert system that prints out the full methodology needed for a project based on project staffing, complexity, deadlines and the like. No methodology I have seen captures the cultural assumptions or provides for variations along the lines of values or cultures.</p>
<p>The slide shows the basic elements of a &#8220;Big-M&#8221; methodology, with examples of some of those elements. The elements are teams, roles, skills, activities, techniques, tools, quality measures, deliverables, and standards &#8211; and team values. The diagram is as applicable to the poetry writing group as for a group of software developers. What gets filled behind each box varies, but the existence of the boxes doesn&#8217;t.</p>
<p>A big-M methodology is 1/3 a matter of individual people doing their individual work, 2/3 thirds their working together, and a few percentage points of technology. Average people produce only average designs. However, all the smartest people together will not produce group success without cooperation, communication and coordination. Most of use have seen or heard of such groups. It would happen as well on a poetry or theatre project as on a software project. So success hinges around cooperation, communication and coordination, which, hinge around the <em>value systems</em> of the people in your organization. These value systems include</p>
<p>What people choose to spend their time on</p>
<p>How they choose to communicate</p>
<p>How decision-making power is distributed.</p>
<p><img src='/get/2354' alt='Image53-.gif' title='Image53-.gif' />A set of factors make every software project different. One set revolves around the cultures of the nation, the organization, and the people. Another set revolves around the size of the project team, the number of people who need to coordinate their work. Another is the technical nature of the work, and alongside that is how life-critical the system is. Each variation of these will indicate the use of a slight variation in the methodology. Jim Highsmith refers to these as variations of the &#8220;fitness landscape&#8221;.</p>
<p>So it is not the case at all that one methodology definition could possibly suit all projects. Don&#8217;t even think that the Rational Unified Process, or the UML Unified Process, or the something something something methodology will fit your project out of the box. In fact, your first guess at the methodology to use on your project will be the worst guess you make, because it is based on no experience with the actual project. Over <em>the course of the project, you will be able to say much better what the most suitable methodology is</em>. But I&#8217;ll get back to that in a minute.</p>
<p>For the moment, let&#8217;s just consider two of the factors that characterize your project: the number of people, and how life-critical it is. That&#8217;s what you see on the grid. I&#8217;d like you to consider that a 200-person project for an atomic power plant should really work in a different way than a 30-person Y2K project for a company, should really work in a different way than a 2-person project to keep scores for the neighborhood soccer league. They are just so different that it would seem strange to try to legislate one methodology for all three of them.</p>
<p>And yet, that&#8217;s what we find. Organizations ask for the One True Methodology for their projects, COBOL and Java and mainframe and internetworked and mission critical and casual and large and small. It just doesn&#8217;t make sense, and I&#8217;d like you all to be conscious of that. And authors publishing the One True Methodology, for all of the above.</p>
<p>These days, we find tailorable methodologies on the market, but most of them are not set up to handle the range of projects you see on the grid. And they don&#8217;t say what their range of applicability is, so you can&#8217;t tell just from reading the cover notes.</p>
<p>So the next idea I&#8217;d like you consider is that every category of project on the grid plausibly has its own, most suited methodology. Further, that within each grid box, each project will have its own slightly different optimal methodology, based on the cultures, the expertise, the strengths and the weaknesses of the people involved.</p>
<p>That means, that your first guess at the methodology to use on your project will be the worst guess. This plays in with our discussion of software development as a game, and the characteristics of people as active devices. One of the characteristics of people is that they learn from feedback &#8211; from seeing results. They learn how to develop software through incremental development, and the sooner the feedback the better.</p>
<p>The punchline of this particular line of thinking is that you will look at the external characteristics of your project &#8211; based upon this grid, among other things &#8211; and nominate your best guess at a methodology. In some sense, it really does not matter what you nominate, although I can suggest that the lightest methodology you can imagine getting away with will probably do you the most good as a starting guess.</p>
<p>Then you make sure you work in increments&#8230; no longer than 4 months for any one increment, preferably shorter. Good people are telling me these days that they distrust increments longer than 2 months, but I am still comfortable with increments of 3-4months duration. So make sure you exercise the entire process every 4 months or sooner &#8211; every team delivers some piece of running, tested code every 4 months or sooner.</p>
<p>And at the end of each increment &#8211; at the start of each increment, if you like &#8211; you ask the following questions:</p>
<p>-what did we do right? what did we do wrong?</p>
<p>-what are our priorities</p>
<p>- what is it most important that we keep?</p>
<p>-what do we change for next time?</p>
<p>-what do we have to add? what can we drop?</p>
<p>After 2 or 3 increments, you will start to converge on a methodology that your project can tolerate, even thrive on.</p>
<p>As you can see, this strategy will not even make sense unless you are developing in increments.</p>
<p>Now I&#8217;m going to add one more piece to that &#8211; ask yourself those questions at least once <em>in the middle of the increment</em>. Ask, &#8220;Are we working in a way that will work for us? Are our groups and teams set up right &#8211; can we even deliver this increment working this way?&#8221; </p>
<p>At the first mid-increment introspection, you are mostly interested in catching catastrophic errors, things in your process that will stop you from succeeding. In later increments, you can make various and sundry improvement and optimizations. In one of our projects, during increment 3 we went through 3 team structures in 2 months. We had delivered twice, but weren&#8217;t comfortable with the way we were working. So we tried a new team structure, and it became quickly obvious that was going to be a total mess. So we changed, and changed again, and found a team structure we stayed with for the next 3 increments. We couldn&#8217;t have done that on the first increment, because on the first increment we were just focussed on getting something out the door.</p>
<h3><img src='/get/2356' alt='Image54-.gif' title='Image54-.gif' /><nowiki><hr/><hr/>&#8212; 6. Crystal Methodologies </nowiki> </h3>
<p>Putting all the above thoughts together results in what I call the Crystal Manifesto of Software Development, or the Crystal Principle. Software development is a cooperative game &#8211; using props and markers to remind and incite,to reach the next move. The endpoint of the game is a delivered system. The next game is to alter or replace the system. The Crystal Principle informs us as to how we should play this game to get our software. The notion of the Game helps us understand when someone else is playing a different game, and gives a handle on how to react.</p>
<p>The family of methodologies that I am working with fit the gaming model, fit the characteristics of humans as nonlinear devices, and fit the grid of methodologies. There are a number of Crystal methodologies &#8211; I rank them by color: Clear, Yellow, Orange, Red, etc., up through Blue and Purple. But all of them are based on being strong on communications, light on intermediate work products, aiming at high-productivity, and being self-evolving.</p>
<p><img src='/get/2358' alt='Image55-.gif' title='Image55-.gif' />I am trying to build them around the strengths and weaknesses of people, to make them something people can live with &#8211; habitable is the word. Each one is aimed at being as light as possible for the project at hand, to make the most sense in a resource-limited, finite, goal-seeking, cooperative, group game.</p>
<h3><nowiki><hr/><hr/><hr/>ENDING </nowiki> </h3>
<p>What is software development, really &#8211; and does it matter? The answer to the second question is Yes, it matters to you a great deal. If software development is really a science, you could apply the scientific method to it. If it is really engineering, then you could apply known engineering techniques. If software development is a matter of producing models, then you should spend your money developing models.</p>
<p>However, it is none of those. It is a &#8220;game&#8221;, a game of speed and cooperation within your team, in competition against other teams. A game against time, and a game for mind-share. You should spend your money to win that game.</p>
<p>Viewing software development as a game gives you better ideas on where to spend your money, how to structure your teams, and how they should allocate their efforts.</p>
<p><img src='/get/2360' alt='Image56-.gif' title='Image56-.gif' />I hope that in this talk I&#8217;ve managed to not exaggerate or lie, but still turn your thoughts in a new direction. Please feel free to visit my website, members.aol.com/acockburn, and pull down the draft text and outlines I have written on Software as a Cooperative Game, and on the lightest, most people tolerant methodology I think can work, Crystal Clear. Thank you.</p>

				</div>
				
			    
			        <a id="discussion"></a>
			        <div class="dtitle-wrapper">
                        <div class="dtitle-column">
                            <h3>Discussion</h3>
                        </div>
                    </div>
                    <div class="dtitle-right">
                        <div id="ctl00_cphBody_divDisTitleRight" class="dtitle-right-pad">
                            <div class="row links">
                                <a id="ctl00_cphBody_hlDisEdit" href="edit/3001">Edit</a>
                            </div>
                        </div>
                    </div>
                    <div class="text-box" style="padding-top:18px; clear:both;">
			              
                    <div id="ctl00_cphBody_ucForm_divCommentForm" class="post-form commentForm">
  <div class="post-cnt">
    <label>Display Name</label>
    <input name="ctl00$cphBody$ucForm$txtDisplayName" type="text" id="ctl00_cphBody_ucForm_txtDisplayName" class="text" /> 
  </div>

    <div class="post-cnt">
    <label>Email (not displayed)</label>
    <input name="ctl00$cphBody$ucForm$txtEmail" type="text" id="ctl00_cphBody_ucForm_txtEmail" class="text" /> 
            
  </div>
  
  

  <div class="post-cnt">
    <label>Comment</label>
    <textarea name="ctl00$cphBody$ucForm$txtComment" rows="10" cols="10" id="ctl00_cphBody_ucForm_txtComment"></textarea> 
    <div id="htmlNote" style="color:#7C7C7C;font-size:11px;clear:both;padding-left:115px;"><strong>NOTE:</strong> Comments containing html hyperlinks will not be saved.</div>
  </div>

  <div id="ctl00_cphBody_ucForm_divCaptcha" class="post-cnt">
    <label>Verification</label>
    
                    <table cellpadding='0' cellspacing='0' border='0' summary='Layout table for CAPTCHA elements' style=''>
                        <tr>
                            <td style='width:150px;height:50px;'>
                                <img id='default_ctl00_cphbody_ucform_captverify_CaptchaImage' src='LanapCaptcha.aspx?get=image&amp;c=default_ctl00_cphbody_ucform_captverify&amp;t=ab20c2ec62434466b3f458e857bcb4d3&amp;s=e2usxr55rd14ts45y0kawxuz' alt='CAPTCHA Code Image' />
                            </td>
                            <td style='height:100%;padding-left:5px;vertical-align:top;'>
                                <a href='LanapCaptcha.aspx?get=sound&amp;c=default_ctl00_cphbody_ucform_captverify&amp;t=ab20c2ec62434466b3f458e857bcb4d3&amp;s=e2usxr55rd14ts45y0kawxuz' onclick='LBD_LoadSound("default_ctl00_cphbody_ucform_captverify_SoundPlaceholder","LanapCaptcha.aspx?get=sound&amp;c=default_ctl00_cphbody_ucform_captverify&amp;t=ab20c2ec62434466b3f458e857bcb4d3&amp;s=e2usxr55rd14ts45y0kawxuz","__LBD_SGC_default_ctl00_cphbody_ucform_captverify");return false;' style='display:block;'>
                                    <img src='/WebResource.axd?d=GRXMzSLvATRZcnyXM9MRpOBiWOLFVGal7QJ3K7Gp83Vr6IZEuw-Tfvo73sTru1GMfdsV36X4xfo9LmTe_Gn_uQ2&amp;t=633783207159687500' alt='Speak the code' style='border:0;' />					
                                </a>
                                <div id='default_ctl00_cphbody_ucform_captverify_SoundPlaceholder' style='visibility:hidden; border:0; width:0; height:0;'>
                                </div>
                            </td>
                        </tr>
                    </table>
                    
  </div>

  <div id="ctl00_cphBody_ucForm_divVerification" class="post-cnt">
    <label>&nbsp;</label>
    <input name="ctl00$cphBody$ucForm$txtVerify" type="text" id="ctl00_cphBody_ucForm_txtVerify" class="text" style="width:140px;" /> 
  </div>

  <div class="post-cnt">
    <label>Remember Me</label>
    <span class="check"><input id="ctl00_cphBody_ucForm_chkRemberMe" type="checkbox" name="ctl00$cphBody$ucForm$chkRemberMe" /></span>
  </div>
    <a onclick="return Comment.validate('ctl00_cphBody_ucForm_');" id="ctl00_cphBody_ucForm_lbSubmitComment" class="post-comm-btn" href="javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions(&quot;ctl00$cphBody$ucForm$lbSubmitComment&quot;, &quot;&quot;, true, &quot;discussion&quot;, &quot;&quot;, false, true))">Post Comment</a>
</div>

			        </div>
			    
		    </div>
      </div>
	    <div class="primary-right">
	        <div class="primary-right-line">
	            
<div id="social">
<a class="icon social-digg" href="http://digg.com/submit?phase=2&url=http://alistair.cockburn.us/Software+development+as+a+cooperative+game&title=Software+development+as+a+cooperative+game" title="Submit to Digg" rel="nofollow">Digg It</a>
<a class="icon social-stumble" href="http://www.stumbleupon.com/submit?url=http://alistair.cockburn.us/Software+development+as+a+cooperative+game&title=Software+development+as+a+cooperative+game" title="Stumble it!" rel="nofollow">Stumble it!</a>
<a class="icon social-del" href="http://del.icio.us/post?url=http://alistair.cockburn.us/Software+development+as+a+cooperative+game&title=Software+development+as+a+cooperative+game" title="Submit to Del.icio.us" rel="nofollow">Del.icio.us</a>
<a class="icon social-tech" href="http://technorati.com/faves?add=http://alistair.cockburn.us/Software+development+as+a+cooperative+game" title="Add to Technorati Favorites" rel="nofollow">Technorati</a>
<a class="icon social-rss" href="feed://alistair.cockburn.us/articles-blog/new/rss" title="Site RSS" rel="nofollow">RSS</a>
<div class="clear"></div>
</div>
	            
	              <div class="short-url"><div><span>Short URL for Page:</span><br />http://ac.cockburn.us/2071</div></div>
	            
<div class="primary-right-pad">
	<p>Top Recommendations</p>
    
            <ul class="recomm-list">
        
            <li>
			    <p>
				    <a href='/What+do+I+call+this+pattern%3f'>What do I call this pattern?</a>
			    </p>
		    </li>
        
            <li>
			    <p>
				    <a href='/Alistair's+scum+talk'>Alistair's scum talk</a>
			    </p>
		    </li>
        
            <li>
			    <p>
				    <a href='/Sample+system+requirements+document' class="discuss-link">Sample system requirements document</a>
			    </p>
		    </li>
        
            <li>
			    <p>
				    <a href='/Methodology+per+project'>Methodology per project</a>
			    </p>
		    </li>
        
            <li>
			    <p>
				    <a href='/JDKrise+Scrum+laid+out.pdf'>JDKrise Scrum laid out.pdf</a>
			    </p>
		    </li>
        
            <li>
			    <p>
				    <a href='/Asdtcgo1dy.ppt'>Asdtcgo1dy.ppt</a>
			    </p>
		    </li>
        
            <li>
			    <p>
				    <a href='/Why+I+withdrew+from+SEMAT' class="discuss-link">Why I withdrew from SEMAT</a>
			    </p>
		    </li>
        
            </ul>
        
</div>
<div class="clear"></div>
	            
<div class="primary-right-pad">
	<p>Tags</p>
    
            <ul class="recomm-list">
        
            <li>
			    <p>
				    <a href='/Articles'>Articles</a>
			    </p>
		    </li>
        
            <li>
			    <p>
				    <a href='/Methodology'>Methodology</a>
			    </p>
		    </li>
        
            <li>
			    <p>
				    <a href='/Scrum'>Scrum</a>
			    </p>
		    </li>
        
            </ul>
        
</div>
<div class="clear"></div>
	            
<div class="primary-right-pad">
    <p>Other</p>
    <ul class="recomm-list">
        <li><p><a id="ctl00_cphBody_ucWlh_hlWhatLinksHere" rel="nofollow" href="/WhatLinksHere?for=2071">What Links Here</a></p></li>
    </ul>
</div>
<div class="clear"></div>
	        </div>
	    </div>
	    <div class="clear"></div>
	</div>
	
<div class="footer-wrapper">
    <ul id="ctl00_cphBody_ucFooter_divFooter" class="footer">
	    <li>
		    Posted by: <strong>Alistair</strong> on <strong>6/19/2008 1:07:05 PM</strong>
	    </li>
	    <li>
		    Last modified by: <strong>The System</strong> on <strong>1/9/2009 12:54:37 PM</strong>
	    </li>	
	    <li class="last">	
		    Visits: <strong>14273</strong>
	    </li>	
    </ul>
</div>

	    <div id="copyright">&copy; 1970-2010 Alistair Cockburn &nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp; <a href="feed://alistair.cockburn.us/rss" rel="nofollow">Full Rss</a> or <a href="feed://alistair.cockburn.us/articles-blog/new/rss" rel="nofollow">New Articles and Blogs Rss</a><span class="tts">another <a href="http://skybend.com">skybend</a> creation</span></div>
	</div>
	
	<!-- fader -->
	<div  id="fader">&nbsp;</div>
	<!-- registration pop up -->
	<div class="registration registration-hide" id="registration_p">
		<div class="registration-top">
			<p class="f-left">
				Sign Up:
			</p>
			<a class="close-btn f-right" id="close_but" href="#">close</a>
		</div>
		<div class="registration-cnt">
			<div class="input-cnt">
                <input type="hidden" name="ctl00$htxtShowPopupHack" id="ctl00_htxtShowPopupHack" />
				<div class="long-input f-left">
					<label>First Name:</label>
					<input name="ctl00$txtFirstName" type="text" maxlength="50" size="40" id="ctl00_txtFirstName" class="text" />
                        
				</div>
				<div class="long-input f-right">
					<label>Last Name:</label>
					<input name="ctl00$txtLastName" type="text" maxlength="80" size="40" id="ctl00_txtLastName" class="text" />
                        
				</div>
			</div>
			<div class="input-cnt border">
				<div class="long-input f-left">
					<label>Display Name:</label>
					<input name="ctl00$txtDisplayName" type="text" maxlength="120" size="40" id="ctl00_txtDisplayName" class="text" />
                        
				</div>
				<div class="long-input f-right">
					<label>Email:</label>
					<input name="ctl00$txtEmail" type="text" maxlength="120" size="40" id="ctl00_txtEmail" class="text" />
                         
                        
                        &nbsp;
				</div>
			</div>
			<div class="input-cnt">
				<div class="long-input f-left">
					<label>Password:</label>
					<input name="ctl00$txtPassword" type="password" size="20" id="ctl00_txtPassword" class="text" />
                        
				</div>
				<div class="long-input f-right">
					<label>Confirm:</label>
					<input name="ctl00$txtConfirm" type="password" size="20" id="ctl00_txtConfirm" class="text" />
                        
                        
				</div>
			</div>
			<label class="check"><input id="ctl00_chkRemberMe" type="checkbox" name="ctl00$chkRemberMe" />Remember me</label>
			<div class="submit-box">
				<a id="ctl00_lbRegister" href="javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions(&quot;ctl00$lbRegister&quot;, &quot;&quot;, true, &quot;SignUp&quot;, &quot;&quot;, false, true))">Sign Up</a>
			</div>
			
		</div>	
		<div class="registration-btm">&nbsp;</div>
	</div>
	<!-- preload -->
	<div class="preload">
		<img src="/images/side-nav.png" />
		<img src="/images/side-nav-green.png" />
		<img src="/images/side-nav-yellow.png" />
		<img src="/images/side-nav-red.png" />
	</div>
    </form>

    
<script type="text/javascript">
	var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
	document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
	try {
	  var pageTracker = _gat._getTracker("UA-7004034-3");
		pageTracker._trackPageview();
	} catch(err) {}
</script>

<!-- Start of StatCounter Code -->
<script type="text/javascript">
    var sc_project = 5257299;
    var sc_invisible = 1;
    var sc_partition = 59;
    var sc_click_stat = 1;
    var sc_security = "e4697bb2"; 
</script>

<script type="text/javascript"
src="http://www.statcounter.com/counter/counter.js"></script><noscript><div
class="statcounter"><a title="free hit counter"
href="http://www.statcounter.com/free_hit_counter.html"
target="_blank"><img class="statcounter"
src="http://c.statcounter.com/5257299/0/e4697bb2/1/"
alt="free hit counter" ></a></div></noscript>
<!-- End of StatCounter Code -->
</body>
</html>
