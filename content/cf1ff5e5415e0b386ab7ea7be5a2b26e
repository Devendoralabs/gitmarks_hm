<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">









 
 








<html>
  <head>
    
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<title>Data API Developer&#39;s Guide: JavaScript - Google Calendar APIs and Tools - Google Code</title>
<script type="text/javascript"><!--
(function(){function a(){this.t={};this.tick=function(c){this.t[c]=(new Date).getTime()};this.tick("start")}var b=new a;window.jstiming={Timer:a,load:b};if(window.external&&window.external.pageT)window.jstiming.pt=window.external.pageT;})();

var _tocPath_ = '/html/apis/calendar/_toc.ezt';
var codesite_token = null;
var logged_in_user_email = null;
//--></script>
<link href="/css/codesite.pack.04102009.css" type="text/css" rel="stylesheet">
<script src="/js/codesite_head.pack.04102009.js" type="text/javascript"></script>
<script type="text/javascript">CODESITE_CSITimer['load'].tick('bhs');</script>
<link rel="search" type="application/opensearchdescription+xml" title="Google Code" href="/osd.xml">

<!--[if IE]><link rel="stylesheet" type="text/css" href="/css/iehacks.css"><![endif]-->

  <link href="/apis/calendar/css/local_extensions.css" type="text/css" rel="stylesheet">
<script type="text/javascript">
<!--
var cancelBubble = false;

function goTo(url) {
  window.location = url;
}
//-->
</script>
  </head>

  <body class="gc-documentation">

    <div id="gb">
 <span>
  
   
    <a href="#"
       id="projects-dropdown" onclick="return false;"
       ><span style="text-decoration:underline">My favorites</span> <span style="font-size:.75em;">&#9660;</span></a>
    |
  
    <a id="lang-dropdown" href="/" onclick="return false;"><span style="text-decoration:underline">English</span> <span style="font-size:.75em;">&#9660;</span></a>
  
   
    | <a href="https://www.google.com/accounts/Login?continue=http%3A%2F%2Fcode.google.com%2Fapis%2Fcalendar%2Fdata%2F1.0%2Fdevelopers_guide_js.html&amp;followup=http%3A%2F%2Fcode.google.com%2Fapis%2Fcalendar%2Fdata%2F1.0%2Fdevelopers_guide_js.html" onclick="CODESITE_click('/gb/sc/signin');"><span style="style:text-decoration:underline">Sign in</span></a>
   
  
 </span>
</div>

<div class="gbh" style="left:0px;"></div>
<div class="gbh" style="right:0px;"></div>

<div id="gc-container">
<a id="top"></a>
<div id="skipto">
  
  
</div>

<div id="gc-header">
  <div id="logo"><a href="/">
  
  
     <img src="/images/code_logo.gif" height="40" width="167" alt="Google Code" style="border:0;margin:3px 0 0 0;">
  
  
  </a></div>
  <div id="search">
    <div id="searchForm">
      <form id="cse" action="http://www.google.com/cse" accept-charset="utf-8" onsubmit="executeGSearch(document.getElementById('gsearchInput').value); return false;">
      <noscript>
      <input type="hidden" name="cref" value="http://code.google.com/cse/googlecode-context.xml">
      </noscript>
      <div id="gsc-search-box">
        <input id="gsearchInput" type="text" name="q" maxlength="2048" class="gsc-input" autocomplete="off" title="Google Code Search" style="width:345px">
        <div id="cs-searchresults" onclick="event.cancelBubble = true;"></div>
        <input title="Search" id="gsearchButton" class="gsc-search-button" name="sa" value="Search" type="submit">
        <div class="greytext">e.g. "adwords" or "open source"</div>
      </div>
      </form>
    </div> <!-- end searchForm -->
  </div> <!-- end search -->




</div> <!-- end gc-header -->


<div id="codesiteContent">

<a id="gc-topnav-anchor"></a>
<div id="gc-topnav">
  <h1 style="padding:0 0 0 6px;">Google Calendar APIs and Tools</h1>
  <ul id="docs" class="gc-topnav-tabs">

    <li id="home_link">
      <a href="/apis/calendar/" title="Google Calendar APIs and Tools home page">Home</a>
    </li>
  
    <li id="docs_link">
      <a href="/apis/calendar/overview/" class="selected" title="Official Google Calendar APIs and Tools documentation">Docs</a>
    </li>
  
    <li id="faq_link">
      <a href="/apis/calendar/faq.html" title="Answers to frequently asked questions about Google Calendar APIs and Tools">FAQ</a>
    </li>
  
    <li id="articles_link">
      <a href="/apis/calendar/articles/" title="Focused articles and tutorials for Google Calendar APIs and Tools developers">Articles</a>
    </li>
  
    <li>
      <a href="http://googleappsdeveloper.blogspot.com/" title="Official Google Calendar APIs and Tools blog">Blog</a>
    </li>
  
    <li>
      <a href="/apis/calendar/community/" title="Community home for Google Calendar APIs and Tools">Community</a>
    </li>
  
    <li>
      <a href="/apis/calendar/terms.html" title="Google Calendar APIs and Tools terms of service">Terms</a>
    </li>
  

  </ul>
</div> <!-- end gc-topnav -->

    <div class="g-section g-tpl-170">

      <a name="toc"></a>  
      <div class="g-unit g-first" id="gc-toc">
        <ul>
  <li><h2>Getting Started</h2>
    <ul>
      <li><a href="/apis/calendar/overview/">API Overview Guide</a></li>
    </ul>
  </li>
</ul>
<div class="line"></div>
<ul>
  <li><h2>Calendar Data API</h2>
    <ul>
      <li><a href="/apis/calendar/data/2.0/developers_guide.html">Developer's Guide</a></li>
      <li>
        <ul>
          <li><span class="tlw-title">Version 2.0 <sup>(Current)</sup></span>
            <ul>
              <li><a href="/apis/calendar/data/2.0/developers_guide_protocol.html">Protocol Guide</a></li>
              <li><a href="/apis/calendar/data/2.0/reference.html">Atom Reference</a></li>
              <div class="line" style="margin:.6em 0 0 1em;"></div>
              <li><a href="/apis/calendar/data/2.0/developers_guide_dotnet.html">.NET Guide</a></li>
              <li><a href="/apis/calendar/data/2.0/developers_guide_java.html">Java Guide</a></li>
            </ul>
          </li>
          <li><span class="tlw-title">Version 1.0</span>
            <ul>
              <li><a href="/apis/calendar/data/1.0/developers_guide_protocol.html">Protocol Guide</a></li>
              <li><a href="/apis/calendar/data/1.0/reference.html">Atom Reference</a></li>
              <div class="line" style="margin:.6em 0 0 1em;"></div>
              <li><a href="/apis/calendar/data/1.0/developers_guide_dotnet.html">.NET Guide</a></li>
              <li><a href="/apis/calendar/data/1.0/developers_guide_java.html">Java Guide</a></li>
              <li><a href="/apis/calendar/data/1.0/developers_guide_js.html">JavaScript Guide</a></li>
              <li><a href="/apis/calendar/data/1.0/developers_guide_php.html">PHP Guide</a></li>
              <li><a href="/apis/calendar/data/1.0/developers_guide_python.html">Python Guide</a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="/apis/calendar/changelog.html">API Changelog</a></li>
      <li><a href="/apis/calendar/code.html">Libraries and Code</a></li>
    </ul>
  </li>
</ul>
<div class="line"></div>

<ul>
  <li><h2>Google Data Protocol</h2>
    <ul>
      <li><a href="/apis/gdata/docs/developers-guide.html">Developer's Guide</a></li>
      <div class="line" style="margin:.6em 0 .3em 1.2em;"></div>
      <li><a href="/apis/gdata/docs/batch.html">Batch Processing Guide</a></li>
      <li><a href="/apis/gdata/docs/auth/overview.html">Authentication Guide</a>
    </ul>
  </li>
</ul>
      


<div class="line"></div>
<ul>
  <li><h2>Calendar Gadgets (Labs)</h2>
    <ul>
      <li><a href="/apis/calendar/gadgets/event/">Event Gadgets</a>
      <li><a href="/apis/calendar/gadgets/sidebar/">Sidebar Gadgets</a>
    </ul>
  </li>
</ul>
<div class="line"></div>
<ul>
  <li><h2>CalDAV (Labs)</h2>
    <ul>
      <li><a href="/apis/calendar/caldav/">Developer's Guide</a></li>
    </ul>
  </li>
</ul>
<div class="line"></div>
<ul>
  <li><h2>Publishing Tools</h2>
    <ul>
      <li><a href="http://www.google.com/calendar/embedhelper">Embeddable Calendar</a></li>
      <li><a href="http://www.google.com/googlecalendar/event_publisher_guide.html">Event Publisher</a></li>
    </ul>
  </li>
</ul>
<div class="line"></div>
<ul>
  <li><h2>Additional Resources</h2>
    <ul>
      <li><a href="http://www.google.com/enterprise/marketplace/">Solutions Marketplace</a></li>
      <li><a href="/apis/calendar/faq.html">FAQ</a></li>
      <li><a href="http://groups.google.com/group/google-calendar-help-dataapi?hl=en">Developer Forum</a></li>
      <li><a href="/p/gdata-issues/issues/list?q=label:API-Calendar">Issue Tracker</a></li>
    </ul>
  </li>
</ul>

      </div>
       
      <div class="g-unit" id="gc-pagecontent">
        <script type="text/javascript">CODESITE_docEarlyProcessing();</script>
        <h1 class="page_title">Data API Developer&#39;s Guide: JavaScript</h1>


    <img style="float:right; margin-left:10px; margin-bottom:5px;" src="/apis/calendar/images/data-api-150.png">

    <p>This document describes how to use the JavaScript client library to send Google Data API queries and interpret returned responses.</p>
    <p>Google provides a set of client libraries, in a variety of programming languages, for interacting with services that have Data APIs. Using these libraries, you can construct Google Data API requests, send them to a service, and receive responses.</p>
    <p>This document provides some general information about using the JavaScript client library, along with a set of examples of common uses.</p>

    <h1>Contents</h1>

<div class="sidebox">  
  <div align="center">
    <br /><br /><a href="http://www.youtube.com/watch?v=KS2S3WQYE18"><img src="/apis/calendar/images/JSCalendarThumb.png" alt="JS Video screenshot" /></a>
    <p>Watch <a href="http://www.youtube.com/watch?v=KS2S3WQYE18">a video</a> of Austin demonstrating the JavaScript client library.</p>
  </div>
</div>

    <div class="toc">
      <ol>
        <li><a href="#Audience">Audience</a></li>
        <li><a href="#Terms">Terms of use</a></li>
        <li><a href="#Model">Data model and control flow overview</a> </li>
        <li><a href="#Supported_Environments">About supported environments</a></li>
        <li><a href="#Samples">Sample client applications</a></li>
        <li><a href="#GettingStarted">Getting started</a>
          <ol>
            <li><a href="#Acquire_Library">Acquiring the library</a></li>
            <li><a href="#Request_Feed_Unauthenticated">Requesting an unauthenticated feed</a></li>
            <li><a href="#Authenticating">Authenticating</a></li>                           
          </ol>
        <li><a href="#Interactive_Samples">Interactive tutorial samples</a><span class="new">New!</span></li> 
        </li>
      </ol>
    </div>

    <a name="Audience"></a><h1>Audience</h1>
    <p>This document is intended for JavaScript programmers who want to write client applications that can interact with services.</p>
    <p>This document assumes that you understand the general ideas behind the <a href="/apis/gdata/basics.html">Google Data APIs protocol</a>. It also assumes that you know how to program in JavaScript.</p>
    <p>For reference information about the classes and methods provided by the client library, see the <a href="/apis/gdata/jsdoc/">JavaScript client library API reference</a>.</p>
    <p>This document is designed to be read in order; each example builds on earlier examples.</p>
    <a name="Terms"></a><h1>Terms of use</h1>
    <p>You agree to abide by the <a href="/apis/gdata/client-js-terms.html">Google JavaScript Client Library Terms of Use</a> when using the JavaScript client library. </p>
    <a name="Model"></a><h1>Data model and control flow overview</h1>
    <p>The JavaScript client library uses a set of classes to represent the elements used by the Google Data APIs.</p>
    <p class="note"><strong>Note</strong>: The underlying representation of the data is JSON, but the client library provides an abstraction layer so you don't have to work with the JSON data directly. If you want to work directly with JSON, without the client library, see <a href="/apis/gdata/json.html">Using JSON with Google Data APIs</a>. </p>
    <p>The library provides methods that let you asynchronously send data to and
    receive data from a service that has a Data API. For example, the
    <code>google.gdata.calendar.CalendarService.getEventsFeed()</code> method
    sends a request for a feed to Google Calendar. One of the parameters you
    pass is a continuation function, also known as a callback; the service
    returns the feed, in JSON format, by calling the continuation function.
    Within the callback function you call various <code>get</code> methods to use the data in the form of JavaScript objects.</p>
    <p>To add a new entry, you create the entry using the client library's classes and methods, then call the <code>feed.insertEntry()</code> method to send the new entry to the service. Again you provide a continuation function, which the service calls when the entry has been successfully added.</p>
    <p>If you're new to JavaScript, the control flow may be a little confusing. After calling a method like <code>getEventsFeed()</code> or <code>insertEntry()</code>, in most cases your script ends. Execution resumes in the continuation function when the service returns the requested data. Therefore, anything that your client does to the returned data should be done in the continuation function, or called from that function. You may need to make some variables global in order to use them in multiple functions.</p>
    <p>For more information about this style of programming, see "<a href="http://en.wikipedia.org/wiki/Continuation-passing_style">Continuation-passing style</a>" in Wikipedia.</p>
    <a name="Supported_Environments"></a><h1>About supported environments</h1>
    <p>Currently, we only support JavaScript client applications that run in a web page in a browser.  Currently supported browsers are Firefox 1.5 and higher, and Internet Explorer 6.0 and higher.</p>
    <p>The JavaScript client library handles all communication with the service's server.  If you're an experienced JS developer, you may be thinking, "But what about the <a href="http://www.mozilla.org/projects/security/components/same-origin.html" target="_blank">same origin policy</a>?" The JavaScript client library allows your client to send Google Data API requests from any domain while remaining compliant with the browser security model.</p>
    <a name="Samples"></a><h1>Sample client applications</h1>
    <p>To see the JavaScript client library in action, visit our <a href="/apis/gdata/samples.html">samples page</a>.</p>
    <a name="GettingStarted"></a><h1>Getting Started</h1>
    <p>The following examples show how to send various requests to Google Calendar using the JavaScript client library.</p>
    <a name="Acquire_Library"></a><h2>Acquiring the library</h2>
    <p>Before your client can use the client library, the client has to request the client library code from the server.</p>
    <p>Start by using a <code>&lt;script&gt;</code> tag in the <code>&lt;head&gt;</code> section of your HTML document to fetch the Google AJAX API loader:</p>
    <pre class="prettyprint lang-xml">&lt;script type="text/javascript" src="http://www.google.com/jsapi"&gt;&lt;/script&gt;</pre>

    <p>To acquire the Google Data APIs client library after fetching the loader, use the following line in your JavaScript setup code, which must be called from the <code>&lt;head&gt;</code> section of your HTML document (or from a JavaScript file that's included using a <code>&lt;script&gt;</code> tag in the <code>&lt;head&gt;</code> section of your HTML document):</p>
    <pre class="prettyprint">google.load("gdata", "1");</pre>
    <p>The second parameter to <code>google.load()</code> is the requested version number of the JavaScript client library.&nbsp;&nbsp;Our version numbering scheme is modeled after the one used by the Google Maps API.&nbsp;&nbsp;We recommend specifying version <code>"1"</code>, which automatically returns the second-to-last revision of major version 1.&nbsp;&nbsp;If you want to test your client with the very latest version of the client library, specify version <code>"1.x"</code>.</p>
    <p>Based on the feedback we receive from developers, we will occasionally declare a certain version of the client library to be "stable."&nbsp;&nbsp;To use the latest stable version of the library, specify version <code>"1.s"</code>; however, that version may not have the latest features.</p>
    <p>If you want a specific version of the library, you can specify a major and minor revision number, such as <code>"1.0"</code>.</p>
    <p>After you've called <code>google.load()</code>, you  have to tell the loader to wait until the page finishes loading and then call your code:</p>
    <pre class="prettyprint">google.setOnLoadCallback(getMyFeed);</pre>
    <p>Where <code>getMyFeed()</code> is a function defined in the next section of this document. Use this approach instead of having an <code>onload</code> handler attached to the <code>&lt;body&gt;</code> element.</p>
    <a name="Request_Feed_Unauthenticated"></a><h2>Requesting an unauthenticated feed</h2>
    <p>To request an unauthenticated feed, add the following code to your JavaScript file, or to a <code>&lt;script&gt;</code> tag in your HTML file.</p>
    <p>In the following code, <code>getMyFeed()</code> is called first (by the AJAX API loader, as described in the previous section).</p>
    <p>It calls <code>setupMyService()</code> to create a connection (represented by a CalendarService object) to Google Calendar. We've pulled the service creation code out into a separate function for modularity; later, we'll modify the <code>setupMyService()</code> function, depending on your authentication choices.</p>
    <p>After setting up the service, <code>getMyFeed()</code> calls the client library's <code>getEventsFeed()</code> method to request the feed.</p>
    <p>We're specifying the feed URL in a global variable so that it can be used in later functions. In this example, we're using the public (unauthenticated) feed URL for a user named liz@gmail.com.</p>
    <pre class="prettyprint">var myService;
var feedUrl = "https://www.google.com/calendar/feeds/liz@gmail.com/public/full";

function setupMyService() {
  myService = new google.gdata.calendar.CalendarService('exampleCo-exampleApp-1');
}

function getMyFeed() {
  setupMyService();
 
  myService.getEventsFeed(feedUrl, handleMyFeed, handleError);
}</pre>
    <p>Note that we're making <code>myService</code> a global variable, for ease of use in later functions.</p>
    <p>To make the above code work in your own client, you have to use a real user's email address, for a Calendar account with a publicly shared calendar. </p>
    <p class="note"><strong>Note</strong>: When you create a new CalendarService object, the client library calls a method named <code>google.gdata.client.init()</code>, which checks that the browser the client is running in is supported. If there's an error, then the client library displays an error message to the user. If you want to handle this sort of error yourself, then you can explicitly call <code>google.gdata.client.init(handleInitError)</code> before you create the service, where <code>handleInitError()</code> is your function. If an init error occurs, then your function receives a standard Error object; you can do whatever you want with that object.</p>
    <p>In the call to <code>getEventsFeed()</code>, the second argument is <code>handleMyFeed</code>, which is a callback function; see below. Google Calendar processes the request and then, if the request was successful, passes a "feed root" object containing the requested feed to the callback. A feed root is a container object that contains a feed. </p>
    <p>The third argument to <code>getEventsFeed()</code> is an optional error-handling function; if the client library encounters an error, it calls the specified error handler instead of the success callback function. The object that the client library passes as the argument to the error handler is an instance of the <a href="http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Error">JavaScript <code>Error</code> object</a>, with an additional <code>cause</code> property.</p>
    <p>Here are simple versions of the callback function and the error-handler: </p>
    <pre class="prettyprint">function handleMyFeed(myResultsFeedRoot) {
  alert("This feed's title is: " + myResultsFeedRoot.feed.getTitle().getText());
}

function handleError(e) {
  alert("There was an error!");
  alert(e.cause ? e.cause.statusText : e.message);
}</pre>
    <p>We're handling errors by simply displaying them to the user; your client's error handler should probably be more sophisticated. In some contexts, there may be no cause specified, so in those cases our example error handler falls back to displaying the standard <code>message</code> property.</p>
    <p>Note that since this code doesn't do authentication, you can use it only to get a public feed.</p>
    <a name="Authenticating"></a><h2>Authenticating</h2>
    <p>The JavaScript client library uses the AuthSub authentication system. For  information about authentication, see the <a href="/apis/gdata/auth.html">Google Data APIs Authentication Overview</a> document. The rest of this section assumes that you're familiar with the basics of how this system works.</p>
    <p>Before using  authentication with the sample code provided in this document, change the feed URL from public to private:</p>
    <pre class="prettyprint">var feedUrl = "https://www.google.com/calendar/feeds/liz@gmail.com/private/full";</pre>
    <h3>Authenticating in a web client with AuthSub</h3>
    <p>Here's a brief overview of what happens during the  authentication process for a web-based JavaScript client:</p>
    <ol>
      <li>The client application calls the <code>google.accounts.user.login()</code> method provided by the client library, passing it a "scope" value that indicates which Google service to use. For Google Calendar, the scope is <code>https://www.google.com/calendar/feeds/</code>.</li>
      <li>The client library sends the   browser  to Google's "Access Request" page, where the user can enter their credentials to log in to the service.</li>
      <li>If the user logs in successfully, then the AuthSub system sends the browser back to the web client's URL, passing along  the authentication token.</li>
      <li>The JavaScript client library stores the token in a cookie and returns control to the client application's function that called <code>google.accounts.user.login()</code>.</li>
      <li>When the client application subsequently calls client library methods that interact with Calendar, the client library automatically attaches the token to all requests.</li>
    </ol>
    <p class="note"><strong>Note</strong>: For the JavaScript client library to make authenticated Calendar requests in a web browser, your page must contain an image that's hosted at the same domain as your page. It can be any image, even a single-pixel transparent image, but there must be an image on the page. If you want the image to not appear on your page, you can use the <code>style</code> attribute of the <code>&lt;img&gt;</code> tag to position the image outside the rendering area. For example: <code>style="position:absolute; top: -1000px;"</code></p>
    <p>Here's the client-application code that handles logging in. In this example, we're replacing the <code>setupMyService()</code> function from the previous example with a new version that calls a login function.</p>
    <pre class="prettyprint">function logMeIn() {
  scope = "https://www.google.com/calendar/feeds/";
  var token = google.accounts.user.login(scope);
}

function setupMyService() {
  myService = new google.gdata.calendar.CalendarService('exampleCo-exampleApp-1');
  logMeIn();
}</pre>
    <p class="note"><strong>Tip</strong>: We strongly recommend that you provide a login button or other user input mechanism to prompt the user to start the login process manually. If, instead, you call <code>google.accounts.user.login()</code> immediately after loading, without waiting for user interaction, then the first thing the user sees on arrival at your page is a Google login page. If the user decides not to log in, then Google does not direct them back to your page; so from the user's point of view, they tried to visit your page but were sent away and never sent back. This scenario may be confusing and frustrating to users. Note that the example code above does call <code>google.accounts.user.login()</code> immediately after loading, to keep the example simple, but we don't recommend this approach for real-world client applications.</p>
    <p>Note that you don't have to do anything with the variable named <code>token</code>; the client library keeps track of the token, so you don't have to.</p>
    <p>The  token remains valid until you revoke   it by calling <code>google.accounts.user.logout()</code>:</p>
    <pre class="prettyprint">function logMeOut() {
  google.accounts.user.logout();
}</pre>
    <p>If you don't call <code>logout()</code>, then the cookie that stores the token lasts for two years, unless the user deletes it. The cookie is retained across browser sessions, so the user can close their browser and then reopen it and come back to your client and they'll still be logged in.</p>
    <p>However, there are certain unusual circumstances in which a token can become invalid during a session. If Google Calendar  rejects a token, your client should handle the error condition by calling <code>logout()</code> to remove the cookie containing the current token, and then calling <code>login()</code> again to acquire a new, valid token.</p>
    <p>There are two other AuthSub methods that you may find useful in various contexts:</p>
    <ul>
      <li><code>google.accounts.user.checkLogin(scope)</code> tells you whether or not the browser currently has an authentication token for the given scope.</li>
      <li><code>google.accounts.user.getInfo()</code> provides detailed information about the current token, for debugging use.</li>
    </ul>
    <p>For details about using JavaScript to interact with AuthSub, including information on token management and on <code>checkLogin()</code> and <code>getInfo()</code>, see the <a href="/apis/gdata/authsub-js.html">Using "AuthSub" Authentication with the JavaScript Client Library</a> document.</p>
    
    <a name="Interactive_Samples"></a> 
    <h1>Interactive tutorial samples</h1>  

    <p>
      <a name="Interactive_Samples"></a>
      <iframe id="jsguide" frameborder="0"
      src="http://gdata-jsguide.appspot.com/static/calendar/index.html"
      width="100%" height="15500px"></iframe>
    </p>   

       
          </div><!-- end gc-pagecontent -->
       </div><!-- end gooey wrapper -->
    
        </div> <!-- end codesite content -->


<div id="gc-footer" dir="ltr">
  <div class="text">
    
    &copy;2010 Google -
    <a href="/">Code Home</a> -
    <a href="/terms.html">Terms of Service</a> -
    <a href="/privacy.html">Privacy Policy</a> -
    <a href="/more/">Site Directory</a>
    <br> <br>
    Google Code offered in:
    <a href="/intl/en/">English</a> -
    <a href="/intl/es/">Español</a> -
    <a href="/intl/ja/">日本語</a> -
    <a href="/intl/ko/">한국어</a> -
    <a href="/intl/pt-BR/">Português</a> -
    <a href="/intl/ru/">Pусский</a> -
    <a href="/intl/zh-CN/">中文(简体)</a> -
    <a href="/intl/zh-TW/">中文(繁體)</a>
  </div>
</div><!-- end gc-footer -->

</div><!-- end gc-container -->

<script type="text/javascript">CODESITE_CSITimer['load'].tick('ats');</script>
<script src="/js/codesite_tail.pack.04102009.js" type="text/javascript"></script>




<script type="text/javascript">
var _gaq = _gaq || [];

_gaq.push(


    ['siteTracker._setAccount', 'UA-18071-1'],
    ['siteTracker._setDomainName', 'code.google.com'],
    ['siteTracker._setCookiePath', window.location.pathname.substring(0,
        window.location.pathname.lastIndexOf('/') + 1)],
    ['siteTracker._trackPageview']
);
(function() {
  var ga = document.createElement('script');

  ga.type = 'text/javascript';
  ga.async = true;
  ga.src = 'http://www.google-analytics.com/ga.js';
  (document.getElementsByTagName('head')[0] ||
   document.getElementsByTagName('body')[0]).appendChild(ga);
 })();
</script>



    
      </body>
    </html>
    
