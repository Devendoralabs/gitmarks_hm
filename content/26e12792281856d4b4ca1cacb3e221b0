<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>Snap Account Signup</title>
<link rel="stylesheet" type="text/css" href="styles/account.css" />
<script type="text/javascript" src="javascript/tab.js"></script>
<script type='text/javascript'>
function toggle_section(num) {
  si = document.getElementById('section_'+num+'_img');
  sd = document.getElementById('section_'+num+'_div');
  sm = document.getElementById('section_'+num+'_more');
  if (si.src.indexOf('/images/icon-more.gif') >= 0) {
    sd.style.display = 'inline';
    sm.style.display = 'none';
    si.src = '/images/icon-less.gif';
  } else {
    sd.style.display = 'none';
    sm.style.display = 'inline';
    si.src = '/images/icon-more.gif';
  }
}
</script>
</head>

<body>
<div id="shell">

<div id="topbar">
	<div id="logo">
		<a href="/"><img src="/images/topbar-logo.gif" alt="Snap Shots" title="Snap Shots" /></a>
	</div>
	<div id="toplinks">
		Not logged in | <a href="/login.php">Log In</a> | <a href="http://snap.com/snapshots_faq.php">Help</a>	</div>
</div>


<script>var currentTab = 'customize';</script>

<div id="tip1" class="tooltip">
With this option enabled, a small icon will be added at <br />
the end of your active links, signaling to your users <br />
which of your links have Snap Shots and which do not.</div> 

<div id="tip2" class="tooltip">
With this option enabled, the trigger hot-zone for the Snap Shots <br />
will be limited to the link icon only, which in turn will decrease <br />
the chances of your users accidentally triggering Snap Shots.</div>

<div id="tip3" class="tooltip">
With this option enabled, Snap Shots will be enabled for links <br />
pointing to pages on your own site. Not recommended for sites <br />
where all pages look the same, unless they have RSS.</div>

<div id="tip4" class="tooltip">
With this option enabled, all Shots on your site will be displayed <br />
as the default thumbnail screen-capture. Selecting this option <br />
severely limits the level of interactivity of Snap Shots.</div>

<div id="tip5" class="tooltip">
With this option enabled, Snap Shots will be enabled for links <br />
pointing to pages on other sites.</div>

<script type="text/javascript">


/*  Prototype JavaScript framework, version 1.4.0
 *  (c) 2005 Sam Stephenson <sam@conio.net>
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://prototype.conio.net/
 *
/*--------------------------------------------------------------------------*/

var Prototype = {
  Version: '1.4.0',
  ScriptFragment: '(?:<script.*?>)((\n|\r|.)*?)(?:<\/script>)',

  emptyFunction: function() {},
  K: function(x) {return x}
}

var Class = {
  create: function() {
    return function() {
      this.initialize.apply(this, arguments);
    }
  }
}

var Abstract = new Object();

Object.extend = function (destination, source) {
  for (property in source) {
    destination[property] = source[property];
  }
  return destination;
}

Object.inspect = function(object) {
  try {
    if (object == undefined) return 'undefined';
    if (object == null) return 'null';
    return object.inspect ? object.inspect() : object.toString();
  } catch (e) {
    if (e instanceof RangeError) return '...';
    throw e;
  }
}

/*** XXX: the default prototype bind leaks memory like a sieve
 *** XXX: see prototype_extensions.js for the safe version */
Function.prototype.bind = function() {
  var __method = this, args = $A(arguments), object = args.shift();
  return function() {
    return __method.apply(object, args.concat($A(arguments)));
  }
}
/***/

Function.prototype.bindAsEventListener = function(object) {
  var __method = this;
  return function(event) {
    return __method.call(object, event || window.event);
  }
}

Object.extend(Number.prototype, {
  toColorPart: function() {
    var digits = this.toString(16);
    if (this < 16) return '0' + digits;
    return digits;
  },

  succ: function() {
    return this + 1;
  },

  times: function(iterator) {
    $R(0, this, true).each(iterator);
    return this;
  }
});

var Try = {
  these: function() {
    var returnValue;

    for (var i = 0; i < arguments.length; i++) {
      var lambda = arguments[i];
      try {
        returnValue = lambda();
        break;
      } catch (e) {}
    }

    return returnValue;
  }
}







/*** SnapShot ***/
SnapShot = Class.create();
Object.extend(SnapShot.prototype, {
  initialize: function () {
    this.time = new Array();
  },

  store: function () {
    var index = this.time.length;
    this.time[index] = new Date();
//    this.time[index].start_time = new Date();
  },

  reset: function () {
    this.time = new Array();
  },

  // the elapsed time of the watch.  if the watch hasn't been stopped, get the time that has elapsed so far
  peek: function () {

  },
  

  alert: function () {
    window.alert(this.peek());
  }
});

MultiSnapShot = Class.create();
Object.extend(MultiSnapShot.prototype, {
  initialize: function() {
    this.watches = {};
  },
  
  store: function(w) {
    if (! this.watches[w])
      this.watches[w] = new SnapShot();
    this.watches[w].store();
  },

  reset_all: function() {
    this.watches = {};
  },

  output: function() {  
    str = '';
    for (var w in this.watches) {
      if (typeof w != 'function') {
        for (var i = 0; i < this.watches[w].time.length; i++) {
          str += '&'+w+'_'+i+'='+this.watches[w].time[i].getTime();
        }
      }
    }
    return str;
  }

});




/*--------------------------------------------------------------------------*/

var PeriodicalExecuter = Class.create();
PeriodicalExecuter.prototype = {
  initialize: function(callback, frequency) {
    this.callback = callback;
    this.frequency = frequency;
    this.currentlyExecuting = false;

    this.registerCallback();
  },

  registerCallback: function() {
    setInterval(this.onTimerEvent.bind(this), this.frequency * 1000);
  },

  onTimerEvent: function() {
    if (!this.currentlyExecuting) {
      try {
        this.currentlyExecuting = true;
        this.callback();
      } finally {
        this.currentlyExecuting = false;
      }
    }
  }
}

/*--------------------------------------------------------------------------*/

function $() {
  var elements = new Array();

  for (var i = 0; i < arguments.length; i++) {
    var element = arguments[i];
    if (typeof element == 'string')
      element = document.getElementById(element);

    if (arguments.length == 1)
      return element;

    elements.push(element);
  }

  return elements;
}
Object.extend(String.prototype, {
  stripTags: function() {
    return this.replace(/<\/?[^>]+>/gi, '');
  },

  stripScripts: function() {
    return this.replace(new RegExp(Prototype.ScriptFragment, 'img'), '');
  },

  extractScripts: function() {
    var matchAll = new RegExp(Prototype.ScriptFragment, 'img');
    var matchOne = new RegExp(Prototype.ScriptFragment, 'im');
    return (this.match(matchAll) || []).map(function(scriptTag) {
      return (scriptTag.match(matchOne) || ['', ''])[1];
    });
  },

  evalScripts: function() {
    return this.extractScripts().map(eval);
  },

/*
  escapeHTML: function() {
    var div = document.createElement('div');
    var text = document.createTextNode(this);
    div.appendChild(text);
    return div.innerHTML;
  },
  */

/*
  unescapeHTML: function() {
    var div = document.createElement('div');
    div.innerHTML = this.stripTags();
    return div.childNodes[0] ? div.childNodes[0].nodeValue : '';
  },
  */

  toQueryParams: function() {
    var pairs = this.match(/^\??(.*)$/)[1].split('&');
    return pairs.inject({}, function(params, pairString) {
      var pair = pairString.split('=');
      params[pair[0]] = pair[1];
      return params;
    });
  },

  toArray: function() {
    return this.split('');
  },

  camelize: function() {
    var oStringList = this.split('-');
    if (oStringList.length == 1) return oStringList[0];

    var camelizedString = this.indexOf('-') == 0
      ? oStringList[0].charAt(0).toUpperCase() + oStringList[0].substring(1)
      : oStringList[0];

    for (var i = 1, len = oStringList.length; i < len; i++) {
      var s = oStringList[i];
      camelizedString += s.charAt(0).toUpperCase() + s.substring(1);
    }

    return camelizedString;
  },

  inspect: function() {
    return "'" + this.replace('\\', '\\\\').replace("'", '\\\'') + "'";
  }
});

String.prototype.parseQuery = String.prototype.toQueryParams;

var $break    = new Object();
var $continue = new Object();

var Enumerable = {
  each: function(iterator) {
    var index = 0;
    try {
      this._each(function(value) {
        try {
          iterator(value, index++);
        } catch (e) {
          if (e != $continue) throw e;
        }
      });
    } catch (e) {
      if (e != $break) throw e;
    }
  },

  all: function(iterator) {
    var result = true;
    this.each(function(value, index) {
      result = result && !!(iterator || Prototype.K)(value, index);
      if (!result) throw $break;
    });
    return result;
  },

  any: function(iterator) {
    var result = true;
    this.each(function(value, index) {
      if (result = !!(iterator || Prototype.K)(value, index))
        throw $break;
    });
    return result;
  },

  collect: function(iterator) {
    var results = [];
    this.each(function(value, index) {
      results.push(iterator(value, index));
    });
    return results;
  },

  detect: function (iterator) {
    var result;
    this.each(function(value, index) {
      if (iterator(value, index)) {
        result = value;
        throw $break;
      }
    });
    return result;
  },

  findAll: function(iterator) {
    var results = [];
    this.each(function(value, index) {
      if (iterator(value, index))
        results.push(value);
    });
    return results;
  },

/*
  grep: function(pattern, iterator) {
    var results = [];
    this.each(function(value, index) {
      var stringValue = value.toString();
      if (stringValue.match(pattern))
        results.push((iterator || Prototype.K)(value, index));
    })
    return results;
  },
  */

  include: function(object) {
    var found = false;
    this.each(function(value) {
      if (value == object) {
        found = true;
        throw $break;
      }
    });
    return found;
  },

  inject: function(memo, iterator) {
    this.each(function(value, index) {
      memo = iterator(memo, value, index);
    });
    return memo;
  },

/*
  invoke: function(method) {
    var args = $A(arguments).slice(1);
    return this.collect(function(value) {
      return value[method].apply(value, args);
    });
  },
  */

  max: function(iterator) {
    var result;
    this.each(function(value, index) {
      value = (iterator || Prototype.K)(value, index);
      if (value >= (result || value))
        result = value;
    });
    return result;
  },

  min: function(iterator) {
    var result;
    this.each(function(value, index) {
      value = (iterator || Prototype.K)(value, index);
      if (value <= (result || value))
        result = value;
    });
    return result;
  },

  partition: function(iterator) {
    var trues = [], falses = [];
    this.each(function(value, index) {
      ((iterator || Prototype.K)(value, index) ?
        trues : falses).push(value);
    });
    return [trues, falses];
  },

  pluck: function(property) {
    var results = [];
    this.each(function(value, index) {
      results.push(value[property]);
    });
    return results;
  },

  reject: function(iterator) {
    var results = [];
    this.each(function(value, index) {
      if (!iterator(value, index))
        results.push(value);
    });
    return results;
  },

/*
  sortBy: function(iterator) {
    return this.collect(function(value, index) {
      return {value: value, criteria: iterator(value, index)};
    }).sort(function(left, right) {
      var a = left.criteria, b = right.criteria;
      return a < b ? -1 : a > b ? 1 : 0;
    }).pluck('value');
  },
  */

  toArray: function() {
    return this.collect(Prototype.K);
  },

  zip: function() {
    var iterator = Prototype.K, args = $A(arguments);
    if (typeof args.last() == 'function')
      iterator = args.pop();

    var collections = [this].concat(args).map($A);
    return this.map(function(value, index) {
      iterator(value = collections.pluck(index));
      return value;
    });
  },

  inspect: function() {
    return '#<Enumerable:' + this.toArray().inspect() + '>';
  }
}

Object.extend(Enumerable, {
  map:     Enumerable.collect,
  find:    Enumerable.detect,
  select:  Enumerable.findAll,
  member:  Enumerable.include,
  entries: Enumerable.toArray
});
var $A = Array.from = function(iterable) {
  if (!iterable) return [];
  if (iterable.toArray) {
    return iterable.toArray();
  } else {
    var results = [];
    for (var i = 0; i < iterable.length; i++)
      results.push(iterable[i]);
    return results;
  }
}

Object.extend(Array.prototype, Enumerable);

Array.prototype._reverse = Array.prototype.reverse;

Object.extend(Array.prototype, {
  _each: function(iterator) {
    for (var i = 0; i < this.length; i++)
      iterator(this[i]);
  },

  clear: function() {
    this.length = 0;
    return this;
  },

  first: function() {
    return this[0];
  },

  last: function() {
    return this[this.length - 1];
  },

  compact: function() {
    return this.select(function(value) {
      return value != undefined || value != null;
    });
  },

  flatten: function() {
    return this.inject([], function(array, value) {
      return array.concat(value.constructor == Array ?
        value.flatten() : [value]);
    });
  },

  without: function() {
    var values = $A(arguments);
    return this.select(function(value) {
      return !values.include(value);
    });
  },

  indexOf: function(object) {
    for (var i = 0; i < this.length; i++)
      if (this[i] == object) return i;
    return -1;
  },

  reverse: function(inline) {
    return (inline !== false ? this : this.toArray())._reverse();
  },

  shift: function() {
    var result = this[0];
    for (var i = 0; i < this.length - 1; i++)
      this[i] = this[i + 1];
    this.length--;
    return result;
  },

  inspect: function() {
    return '[' + this.map(Object.inspect).join(', ') + ']';
  }
});
var Hash = {
  _each: function(iterator) {
    for (key in this) {
      var value = this[key];
      if (typeof value == 'function') continue;

      var pair = [key, value];
      pair.key = key;
      pair.value = value;
      iterator(pair);
    }
  },

  keys: function() {
    return this.pluck('key');
  },

  values: function() {
    return this.pluck('value');
  },

  merge: function(hash) {
    return $H(hash).inject($H(this), function(mergedHash, pair) {
      mergedHash[pair.key] = pair.value;
      return mergedHash;
    });
  },

/*
  toQueryString: function() {
    return this.map(function(pair) {
      return pair.map(encodeURIComponent).join('=');
    }).join('&');
  },
  */

  inspect: function() {
    return '#<Hash:{' + this.map(function(pair) {
      return pair.map(Object.inspect).join(': ');
    }).join(', ') + '}>';
  }
}

function $H(object) {
  var hash = Object.extend({}, object || {});
  Object.extend(hash, Enumerable);
  Object.extend(hash, Hash);
  return hash;
}
ObjectRange = Class.create();
Object.extend(ObjectRange.prototype, Enumerable);
Object.extend(ObjectRange.prototype, {
  initialize: function(start, end, exclusive) {
    this.start = start;
    this.end = end;
    this.exclusive = exclusive;
  },

  _each: function(iterator) {
    var value = this.start;
    do {
      iterator(value);
      value = value.succ();
    } while (this.include(value));
  },

  include: function(value) {
    if (value < this.start)
      return false;
    if (this.exclusive)
      return value < this.end;
    return value <= this.end;
  }
});

var $R = function(start, end, exclusive) {
  return new ObjectRange(start, end, exclusive);
}

var Ajax = {
  getTransport: function() {
    return Try.these(
      function() {return new ActiveXObject('Msxml2.XMLHTTP')},
      function() {return new ActiveXObject('Microsoft.XMLHTTP')},
      function() {return new XMLHttpRequest()}
    ) || false;
  },

  activeRequestCount: 0
}

Ajax.Responders = {
  responders: [],

  _each: function(iterator) {
    this.responders._each(iterator);
  },

  register: function(responderToAdd) {
    if (!this.include(responderToAdd))
      this.responders.push(responderToAdd);
  },

  unregister: function(responderToRemove) {
    this.responders = this.responders.without(responderToRemove);
  },

  dispatch: function(callback, request, transport, json) {
    this.each(function(responder) {
      if (responder[callback] && typeof responder[callback] == 'function') {
        try {
          responder[callback].apply(responder, [request, transport, json]);
        } catch (e) {}
      }
    });
  }
};

Object.extend(Ajax.Responders, Enumerable);

Ajax.Responders.register({
  onCreate: function() {
    Ajax.activeRequestCount++;
  },

  onComplete: function() {
    Ajax.activeRequestCount--;
  }
});

Ajax.Base = function() {};
Ajax.Base.prototype = {
  setOptions: function(options) {
    this.options = {
      method:       'post',
      asynchronous: true,
      parameters:   ''
    }
    Object.extend(this.options, options || {});
  },

  responseIsSuccess: function() {
    return this.transport.status == undefined
        || this.transport.status == 0
        || (this.transport.status >= 200 && this.transport.status < 300);
  },

  responseIsFailure: function() {
    return !this.responseIsSuccess();
  }
}

Ajax.Request = Class.create();
Ajax.Request.Events =
  ['Uninitialized', 'Loading', 'Loaded', 'Interactive', 'Complete'];

Ajax.Request.prototype = Object.extend(new Ajax.Base(), {
  initialize: function(url, options) {
    this.transport = Ajax.getTransport();
    this.setOptions(options);
    this.request(url);
  },

  request: function(url) {
    var parameters = this.options.parameters || '';
    // XXX: commented out by Barry because he has no concept of how this could be relevant (03/02/2006)
    // if (parameters.length > 0) parameters += '&_=';
    try {
      this.url = url;
      if (this.options.method == 'get' && parameters.length > 0)
        this.url += (this.url.match(/\?/) ? '&' : '?') + parameters;

      Ajax.Responders.dispatch('onCreate', this, this.transport);

      this.transport.open(this.options.method, this.url,
        this.options.asynchronous);

      if (this.options.asynchronous) {
        this.transport.onreadystatechange = this.onStateChange.bind(this);
        setTimeout((function() {this.respondToReadyState(1)}).bind(this), 10);
      }

      this.setRequestHeaders();

      var body = this.options.postBody ? this.options.postBody : parameters;
      this.transport.send(this.options.method == 'post' ? body : null);

    } catch (e) {
      this.dispatchException(e);
    }
  },

  setRequestHeaders: function() {
    var requestHeaders =
      ['X-Requested-With', 'XMLHttpRequest',
       'X-Prototype-Version', Prototype.Version];

    if (this.options.method == 'post') {
      requestHeaders.push('Content-type',
        'application/x-www-form-urlencoded');

      /* Force "Connection: close" for Mozilla browsers to work around
       * a bug where XMLHttpReqeuest sends an incorrect Content-length
       * header. See Mozilla Bugzilla #246651.
       */
      if (this.transport.overrideMimeType)
        requestHeaders.push('Connection', 'close');
    }

    if (this.options.requestHeaders)
      requestHeaders.push.apply(requestHeaders, this.options.requestHeaders);

    for (var i = 0; i < requestHeaders.length; i += 2)
      this.transport.setRequestHeader(requestHeaders[i], requestHeaders[i+1]);
  },

  onStateChange: function() {
    var readyState = this.transport.readyState;
    if (readyState != 1)
      this.respondToReadyState(this.transport.readyState);
  },

  header: function(name) {
    try {
      return this.transport.getResponseHeader(name);
    } catch (e) {}
  },

  evalJSON: function() {
    try {
      return eval(this.header('X-JSON'));
    } catch (e) {}
  },

  evalResponse: function() {
    try {
      return eval(this.transport.responseText);
    } catch (e) {
      this.dispatchException(e);
    }
  },

  respondToReadyState: function(readyState) {
    var event = Ajax.Request.Events[readyState];
    var transport = this.transport, json = this.evalJSON();

    if (event == 'Complete') {
      try {
        (this.options['on' + this.transport.status]
         || this.options['on' + (this.responseIsSuccess() ? 'Success' : 'Failure')]
         || Prototype.emptyFunction)(transport, json);
      } catch (e) {
        this.dispatchException(e);
      }

      if ((this.header('Content-type') || '').match(/^text\/javascript/i))
        this.evalResponse();
    }

    try {
      (this.options['on' + event] || Prototype.emptyFunction)(transport, json);
      Ajax.Responders.dispatch('on' + event, this, transport, json);
    } catch (e) {
      this.dispatchException(e);
    }

    /* Avoid memory leak in MSIE: clean up the oncomplete event handler */
    if (event == 'Complete')
      this.transport.onreadystatechange = Prototype.emptyFunction;
  },

  dispatchException: function(exception) {
    (this.options.onException || Prototype.emptyFunction)(this, exception);
    Ajax.Responders.dispatch('onException', this, exception);
  }
});

Ajax.Updater = Class.create();

Object.extend(Object.extend(Ajax.Updater.prototype, Ajax.Request.prototype), {
  initialize: function(container, url, options) {
    this.containers = {
      success: container.success ? $(container.success) : $(container),
      failure: container.failure ? $(container.failure) :
        (container.success ? null : $(container))
    }

    this.transport = Ajax.getTransport();
    this.setOptions(options);

    var onComplete = this.options.onComplete || Prototype.emptyFunction;
    this.options.onComplete = (function(transport, object) {
      this.updateContent();
      onComplete(transport, object);
    }).bind(this);

    this.request(url);
  },

  updateContent: function() {
    var receiver = this.responseIsSuccess() ?
      this.containers.success : this.containers.failure;
    var response = this.transport.responseText;

    if (!this.options.evalScripts)
      response = response.stripScripts();

    if (receiver) {
      if (this.options.insertion) {
        new this.options.insertion(receiver, response);
      } else {
        Element.update(receiver, response);
      }
    }

    if (this.responseIsSuccess()) {
      if (this.onComplete)
        setTimeout(this.onComplete.bind(this), 10);
    }
  }
});

Ajax.PeriodicalUpdater = Class.create();
Ajax.PeriodicalUpdater.prototype = Object.extend(new Ajax.Base(), {
  initialize: function(container, url, options) {
    this.setOptions(options);
    this.onComplete = this.options.onComplete;

    this.frequency = (this.options.frequency || 2);
    this.decay = (this.options.decay || 1);

    this.updater = {};
    this.container = container;
    this.url = url;

    this.start();
  },

  start: function() {
    this.options.onComplete = this.updateComplete.bind(this);
    this.onTimerEvent();
  },

  stop: function() {
    this.updater.onComplete = undefined;
    clearTimeout(this.timer);
    (this.onComplete || Prototype.emptyFunction).apply(this, arguments);
  },

  updateComplete: function(request) {
    if (this.options.decay) {
      this.decay = (request.responseText == this.lastText ?
        this.decay * this.options.decay : 1);

      this.lastText = request.responseText;
    }
    this.timer = setTimeout(this.onTimerEvent.bind(this),
      this.decay * this.frequency * 1000);
  },

  onTimerEvent: function() {
    this.updater = new Ajax.Updater(this.container, this.url, this.options);
  }
});
document.getElementsByClassName = function(className, parentElement) {
  var children = ($(parentElement) || document.body).getElementsByTagName('*');
  return $A(children).inject([], function(elements, child) {
    if (child.className.match(new RegExp("(^|\\s)" + className + "(\\s|$)")))
      elements.push(child);
    return elements;
  });
}

/*--------------------------------------------------------------------------*/

if (!window.Element) {
  var Element = new Object();
}

Object.extend(Element, {
  visible: function(element) {
    return $(element).style.display != 'none';
  },

  toggle: function() {
    for (var i = 0; i < arguments.length; i++) {
      var element = $(arguments[i]);
      Element[Element.visible(element) ? 'hide' : 'show'](element);
    }
  },

  hide: function() {
    for (var i = 0; i < arguments.length; i++) {
      var element = $(arguments[i]);
      element.style.display = 'none';
    }
  },

  show: function() {
    for (var i = 0; i < arguments.length; i++) {
      var element = $(arguments[i]);
      element.style.display = '';
    }
  },

  remove: function(element) {
    element = $(element);
    element.parentNode.removeChild(element);
  },

  update: function(element, html) {
    $(element).innerHTML = html.stripScripts();
    setTimeout(function() {html.evalScripts()}, 10);
  },

  getHeight: function(element) {
    element = $(element);
    return element.offsetHeight;
  },

  classNames: function(element) {
    return new Element.ClassNames(element);
  },

  hasClassName: function(element, className) {
    if (!(element = $(element))) return;
    return Element.classNames(element).include(className);
  },

  addClassName: function(element, className) {
    if (!(element = $(element))) return;
    return Element.classNames(element).add(className);
  },

  removeClassName: function(element, className) {
    if (!(element = $(element))) return;
    return Element.classNames(element).remove(className);
  },

  // removes whitespace-only text node children
  /*
  cleanWhitespace: function(element) {
    element = $(element);
    for (var i = 0; i < element.childNodes.length; i++) {
      var node = element.childNodes[i];
      if (node.nodeType == 3 && !/\S/.test(node.nodeValue))
        Element.remove(node);
    }
  },
  */

  empty: function(element) {
    return $(element).innerHTML.match(/^\s*$/);
  },

  scrollTo: function(element) {
    element = $(element);
    var x = element.x ? element.x : element.offsetLeft,
        y = element.y ? element.y : element.offsetTop;
    window.scrollTo(x, y);
  },

  getStyle: function(element, style) {
    element = $(element);
    var value = element.style[style.camelize()];
    if (!value) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        var css = document.defaultView.getComputedStyle(element, null);
        value = css ? css.getPropertyValue(style) : null;
      } else if (element.currentStyle) {
        value = element.currentStyle[style.camelize()];
      }
    }

    if (window.opera && ['left', 'top', 'right', 'bottom'].include(style))
      if (Element.getStyle(element, 'position') == 'static') value = 'auto';

    return value == 'auto' ? null : value;
  }

/*
  ,
  setStyle: function(element, style) {
    element = $(element);
    for (name in style)
      element.style[name.camelize()] = style[name];
  },
  */

/*
  getDimensions: function(element) {
    element = $(element);
    if (Element.getStyle(element, 'display') != 'none')
      return {width: element.offsetWidth, height: element.offsetHeight};

    // All *Width and *Height properties give 0 on elements with display none,
    // so enable the element temporarily
    var els = element.style;
    var originalVisibility = els.visibility;
    var originalPosition = els.position;
    els.visibility = 'hidden';
    els.position = 'absolute';
    els.display = '';
    var originalWidth = element.clientWidth;
    var originalHeight = element.clientHeight;
    els.display = 'none';
    els.position = originalPosition;
    els.visibility = originalVisibility;
    return {width: originalWidth, height: originalHeight};
  },
  */

/*
  makePositioned: function(element) {
    element = $(element);
    var pos = Element.getStyle(element, 'position');
    if (pos == 'static' || !pos) {
      element._madePositioned = true;
      element.style.position = 'relative';
      // Opera returns the offset relative to the positioning context, when an
      // element is position relative but top and left have not been defined
      if (window.opera) {
        element.style.top = 0;
        element.style.left = 0;
      }
    }
  },
  */

/*
  undoPositioned: function(element) {
    element = $(element);
    if (element._madePositioned) {
      element._madePositioned = undefined;
      element.style.position =
        element.style.top =
        element.style.left =
        element.style.bottom =
        element.style.right = '';
    }
  },
  */

/*
  makeClipping: function(element) {
    element = $(element);
    if (element._overflow) return;
    element._overflow = element.style.overflow;
    if ((Element.getStyle(element, 'overflow') || 'visible') != 'hidden')
      element.style.overflow = 'hidden';
  },
  */

/*
  undoClipping: function(element) {
    element = $(element);
    if (element._overflow) return;
    element.style.overflow = element._overflow;
    element._overflow = undefined;
  }
  */
});

var Toggle = new Object();
Toggle.display = Element.toggle;

/*--------------------------------------------------------------------------*/

Abstract.Insertion = function(adjacency) {
  this.adjacency = adjacency;
}

Abstract.Insertion.prototype = {
  initialize: function(element, content) {
    this.element = $(element);
    this.content = content.stripScripts();

    if (this.adjacency && this.element.insertAdjacentHTML) {
      try {
        this.element.insertAdjacentHTML(this.adjacency, this.content);
      } catch (e) {
        if (this.element.tagName.toLowerCase() == 'tbody') {
          this.insertContent(this.contentFromAnonymousTable());
        } else {
          throw e;
        }
      }
    } else {
      this.range = this.element.ownerDocument.createRange();
      if (this.initializeRange) this.initializeRange();
      this.insertContent([this.range.createContextualFragment(this.content)]);
    }

    setTimeout(function() {content.evalScripts()}, 10);
  },

  contentFromAnonymousTable: function() {
    var div = document.createElement('div');
    div.innerHTML = '<table><tbody>' + this.content + '</tbody></table>';
    return $A(div.childNodes[0].childNodes[0].childNodes);
  }
}

var Insertion = new Object();

Insertion.Before = Class.create();
Insertion.Before.prototype = Object.extend(new Abstract.Insertion('beforeBegin'), {
  initializeRange: function() {
    this.range.setStartBefore(this.element);
  },

  insertContent: function(fragments) {
    fragments.each((function(fragment) {
      this.element.parentNode.insertBefore(fragment, this.element);
    }).bind(this));
  }
});

Insertion.Top = Class.create();
Insertion.Top.prototype = Object.extend(new Abstract.Insertion('afterBegin'), {
  initializeRange: function() {
    this.range.selectNodeContents(this.element);
    this.range.collapse(true);
  },

  insertContent: function(fragments) {
    fragments.reverse(false).each((function(fragment) {
      this.element.insertBefore(fragment, this.element.firstChild);
    }).bind(this));
  }
});

Insertion.Bottom = Class.create();
Insertion.Bottom.prototype = Object.extend(new Abstract.Insertion('beforeEnd'), {
  initializeRange: function() {
    this.range.selectNodeContents(this.element);
    this.range.collapse(this.element);
  },

  insertContent: function(fragments) {
    fragments.each((function(fragment) {
      this.element.appendChild(fragment);
    }).bind(this));
  }
});

Insertion.After = Class.create();
Insertion.After.prototype = Object.extend(new Abstract.Insertion('afterEnd'), {
  initializeRange: function() {
    this.range.setStartAfter(this.element);
  },

  insertContent: function(fragments) {
    fragments.each((function(fragment) {
      this.element.parentNode.insertBefore(fragment,
        this.element.nextSibling);
    }).bind(this));
  }
});

/*--------------------------------------------------------------------------*/

Element.ClassNames = Class.create();
Element.ClassNames.prototype = {
  initialize: function(element) {
    this.element = $(element);
  },

  _each: function(iterator) {
    this.element.className.split(/\s+/).select(function(name) {
      return name.length > 0;
    })._each(iterator);
  },

  set: function(className) {
    this.element.className = className;
  },

  add: function(classNameToAdd) {
    if (this.include(classNameToAdd)) return;
    this.set(this.toArray().concat(classNameToAdd).join(' '));
  },

  remove: function(classNameToRemove) {
    if (!this.include(classNameToRemove)) return;
    this.set(this.select(function(className) {
      return className != classNameToRemove;
    }).join(' '));
  },

  toString: function() {
    return this.toArray().join(' ');
  }
}

Object.extend(Element.ClassNames.prototype, Enumerable);
var Field = {
  clear: function() {
    for (var i = 0; i < arguments.length; i++)
      $(arguments[i]).value = '';
  },

  focus: function(element) {
    $(element).focus();
  },

  present: function() {
    for (var i = 0; i < arguments.length; i++)
      if ($(arguments[i]).value == '') return false;
    return true;
  },

  select: function(element) {
    $(element).select();
  },

  activate: function(element) {
    element = $(element);
    element.focus();
    if (element.select)
      element.select();
  }
}

/*--------------------------------------------------------------------------*/

var Form = {
  serialize: function(form) {
    var elements = Form.getElements($(form));
    var queryComponents = new Array();

    for (var i = 0; i < elements.length; i++) {
      var queryComponent = Form.Element.serialize(elements[i]);
      if (queryComponent)
        queryComponents.push(queryComponent);
    }

    return queryComponents.join('&');
  },

  getElements: function(form) {
    form = $(form);
    var elements = new Array();

    for (tagName in Form.Element.Serializers) {
      var tagElements = form.getElementsByTagName(tagName);
      for (var j = 0; j < tagElements.length; j++)
        elements.push(tagElements[j]);
    }
    return elements;
  },

/*
  getInputs: function(form, typeName, name) {
    form = $(form);
    var inputs = form.getElementsByTagName('input');

    if (!typeName && !name)
      return inputs;

    var matchingInputs = new Array();
    for (var i = 0; i < inputs.length; i++) {
      var input = inputs[i];
      if ((typeName && input.type != typeName) ||
          (name && input.name != name))
        continue;
      matchingInputs.push(input);
    }

    return matchingInputs;
  },
  */

  disable: function(form) {
    var elements = Form.getElements(form);
    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];
      element.blur();
      element.disabled = 'true';
    }
  },

  enable: function(form) {
    var elements = Form.getElements(form);
    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];
      element.disabled = '';
    }
  },

  findFirstElement: function(form) {
    return Form.getElements(form).find(function(element) {
      return element.type != 'hidden' && !element.disabled &&
        ['input', 'select', 'textarea'].include(element.tagName.toLowerCase());
    });
  },

/*
  focusFirstElement: function(form) {
    Field.activate(Form.findFirstElement(form));
  },
  */

  reset: function(form) {
    $(form).reset();
  }
}

Form.Element = {
  serialize: function(element) {
    element = $(element);
    var method = element.tagName.toLowerCase();
    var parameter = Form.Element.Serializers[method](element);

    if (parameter) {
      var key = encodeURIComponent(parameter[0]);
      if (key.length == 0) return;

      if (parameter[1].constructor != Array)
        parameter[1] = [parameter[1]];

      return parameter[1].map(function(value) {
        return key + '=' + encodeURIComponent(value);
      }).join('&');
    }
  },

  getValue: function(element) {
    element = $(element);
    var method = element.tagName.toLowerCase();
    var parameter = Form.Element.Serializers[method](element);

    if (parameter)
      return parameter[1];
  }
}

Form.Element.Serializers = {
  input: function(element) {
    switch (element.type.toLowerCase()) {
      case 'submit':
      case 'hidden':
      case 'password':
      case 'text':
        return Form.Element.Serializers.textarea(element);
      case 'checkbox':
      case 'radio':
        return Form.Element.Serializers.inputSelector(element);
    }
    return false;
  },

  inputSelector: function(element) {
    if (element.checked)
      return [element.name, element.value];
  },

  textarea: function(element) {
    return [element.name, element.value];
  },

  select: function(element) {
    return Form.Element.Serializers[element.type == 'select-one' ?
      'selectOne' : 'selectMany'](element);
  },

  selectOne: function(element) {
    var value = '', opt, index = element.selectedIndex;
    if (index >= 0) {
      opt = element.options[index];
      value = opt.value;
      if (!value && !('value' in opt))
        value = opt.text;
    }
    return [element.name, value];
  },

  selectMany: function(element) {
    var value = new Array();
    for (var i = 0; i < element.length; i++) {
      var opt = element.options[i];
      if (opt.selected) {
        var optValue = opt.value;
        if (!optValue && !('value' in opt))
          optValue = opt.text;
        value.push(optValue);
      }
    }
    return [element.name, value];
  }
}

/*--------------------------------------------------------------------------*/

var $F = Form.Element.getValue;

/*--------------------------------------------------------------------------*/

Abstract.TimedObserver = function() {}
Abstract.TimedObserver.prototype = {
  initialize: function(element, frequency, callback) {
    this.frequency = frequency;
    this.element   = $(element);
    this.callback  = callback;

    this.lastValue = this.getValue();
    this.registerCallback();
  },

  registerCallback: function() {
    setInterval(this.onTimerEvent.bind(this), this.frequency * 1000);
  },

  onTimerEvent: function() {
    var value = this.getValue();
    if (this.lastValue != value) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  }
}

Form.Element.Observer = Class.create();
Form.Element.Observer.prototype = Object.extend(new Abstract.TimedObserver(), {
  getValue: function() {
    return Form.Element.getValue(this.element);
  }
});

Form.Observer = Class.create();
Form.Observer.prototype = Object.extend(new Abstract.TimedObserver(), {
  getValue: function() {
    return Form.serialize(this.element);
  }
});

/*--------------------------------------------------------------------------*/

Abstract.EventObserver = function() {}
Abstract.EventObserver.prototype = {
  initialize: function(element, callback) {
    this.element  = $(element);
    this.callback = callback;

    this.lastValue = this.getValue();
    if (this.element.tagName.toLowerCase() == 'form')
      this.registerFormCallbacks();
    else
      this.registerCallback(this.element);
  },

  onElementEvent: function() {
    var value = this.getValue();
    if (this.lastValue != value) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  },

  registerFormCallbacks: function() {
    var elements = Form.getElements(this.element);
    for (var i = 0; i < elements.length; i++)
      this.registerCallback(elements[i]);
  },

  registerCallback: function(element) {
    if (element.type) {
      switch (element.type.toLowerCase()) {
        case 'checkbox':
        case 'radio':
          Event.observe(element, 'click', this.onElementEvent.bind(this));
          break;
        case 'password':
        case 'text':
        case 'textarea':
        case 'select-one':
        case 'select-multiple':
          Event.observe(element, 'change', this.onElementEvent.bind(this));
          break;
      }
    }
  }
}

Form.Element.EventObserver = Class.create();
Form.Element.EventObserver.prototype = Object.extend(new Abstract.EventObserver(), {
  getValue: function() {
    return Form.Element.getValue(this.element);
  }
});

Form.EventObserver = Class.create();
Form.EventObserver.prototype = Object.extend(new Abstract.EventObserver(), {
  getValue: function() {
    return Form.serialize(this.element);
  }
});
if (!window.Event) {
  var Event = new Object();
}

Object.extend(Event, {
  KEY_BACKSPACE: 8,
  KEY_TAB:       9,
  KEY_RETURN:   13,
  KEY_ESC:      27,
  KEY_LEFT:     37,
  KEY_UP:       38,
  KEY_RIGHT:    39,
  KEY_DOWN:     40,
  KEY_DELETE:   46,

  element: function(event) {
    return event.target || event.srcElement;
  },

  isLeftClick: function(event) {
    return (((event.which) && (event.which == 1)) ||
            ((event.button) && (event.button == 1)));
  },

  pointerX: function(event) {
    return event.pageX || (event.clientX +
      (document.documentElement.scrollLeft || document.body.scrollLeft));
  },

  pointerY: function(event) {
    return event.pageY || (event.clientY +
      (document.documentElement.scrollTop || document.body.scrollTop));
  },

  stop: function(event) {
    if (event.preventDefault) {
      event.preventDefault();
      event.stopPropagation();
      event.returnValue = false;
    } else {
      event.returnValue = false;
      event.cancelBubble = true;
    }
  },

  // find the first node with the given tagName, starting from the
  // node the event was triggered on; traverses the DOM upwards
  /*
  findElement: function(event, tagName) {
    var element = Event.element(event);
    while (element.parentNode && (!element.tagName ||
        (element.tagName.toUpperCase() != tagName.toUpperCase())))
      element = element.parentNode;
    return element;
  },
  */

  observers: false,

  // XXX: modified by Barry 02/23/2006
  _observeAndCache: function(element, name, observer, useCapture) {
    if (!this.observers) this.observers = [];
    if (!element.__observers) element.__observers = [];
    if (element.addEventListener) {
      element.__observers.push(this.observers.length);
      this.observers.push([element, name, observer, useCapture]);
      element.addEventListener(name, observer, useCapture);
    } else if (element.attachEvent) {
      element.__observers.push(this.observers.length);
      this.observers.push([element, name, observer, useCapture]);
      element.attachEvent('on' + name, observer);
    }
  },

  // XXX: added by Barry 02/23/2006
  unobserveElement: function (element) {
    var element = $(element);
    if (!element.__observers) return;
    for (var i = 0; i < element.__observers.length; i++) {
      var observerId = element.__observers[i];
      Event.stopObserving.apply(this, Event.observers[observerId]);
      Event.observers[observerId][0] = null;
    }
    element.__observers = false;
  },

  // XXX: modified by Barry 02/23/2006
  unloadCache: function() {
    if (!Event.observers) return;
    for (var i = 0; i < Event.observers.length; i++) {
      if (Event.observers[i][0]) {
        Event.stopObserving.apply(this, Event.observers[i]);
        Event.observers[i][0] = null;
      }
    }
    Event.observers = false;
  },

  observe: function(element, name, observer, useCapture) {
    var element = $(element);
    useCapture = useCapture || false;

    if (name == 'keypress' &&
        (navigator.appVersion.match(/Konqueror|Safari|KHTML/)
        || element.attachEvent))
      name = 'keydown';

    this._observeAndCache(element, name, observer, useCapture);

    // XXX: added by Barry to allow observing of Firefox scrollwheeling
    if (name == 'mousewheel') { this._observeAndCache(element, 'DOMMouseScroll', observer, useCapture); }
  },

  stopObserving: function(element, name, observer, useCapture) {
    var element = $(element);
    useCapture = useCapture || false;

    if (name == 'keypress' &&
        (navigator.appVersion.match(/Konqueror|Safari|KHTML/)
        || element.detachEvent))
      name = 'keydown';

    if (element.removeEventListener) {
      element.removeEventListener(name, observer, useCapture);
    } else if (element.detachEvent) {
      element.detachEvent('on' + name, observer);
    }
  }
});

/* prevent memory leaks in IE */
Event.observe(window, 'unload', Event.unloadCache, false);
var Position = {
  // set to true if needed, warning: firefox performance problems
  // NOT neeeded for page scrolling, only if draggable contained in
  // scrollable elements
  includeScrollOffsets: false,

  // must be called before calling withinIncludingScrolloffset, every time the
  // page is scrolled
  prepare: function() {
    this.deltaX =  window.pageXOffset
                || document.documentElement.scrollLeft
                || document.body.scrollLeft
                || 0;
    this.deltaY =  window.pageYOffset
                || document.documentElement.scrollTop
                || document.body.scrollTop
                || 0;
  },

  realOffset: function(element) {
    var valueT = 0, valueL = 0;
    do {
      valueT += element.scrollTop  || 0;
      valueL += element.scrollLeft || 0;
      element = element.parentNode;
    } while (element);
    return [valueL, valueT];
  },

  cumulativeOffset: function(element) {
    var valueT = 0, valueL = 0;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      element = element.offsetParent;
    } while (element);
    return [valueL, valueT];
  },

  positionedOffset: function(element) {
    var valueT = 0, valueL = 0;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      element = element.offsetParent;
      if (element) {
        p = Element.getStyle(element, 'position');
        if (p == 'relative' || p == 'absolute') break;
      }
    } while (element);
    return [valueL, valueT];
  },

  offsetParent: function(element) {
    if (element.offsetParent) return element.offsetParent;
    if (element == document.body) return element;

    while ((element = element.parentNode) && element != document.body)
      if (Element.getStyle(element, 'position') != 'static')
        return element;

    return document.body;
  },

  // caches x/y coordinate pair to use with overlap
  within: function(element, x, y) {
    if (this.includeScrollOffsets)
      return this.withinIncludingScrolloffsets(element, x, y);
    this.xcomp = x;
    this.ycomp = y;
    this.offset = this.cumulativeOffset(element);

    return (y >= this.offset[1] &&
            y <  this.offset[1] + element.offsetHeight &&
            x >= this.offset[0] &&
            x <  this.offset[0] + element.offsetWidth);
  },

  withinIncludingScrolloffsets: function(element, x, y) {
    var offsetcache = this.realOffset(element);

    this.xcomp = x + offsetcache[0] - this.deltaX;
    this.ycomp = y + offsetcache[1] - this.deltaY;
    this.offset = this.cumulativeOffset(element);

    return (this.ycomp >= this.offset[1] &&
            this.ycomp <  this.offset[1] + element.offsetHeight &&
            this.xcomp >= this.offset[0] &&
            this.xcomp <  this.offset[0] + element.offsetWidth);
  },

  // within must be called directly before
  overlap: function(mode, element) {
    if (!mode) return 0;
    if (mode == 'vertical')
      return ((this.offset[1] + element.offsetHeight) - this.ycomp) /
        element.offsetHeight;
    if (mode == 'horizontal')
      return ((this.offset[0] + element.offsetWidth) - this.xcomp) /
        element.offsetWidth;
  },

  clone: function(source, target) {
    source = $(source);
    target = $(target);
    target.style.position = 'absolute';
    var offsets = this.cumulativeOffset(source);
    target.style.top    = offsets[1] + 'px';
    target.style.left   = offsets[0] + 'px';
    target.style.width  = source.offsetWidth + 'px';
    target.style.height = source.offsetHeight + 'px';
  },

  page: function(forElement) {
    var valueT = 0, valueL = 0;

    var element = forElement;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;

      // Safari fix
      if (element.offsetParent==document.body)
        if (Element.getStyle(element,'position')=='absolute') break;

    } while (element = element.offsetParent);

    element = forElement;
    do {
      valueT -= element.scrollTop  || 0;
      valueL -= element.scrollLeft || 0;
    } while (element = element.parentNode);

    return [valueL, valueT];
  },

  clone: function(source, target) {
    var options = Object.extend({
      setLeft:    true,
      setTop:     true,
      setWidth:   true,
      setHeight:  true,
      offsetTop:  0,
      offsetLeft: 0
    }, arguments[2] || {})

    // find page position of source
    source = $(source);
    var p = Position.page(source);

    // find coordinate system to use
    target = $(target);
    var delta = [0, 0];
    var parent = null;
    // delta [0,0] will do fine with position: fixed elements,
    // position:absolute needs offsetParent deltas
    if (Element.getStyle(target,'position') == 'absolute') {
      parent = Position.offsetParent(target);
      delta = Position.page(parent);
    }

    // correct by body offsets (fixes Safari)
    if (parent == document.body) {
      delta[0] -= document.body.offsetLeft;
      delta[1] -= document.body.offsetTop;
    }

    // set position
    if(options.setLeft)   target.style.left  = (p[0] - delta[0] + options.offsetLeft) + 'px';
    if(options.setTop)    target.style.top   = (p[1] - delta[1] + options.offsetTop) + 'px';
    if(options.setWidth)  target.style.width = source.offsetWidth + 'px';
    if(options.setHeight) target.style.height = source.offsetHeight + 'px';
  }

/*
  ,
  absolutize: function(element) {
    element = $(element);
    if (element.style.position == 'absolute') return;
    Position.prepare();

    var offsets = Position.positionedOffset(element);
    var top     = offsets[1];
    var left    = offsets[0];
    var width   = element.clientWidth;
    var height  = element.clientHeight;

    element._originalLeft   = left - parseFloat(element.style.left  || 0);
    element._originalTop    = top  - parseFloat(element.style.top || 0);
    element._originalWidth  = element.style.width;
    element._originalHeight = element.style.height;

    element.style.position = 'absolute';
    element.style.top    = top + 'px';;
    element.style.left   = left + 'px';;
    element.style.width  = width + 'px';;
    element.style.height = height + 'px';;
  },
  */

/*
  relativize: function(element) {
    element = $(element);
    if (element.style.position == 'relative') return;
    Position.prepare();

    element.style.position = 'relative';
    var top  = parseFloat(element.style.top  || 0) - (element._originalTop || 0);
    var left = parseFloat(element.style.left || 0) - (element._originalLeft || 0);

    element.style.top    = top + 'px';
    element.style.left   = left + 'px';
    element.style.height = element._originalHeight;
    element.style.width  = element._originalWidth;
  }
  */
}

// Safari returns margins on body which is incorrect if the child is absolutely
// positioned.  For performance reasons, redefine Position.cumulativeOffset for
// KHTML/WebKit only.
if (/Konqueror|Safari|KHTML/.test(navigator.userAgent)) {
  Position.cumulativeOffset = function(element) {
    var valueT = 0, valueL = 0;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      if (element.offsetParent == document.body)
        if (Element.getStyle(element, 'position') == 'absolute') break;

      element = element.offsetParent;
    } while (element);

    return [valueL, valueT];
  }
}
/*** Math ***/
/* there is no prototype object because Math cannot be instantiated */
Object.extend(Math, {
        clamp: function (x, low, high) {
                return (x > high) ? high : (x < low ? low : x);
        },

        __uniqid: 1,
        uniqid: function () {
                return 'uniqid_' + Math.__uniqid++;
        },

        distance: function (x1, y1, x2, y2) {
                var dx = x2 - x1;
                var dy = y2 - y1;
                return Math.sqrt(dx * dx + dy * dy);
        },

	direction: function (x) {
		return (!x) ? 0 : (x > 0 ? 1 : -1);
	}
});


Object.extend(window, {
  getWidth: function() {
    if (window.innerWidth) {
        return window.innerWidth;
    } else if (document.body && document.body.parentElement && document.body.parentElement.clientWidth) {
        // measure the html element's clientWidth
        return document.body.parentElement.clientWidth;
    } else if (document.body && document.body.clientWidth) {
        return document.body.clientWidth;
    }
  },
  getHeight: function() {
    if (window.innerHeight) {
        return window.innerHeight;
    } else if (document.body && document.body.parentElement && document.body.parentElement.clientHeight) {
        // measure the html element's clientWidth
        return document.body.parentElement.clientHeight;
    } else if (document.body && document.body.clientHeight) {
        return document.body.clientHeight;
    }
  }
});


/*** Element ***/
Object.extend(Element, {
  // make a div with a known unique id
  // if there is no container then add the div to the main document
  create: function (container, absolute) {
    var el;
    container = $(container);
    if (container) {
      el = document.createElement("div");
      container.appendChild(el);
      el.style.position = absolute ? 'absolute' : 'relative';
    } else {
      el = document.createElement("div");
      var docbody = document.getElementsByTagName('body')[0];
      docbody.appendChild(el);
      el.style.position = ((typeof absolute == 'undefined') || absolute) ? 'absolute' : 'relative';
    }
    el.id = Math.uniqid();
    return el;
  }, 

  getContainer: function (element) {
    return Position.offsetParent($(element));
  },

  // get info about element position      
  getWidth: function (element) {
    element = $(element);
    if (element == document.body || element == document || element == window) {
       return window.getWidth();
    } else if (element) {
      var offsetWidth = $P(element.offsetWidth);
      return (offsetWidth == 0) ? $P(element.style.width) : offsetWidth;
    } else {
      return null;
    }
  },
  getHeight: function (element) {
    element = $(element);
    if (element == document.body || element == document || element == window) {
       return window.getHeight();
    } else if (element) {
      var offsetHeight = $P(element.offsetHeight);
      return (offsetHeight == 0) ? $P(element.style.height) : offsetHeight;
    } else {
      return null;
    }
  },
  getLeft: function (element) {
    element = $(element);
    return $P(Try.those(element.offsetLeft, element.style.left));
  },
  getRight: function (element) {
		element = $(element);
    return Element.getLeft(element) + Element.getWidth(element);
  },
  getTop: function (element) {
    element = $(element);
    return $P(Try.those(element.offsetTop, element.style.top));
  },
  getBottom: function (element) {
		element = $(element);
    return Element.getTop(element) + Element.getHeight(element);
  },
	getZIndex: function (element) {
		element = $(element);
    return element.style.zIndex || 0 ;
  },
  getAbsoluteLeft: function (element) {
    element = $(element);
    return Position.cumulativeOffset(element)[0];  
  },
  getAbsoluteRight: function (element) {
    element = $(element);
    return Position.cumulativeOffset(element)[0] + Element.getWidth(element);
  },
  getAbsoluteTop: function (element) {
    element = $(element);
    return Position.cumulativeOffset(element)[1];  
  },
  getAbsoluteBottom: function (element) {
    element = $(element);
    return Position.cumulativeOffset(element)[1] + Element.getHeight(element);
  },

  // set element position
  setHeight: function(element, height) {
    element = $(element);
    if (element) { element.style.height = height; }
  },
  setWidth: function (element, width) {
    element = $(element);
    if (element) { element.style.width = width; }
  },
  setLeft: function (element, left) {
    element = $(element);
    if (element) { element.style.left = left; }
  },
  setRight: function (element, right) {
    element = $(element);
    if (element) { element.style.left = right - Element.getWidth(element); }
  },
  setTop: function (element, top) {
    element = $(element);
    if (element) { element.style.top = top; }
  },
  setBottom: function (element, bottom) {
    element = $(element);
    if (element) { element.style.top = bottom - Element.getHeight(element); }
  },
	setZIndex: function (element, zindex) {
		element = $(element);
    return element.style.zIndex = zindex;
  },
	offsetZIndex: function (element, offsetby) {
		element = $(element);
    return Element.setZIndex(element, Element.getZIndex(element) + offsetby);
  },

  // set element alignment by name
  setHalign: function (element, alignment) {
    var parentElement = Element.getContainer(element);
    switch (alignment) {
      case 'left':
        Element.setLeft(element, 0);
        break;
      case 'right':
        Element.setRight(element, Element.getWidth(parentElement));
        break;
      case 'center':
        Element.setLeft(element, Math.round((Element.getWidth(parentElement) - Element.getWidth(element)) / 2));
        break;
      default:
        throw new Exception("unrecognized value for halign");
        break;
    }
  },
  setValign: function (element, alignment) {
    var parentElement = Element.getContainer(element);
    switch (alignment) {
      case 'top':
        Element.setTop(element, 0);
        break;
      case 'bottom':
        Element.setBottom(element, Element.getHeight(parentElement));
        break;
      case 'middle':
        Element.setTop(element, Math.round((Element.getHeight(parentElement) - Element.getHeight(element)) / 2));
        break;
      default:
        throw new Exception("unrecognized value for valign");
        break;
    }
  },

  // scrolling functions
  // clip to element edges
  clipToEdges: function (element, overflow) {
    element = $(element);
    element.style.clip = 'rect(0 ' + Element.getWidth(element) + ' ' + Element.getHeight(element) + ' 0)';
    element.style.overflow = overflow;
  },
  scrollTo: function (element, top, left) {
    element = $(element);
    element.scrollTop = top;
    element.scrollLeft = left;
  },
  getScrollTop: function (element) {
    element = $(element);
    return element.scrollTop;
  },
  getScrollLeft: function (element) {
    element = $(element);
    return element.scrollLeft;
  },
  getScrollBottom: function (element) {
    element = $(element);
    return Element.getScrollTop(element) + Element.getHeight(element);
  },
  getScrollRight: function (element) {
    element = $(element);
    return Element.getScrollLeft(element) + Element.getWidth(element);
  },

  // display functions
  expand: function (element, style) {
    element = $(element);
    element.style.display = style || 'block';
  },
  collapse: function (element) {
    element = $(element);
    element.style.display = 'none';
  },
  toggleDisplay: function() {
    for (var i = 0; i < arguments.length; i++) {
      var element = $(arguments[i]);
      Element[Element.displayed(element) ? 'collapse' : 'expand'](element);
    }
  },
  displayed: function (element) { 
    element = $(element);
    return Boolean(element.style.display && (element.style.display != 'none'));
  },
  show: function () {
    for (var i = 0; i < arguments.length; i++) {
      var element = $(arguments[i]);
      element.style.visibility = 'visible';
    }
  },
  hide: function () {
    for (var i = 0; i < arguments.length; i++) {
      var element = $(arguments[i]);
      element.style.visibility = 'hidden';
    }
  },
  toggle: function() {
    for (var i = 0; i < arguments.length; i++) {
      var element = $(arguments[i]);
      Element[Element.visible(element) ? 'hide' : 'show'](element);
    }
  },
  visible: function (element) {
    return $(element).style.visibility != 'hidden';
  },
  getZindex: function (element) {
    element = $(element);
    return element.style.zIndex;
  },
  setZindex: function (element, index) {
    element = $(element);
    element.style.zIndex = index;
  },

  // for effects which utilize window.setTimeout/window.setInterval
  setTimer: function (element, name, timerId) {
    element = $(element);
    if (! element.timers) element.timers = {};
    element.timers[name] = timerId;
  }, 
  clearTimer: function (element, name) {
    element = $(element);
    if (! element.timers) element.timers = {};
    if (element.timers[name]) window.clearTimeout(element.timers[name]);
  },
  setInterval: function (element, name, intervalId) {
    element = $(element);
    if (! element.intervals) element.intervals = {};
    element.intervals[name] = intervalId;
  },
  clearInterval: function (element, name) {
    element = $(element);
    if (! element.intervals) element.intervals = {};
    if (element.intervals[name]) window.clearInterval(element.intervals[name]);
  }
});

</script>
<script type="text/javascript" src="javascript/prototype.1.6.1.0.js"></script>
<script type="text/javascript">
</script>

<script type="text/javascript" language="javascript">
// <! Tooltip Functions 
function xstooltip_findPosX(obj) 
{
  var curleft = 0;
  if (obj.offsetParent) 
  {
    while (obj.offsetParent) 
        {
            curleft += obj.offsetLeft
            obj = obj.offsetParent;
        }
    }
    else if (obj.x)
        curleft += obj.x;
    return curleft;
}

function xstooltip_findPosY(obj) 
{
    var curtop = 0;
    if (obj.offsetParent) 
    {
        while (obj.offsetParent) 
        {
            curtop += obj.offsetTop
            obj = obj.offsetParent;
        }
    }
    else if (obj.y)
        curtop += obj.y;
    return curtop;
}

function xstooltip_show(tooltipId, parentId, posX, posY)
{
    it = document.getElementById(tooltipId);
    
    if ((it.style.top == '' || it.style.top == 0) 
        && (it.style.left == '' || it.style.left == 0))
    {
        // need to fixate default size (MSIE problem)
        it.style.width = it.offsetWidth + 'px';
        it.style.height = it.offsetHeight + 'px';
        
        img = document.getElementById(parentId); 
    
        // if tooltip is too wide, shift left to be within parent 
        if (posX + it.offsetWidth > img.offsetWidth) posX = img.offsetWidth - it.offsetWidth;
        if (posX < 0 ) posX = 0; 
        
        x = xstooltip_findPosX(img) + posX;
        y = xstooltip_findPosY(img) + posY;
        
        it.style.top = y + 'px';
        it.style.left = x + 'px';
    }
    
    it.style.visibility = 'visible'; 
}

function xstooltip_hide(id)
{
    it = document.getElementById(id); 
    it.style.visibility = 'hidden'; 
}
// ]]>
</script>

<div id="top-cap"></div>
<div id="wrapper">
	
		
	<div class="clear"></div>
	<div id="leftSide">
	                <ul id="tabs">
<li><span class="tab-on">Customization</span></li>
<li><span class="">Account Info</span></li>
<li><span class="">Installation</span></li>
<li><span class="tab-off">Snap Shares&trade;</span></li>
		</ul>
	<div id="statusInfo">
                        <p>Customize Your Shots with your choice of color theme, logo and language, to make them feel more integrated with your site.</p>
		<small class="note">
		All settings on this screen are optional. <a href="#" onclick="javascript:return submitCustomizeForm();">skip &raquo;</a>
		</small>
                              	</div>
                        <div id="column1">

			<h2>Choose a Color Theme</h2>
			<div id="swatches">
				<div class="swatch-div">
				<a id="th_silver" class="swatch color1" onclick="return toggle_theme('silver');"><br /></a>
				</div>
				<div class="swatch-sep"></div>
				<div class="swatch-div">
				<a id="th_ice" class="swatch color2" onclick="return toggle_theme('ice');"><br /></a>
				</div>
				<div class="swatch-div">
				<a id="th_green" class="swatch color3" onclick="return toggle_theme('green');"><br /></a>
				</div>
				<div class="swatch-div">
				<a id="th_linen" class="swatch color4" onclick="return toggle_theme('linen');"><br /></a>
				</div>
				<div class="swatch-div">
				<a id="th_orange" class="swatch color5" onclick="return toggle_theme('orange');"><br /></a>
				</div>
				<div class="swatch-div">
				<a id="th_pink" class="swatch color6" onclick="return toggle_theme('pink');"><br /></a>
				</div>
				<div class="swatch-div">
				<a id="th_purple" class="swatch color7" onclick="return toggle_theme('purple');"><br /></a>
				</div>
				<div class="swatch-div">
				<a id="th_asphalt" class="swatch color8" onclick="return toggle_theme('asphalt');"><br /></a>
				</div>
			</div>	
		
			<h2>Add Your Logo</h2>
			<table>
				<tr>
					<td>
        					<form id="logo_form" action="submit_logo.php" enctype="multipart/form-data" target="logo_preview" method="post">
        					<input type="hidden" name="MAX_FILE_SIZE" value="200000" />
						

        					<input type="hidden" name="key" value="be0001439f98dc14bb1efb4085981b53" />

						<input name="logo_input" id="logo_input" type="file" accept="image/jpeg,image/gif" onchange="logo_submit();" size="15">
        					</form>
					</td>
					<td>&nbsp;</td>
					<td>
						<iframe name="logo_preview" src="submit_logo.php?key=be0001439f98dc14bb1efb4085981b53&cl=0" width="100" height="20" frameborder="0" scrolling="no"></iframe>
					</td>
				</tr>
			</table>
			<small>
      				<a id="delete_logo" href="submit_logo.php?key=be0001439f98dc14bb1efb4085981b53&cl=0" target="logo_preview" style="display: none" onclick="cl=0;spa_show_theme(document.shots_theme, true, 'bl', shots_x, shots_y, false, document.shots_size, document.shots_lang);this.style.display='none';return true;">delete logo</a>
				Size: 10K maximum; Dimensions: 100x20 pixels; Format: JPG or GIF 
			</small>
	
			<form id="customize_form" name="customize_form" action="/signup.php" enctype="multipart/form-data" method="post">
						<input type="hidden" name="key" value="be0001439f98dc14bb1efb4085981b53">
			
                                                		
			<h2>Select Your Shots Language</h2>		
				<select class="text" name="shots_lang" onchange="toggle_language(this.options[this.selectedIndex].value)">
		<option value="af-za">Afrikaans</option>
		<option value="sq-al">Albanian</option>
		<option value="ar-sa">Arabic</option>
		<option value="be-by">Belarusian</option>
		<option value="bg-bg">Bulgarian</option>
		<option value="ca-es">Catalan</option>
		<option value="zh-cn">Chinese Simplified</option>
		<option value="zh-tw">Chinese Traditional</option>
		<option value="hr-hr">Croatian</option>
		<option value="cs-cz">Czech</option>
		<option value="da-dk">Danish</option>
		<option value="nl-nl">Dutch</option>
		<option value="en-us" selected>English</option>
		<option value="eo-eo">Esperanto</option>
		<option value="ph-ph">Filipino</option>
		<option value="fi-fi">Finnish</option>
		<option value="fr-fr">French</option>
		<option value="de-de">German</option>
		<option value="el-gr">Greek</option>
		<option value="he-il">Hebrew</option>
		<option value="hi-in">Hindi</option>
		<option value="hu-hu">Hungarian</option>
		<option value="is-is">Icelandic</option>
		<option value="id-id">Indonesian</option>
		<option value="it-it">Italian</option>
		<option value="ja-jp">Japanese</option>
		<option value="ko-kr">Korean</option>
		<option value="lt-lt">Lithuanian</option>
		<option value="ms-my">Malay</option>
		<option value="ml-in">Malayalam</option>
		<option value="ni-id">Nias</option>
		<option value="nb-no">Norwegian</option>
		<option value="fa-ir">Persian</option>
		<option value="pl-pl">Polish</option>
		<option value="pt-br">Portuguese (Brazil)</option>
		<option value="pt-pt">Portuguese (Portugal)</option>
		<option value="ro-ro">Romanian</option>
		<option value="ru-ru">Russian</option>
		<option value="sr-rs">Serbian (Cyrillic)</option>
		<option value="sp-rs">Serbian (Latin)</option>
		<option value="sk-sk">Slovak</option>
		<option value="sl-si">Slovenian</option>
		<option value="es-mx">Spanish (Mexico)</option>
		<option value="es-es">Spanish (Spain)</option>
		<option value="sv-se">Swedish</option>
		<option value="tl-ph">Tagalog</option>
		<option value="tr-tr">Turkish</option>
		<option value="uk-ua">Ukrainian</option>
	</select>	
					<h4></h4>
					<input type="checkbox" id="shots_adult" name="shots_adult" > My site displays sexually-explicit content &nbsp; 
		
			<h2 onclick="toggle_advanced_options()">
				<img id="js_plus_minus" style="cursor:pointer;" src="/images/icon-more.gif" width="12" height="12"> Advanced Settings 
			</h2>
			<ul id="advanced" style="display: none;">
				<li>
					<input type="checkbox" id="shots_link_icon" name="shots_link_icon" value="1" checked onclick="toggle_link_icon(this.checked, document.getElementById('shots_link_icon_only_trigger').checked)"> Show Snap Shots Link Icon<img src="/images/sli.gif" width="14" height="12" /> &nbsp; <small><a href="#" id="tip-sli" onmouseover="xstooltip_show('tip1', 'tip-sli', 0, -70);" onmouseout="xstooltip_hide('tip1');">What is this?</a></small>
				</li>
				<li>
					<input type="checkbox" id="shots_link_icon_only_trigger" name="shots_link_icon_only_trigger" value="1" onclick="toggle_link_icon(document.getElementById('shots_link_icon').checked, this.checked)"> Trigger Snap Shots on Link Icon Only &nbsp; <small><a href="#" id="tip-sli2" onmouseover="xstooltip_show('tip2', 'tip-sli2', 0, -70);" onmouseout="xstooltip_hide('tip2');">What is this?</a></small> 
				</li>
				<li>
					<input type="checkbox" name="shots_large_size" value="1" onclick="toggle_shots_size(this.checked)"> Display Large Snap Shots by Default 
					<p id="shots_size_alert" style="display:none;"><small><b>Note:</b>&nbsp;&nbsp;Increasing the dimensions will also increase file size and may slow down load times for your end users. You can change this setting at any time.</small></p>
				</li>
                        	<li>
					<input type="checkbox" name="shots_preview_ext" value="1" checked> Enable Snap Shots for External Links &nbsp; <small><a href="#" id="tip-links" onmouseover="xstooltip_show('tip5', 'tip-links', 0, -70);" onmouseout="xstooltip_hide('tip5');">What is this?</a></small>
                        	</li>
				<li>
					<input type="checkbox" name="shots_preview_int" value="1"> Enable Snap Shots for Internal Links &nbsp; <small><a href="#" id="tip-links" onmouseover="xstooltip_show('tip3', 'tip-links', 0, -70);" onmouseout="xstooltip_hide('tip3');">What is this?</a></small>  
				</li>
				<li>
					<input type="checkbox" name="shots_preview_only" value="1"> Only Display Preview Shots &nbsp; <small><a href="#" id="tip-preview" onmouseover="xstooltip_show('tip4', 'tip-preview', 0, -70);" onmouseout="xstooltip_hide('tip4');">What is this?</a></small>  
				</li>

			        <li>
					<input name="shots_auto_shot" value="1" type="checkbox" onclick="toggle_autoshot()"> Enable Snap Shots to look for key phrases on your web site, and then add the right Snap Shots.
			<p class="gray" style="width: 300px;">
				<small id="autoshot_div" class="snap_shots"></small>
			</p>	
				</li>

			</ul>

		</div>
		<div id="column2">
				<div id="shot-demo">
				<h2>What Your Shots Will Look Like</h2>
				<div class="bottom">
					<a id="test_link" href="#" class="your_link" onclick="return false;">Your Link</a>
					<a id="link_icon" href="#" onclick="return false;" style="visibility: visible"><img id="link_icon_img" src="https://shots-s.snap.com/images/theme/silver/iconLink.gif"></a>
				</div>
				</div>
    		</div> 
                <div class="btn">
                                                        <img onclick="submitCustomizeForm();" src="/images/btn-continue.gif" width="181" height="31" />
                                        </div>
                </form>
                      </div>
	
	<div id="rightSide">
		<div id="web2links">
		<a target="_blank" href="http://digg.com/tech_news/Snap_Shots" title="Digg this page"><img src="/images/icon-digg.gif" alt="Digg this Page" width="16" height="16"></a>
		<a target="_blank" href="http://del.icio.us/post?url=http%3A%2F%2Fwww.snap.com%2Fsnapshots.php&amp;title=Snap%20Shots" title="Add to Delicious"><img src="/images/icon-delicious.gif" alt="Add to Delicious" width="16" height="16"></a>
		<a target="_blank" href="mailto:?subject=Check out Snap Shots&body=Snap Shots is a great new web tool.%0A%0ACheck it out at: http://www.snap.com/snapshots.php%0A%0A(if the above link doesn't work, copy and paste the url into your browser address bar)." title="email a friend"><img src="/images/icon-emailafriend.gif" alt="email a friend" width="16" height="16"></a>
		</div>


        		<div class="sidebar">
			<h4>Customize Your Shots</h4>
			To make Snap Shots feels more integrated into your site, we designed them to be customized with your logo and your choice of color themes. 
		</div>

		<div class="sidebar">
			<h4>Snap Shots Engage</h4>
			Snap Shots Engage reads your website, looks for key phrases, and then adds the right Snap Shots to them.  No links, you just write and when the relevancy is guaranteed, the shot appears!
			<ul id="autoshot_list" class="snap_shots">
				<li>Machu Picchu</li>
				<li>Ernest Hemingway</li>
				<li>Banner Blindness</li>
			</ul>
		</div>
        	</div>
	<div class="clear"></div>
</div>
<div id="bottom-cap"></div>


<script type="text/javascript" src="https://shots-s.snap.com/snap_shots.js?ap=0&amp;key=spakey&amp;sb=1&amp;domain=snap.com&amp;si=0&amp;es=none&amp;th=all&force=yes&as=1"></script>
<script type="text/javascript" src="https://shots-s.snap.com/snap_shots.js?ap=0&amp;key=spakey&amp;sb=1&amp;domain=snap.com&amp;si=0&amp;es=none&force=yes&asf=5000&as=1&asres=1&no_rss=1"></script>
<script type="text/javascript">
var autoshot_text = "Is Tiger Woods better than ever? Seems so. Can he possibly be even better than this? He seems to think so.";
document.getElementById('autoshot_div').innerHTML = autoshot_text;
var shots_x, shots_y;
document.shots_theme = 'silver';
document.shots_size = 'small';
document.shots_lang = 'en-us';
Element.addClassName(document.getElementById("th_" + document.shots_theme).parentNode, 'selected');
function logo_submit() {
  if (document.getElementById('logo_input').value.length < 1) {alert("foo");return;}
  try {
    document.getElementById('logo_form').submit();
  } catch (e) {
    alert('Use the Browse button to select a logo\n100k max size - 100x20 pixels, jpg or gif');
  }
}
function shots_form_submit() {
  var f = document.getElementById('customize_form');
  f.th.value = document.shots_theme;
  f.cl.value = frames['logo_preview'].document.cl;
  return true;
}
function toggle_autoshot() {
  var as, i, len, el, opts = {};
  var f = document.getElementById('customize_form');
  document.getElementById('autoshot_div').innerHTML = autoshot_text;
  opts.shotsenable = f.shots_auto_shot.checked;

  opts.treatment = '2px dotted';

  len = f.elements.length;
  for (i = 0; i < len; i++) {
    el = f.elements[i];
    if (el.checked) {
      switch (el.name) {
        case 'as_color':
          opts.color = el.value;
          break;
        case 'treatment':
          opts.treatment = el.value;
          break;
      }
    }
  }
  SNAP_COM.autoshot = {"Results":{"Matches":[
  {"Match":
    {"limit":100,"tid":"t0","eid":"t0",
     "pat":"tiger\\s*?woods",
     "svc":"Snap_Shot_IFrame",
     "tag":"/demo/demo1.php?"}},
  {"Match":
    {"limit":100,"tid":"t1","eid":"t1",
     "pat":"machu\\s*?picchu",
     "svc":"Snap_Shot_IFrame",
     "tag":"/demo/demo2.php?"}},
  {"Match":
    {"limit":100,"tid":"t2","eid":"t2",
     "pat":"ernest\\s*?hemingway",
     "svc":"Snap_Shot_IFrame",
     "tag":"/demo/demo3.php?"}},
  {"Match":
    {"limit":100,"tid":"t4","eid":"t4",
     "pat":"banner\\s*?blindness",
     "svc":"Snap_Shot_IFrame",
     "tag":"/demo/demo4.php?"}}
     ]}};
  as = SNAP_COM.shot.cfg.auto_shot;
  as.list = [];
  as.treatment = opts.treatment;
  as.color_opt = opts.color;
  if (as.color_opt == 's') {
    as.color = '#FF0000';
  } else {
    as.color = SNAP_COM.shot_cfg_all['auto_shot'][document.shots_theme]['color'];
  }
  SNAP_COM.shot.Rescan(document.getElementById('autoshot_list'));
  if (! opts.shotsenable) {
    return;
  }
  SNAP_COM.shot.Rescan(document.getElementById('autoshot_div'));
}

function toggle_link_icon(link, trigger) {
  var f = document.getElementById('customize_form');
  document.getElementById('link_icon').style.visibility = link?"visible":"hidden";
  document.getElementById('shots_link_icon_only_trigger').disabled = !link;
  shots_x = Element.getAbsoluteLeft((link&&trigger)?'link_icon':'test_link');
  shots_y = Element.getAbsoluteTop((link&&trigger)?'link_icon':'test_link') - 380;
  shots_y -= ((document.shots_size=='large')?98:0);
  var cl = (frames['logo_preview'].document.cl == 1)?'be0001439f98dc14bb1efb4085981b53':false;
  spa_show_theme(document.shots_theme, true, 'bl', shots_x, shots_y, cl, document.shots_size, document.shots_lang);
}
function toggle_shots_size(val) {
  document.getElementById('shots_size_alert').style.display = val ? 'block' : 'none';
  if (document.shots_size != (val?'large':'small')) {
    shots_y += (val?-98:98);
  }
  document.shots_size = val?'large':'small';
  var cl = (frames['logo_preview'].document.cl == 1)?'be0001439f98dc14bb1efb4085981b53':false;
  spa_show_theme(document.shots_theme, true, 'bl', shots_x, shots_y, cl, document.shots_size, document.shots_lang);
  spa_show_url('http://www.snap.com');
}
function toggle_advanced_options() {
  var so = document.getElementById('advanced');
  var so_img = document.getElementById('js_plus_minus');
  if (so.style.display == 'block') {
    so_img.src = '/images/icon-more.gif';
    so.style.display = 'none';
  } else {
    so_img.src = '/images/icon-less.gif';
    so.style.display = 'block';
  }
}
function toggle_language(lang) {
  document.shots_lang = lang;
  var cl = (frames['logo_preview'].document.cl == 1)?'be0001439f98dc14bb1efb4085981b53':false;
  spa_show_theme(document.shots_theme, true, 'bl', shots_x, shots_y, cl, document.shots_size, document.shots_lang);
}
function toggle_theme(new_th) {
  var el = document.getElementById("th_"+document.shots_theme);
  Element.removeClassName(el.parentNode, 'selected');
  el = document.getElementById("th_"+new_th);
  Element.addClassName(el.parentNode, 'selected');
  document.shots_theme = new_th;
  var cl = (frames['logo_preview'].document.cl == 1)?'be0001439f98dc14bb1efb4085981b53':false;
  spa_show_theme(document.shots_theme, true, 'bl', shots_x, shots_y, cl, document.shots_size, document.shots_lang);
  document.getElementById("link_icon_img").src = "https://shots-s.snap.com/images/theme/"+document.shots_theme+"/iconLink.gif";
  toggle_autoshot();
  return false;
}
document.toggle_theme_method = toggle_theme;
function maybe_show_shots() {
  if ((typeof SNAP_COM != 'undefined') &&
      (typeof SNAP_COM.shot != 'undefined') &&
      (typeof SNAP_COM.shot.div != 'undefined') &&
      (typeof SNAP_COM.shot.div.body != 'undefined')) {
    shots_x = Element.getAbsoluteLeft('test_link');
    shots_y = Element.getAbsoluteTop('test_link') - 380;
    shots_y -= ((document.shots_size=='large')?98:0);
    spa_disable_options();
    var cl = (frames['logo_preview'].document.cl == 1)?'be0001439f98dc14bb1efb4085981b53':false;
//    spa_show_theme(document.shots_theme, true, 'bl', shots_x, shots_y, false, document.shots_size, document.shots_lang);
    spa_show_theme(document.shots_theme, true, 'bl', shots_x, shots_y, cl, document.shots_size, document.shots_lang);
    spa_show_url('http://www.snap.com');
    toggle_autoshot();
  } else {
    setTimeout(maybe_show_shots, 200);
  }
}
maybe_show_shots();
if (window.addEventListener) {
  window.addEventListener("resize", maybe_show_shots, false);
} else if (window.attachEvent) {
  window.attachEvent("onresize", maybe_show_shots);
}
</script>
    <div id="footer">
	<div id="logo">
		<a href="http://snap.com/"><img src="/images/footer-logo.gif" alt="Snap" title="Snap" /></a>
	</div>
	<div id="footlinks">
		<a href="http://snap.com/about/about.php">About</a> | <a href="http://blog.snap.com/">Blog</a> | <a href="http://snap.com/about/feedbk.php">Feedback</a> | <a href="http://snap.com/about/downloads.php">Download</a> | <a href="http://snap.com/about/privacy.php">Privacy</a> | <a href="http://snap.com/about/terms.php">Terms</a>
	</div>
</div>
<script src="https://ssl.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_udn = document.domain;
_uacct = "UA-2209883-1";
if (typeof currentTab == "string") {
  urchinTracker("/signup.php#" + currentTab);
} else {
  urchinTracker();
}
</script>

</div>
</body>
</html>
