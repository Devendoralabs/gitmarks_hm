<html>
<head>
<title>JavaScript: The World's Most Misunderstood Programming Language</title>
</head>
<body bgcolor=linen style="margin: 8%;">
<h1 align=center><font size="+4">JavaScript:</font><br>
The World's Most Misunderstood Programming Language</h1>

<p></p>

<p align=center><a href="mailto:douglas@crockford.com"><font size="+1">Douglas
Crockford</font></a><br>
  <a href="http://www.crockford.com/" target=_top><tt>www.crockford.com</tt></a></p>

<p></p>

<p><a href="http://javascript.crockford.com/">JavaScript</a>, aka Mocha,
  aka LiveScript, aka JScript, aka ECMAScript, is one
  of the world's most popular programming languages. Virtually every personal
  computer in the world has at least one JavaScript interpreter installed on it
  and in active use. JavaScript's popularity is due entirely to its role as the
  scripting language of the WWW.</p>

<p>Despite its popularity, few know that JavaScript is a very nice
dynamic object-oriented general-purpose programming language. How can
this be a secret? Why is this language so misunderstood?</p>

<h2>The Name</h2>

<p>The <i>Java-</i> prefix suggests that JavaScript is somehow related to Java,
  that it is a subset or less capable version of Java. It seems that the name
  was intentionally selected to create confusion, and from confusion comes misunderstanding.
  JavaScript is not interpreted Java. Java is interpreted Java. JavaScript is
  a different language.</p>

<p>JavaScript has a syntactic similarity to Java, much as Java has to
C. But it is no more a subset of Java than Java is a subset of C. It
is better than Java in the applications that Java (fka Oak)
was originally intended for.</p>

<p>JavaScript was not developed at Sun Microsystems, the home of
Java. JavaScript was developed at Netscape. It was originally called
LiveScript, but that name wasn't confusing enough.</p>

<p>The <i>-Script</i> suffix suggests that it is not a real programming language,
  that a scripting language is less than a programming language. But it is really
  a matter of specialization. Compared to C, JavaScript trades performance for
  expressive power and dynamism.</p>

<h2>Lisp in C's Clothing</h2>

<p>JavaScript's C-like syntax, including curly braces and the
clunky <tt>for</tt> statement, makes it appear to be an ordinary
procedural language. This is misleading because JavaScript has more
in common with functional languages like <a href="little.html">Lisp or Scheme</a>  than with C or Java.
It has arrays instead of lists and objects instead of property
lists. Functions are first class. It has closures.
You get lambdas without having to balance all those parens.</p>

<h2>Typecasting</h2>

<p>JavaScript was designed to run in Netscape Navigator. Its success there led
  to it becoming standard equipment in virtually all web browsers. This has resulted
  in typecasting. JavaScript is
  the <a href="http://www.amazon.com/exec/obidos/ASIN/B000KWZ7JC/wrrrldwideweb" target="amazon">
  George Reeves</a> of programming languages. JavaScript is well suited to a large
  class of non-Web-related applications</p>

<h2>Moving Target</h2>

<p>The first versions of JavaScript were quite weak. They lacked
exception handling, inner functions, and inheritance. In its present
form, it is now a complete object-oriented programming language. But
many opinions of the language are based on its immature forms.</p>

<p>The ECMA committee that has stewardship over the language is
developing extensions which, while well intentioned, will aggravate
one of the language's biggest problems: There are already too many
versions. This creates confusion.</p>

<h2>Design Errors</h2>

<p>No programming language is perfect. JavaScript has its share of design errors,
  such as the overloading of <tt> + </tt> to mean both addition and concatenation
  with type coercion, and the error-prone <tt>with</tt> statement should be avoided.
  The reserved word policies are much too strict. Semicolon insertion was a huge
  mistake, as was the notation for literal regular expressions. These mistakes
  have led to programming errors, and called the design of the language as a whole
  into question. Fortunately, many of these problems can be mitigated with a good
  <a href="http://www.jslint.com/">lint</a> program.</p>

<p>The design of the language on the whole is quite sound.
Surprisingly, the ECMAScript committee does not appear to be
interested in correcting these problems. Perhaps they are
more interested in making new ones.</p>

<h2>Lousy Implementations</h2>

<p>Some of the earlier implementations of JavaScript were quite buggy. This reflected
  badly on the language. Compounding that, those implementations were embedded
  in horribly buggy web browsers.</p>

<h2>Bad Books</h2>

<p>Nearly all of the books about JavaScript are quite awful. They contain errors,
  poor examples, and promote bad practices. Important features of the language
  are often explained poorly, or left out entirely. I have reviewed dozens of
  JavaScript books, and<b> I can only recommend one</b>: <a href="http://www.amazon.com/exec/obidos/ASIN/0596101996/wrrrldwideweb" target="amazon"><i>JavaScript:
  The Definitive Guide (5th Edition)</i></a> by David Flanagan. (Attention authors:
  If you have written a good one, please send me a review copy.)</p>

<h2>Substandard Standard</h2>

<p>The <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm" target="ecma">official
  specification for the language</a> is published by <a href="http://www.ecma-international.org/">ECMA</a>.
  The specification is of extremely poor quality. It is difficult to read and
  very difficult to understand. This has been a contributor to the Bad Book problem
  because authors have been unable to use the standard document to improve their
  own understanding of the language. ECMA and the TC39 committee should be deeply
  embarrassed.</p>

<h2>Amateurs</h2>

<p>Most of the people writing in JavaScript are not programmers. They
lack the training and discipline to write good programs. JavaScript
has so much expressive power that they are able to do useful things
in it, anyway. This has given JavaScript a reputation of being
strictly for the amateurs, that it is not suitable for professional
programming. This is simply not the case.</p>

<h2>Object-Oriented</h2>

<p>Is JavaScript object-oriented? It has objects which can contain
data and methods that act upon that data. Objects can contain other
objects. It does not have classes, but it does have constructors
which do what classes do, including acting as containers for class
variables and methods. It does not have class-oriented inheritance,
but it does have prototype-oriented inheritance.</p>

<p>The two main ways of building up object systems are by inheritance
(is-a) and by aggregation (has-a). JavaScript does both, but its
dynamic nature allows it to excel at aggregation.</p>

<p>Some argue that JavaScript is not truly object oriented because it
does not provide information hiding. That is, objects cannot have
private variables and private methods: All members are public.</p>

<p>But it turns out
that <a href="http://www.crockford.com/javascript/private.html">JavaScript
objects <i>can</i> have private variables and private methods. (Click here now
to find out how.)</a>  Of course, few understand this because JavaScript is
the world's most misunderstood programming language.</p>
<p>Some argue that JavaScript is not truly object oriented because it does not
  provide inheritance. But it turns out that <a href="inheritance.html">JavaScript
  supports not only classical inheritance, but other code reuse patterns as well.</a></p>

<p>Copyright 2001 <a href="mailto:douglas@crockford.com">Douglas Crockford.</a>
  <a href="http://www.crockford.com/" target="_top">All Rights Reserved Wrrrldwide.</a></p>
</body>
</html>
