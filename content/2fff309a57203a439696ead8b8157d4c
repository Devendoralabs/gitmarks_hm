<!DOCTYPE html>
<html lang="en">
<head>

    <meta charset="utf-8">
    <title>24 ways: Christmas Is In The AIR</title>
    <meta name="description" content="The advent calendar for web geeks. Each day throughout December we publish a daily dose of web design and development goodness to bring you all a little Christmas cheer." />
    <link rel="stylesheet" href="/css/master.css" media="screen" />
    <link rel="stylesheet" href="/css/additions.css?v=2" media="screen" />
    <link rel="stylesheet" href="/css/print.css" media="print" />
	<!--[if IE 8]>
			<link rel="stylesheet" href="/css/ie8.css" media="screen" />
	<![endif]-->
	<!--[if IE 7]>
			<link rel="stylesheet" href="/css/ie7.css" media="screen" />
	<![endif]-->
	<!--[if IE 6]>
			<link rel="stylesheet" href="/css/ie6.css" media="screen" />
	<![endif]-->
    <link rel="alternate" type="application/rss+xml" title="rss" href="http://feeds.feedburner.com/24ways" />  

    <link rel="alternate shorter shorturl" href="http://24ways.org/200719" />

</head> 



    	<body class="article">
	<p id="jump"><a href="#content">Jump to content</a></p>
	<div id="year">
	<h3>Year</h3>
	<ul>
		<li>1997</li>
		<li>1998</li>
		<li>1999</li>
		<li>2000</li>
		<li>2001</li>
		<li>2002</li>
		<li>2003</li>
		<li>2004</li>
        <li><a href="/2005">2005</a></li>
        <li><a href="/2006">2006</a></li>
        <li class="current"><a href="/2007">2007</a></li>
        <li><a href="/2008">2008</a></li>
        <li><a href="/2009">2009</a></li>
        <li><a href="/2010">2010</a></li>
		<li>2011</li>
		<li>2012</li>
		<li>2013</li>
		<li>2014</li>
		<li>2015</li>
		<li>2016</li>
		<li>2017</li>
		<li>2018</li>
		<li>2019</li>
		<li>2020</li>
	</ul>
</div><!-- year -->
<div id="day">
	<h3>Day</h3>
	<ul>
		<li><a href="/2007/performance-on-a-shoe-string">24</a></li>
		<li><a href="/2007/a-gift-idea-for-your-users-respect-yo">23</a></li>
		<li><a href="/2007/how-media-studies-can-massage-your-message">22</a></li>
		<li><a href="/2007/mobile-2.0">21</a></li>
		<li><a href="/2007/diagnostic-styling">20</a></li>
		<li class="current"><a href="/2007/christmas-is-in-the-air">19</a></li>
		<li><a href="/2007/keeping-javascript-dependencies-at-bay">18</a></li>
		<li><a href="/2007/increase-your-font-stacks-with-font-matrix">17</a></li>
		<li><a href="/2007/get-in-shape">16</a></li>
		<li><a href="/2007/conditional-love">15</a></li>
		<li><a href="/2007/underpants-over-my-trousers">14</a></li>
		<li><a href="/2007/css-for-accessibility">13</a></li>
		<li><a href="/2007/unobtrusively-mapping-microformats-with-jquery">12</a></li>
		<li><a href="/2007/tracking-christmas-cheer-with-google-charts">11</a></li>
		<li><a href="/2007/10-ways-to-get-design-approval">10</a></li>
		<li><a href="/2007/back-to-the-future-of-print">09</a></li>
		<li><a href="/2007/javascript-internationalisation">08</a></li>
		<li><a href="/2007/typesetting-tables">07</a></li>
		<li><a href="/2007/minification-a-christmas-diet">06</a></li>
		<li><a href="/2007/my-other-christmas-present-is-a-definition-list">05</a></li>
		<li><a href="/2007/capturing-caps-lock">04</a></li>
		<li><a href="/2007/the-neverending-background-image-story">03</a></li>
		<li><a href="/2007/get-to-grips-with-slippy-maps">02</a></li>
		<li><a href="/2007/supersleight-transparent-png-in-ie6">01</a></li>
	</ul>
</div><!-- day -->
	<h1><a href="/">24 Ways <em>to impress your friends</em></a></h1>
<ul id="navigation">
	<li id="nav-home"><a href="/">Home</a></li>
	<li id="nav-archives"><a href="/2010">Archives</a></li>
	<li id="nav-authors"><a href="/authors">Authors</a></li>
	<li id="nav-annual"><a href="http://fivesimplesteps.com/books/the-24-ways-annual-2010">Annual</a></li>
	<li id="nav-twitter"><a href="http://twitter.com/24ways">Twitter</a></li>
	<li id="search">
		<form method="get" action="/search">
		    <div>
			    
			        <input type="text" name="q" class="text switcheroo" value="Search&hellip;" />
			    
			    <input type="submit" class="submit" value="Go" />
			    <input type="hidden" name="s" value="search" />
			</div>
		</form>
	</li>
</ul><!-- navigation -->
	
	<div id="content">
		<div class="meta">
			<h2><strong>19 <em>12/2007</em></strong> <a href="http://24ways.org/2007/christmas-is-in-the-air" rel="bookmark">Christmas Is In The AIR</a></h2>
			<p>by <a href="http://snook.ca/">Jonathan Snook</a></p>
			<ul>
				<li id="goto-article"><a href="#article">Article</a></li>
				<li id="goto-comments"><a href="#comments"><strong>8</strong> comments</a></li>
			</ul>
		</div><!-- meta -->
		<div id="article">
            	<p>That&#8217;s right, Christmas is coming up fast and there&#8217;s plenty of things to do. Get the tree and lights up, get the turkey, buy presents and who know what else. And what about Santa? He&#8217;s got a list. I&#8217;m pretty sure he&#8217;s checking it twice.</p>

	<p>Sure, we could use an existing list making web site or even a desktop widget. But we&#8217;re geeks! What&#8217;s the fun in that? Let&#8217;s build our own to-do list application and do it with Adobe <span class="caps">AIR</span>!</p>

	<h3>What&#8217;s Adobe <span class="caps">AIR</span>?</h3>

	<p><a href="http://labs.adobe.com/technologies/air/">Adobe <span class="caps">AIR</span></a>, formerly codenamed Apollo, is a runtime environment that runs on both Windows and <span class="caps">OSX</span> (with Linux support to follow). This runtime environment lets you build desktop applications using Adobe technologies like Flash and Flex. Oh, and <span class="caps">HTML</span>. That&#8217;s right, you web standards lovin&#8217; maniac. You can build desktop applications that can run cross-platform using the trio of technologies, <span class="caps">HTML</span>, <span class="caps">CSS</span> and JavaScript.</p>

	<p>If you&#8217;ve tried developing with <span class="caps">AIR</span> before, you&#8217;ll need to get re-familiarized with the latest beta release as many things have changed since the last one (such as the <span class="caps">API</span> and restrictions within the sandbox.)</p>

	<h3>To get started</h3>

	<p>To get started in building an <span class="caps">AIR</span> application, you&#8217;ll need two basic things:</p>

	<ol>
		<li><a href="http://labs.adobe.com/downloads/air.html">The <span class="caps">AIR</span> runtime</a>. The runtime is needed to run any <span class="caps">AIR</span>-based application.</li>
		<li><a href="http://labs.adobe.com/downloads/airsdk.html">The <span class="caps">SDK</span></a>. The software development kit gives you all the pieces to test your application. Unzip the <span class="caps">SDK</span> into any folder you wish.</li>
	</ol>

	<p>You&#8217;ll also want to get your hands on the <a href="http://livedocs.adobe.com/labs/air/1/jslr/index.html">JavaScript <span class="caps">API</span> documentation</a> which you&#8217;ll no doubt find yourself getting into before too long. (<a href="http://download.macromedia.com/pub/labs/air/air_b3_docs_html_121207.zip">You can download it</a>, too.)</p>

	<p>Also of interest, some development environments have support for <span class="caps">AIR</span> built right in. <a href="http://www.aptana.com/air/">Aptana</a> doesn&#8217;t have support for beta 3 yet but I suspect it&#8217;ll be available shortly.</p>

	<p>Within the <span class="caps">SDK</span>, there are two main tools that we&#8217;ll use: one to test the application (<span class="caps">ADL</span>) and another to build a distributable package of our application (<span class="caps">ADT</span>). I&#8217;ll get into this some more when we get to that stage of development.</p>

	<h3>Building our To-do list application</h3>

	<p>The first step to building an application within <span class="caps">AIR</span> is to create an <span class="caps">XML</span> file that defines our default application settings. I call mine <code>application.xml</code>, mostly because Aptana does that by default when creating a new <span class="caps">AIR</span> project. It makes sense though and I&#8217;ve stuck with it. Included in the templates folder of the <span class="caps">SDK</span> is an example <span class="caps">XML</span> file that you can use.</p>

	<p>The first key part to this after specifying things like the application ID, version, and filename, is to specify what the default content should be within the content tags. Enter in the name of the <span class="caps">HTML</span> file you wish to load. Within this <span class="caps">HTML</span> file will be our application.</p>

 <ol class="code">
<li><code>&lt;content&gt;ui.html&lt;/content&gt;</code></li>

</ol>


	<p>Create a new <span class="caps">HTML</span> document and name it <code>ui.html</code> and place it in the same directory as the <code>application.xml</code> file. The first thing you&#8217;ll want to do is copy over the <code>AIRAliases.js</code> file from the frameworks folder of the <span class="caps">SDK</span> and add a link to it within your <span class="caps">HTML</span> document.</p>

 <ol class="code">
<li><code>&lt;script type=&quot;text/javascript&quot; src=&quot;AIRAliases.js&quot;&gt;&lt;/script&gt;</code></li>

</ol>


	<p>The aliases create shorthand links to all of the Flash-based <span class="caps">API</span>s.</p>

	<p>Now is probably a good time to explain how to debug your application.</p>

	<h4>Debugging our application</h4>

	<p>So, with our <span class="caps">XML</span> file created and <span class="caps">HTML</span> file started, let&#8217;s try testing our &#8216;application&#8217;. We&#8217;ll need the <span class="caps">ADL</span> application located in <span class="caps">BIN</span> folder of the <span class="caps">SDK</span> and tell it to run the <code>application.xml</code> file.</p>

 <ol class="code">
<li><code>/path/to/adl /path/to/application.xml</code></li>

</ol>


	<p>You can also just drag the <span class="caps">XML</span> file onto <span class="caps">ADL</span> and it&#8217;ll accomplish the same thing. If you just did that and noticed that your blank application didn&#8217;t load, you&#8217;d be correct. It&#8217;s running but isn&#8217;t visible. Which at this point means you&#8217;ll have to shut down the <span class="caps">ADL</span> process. Sorry about that!</p>

	<h4>Changing the visibility</h4>

	<p>You have two ways to make your application visible. You can do it automatically by setting the placing <code>true</code> in the <code>visible</code> tag within the <code>application.xml</code> file.</p>

 <ol class="code">
<li><code>&lt;visible&gt;true&lt;/visible&gt;</code></li>

</ol>


	<p>The other way is to do it programmatically from within your application. You&#8217;d want to do it this way if you had other startup tasks to perform before showing the interface. To turn the UI on programmatically, simple set the <code>visible</code> property of <code>nativeWindow</code> to <code>true</code>.</p>

 <ol class="code">
<li><code>&lt;script type=&quot;text/javascript&quot;&gt;</code></li>
<li class="tab1"><code>nativeWindow.visible = true;</code></li>
<li><code>&lt;/script&gt;</code></li>

</ol>


	<h4>Sandbox Security</h4>

	<p>Now that we have an application that we can see when we start it, it&#8217;s time to build the to-do list application. In doing so, you&#8217;d probably think that using a JavaScript library is a really good idea — and it can be but there are some limitations within <span class="caps">AIR</span> that have to be considered.</p>

	<p>An <span class="caps">HTML</span> document, by default, runs within the application sandbox. You have full access to the <span class="caps">AIR</span> <span class="caps">API</span>s but once the <code>onload</code> event of the window has fired, you&#8217;ll have a limited ability to make use of <code>eval</code> and other dynamic script injection approaches. This limits the ability of external sources from gaining access to everything the <span class="caps">AIR</span> <span class="caps">API</span> offers, such as database and local file system access. You&#8217;ll still be able to make use of <code>eval</code> for evaluating <span class="caps">JSON</span> responses, which is probably the most important if you wish to consume <span class="caps">JSON</span>-based services.</p>

	<p>If you wish to create a greater wall of security between <span class="caps">AIR</span> and your <span class="caps">HTML</span> document loading in external resources, you can <a href="http://livedocs.adobe.com/labs/air/1/devappshtml/help.html?content=QuckStart_Sandbox_Bridge_HTML_1.html">create a child sandbox</a>. We won&#8217;t need to worry about it for our application so I won&#8217;t go any further into it but definitely keep this in mind.</p>

	<h4>Finally, our application</h4>

	<p>Getting tired of all this preamble? Let&#8217;s actually build our to-do list application. I&#8217;ll use jQuery because it&#8217;s small and should suit our needs nicely. Let&#8217;s begin with some structure:</p>

 <ol class="code">
<li><code>&lt;body&gt;</code></li>
<li class="tab1"><code>&lt;input type=&quot;text&quot; id=&quot;text&quot; value=&quot;&quot;&gt;</code></li>
<li class="tab1"><code>&lt;input type=&quot;button&quot; id=&quot;add&quot; value=&quot;Add&quot;&gt;</code></li>
<li class="tab1"><code>&lt;ul id=&quot;list&quot;&gt;&lt;/ul&gt;</code></li>
<li><code>&lt;/body&gt;</code></li>
<li class="source">Source:  <a href="/code/christmas-is-in-the-air/6.txt" title="Download the above code as a textfile">/code/christmas-is-in-the-air/6.txt</a></li>
</ol>


	<p>Now we need to wire up that button to actually add a new item to our to-do list.</p>

 <ol class="code">
<li><code>&lt;script type=&quot;text/javascript&quot;&gt;</code></li>
<li><code>$(document).ready(function(){</code></li>
<li class="tab1 cmnt"><code>// make sure the application is visible</code></li>
<li class="tab1"><code>nativeWindow.visible = true;</code></li>
<li>&nbsp;</li>
<li class="tab1"><code>$('#add').click(function(){</code></li>
<li class="tab2"><code>var t = $('#text').val();</code></li>
<li class="tab2"><code>if(t)</code></li>
<li class="tab2"><code>{</code></li>
<li class="tab3 cmnt"><code>// use DOM methods to create the new list item</code></li>
<li class="tab3"><code>var li = document.createElement('li');</code></li>
<li class="tab3 cmnt"><code>// the extra space at the end creates a buffer between the text</code></li>
<li class="tab3 cmnt"><code>// and the delete link we're about to add</code></li>
<li class="tab3"><code>li.appendChild(document.createTextNode(t + ' '));</code></li>
<li>&nbsp;</li>
<li class="tab3 cmnt"><code>// create the delete link</code></li>
<li class="tab3"><code>var del = document.createElement('a');</code></li>
<li class="tab3 cmnt"><code>// this makes it a true link. I feel dirty doing this.</code></li>
<li class="tab3"><code>del.setAttribute('href', '#');</code></li>
<li class="tab3"><code>del.addEventListener('click', function(evt){</code></li>
<li class="tab4"><code>this.parentNode.parentNode.removeChild(this.parentNode);</code></li>
<li class="tab3"><code>});</code></li>
<li class="tab3"><code>del.appendChild(document.createTextNode('[del]'));</code></li>
<li class="tab3"><code>li.appendChild(del);</code></li>
<li>&nbsp;</li>
<li class="tab3 cmnt"><code>// append everything to the list</code></li>
<li class="tab3"><code>$('#list').append(li);</code></li>
<li>&nbsp;</li>
<li class="tab3 cmnt"><code>//reset the text box</code></li>
<li class="tab3"><code>$('#text').val('');</code></li>
<li class="tab2"><code>}</code></li>
<li class="tab1"><code>})</code></li>
<li><code>});</code></li>
<li><code>&lt;/script&gt;</code></li>
<li class="source">Source:  <a href="/code/christmas-is-in-the-air/7.txt" title="Download the above code as a textfile">/code/christmas-is-in-the-air/7.txt</a></li>
</ol>


	<p>And just like that, we&#8217;ve got a to-do list! That&#8217;s it! Just never close your application and you&#8217;ll remember everything. Okay, that&#8217;s not very practical. You need to have some way of storing your to-do items until the next time you open up the application.</p>

	<h3>Storing Data</h3>

	<p>You&#8217;ve essentially got 4 different ways that you can store data:</p>

	<ul>
		<li>Using the local database. <span class="caps">AIR</span> comes with <span class="caps">SQLL</span>ite built in. That means you can create tables and insert, update and select data from that database just like on a web server.</li>
		<li>Using the file system. You can also create files on the local machine. You have access to a few folders on the local system such as the documents folder and the desktop.</li>
		<li>Using <code>EcryptedLocalStore</code>. I like using the <code>EcryptedLocalStore</code> because it allows you to easily save key/value pairs and have that information encrypted. All this within just a couple lines of code.</li>
		<li>Sending the data to a remote <span class="caps">API</span>. Our to-do list could <a href="http://www.rememberthemilk.com/services/api/">sync up with Remember the Milk</a>, for example.</li>
	</ul>

	<p>To demonstrate some persistence, we&#8217;ll use the file system to store our files. In addition, we&#8217;ll let the user specify where the file should be saved. This way, we can create multiple to-do lists, keeping them separate and organized.</p>

	<p>The application is now broken down into 4 basic tasks:</p>

	<ol>
		<li>Load data from the file system.</li>
		<li>Perform any interface bindings.</li>
		<li>Manage creating and deleting items from the list.</li>
		<li>Save any changes to the list back to the file system.</li>
	</ol>

	<h4>Loading in data from the file system</h4>

	<p>When the application starts up, we&#8217;ll prompt the user to select a file or specify a new to-do list. Within <span class="caps">AIR</span>, there are 3 main file objects: <code>File</code>, <code>FileMode</code>, and <code>FileStream</code>. <code>File</code> handles file and path names, <code>FileMode</code> is used as a parameter for the <code>FileStream</code> to specify whether the file should be read-only or for write access. The <code>FileStream</code> object handles all the read/write activity.</p>

	<p>The <code>File</code> object has a number of shortcuts to default paths like the documents folder, the desktop, or even the application store. In this case, we&#8217;ll specify the documents folder as the default location and then use the <code>browseForSave</code> method to prompt the user to specify a new or existing file. If the user specifies an existing file, they&#8217;ll be asked whether they want to overwrite it.</p>

 <ol class="code">
<li><code>var store = air.File.documentsDirectory;</code></li>
<li><code>var fileStream = new air.FileStream();</code></li>
<li>&nbsp;</li>
<li><code>store.browseForSave(&quot;Choose To-do List&quot;);</code></li>
<li class="source">Source:  <a href="/code/christmas-is-in-the-air/8.txt" title="Download the above code as a textfile">/code/christmas-is-in-the-air/8.txt</a></li>
</ol>


	<p>Then we add an event listener for when the user has selected a file. When the file is selected, we check to see if the file exists and if it does, read in the contents, splitting the file on new lines and creating our list items within the interface.</p>

 <ol class="code">
<li><code>store.addEventListener(air.Event.SELECT, fileSelected);</code></li>
<li>&nbsp;</li>
<li><code>function fileSelected()</code></li>
<li><code>{</code></li>
<li class="tab1"><code>air.trace(store.nativePath);</code></li>
<li class="tab1 cmnt"><code>// load in any stored data</code></li>
<li class="tab1"><code>var byteData = new air.ByteArray();</code></li>
<li class="tab1"><code>if(store.exists)</code></li>
<li class="tab1"><code>{</code></li>
<li class="tab2"><code>fileStream.open(store, air.FileMode.READ);</code></li>
<li class="tab2"><code>fileStream.readBytes(byteData, 0, store.size);</code></li>
<li class="tab2"><code>fileStream.close();</code></li>
<li>&nbsp;</li>
<li class="tab2"><code>if(byteData.length &gt; 0)</code></li>
<li class="tab2"><code>{</code></li>
<li class="tab3"><code>var s = byteData.readUTFBytes(byteData.length);</code></li>
<li class="tab3"><code>oldlist = s.split(&quot;\r\n&quot;);</code></li>
<li>&nbsp;</li>
<li class="tab3 cmnt"><code>// create todolist items</code></li>
<li class="tab3"><code>for(var i=0; i &lt; oldlist.length; i++)</code></li>
<li class="tab3"><code>{</code></li>
<li class="tab4"><code>createItem(oldlist[i], (new Date()).getTime() + i );</code></li>
<li class="tab3"><code>}</code></li>
<li class="tab2"><code>}</code></li>
<li class="tab1"><code>}</code></li>
<li><code>}</code></li>
<li>&nbsp;</li>
<li class="source">Source:  <a href="/code/christmas-is-in-the-air/9.txt" title="Download the above code as a textfile">/code/christmas-is-in-the-air/9.txt</a></li>
</ol>


	<h4>Perform Interface Bindings</h4>

	<p>This is similar to before where we set the click event on the Add button but we&#8217;ve moved the code to save the list into a separate function.</p>

 <ol class="code">
<li><code>$('#add').click(function(){</code></li>
<li class="tab2"><code>var t = $('#text').val();</code></li>
<li class="tab2"><code>if(t){</code></li>
<li class="tab3 cmnt"><code>// create an ID using the time</code></li>
<li class="tab3"><code>createItem(t, (new Date()).getTime() );</code></li>
<li class="tab2"><code>}</code></li>
<li><code>})</code></li>
<li class="source">Source:  <a href="/code/christmas-is-in-the-air/10.txt" title="Download the above code as a textfile">/code/christmas-is-in-the-air/10.txt</a></li>
</ol>


	<h4>Manage creating and deleting items from the list</h4>

	<p>The list management is now in its own function, similar to before but with some extra information to identify list items and with calls to save our list after each change.</p>

 <ol class="code">
<li><code>function createItem(t, id)</code></li>
<li><code>{</code></li>
<li class="tab1"><code>if(t.length == 0) return;</code></li>
<li class="tab1 cmnt"><code>// add it to the todo list</code></li>
<li class="tab1"><code>todolist[id] = t;</code></li>
<li>&nbsp;</li>
<li class="tab1 cmnt"><code>// use DOM methods to create the new list item</code></li>
<li class="tab1"><code>var li = document.createElement('li');</code></li>
<li class="tab1 cmnt"><code>// the extra space at the end creates a buffer between the text</code></li>
<li class="tab1 cmnt"><code>// and the delete link we're about to add</code></li>
<li class="tab1"><code>li.appendChild(document.createTextNode(t + ' '));</code></li>
<li>&nbsp;</li>
<li class="tab1 cmnt"><code>// create the delete link</code></li>
<li class="tab1"><code>var del = document.createElement('a');</code></li>
<li class="tab1 cmnt"><code>// this makes it a true link. I feel dirty doing this.</code></li>
<li class="tab1"><code>del.setAttribute('href', '#');</code></li>
<li class="tab1"><code>del.addEventListener('click', function(evt){</code></li>
<li class="tab2"><code>var id = this.id.substr(1);</code></li>
<li class="tab2"><code>delete todolist[id]; // remove the item from the list</code></li>
<li class="tab2"><code>this.parentNode.parentNode.removeChild(this.parentNode);</code></li>
<li class="tab2"><code>saveList();</code></li>
<li class="tab1"><code>});</code></li>
<li class="tab1"><code>del.appendChild(document.createTextNode('[del]'));</code></li>
<li class="tab1"><code>del.id = 'd' + id;</code></li>
<li class="tab1"><code>li.appendChild(del);</code></li>
<li>&nbsp;</li>
<li class="tab1 cmnt"><code>// append everything to the list</code></li>
<li class="tab1"><code>$('#list').append(li);</code></li>
<li>&nbsp;</li>
<li class="tab1 cmnt"><code>//reset the text box</code></li>
<li class="tab1"><code>$('#text').val('');</code></li>
<li>&nbsp;</li>
<li class="tab1"><code>saveList();</code></li>
<li><code>}</code></li>
<li class="source">Source:  <a href="/code/christmas-is-in-the-air/11.txt" title="Download the above code as a textfile">/code/christmas-is-in-the-air/11.txt</a></li>
</ol>


	<h4>Save changes to the file system</h4>

	<p>Any time a change is made to the list, we update the file. The file will always reflect the current state of the list and we&#8217;ll never have to click a save button. It just iterates through the list, adding a new line to each one.</p>

 <ol class="code">
<li><code>function saveList(){</code></li>
<li class="tab1"><code>if(store.isDirectory) return;</code></li>
<li class="tab1"><code>var packet = '';</code></li>
<li class="tab1"><code>for(var i in todolist)</code></li>
<li class="tab1"><code>{</code></li>
<li class="tab2"><code>packet += todolist[i] + '\r\n';</code></li>
<li class="tab1"><code>}</code></li>
<li class="tab1"><code>var bytes = new air.ByteArray();</code></li>
<li class="tab1"><code>bytes.writeUTFBytes(packet);</code></li>
<li class="tab1"><code>fileStream.open(store, air.FileMode.WRITE);</code></li>
<li class="tab1"><code>fileStream.writeBytes(bytes, 0, bytes.length);</code></li>
<li class="tab1"><code>fileStream.close();</code></li>
<li><code>}</code></li>
<li class="source">Source:  <a href="/code/christmas-is-in-the-air/12.txt" title="Download the above code as a textfile">/code/christmas-is-in-the-air/12.txt</a></li>
</ol>


	<p>One important thing to mention here is that we check if the store is a directory first. The reason we do this goes back to our <code>browseForSave</code> call. If the user cancels the dialog without selecting a file first, then the store points to the <code>documentsDirectory</code> that we set it to initially. Since we haven&#8217;t specified a file, there&#8217;s no place to save the list.</p>

	<p>Hopefully by this point, you&#8217;ve been thinking of some cool ways to pimp out your list. Now we need to package this up so that we can let other people use it, too.</p>

	<h3>Creating a Package</h3>

	<p>Now that we&#8217;ve created our application, we need to package it up so that we can distribute it. This is a two step process. The first step is to create a code signing certificate (or you can pay for one from <a href="https://www.thawte.com/process/retail/new_devel">Thawte</a> which will help authenticate you as an <span class="caps">AIR</span> application developer).</p>

	<p>To create a self-signed certificate, run the following command. This will create a <span class="caps">PFX</span> file that you&#8217;ll use to sign your application.</p>

 <ol class="code">
<li><code>adt -certificate -cn todo24ways 1024-RSA todo24ways.pfx mypassword</code></li>
<li class="source">Source:  <a href="/code/christmas-is-in-the-air/13.txt" title="Download the above code as a textfile">/code/christmas-is-in-the-air/13.txt</a></li>
</ol>


	<p>After you&#8217;ve done that, you&#8217;ll need to create the package with the certificate</p>

 <ol class="code">
<li><code>adt -package -storetype pkcs12 -keystore todo24ways.pfx todo24ways.air application.xml .</code></li>
<li class="source">Source:  <a href="/code/christmas-is-in-the-air/14.txt" title="Download the above code as a textfile">/code/christmas-is-in-the-air/14.txt</a></li>
</ol>


	<p>The important part to mention here is the period at the end of the command. We&#8217;re telling it to package up all files in the current directory.</p>

	<p>After that, just run the <span class="caps">AIR</span> file, which will install your application and run it.</p>

	<h3>Important things to remember about <span class="caps">AIR</span></h3>

	<p>When developing an <span class="caps">HTML</span> application, the rendering engine is Webkit. You&#8217;ll thank your lucky stars that you aren&#8217;t struggling with cross-browser issues. (My personal favourites are multiple backgrounds and border radius!)</p>

	<p>Be mindful of memory leaks. Things like Ajax calls and event binding can cause applications to slowly leak memory over time. Web pages are normally short lived but desktop applications are often open for hours, if not days, and you may find your little desktop application taking up more memory than anything else on your machine!</p>

	<p>The WebKit runtime itself can also be a memory hog, usually taking about 15MB just for itself. If you create multiple <span class="caps">HTML</span> windows, it&#8217;ll add another 15MB to your memory footprint. Our little to-do list application shouldn&#8217;t be much of a concern, though.</p>

	<p>The other important thing to remember is that you&#8217;re still essentially running within a Flash environment. While you probably won&#8217;t notice this working in small applications, the moment you need to move to multiple windows or need to accomplish stuff beyond what <span class="caps">HTML</span> and JavaScript can give you, the need to understand some of the Flash-based elements will become more important.</p>

	<p>Lastly, the other thing to remember is that <span class="caps">HTML</span> links will load within the <span class="caps">AIR</span> application. If you want a link to open in the users web browser, you&#8217;ll need to capture that event and handle it on your own. The following code takes the <code>HREF</code> from a clicked link and opens it in the default web browser.</p>

 <ol class="code">
<li><code>air.navigateToURL(new air.URLRequest(this.href));</code></li>
<li class="source">Source:  <a href="/code/christmas-is-in-the-air/15.txt" title="Download the above code as a textfile">/code/christmas-is-in-the-air/15.txt</a></li>
</ol>


	<h3>Only the beginning</h3>

	<p>Of course, this is only the beginning of what you can do with Adobe <span class="caps">AIR</span>. You don&#8217;t have the same level of control as building a native desktop application, such as being able to launch other applications, but you do have more control than what you could have within a web application. Check out the <a href="http://www.adobe.com/devnet/air/ajax/">Adobe <span class="caps">AIR</span> Developer Center for <span class="caps">HTML</span> and Ajax</a> for tutorials and other resources.</p>

	<p>Now, go forth and create your desktop applications and hopefully you finish all your shopping before Christmas!</p>

	<p><strong><a href="http://media.24ways.org/2007/19/IntroductionToAIR.zip" rel="supporting-files">Download the example files.</a></strong></p>
            <div class="domore">
                <h3>Like what you read?</h3>
                <ul>
                    <li class="tweetthis"><a href="http://twitter.com/?status=Christmas%20Is%20In%20The%20AIR%20http://24ways.org/200719">Tweet this article</a></li>
                    <li>or</li>
                    <li id="goto-comments-alt" class="leavecomment"><a href="#comments">Leave a comment</a></li>
                </ul>
            </div>
		</div><!-- article -->
		<div id="comments">
		    <h3>Comments</h3>


    <p class="disclaimer">Got something to add? You can just <a href="#newcomment">leave a comment</a>.</p>

<ul class="comments">
	<li><div class="even">
	<p class="permlink"><a href="http://24ways.org/2007/christmas-is-in-the-air#c001436" id="c001436">19/12/2007</a></p>
	<h4><a href="http://www.unintentionallyblank.co.uk"><img src="http://www.gravatar.com/avatar.php?gravatar_id=ddc38d6e7c72e85af04519c1dd261917&amp;size=100&amp;default=http%3A%2F%2Fcloud.24ways.org%2Fimg%2Fgravatar.png" class="gravatar" alt="" height="100" width="100" /> Phil <small>http://www.unintentionallyblank.co.uk</small></a></h4>
		<p>Thanks Jonathan! I have a new year&#8217;s resolution to make an <span class="caps">AIR</span> app and this will be the place I turn for early help!</p>


</div>
</li>
	<li><div class="odd">
	<p class="permlink"><a href="http://24ways.org/2007/christmas-is-in-the-air#c001437" id="c001437">19/12/2007</a></p>
	<h4><a href="http://andr3.net"><img src="http://www.gravatar.com/avatar.php?gravatar_id=351fa00e0347d74192024c9e3c96aec7&amp;size=100&amp;default=http%3A%2F%2Fcloud.24ways.org%2Fimg%2Fgravatar.png" class="gravatar" alt="" height="100" width="100" /> André Luís <small>http://andr3.net</small></a></h4>
		<p>Thanks Jonathan. I&#8217;ve never really got around to get into <span class="caps">AIR</span>. This guide might just be my way in.</p>

	<p>I wasn&#8217;t aware it ran on webkit! Good news!</p>


</div>
</li>
	<li><div class="even">
	<p class="permlink"><a href="http://24ways.org/2007/christmas-is-in-the-air#c001438" id="c001438">19/12/2007</a></p>
	<h4><a href="http://www.heavydog.co.uk"><img src="http://www.gravatar.com/avatar.php?gravatar_id=700ce96ae9639a7a98b58b56e10017a5&amp;size=100&amp;default=http%3A%2F%2Fcloud.24ways.org%2Fimg%2Fgravatar.png" class="gravatar" alt="" height="100" width="100" /> Mike Pearce <small>http://www.heavydog.co.uk</small></a></h4>
		<p>Great article Jonathon! Makes me want to have a crack at <span class="caps">AIR</span> now.</p>

	<p>Just got to think of something to make!</p>


</div>
</li>
	<li><div class="odd">
	<p class="permlink"><a href="http://24ways.org/2007/christmas-is-in-the-air#c001439" id="c001439">19/12/2007</a></p>
	<h4><a href="http://mattwilcox.net"><img src="http://www.gravatar.com/avatar.php?gravatar_id=b78446f857933a87776bffd44ec66f98&amp;size=100&amp;default=http%3A%2F%2Fcloud.24ways.org%2Fimg%2Fgravatar.png" class="gravatar" alt="" height="100" width="100" /> Matt Wilcox <small>http://mattwilcox.net</small></a></h4>
		<p>Excellent, I&#8217;ve been thinking of dabbling in <span class="caps">AIR</span> for a little while but didn&#8217;t really know where to start after firing up a project in Aptana. Cheers :-)</p>

	<p>I have one fundamental question though &#8211; your example <span class="caps">HTML</span> throws a button in the <span class="caps">HTML</span> without any form etc. Does this mean that <span class="caps">HTML</span> in <span class="caps">AIR</span> doesn&#8217;t need to be the validated, semantic <span class="caps">HTML</span> we&#8217;re all used to developing? What about <span class="caps">DOCTYPES</span>, head sections, and all that stuff? Basically &#8211; do we still use the &#8216;standards&#8217; approach, or do we revert to merrily throwing stuff around? I don&#8217;t understand what <span class="caps">AIR</span> means for my design approach or for accessibility.</p>


</div>
</li>
	<li><div class="even">
	<p class="permlink"><a href="http://24ways.org/2007/christmas-is-in-the-air#c001440" id="c001440">19/12/2007</a></p>
	<h4><a href="http://johndavidanderson.net"><img src="http://www.gravatar.com/avatar.php?gravatar_id=246738eb1c855eba21ed2003e5945552&amp;size=100&amp;default=http%3A%2F%2Fcloud.24ways.org%2Fimg%2Fgravatar.png" class="gravatar" alt="" height="100" width="100" /> John David Anderson <small>http://johndavidanderson.net</small></a></h4>
		<p>My big holdup with JS/HTML <span class="caps">AIR</span> apps is the sandboxing issue. It&#8217;d be so nice to just use prototype or something to get things done, but the inability to use eval() in places (like evaluating scripts in Ajaxed in content) is mind-numbingly annoying. I started to try to build a sandbox bridge, but by then I just decided to build the thing using Flex.</p>

	<p>Has anyone found a good way to setup the sandboxing so it&#8217;s easy to use JavaScript libraries &#8211; especially those that rely on eval() in places?</p>

	<p>Thanks for the great demo Jonathan.</p>


</div>
</li>
	<li><div class="odd">
	<p class="permlink"><a href="http://24ways.org/2007/christmas-is-in-the-air#c001443" id="c001443">19/12/2007</a></p>
	<h4><a href="http://snook.ca/jonathan/"><img src="http://www.gravatar.com/avatar.php?gravatar_id=ce0f8df84e1e4edb3d9999740472261a&amp;size=100&amp;default=http%3A%2F%2Fcloud.24ways.org%2Fimg%2Fgravatar.png" class="gravatar" alt="" height="100" width="100" /> Jonathan Snook <small>http://snook.ca/jonathan/</small></a></h4>
		<p>The <a href="http://livedocs.adobe.com/labs/air/1/devappshtml/help.html?content=QuckStart_Sandbox_Bridge_HTML_1.html" rel="nofollow">sandbox example</a> from Adobe should meet your needs. <a href="http://snook.ca/snitter/" rel="nofollow">Snitter</a> used this approach originally and had 90% of the application running within the sandbox. The only hassle is defining the <span class="caps">API</span> to pass data back and forth from the application sandbox. Oh, and initialization routines have to be considered: first the iframe loads, then the parent window. How you attach things to the <span class="caps">API</span> has to be done in a specific order. (I believe the sandbox example has this covered.)</p>


</div>
</li>
	<li><div class="even">
	<p class="permlink"><a href="http://24ways.org/2007/christmas-is-in-the-air#c001478" id="c001478">22/12/2007</a></p>
	<h4><a href="http://www.swartzfager.org/blog"><img src="http://www.gravatar.com/avatar.php?gravatar_id=de4c9e20ed17f7bcb0e25715f1025ace&amp;size=100&amp;default=http%3A%2F%2Fcloud.24ways.org%2Fimg%2Fgravatar.png" class="gravatar" alt="" height="100" width="100" /> Brian Swartzfager <small>http://www.swartzfager.org/blog</small></a></h4>
		<p>@John:  I&#8217;m with you: I wasn&#8217;t too happy when I realized that I wouldn&#8217;t be able to use the jQuery Slider UI library for my color picker <span class="caps">AIR</span> app (http://colorpicker.riaforge.org) because of the sandbox.  The sandbox examples I found were too obtuse for me, so I ended up writing my own sliding functions.  Fortunately, a lot of the basic jQuery selector functions work without a sandbox, and you can get away with using the standard onLoad JS event instead of the jQuery Ready event to initialize your event handlers.</p>

	<p>@Jonathan:  very cool post.  I&#8217;m much more comfortable programming in <span class="caps">HTML</span>/CSS/JS than I am with Flex, so I&#8217;m always happy when I come across a well-written <span class="caps">AIR</span> example in those technologies.</p>


</div>
</li>
	<li><div class="odd">
	<p class="permlink"><a href="http://24ways.org/2007/christmas-is-in-the-air#c002526" id="c002526">07/04/2009</a></p>
	<h4><a href="www.biswa.tk"><img src="http://www.gravatar.com/avatar.php?gravatar_id=c82afb12e1116eb0898d25658ce14a3a&amp;size=100&amp;default=http%3A%2F%2Fcloud.24ways.org%2Fimg%2Fgravatar.png" class="gravatar" alt="" height="100" width="100" /> Biswajit <small>www.biswa.tk</small></a></h4>
		<p>This is great, for begainer, I am trying to do a Dash-board application which is playing in desktop I dont have idea about, sql server, can it possible to making with MS <span class="caps">ODBS</span> <br />
I mean <span class="caps">ASP</span> and <span class="caps">ACCESS</span>, I am finding &#8230;&#8230; if u have any idea please let me know&#8230;.</p>


</div>
</li>
</ul>

<div id="newcomment">
    
    	<h3 id="cpreview">Impress us</h3>

        
    
        <form id="txpCommentInputForm" method="post" action="/2007/christmas-is-in-the-air#cpreview">
<div class="comments-wrapper">




	<p>
		<label for="name">Name</label>
		<input type="text" value="" name="name" size="25" class="comment_name_input" id="name" /> 
	</p>
	<p>
		<label for="email">Email</label>
		<input type="text" value="" name="email" size="25" class="comment_email_input" id="email" /> 
	</p>
	<p class="optional">
		<label for="web">Website</label>
		<input type="text" value="" name="web" size="25" class="comment_web_input" id="web" />
	</p>
	<p class="textarea">
		<label for="message">Message</label>
		<textarea id="message" name="message" cols="25" rows="5" class="txpCommentInputMessage"></textarea>
	</p>
	<p class="disclaimer">Be friendly / use <a href="http://www.textism.com/tools/textile/">Textile</a></p>
	<p class="buttonbar">
		<input type="submit" value="Preview" name="preview" class="button" id="txpCommentPreview" />
		<input type="submit" value="Submit" name="submit" class="button disabled" id="txpCommentSubmit" disabled="disabled" />	
	</p><!-- buttonbar -->

<input type="hidden" value="67" name="parentid" />
<input type="hidden" value="/2007/christmas-is-in-the-air" name="backpage" />

</div>
</form>
    
    
</div><!-- newcomment -->
		</div><!-- comments -->
		<!-- meta -->
		<div id="author" class="vcard">
			<h3>About the author</h3>
			<p><a href="/authors/jonathansnook" title="More information about Jonathan Snook"><img src="http://cloud.24ways.org/authors/jonathansnook160.jpg" width="160" height="160" alt="Jonathan Snook" /></a></p>
			<p><strong class="fn">Jonathan Snook</strong> is an internationally-admired <span class="title">web designer and developer</span>, and a gifted creator of striking designs and impeccable markup and code. He moves effortlessly from client-side, front-end work to hardcore server-side challenges, and his fluency in CSS, JavaScript, PHP and MySQL make make him the "turn-to" man for many high-profile clients. Coauthor of <a href="http://snook.ca/archives/javascript/accelerated_dom_scripting/" rel="author">Accelerated DOM Scripting and The Art and Science of CSS</a>, he writes regularly at his popular blog <a href="http://snook.ca/" class="url org">snook.ca</a>. Jonathan speaks at top web conferences and also works with his partners at <a href="http://sidebarcreative.com/" rel="me" class="url">Sidebar Creative</a>, makers of world-class websites and innovative applications.</p>

<p class="photo-credit">
    Photo: <a href="http://splintered.co.uk">Patrick H. Lauke</a>
</p>


			<p class="more"><a href="/authors/jonathansnook">More information</a></p>
		</div><!-- author -->
		<div id="related">
			<h3>Related articles</h3>	
			<ul>
			    
            </ul>
			<p><a href="/2009">Article archives&hellip;</a></p>
		</div><!-- related -->
<div class="ad">
<p class="assoc">In association with:</p>
<p><a href="http://grabaperch.com/"><img src="/img/promos/perch.gif" alt="Perch - a really little cms" /></a></p>
<p class="assoc">Use code <strong>24WAYS</strong> for a 20% discount until 25th Dec.</p>
</div>

<div class="annualpromo">
                <h3><a href="http://www.fivesimplesteps.com/books/the-24-ways-annual-2010">Buy the Annual</a></h3> 
                <p>This year, in partnership with <a href="http://fivesimplesteps.com/">Five Simple Steps</a>, we&#8217;re printing all of the articles in a beautiful limited edition annual. All proceeds will go to</p>
                <img src="http://cloud.24ways.org/img/annual/unicef.png" width="180" height="44" alt="Unicef" />
                <p class="deemphasise">So far, we&#8217;ve raised:</p>
                <p class="total">&pound;4,000</p>
                <p><strong>Order your limited edition Annual now for only &pound;8!</strong></p>
                <a class="button" href="https://fivesimplesteps.com/addtocart?nid=129">Preorder</a>
                <div class="sponsors">
                    <p class="deemphasise">Kindly sponsored by:</p>      
                    <a href="http://www.vps.net/"><img src="http://cloud.24ways.org/img/annual/vpsnet.png" alt="VPS NET" width="85" height="23" /></a>
                    <a href="http://leftlogic.com/"><img class="last" src="http://cloud.24ways.org/img/annual/leftlogic.png" alt="LeftLogic" width="86" height="23" /></a>
                </div>
            </div>

	</div><!-- content -->

    		<ul id="footer">
			<li><strong>24 ways</strong> is an <a href="http://edgeofmyseat.com/">edgeofmyseat.com</a> production.</li>
			<li>Edited by <a href="http://allinthehead.com/">Drew McLellan</a> and <a href="http://suda.co.uk/">Brian Suda</a>.</li>
			<li>Assisted by <a href="http://maban.co.uk/">Anna Debenham</a> and <a href="http://fullcreammilk.co.uk/">Owen Gregory</a>.</li>
			<li>Design delivered by <a href="http://madebyelephant.com/">Made by Elephant</a>.</li>
			<li>Possible only with the help of <a href="/authors">our splended authors</a>.</li>
			<li>Grab our <a href="http://feeds.feedburner.com/24ways">RSS feed</a>.</li> 
			<li>Follow us on <a href="http://twitter.com/24ways">Twitter</a> or <a href="http://www.facebook.com/24ways">Facebook</a> for daily updates.</li>
		</ul><!-- footer -->
		<ul id="unnecessary">
			<li id="top"></li>
			<li id="right"></li>
			<li id="bottom"></li>
			<li id="left"></li>
		</ul><!-- unnecessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js" type="text/javascript"></script>
    <script src="http://cloud.24ways.org/js/all.js" type="text/javascript"></script>
    <script src="http://stats.24ways.org/mint/?js" type="text/javascript"></script>
</body>





</html>