<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
		"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">

<head>

<title>Sitepoint : New Articles, Fresh Thinking for Web Developers and Designers</title>

	<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
	<meta name="robots" content="all" />
	<meta name="description" content="Learn Web Design at the SitePoint Reference. With full descriptions, working examples, and browser compatibility information." />
	<meta name="keywords" content="CSS positioning, XHTML standards, ajax development, tableless design, accessability, freelance web design, PHP MySQL tutorial, page tutorial, ruby on rails, teaching dotnet, standards compliant," />

	<link rel="shortcut icon" href="/favicon.ico" />
	<link rel="apple-touch-icon" href="/static/reference/images/apple-touch-icon.png" />

	
<link rel="stylesheet" href="/static/common/styles/format.css?v=2.0.37" media="screen,projection,print" type="text/css" />
<link rel="stylesheet" href="/static/common/styles/print.css?v=2.0.37" media="print" type="text/css" />
<link rel="stylesheet" href="/static/articles/styles/print.css?v=2.0.37" media="screen,projection,print" type="text/css" />
<!--[if IE]><link rel="stylesheet" href="/static/common/styles/ie.css?v=2.0.37" media="screen,projection,print" type="text/css" /><![endif]-->
</head>

<body>

	<div id="header">
		<h1>
			<a href="http://www.sitepoint.com/"><span></span>SitePoint</a>
		</h1>
		<h3 class="main-type">Article</h3>
		<div id="print-article-crumb">
			            <!-- Crumb trail -->
            <div class="crumb">
                                                            <a href="http://www.sitepoint.com/">Home</a>
                                                                &raquo;
                                                                                <a href="/category/server-side-coding">Server-side Coding</a>
                                                                &raquo;
                                                                                <a href="/category/asp">ASP & .NET Tutorials</a>
                                                                &raquo;
                                                                                ASP.NET 2.0: A Getting Started Guide                                                                    </div>
            <!-- End Crumb trail -->
		</div>
	</div>

	<div id="articlecms">
	<div id="pagecontent" class="clearfix">

<div class="print-article-content">

<div class="featureimage">
			<img src="http://sitepointstatic.com/graphics/asponaplane.jpg" alt="SitePoint Feature Article" />
	</div>
<h1 id="title">ASP.NET 2.0: A Getting Started Guide</h1>

<div id="print-articledetail">

        
    <div id="bio">
                        <div class="boxes">
                        <h3>About the Author</h3>
                        <h4>Cristian Darie and Zak Ruvalcaba</h4>
                        <p>
                                <img
                                        height="67"
                                        width="56"
                                        alt="Author Cristian Darie"
                                        src="http://sitepointstatic.com/graphics/author_cristian_darie.jpg"
                                />
                                Cristian is a software engineer with experience in a wide range of technologies, and author of numerous technical books. If you want to say "hi," you can reach Cristian through his personal website at <a href="http://www.cristiandarie.ro">http://www.cristiandarie.ro</a>. Zak Ruvalcaba holds a Bachelor's degree from San Diego State University and a Master of Science in Instructional Technology from National University in San Diego.
							    <p>
									<a href="http://www.sitepoint.com/articlelist/466">View all articles by Cristian Darie and Zak Ruvalcaba...</a>
							    </p>

                        </p>
                </div>
            </div>

	<p class="by">By: <a href="http://www.sitepoint.com/articlelist/466" title="Find out more about this author">Cristian Darie and Zak Ruvalcaba</a></p>

	<p class="date">
		November 8th, 2006	</p>

	<p class="rating">
		Reader Rating: 9	</p>


<p><strong>ASP.NET is one of the most exciting web development technologies on offer today. When Microsoft released the first version a few years ago, many web developers thought all their dreams had come true. Here was a powerful platform with lots of built-in functionality, astonishing performance levels, and one of the best IDEs (Integrated Development Environments) around: Visual Studio. What more could anyone want? Indeed, ASP.NET showed the way for the faster, easier, and more disciplined development of dynamic web sites, and the results were impressive.</strong></p>

<p>Time has passed, and ASP.NET has grown. ASP.NET 2.0 comes with extraordinary new features as well as an expanded and more powerful underlying framework. Not only that, but the basic versions of all development tools, including Visual Web Developer 2005 Express Edition and SQL Server 2005 Express Edition, are free!</p>

<p>This book--SitePoint's <a class="sublink" href="http://www.sitepoint.com/books/aspnet2/"><em>Build Your Own ASP.NET Web Site Using VB and C#, Second Edition</em></a> <span class="tiny">[1]</span>--shows you how to use all these technologies together in order to produce fantastic results. It'll take you step by step through each task, showing you how to get the most out of each technology and tool. Developers who have already worked with earlier versions of ASP.NET will find that the latest version has changed so much that entire chapters of this book are devoted to ASP.NET 2.0-specific features.</p>

<p>In this excerpt, which contains the first four chapters of the book, we'll start out by setting up your system for .NET development. In <a class="sublink" href="http://www.sitepoint.com/article/asp-net-getting-started/3">Chapter 2</a> <span class="tiny">[2]</span>, we'll step through the basics of ASP.NET, and learn about the parts of the page, view state and directives, and the ASP.NET languages. <a class="sublink" href="http://www.sitepoint.com/article/asp-net-getting-started/4">Chapter 3</a> <span class="tiny">[3]</span> introduces VB and C# programming basics, from control and page events to namespaces and code-behind files. The final chapter in this excerpt, <a class="sublink" href="http://www.sitepoint.com/article/asp-net-getting-started/6">Chapter 4</a> <span class="tiny">[4]</span>, pulls together all the practical information we've discussed as we build web forms, and put Web and HTML server controls, web user controls, master pages and Cascading Style Sheets into action!</p>

<p>We're going to cover <em>a lot</em> of ground in the coming pages, so if you like, feel free to <a rel='external' class="sublink" href="http://www.sitepoint.com/popup/popup.php?zone=2&popupid=86">download and read these chapters offline</a> <span class="tiny">[5]</span>.</p>

<p>Let's begin!</p>

<h5>What is ASP.NET?</h5>



<p>For years, the Active Server Pages (ASP) technology was arguably the leading choice for web developers building dynamic web sites on Windows web servers, as it offered flexible yet powerful scripting capabilities. Early in 2002, Microsoft released a new technology for Internet development called ASP.NET. ASP.NET represents a leap forward from ASP both in its sophistication and the productivity gains it achieves for developers. It continues to offer flexibility in terms of language support, but rather than a range of simple scripting languages, several fully-fledged programming languages are now at the fingertips of ASP.NET developers. Development in ASP.NET requires not only an understanding of HTML and web design, but also a firm grasp of the concepts of object oriented programming and development.</p>

<p>In the next few sections, we'll introduce you to the basics of ASP.NET. We'll walk through the process of installing it on your web server, and step through a simple example that demonstrates how ASP.NET pages are constructed. But first, let's define what ASP.NET actually is.</p>

<p><em>ASP.NET is a server-side technology for developing web applications based on the Microsoft .NET Framework.</em> Let's break that jargon-filled sentence down.</p>

<p>ASP.NET is a server-side technology; that is, it runs on the web server. Most web designers start their careers learning client-side technologies like HTML, JavaScript, and Cascading Style Sheets (CSS). When a web browser requests a web page created with only client-side technologies, the web server simply grabs the files that the browser (or client) requests and sends them down the line. The client is entirely responsible for reading the markup in those files and interpreting that markup to display the page on the screen.</p>

<p>Server-side technologies, like ASP.NET, are different. Instead of being interpreted by the client, server-side code (for example, the code in an ASP.NET page) is interpreted by the web server. In the case of ASP.NET, the code in the page is read by the server and used to generate HTML, JavaScript, and CSS that is then sent to the browser. Since the processing of the ASP.NET code occurs on the server, it's called a server-side technology. As Figure 1.1 shows, the client only sees the HTML, JavaScript, and CSS. The server is entirely responsible for processing the server-side code.</p>

<p><img src="http://sitepointstatic.com/graphics/fig-userinteractwithwebapp.png"  height="372" width="500" alt="1556_fig-userinteractwithwebapp" /><br />
<em>Figure 1.1. A user interacting with a web application</em></p>

<p>Note the three roles involved in such a transaction:</p>

<p><ul>
	<li><strong>user</strong> - Never forget that there's a real person at the end (or beginning) of the line.</li>
	<li><strong>web client</strong> - This is the software program that the person uses to interact to the web application. The client is usually a web browser, such as Internet Explorer or Firefox.</li>
	<li><strong>web server</strong> - This is the software program located on the server. It processes requests made by the web client.</li>
</ul>
</p>

<p>ASP.NET is a technology for developing web applications. A web application is just a fancy name for a dynamic web site. Web applications usually (but not always) store information in a database, and allow visitors to the site to access and change that information. Many different programming technologies and supported languages have been developed to create web applications; PHP, JSP, Ruby on Rails, CGI, and ColdFusion are just a few of the more popular ones. However, rather than tying you to a specific technology and language, ASP.NET lets you write web applications using a variety of familiar programming languages.</p>

<p>ASP.NET uses the Microsoft .NET Framework. The .NET Framework collects all the technologies needed for building Windows desktop applications, web applications, web services, and so on, into a single package, and makes them available to more than 40 programming languages.</p>

<p>Even with all the jargon explained, you're probably still wondering what makes ASP.NET so good. The truth is that there are many server-side technologies around, each of which has its own strengths and weaknesses. Yet ASP.NET has a few features that really are unique:</p>

<p><ul>
	<li>ASP.NET lets you use your favorite programming language, or at least one that's close to it. The .NET Framework currently supports over 40 languages, and many of these may be used to build ASP.NET web sites. The most popular choices are C# (pronounced &quot;C sharp&quot;) and Visual Basic (or VB), which are the ones we'll cover in this book.</li>
	<li>ASP.NET pages are compiled, not interpreted. In ASP.NET's predecessor, ASP, pages were interpreted: every time a user requested a page, the server would read the page's code into memory, figure out how to execute the code (that is, interpret the code), and execute it. In ASP.NET, the server need only figure out how to execute the code once. The code is compiled into efficient binary files, which can be run very quickly, again and again, without the overhead involved in re-reading the page each time. This represents a big jump in performance from the old days of ASP.</li>
	<li>ASP.NET has full access to the functionality of the .NET Framework. Support for XML, web services, database interaction, email, regular expressions, and many other technologies are built right into .NET, which saves you from having to reinvent the wheel.</li>
	<li>ASP.NET allows you to separate the server-side code in your pages from the HTML layout. When you're working with a team composed of programmers and design specialists, this separation is a great help, as it lets programmers modify the server-side code without stepping on the designers' carefully crafted HTML?and vice versa.</li>
	<li>ASP.NET makes it easy to reuse common User Interface elements in many web forms, as it allows us to save those components as independent web user controls. During the course of this book, you'll learn how to add powerful features to your web site, and to reuse them in many places with a minimum of effort.</li>
	<li>You can get excellent tools that assist in developing ASP.NET web applications. Visual Web Developer 2005 is a free, powerful visual editor that includes features such as code autocompletion, code formatting, database integration functionality, a visual HTML editor, debugging, and more. In the course of this book, you'll learn how to use this tool to build the examples we discuss.</li>
	<li>The .NET Framework was first available only to the Windows platform, but thanks to projects such as <a class="sublink" href="http://www.mono-project.com/">Mono</a> <span class="tiny">[6]</span>, it's since been ported to other operating systems.</li>
</ul>
</p>

<p>Still with me? Great! It's time to gather our tools and start building!</p>

<h5>Installing the Required Software</h5>



<p>If you're going to learn ASP.NET, you first need to make sure you have all the necessary software components installed and working on your system. Let's take care of this before we move on.</p>

<p><ul>
	<li><strong>Internet Information Services (IIS) or Cassini</strong> - IIS is the web server of choice for running ASP.NET web applications. You'll need your copy of the Windows CD to install and configure it. Unfortunately, some versions of Windows (such as Windows XP Home Edition) don't support IIS. If you're one of those users, there's Cassini. Cassini is a small web server designed for hobbyists who are looking to build ASP.NET web sites. It isn't as robust, powerful, or user-friendly as IIS, but it will be sufficient for our purposes. When we come to use Visual Web Developer in Chapter 5, Building Web Applications, we'll be making use of that product's built-in development web server, so not having access to IIS on your system won't be a problem.</li>
	<li><strong>a modern web browser</strong> - Throughout this book, we'll be using Internet Explorer 6, but you can use other browsers during development if you wish. Any modern browser will do.</li>
	<li><strong>.NET Framework 2.0</strong> - As we've already discussed, the .NET Framework drives ASP.NET. When you install the .NET Framework, you'll automatically install the files necessary to run ASP.NET. You're likely to have the .NET Framework already, as it installs automatically through the Windows Update service.</li>
	<li><strong>.NET Framework Software Development Kit (SDK)</strong> - The .NET Framework 2.0 Software Development Kit (SDK) is a free download that contains the necessary Web Application development tools, a debugger for error correcting, and a suite of samples and documentation.</li>
</ul>
</p>

<p>We're also going to need a database. In this book, we'll use the following:</p>

<p><ul>
	<li><strong>Microsoft SQL Server 2005 Express Edition</strong> - This is the free, but still fully functional, version of SQL Server 2005. If you worked with previous versions of these technologies, you should know that SQL Server 2005 Express is a replacement for the previous Microsoft SQL Data Engine (MSDE). You can read more on the differences between various SQL Server 2005 editions at <a class="sublink" href="http://www.microsoft.com/sql/2005/productinfo/sql2005features.asp">the Microsoft site</a> <span class="tiny">[7]</span>.</li>
	<li><strong>SQL Server Management Studio Express</strong> - Because the Express Edition of SQL Server doesn't ship with any visual management tools, you can use this free tool, also developed by Microsoft, to access your SQL Server 2005 databases.</li>
</ul>
</p>

<p><div class="article-cms-pagebreak"></div></p>

<h5>Installing the Web Server</h5>



<p><strong><em>Installing Internet Information Services (IIS)</em></strong></p>

<p>IIS comes with most versions of server-capable Windows operating systems--including Windows 2000 Professional, Server, and Advanced Server; Windows XP Professional; Windows XP Media Center Edition; and Windows Server 2003--but it's not installed automatically in all versions, which is why it may not be present on your computer. IIS isn't available for Home editions of these operating systems, such as Windows XP Home Edition. If you run this, you'll need to rely on Cassini, which we discuss below.</p>

<p>To see whether you have IIS installed and running, simply locate your Administrative Tools folder (sometimes it's a menu option; sometimes it's a folder in the Control Panel (To see this folder, you'll need to view the Control Panel in &quot;classic view.&quot;) and check whether or not it contains a shortcut to Internet Information Services. If the shortcut isn't visible, then it's not installed. To install IIS, simply follow these steps:</p>

<p><ol>
	<li>In the Control Panel, select Add or Remove Programs.</li><br />
	<li>Choose Add/Remove Windows Components. The list of components will become visible within a few seconds.</li><br />
	<li>In the list of components, check Internet Information Services (IIS), as shown in Figure 1.2. The default installation options are enough for ASP.NET development, but you may want to click Details... to view the extra options you could add.</li><br />
	<li>Click Next. Windows may prompt you to insert the Windows CD.</li>
</ol>
</p>

<p><img src="http://sitepointstatic.com/graphics/0107_iis_install.png"  height="390" width="500" alt="1556_0107_iis_install" /><br />
<em>Figure 1.2. Installing IIS</em></p>

<p><strong><em>Add Administrative Tools to the Start Menu</em></strong></p>

<p>Here's how to add Administrative Tools to the Windows XP Start menu:</p>

<p><ol>
	<li>Right-click on the Start button and select Properties to bring up the Taskbar and Start Menu Properties dialog.</li><br />
	<li>Click the Customize... button to bring up the Customize Start Menu dialog.</li><br />
	<li>If you're using the classic Start menu, check Display Administrative Tools, then click OK.</li><br />
	<li>If you're using the Windows XP-style Start menu, click the Advanced tab, scroll through the Start menu items list until you get to System Administrative Tools, and select from Display on the All Programs menu or Display in the All Programs menu and the Start menu.</li>
</ol>
</p>

<p>Once IIS is installed, close the Add or Remove Programs dialog. To check that IIS has installed correctly, see if you can find the Internet Information Services short cut in Administrative Tools. If you can, IIS is installed. Open the link to make first contact with the IIS management console, which is shown in Figure 1.3. In the left pane, you'll initially see the name of your computer, whose nodes you can expand.</p>

<p><img src="http://sitepointstatic.com/graphics/0114_iis_tool.png"  height="270" width="500" alt="1556_0114_iis_tool" /><br />
<em>Figure 1.3. The IIS administration tool</em></p>

<p>You can close this tool for now; you'll meet it again later.</p>

<p>You are now ready to host web applications. Although we won't cover the configuration of IIS for external use, we will show you how to configure IIS to support local development of ASP.NET applications in order that they may be uploaded to your external web hosting provider later.</p>

<p><strong><em>Installing Cassini</em></strong></p>

<p>If you're unable to install IIS, you'll need to download and install Cassini:</p>

<p><ol>
	<li>Go to the Cassini download page.</li><br />
	<li>Download the Cassini installer executable (cassini.exe).</li><br />
	<li>Run cassini.exe and follow the steps presented by the installer, accepting the default options.</li>
</ol>
</p>

<p>If the process went to plan, everything you need to run Cassini can be found in the folder <code>C:\Cassini</code>. Double-click <code>CassiniWebServer.exe</code> in that folder to start its management console, which is shown in Figure 1.4.</p>

<p><img src="http://sitepointstatic.com/graphics/fig-cassini.png"  height="317" width="500" alt="1556_fig-cassini" /><br />
<em>Figure 1.4. The Cassini management console</em></p>

<p>We'll need to do some more work to get Cassini up and running properly, but we'll need to install the .NET Framework and the Software Development Kit first.</p>

<h5>Installing the .NET Framework and the SDK</h5>



<p>To begin creating ASP.NET applications, you'll need to install the .NET Framework and the Software Development Kit (SDK). The .NET Framework includes the files necessary to run and view ASP.NET pages, while the SDK includes samples, documentation, and a variety of free tools.</p>

<p><strong><em>Installing the .NET Framework</em></strong></p>

<p>The best method of acquiring the .NET Framework is to download and install it directly from the Web. Note that it is also delivered through Windows Update, so you may already have it installed on your system. To check, open the folder <code>C:\WINDOWS\Microsoft.NET\Framework</code> (if your copy of Windows is installed somewhere other than <code>C:\WINDOWS</code>, change this path accordingly). If this folder doesn't exist, you definitely don't have the .NET Framework installed. If it does exist, you should find inside it at least one folder with a name like <code>v1.1.4322</code>. Each of these kinds of folders holds a different version of the .NET Framework you have installed. If at least one of these folders' names doesn't start with v2 or higher, you'll need to install the latest version of the .NET Framework.</p>

<p>To install the latest version of the .NET Framework, simply follow the steps outlined below:</p>

<p><ol>
	<li>Go to the <a class="sublink" href="http://www.asp.net/">ASP.NET support site</a> <span class="tiny">[8]</span> and click the Download the .NET Framework link.</li><br />
	<li>Under the .NET Framework Version 2.0 Redistributable Package heading, click the appropriate download link for your hardware. Remember, we'll install the redistributable package first, then the SDK. The link will advance you to a download page.</li><br />
	<li>Choose the language and version of the installation you want, and click Download.</li><br />
	<li>Save the file to a local directory. After the download is complete, double-click the executable to begin the installation.</li><br />
	<li>Follow the steps presented by the wizard until installation completes.</li>
</ol>
</p>

<p><strong><em>Installing the SDK</em></strong></p>

<p>Now that you've installed the redistributable package, you need to install the Software Development Kit (SDK):</p>

<p><ol>
	<li>Go back to the ASP.NET support site and follow the Download the .NET Framework link again.</li><br />
	<li>This time, click the appropriate download link under the .NET Framework Version 2.0 Software Development Kit heading. The link will advance you to a download page.</li><br />
	<li>Choose the language version of the installation you want to use and click Download, as you did to download the redistributable package.</li><br />
	<li>When prompted to do so, save the file to a local directory.</li><br />
	<li>After the download is complete, double-click the executable to begin the installation. Before you do so, I strongly recommend that you close all other programs to ensure the install proceeds smoothly.</li><br />
	<li>Follow the steps outlined by the .NET Setup Wizard until installation completes. When asked for setup options, it's safe to use the default values.</li>
</ol>
</p>

<p>The SDK will take slightly longer to install than the framework.</p>

<p><em>A Big Download!</em><br />
<em>The .NET Framework SDK weighs in at about 350MB, so it will probably take a while to download.</em></p>

<h5>Configuring the Web Server</h5>



<p><strong><em>Configuring IIS</em></strong></p>

<p>After installing the .NET Framework and the SDK manually, you will need to configure IIS to make it aware of ASP.NET. To do this, you need to follow a few simple steps:</p>

<p>Open the command prompt by selecting Start &gt; All Programs &gt; Microsoft .NET Frameworks SDK v2.0 &gt; SDK Command Prompt.</p>

<p>Type the following command to install ASP.NET:</p>

<p><code>C:\Program Files\...\SDK\v2.0&gt;<strong>aspnet_regiis.exe -i</strong> &nbsp;<br />
Start installing ASP.NET (2.0.50727). &nbsp;<br />
......... &nbsp;<br />
Finished installing ASP.NET (2.0.50727).</code></p>

<p>Once ASP.NET is installed, close the command prompt and check again to confirm that ASP.NET installed correctly.</p>

<p><em>Running <code>aspnet_regiis.exe</code></em><br />
<em>Depending on the circumstances, ASP.NET may already have been installed for you, but running aspnet_regiis.exe can't hurt. Also, remember that you need to run this utility again in case you reinstall IIS.</em></p>

<p><strong><em>Configuring Cassini</em></strong></p>

<p>If you've installed Cassini, you'll need to get under the hood of the .NET Framework to coerce Cassini into working as it should.</p>

<p>Open the command prompt by selecting Start &gt; All Programs &gt; Microsoft .NET Frameworks SDK v2.0 &gt; SDK Command Prompt.</p>

<p>Enter the following command at the prompt:</p>

<p><code>C:\Program Files\...\SDK\v2.0&gt;<strong>gacutil /i C:\Cassini\Cassini.dll</strong> &nbsp;<br />
Microsoft (R) .NET Global Assembly Cache Utility. Version 2.0... &nbsp;<br />
Copyright (c) Microsoft Corporation. &nbsp;All rights reserved. &nbsp;<br />
 &nbsp;<br />
Assembly successfully added to the cache</code></p>

<p>Cassini is now ready to go.</p>

<p><strong><em>Where do I Put my Files?</em></strong></p>

<p><em>IIS Recommended</em><br />
<em>From here on in, the instructions we provide will be centered around IIS, as Cassini isn't suitable for production environments. Many of the concepts we'll discuss do not apply to Cassini, as it's much simpler and lacks many of IIS's features. Where needed, Cassini instructions will be given, but IIS will receive the bulk of the discussion.</em></p>

<p>Now that you have ASP.NET up and running, let's find out where the files for your web applications are kept on the computer. You can readily set IIS to look for web applications in any folder, including the <code>My Documents</code> folder, or even a network share. By default, IIS maps the <code>C:\Inetpub\wwwroot</code> folder of your disk to your web site's root directory, which is generally considered a good repository for storing and managing your web applications.</p>

<p>If you open this <code>wwwroot</code> folder in Windows Explorer, and compare its contents with the files that appear in the Default Web Site in the IIS administration tool, as shown in Figure 1.5, you'll notice that the files and folders are the same (some extra items will be listed in IIS; we'll look at these shortly). You need to use the IIS administration tool to set up the behavior of these files and folders under IIS. We'll see more on this soon.</p>

<p><img src="http://sitepointstatic.com/graphics/fig-foldersiis.png"  height="275" width="500" alt="1556_fig-foldersiis" /><br />
<em>Figure 1.5. Folders inside wwwroot also appear inside IIS</em></p>

<p><strong><em>Using localhost</em></strong></p>

<p>By putting your files within <code>C:\Inetpub\wwwroot</code>, you give your web server access to them. If you've been developing web pages for a long time, habit may drive you to open files directly in your browser by double-clicking on the HTML files. However, because ASP.NET is a server-side language, your web server needs to have a crack at the file before it's sent to your browser for display. If the server doesn't get this opportunity, the ASP.NET code won't be converted into HTML that your browser can understand. For this reason, ASP.NET files can't be opened directly from the disk using Windows Explorer.</p>

<p>Your local web server can be accessed through a special web address that indicates the current computer: <code>http://localhost/</code>. If you try this now, IIS will open up a default help page (although this behavior will vary depending on the settings of your Windows installation; for example, if you get an error instead of the default help page, don't worry).</p>

<p>What you need to keep in mind, though, is that the address you'll use to access local web applications will always start with <code>http://localhost/</code>, and that, by default, this root address points to the folder on your disk.</p>

<p>To see this in practice, create a new file named <code>index.htm</code> inside <code>C:\Inetpub\wwwroot</code>, with the following contents (note that all of the code and images used in this book are available for download from sitepoint.com. See the Preface for more information):</p>

<p><code>Example 1.1. index.htm &nbsp;<br />
 &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp;<br />
&lt;html&gt; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;Simple HTML Page&lt;/title&gt; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp;<br />
 &nbsp; &nbsp;&lt;P&gt;This is a simple HTML page. &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp;<br />
&lt;/html&gt;</code></p>

<p>Now, load this page through <code>http://localhost/index.htm</code>, as shown in Figure 1.6.</p>

<p><img src="http://sitepointstatic.com/graphics/0125_first.png"  height="155" width="500" alt="1556_0125_first" /><br />
<em>Figure 1.6. Testing IIS</em></p>

<p><em>Experiencing an Error?</em><br />
<em>If the page doesn't load as illustrated in Figure 1.6, your IIS installation has problems. You might want to double-check that you correctly followed the steps for installing it, and re-check the IIS configuration procedure.</em></p>

<p>This localhost name is equivalent to the so-called loopback IP address, 127.0.0.1, so you can get the same results by entering <code>http://127.0.0.1/index.htm</code> into your browser. If you know them, you can also use the name or IP address of your machine to the same end.</p>

<p>Note that if you do try any of these equivalents, a dialog will appear before the page is opened, to ask you for your network credentials. This occurs because you're no longer using your local authentication, which is implicit with localhost.</p>

<p><em>Stopping and Starting IIS</em><br />
<em>Now that we have IIS up and running, and ASP.NET installed, let's look at how you can start, stop, and restart IIS if the need arises. For the most part, you'll always want to have IIS running; however, if you want to shut it down temporarily for any reason (such as security concerns), you can. Also, some external programs may stop IIS upon launch because of potential security vulnerabilities, so you'll need to start it again yourself. If you want to stop IIS when it's not being used, simply open the Internet Information Services management console, right-click on Default Web Site and select Stop. Alternatively, after selecting Default Web Site, you can use the Stop, Pause, and Play icons from the toolbar.</em></p>

<p><div class="article-cms-pagebreak"></div></p>

<p><strong><em>Virtual Directories</em></strong></p>

<p>As we saw in the section called &quot;Where do I Put my Files?&quot;, physical sub-folders of <code>C:\Inetpub\wwwroot</code> also become subdirectories of the web site. For instance, imagine your company has a web server that serves documents from <code>C:\Inetpub\wwwroot</code>. Your users can access these documents through <code>http://www.example.com/</code>. If you create a subfolder of <code>wwwroot</code>, named <code>about</code>, files in that directory can be accessed via <code>http://www.example.com/about/</code>.</p>

<p>You could also set up another subdirectory in your web site, but serve files from a different location on the disk. If, for instance, you were developing another web application, you could store the files for it in <code>C:\dev\OrderSystem</code>. You could then create within IIS a new virtual directory called, say, <code>order</code>, which mapped to this location. This new site would then be accessible through the URL <code>http://www.example.com/order/</code>. As this application is in development, you would probably want to set IIS to hide this virtual directory from the public until the project is complete; your existing web site would still be visible.</p>

<p>By default, a virtual directory, called <code>IISHelp</code>, is preconfigured in IIS; it maps to <code>c:\windows\help\iishelp</code>. You can see in Figure 1.7 that IISHelp contains subdirectories called <code>common</code> and <code>iis</code>--these are physical folders inside <code>c:\windows\help\iishelp</code>.</p>

<p><img src="http://sitepointstatic.com/graphics/fig-iisvirtualdirectory.png"  height="307" width="500" alt="1556_fig-iisvirtualdirectory" /><br />
<em>Figure 1.7. The IISHelp virtual directory</em></p>

<p>Let's create a virtual directory on your server, and test it with a simple page:</p>

<p>First, you need to create on your disk a folder to which your virtual directory will be mapped. Create a folder called WebDocs in an easily accessible location on your disk, such as <code>C:\</code>, and create a folder named <code>Learning</code> inside that folder. We'll use this folder, <code>C:\WebDocs\Learning</code>, for various exercises in this book.</p>

<p>Copy the <code>index.htm</code> file you created earlier into your newly created <code>Learning</code> folder.</p>

<p>In the Internet Information Services management console, right-click Default Web Site and select New &gt; Virtual Directory. The Virtual Directory Creation Wizard will appear. Click Next.</p>

<p>You need to choose an alias for your virtual directory: enter <code>Learning</code>, then click Next.</p>

<p>Browse and select the Learning folder you created at step 1, or enter its full path (<code>C:\WebDocs\Learning</code>). Click Next.<br />
   <br />
In the next screen, you can select permissions settings for your directory. Typically, you'll want to leave the default options (Read and Run scripts) checked. Click Next.</p>

<p>Click Finish. You'll see your new virtual directory as a child of Default Web Site, as Figure 1.8 illustrates.</p>

<p><img src="http://sitepointstatic.com/graphics/0130_NewVirtualDirectory.png"  height="232" width="500" alt="1556_0130_NewVirtualDirectory" /><br />
<em>Figure 1.8. Creating a new virtual directory</em></p>

<p>Load this link by entering <code>http://localhost/Learning/index.htm</code> into the address bar of your browser. If everything went well, you should see your little HTML page load, as has the one in Figure 1.9.</p>

<p><img src="http://sitepointstatic.com/graphics/0135_TestingVirtualDirectory.png"  height="155" width="500" alt="1556_0135_TestingVirtualDirectory" /><br />
<em>Figure 1.9. Testing your new virtual directory</em></p>

<p>Note that by loading the page through the HTTP protocol, your request goes through IIS. Since <code>index.htm</code> is a simple HTML page that doesn't need any server-side processing, you can also load it directly from the disk. However, this won't be the case with the ASP.NET scripts you'll see through the rest of this book.</p>

<p>Once your new virtual directory has been created, you can see and configure it through the Internet Information Services management console shown in Figure 1.8. You can see the folder's contents in the right-hand panel.</p>

<p>As index.htm is one of the default document names, you can access that page just by entering <code>http://localhost/Learning/</code> into your browser's address bar. To see and edit the default document names for a virtual directory (or any directory, for that matter), you can right-click the directory's name in the IIS management console, click Properties, and select the Documents tab. You'll see the dialog displayed in Figure 1.10.</p>

<p><img src="http://sitepointstatic.com/graphics/0140_DefaultDocuments.png"  height="465" width="472" alt="1556_0140_DefaultDocuments" /><br />
<em>Figure 1.10. Default document types for the Learning virtual directory</em></p>

<p>By default, when we request a directory without specifying a filename, IIS looks for a page with the name of one of the default documents, such as <code>index.htm</code> or <code>default.htm</code>. If there is no index page, IIS assumes we want to see the contents of the requested location. This operation is allowed only if the Directory Browsing option is selected for the directory in question. You'll find that option in the Directory tab of the Properties window.</p>

<p><em>Directory Browsing</em><br />
<em>Enabling directory browsing is not something you'd usually want to do. Allowing visitors to freely see and access all the files and directories that make up your web page is not only a little messy and unprofessional, but also increases the potential for security issues (you don't want any hackers to stick their nose into your code, do you?). So, by default, IIS won't allow directory browsing when a directory is requested: if a default file such as <code>index.htm</code> isn't there, ready to be served to the visitor, a message reading &quot;Directory Listing Denied&quot; will be served instead.</em></p>

<p>To change your virtual directory's options, you have to right-click the virtual directory (Learning, in our case) in the IIS console, and choose Properties. The Properties dialog that we've just used lets us configure various useful properties, including:</p>

<p><ul>
	<li><strong>Virtual Directory</strong> - This option allows you to configure directory-level properties, including path information, the virtual directory name, access permissions, etc. Everything that was set up through the wizard is modifiable through this tab.</li>
	<li><strong>Documents</strong> - This option allows you to configure a default page that displays when the user types in a full URL. For instance, because <code>default.aspx</code> is listed as a default page, the user need only enter <code>http://www.mysite.com/</code>, rather than <code>http://www.mysite.com/default.aspx</code>, into the browser's address bar. You can easily change and remove these default pages by selecting the appropriate button to the right of the menu.</li>
	<li><strong>Directory Security</strong> - This option provides you with security configuration settings for the virtual directory.</li>
	<li><strong>HTTP Headers</strong> - This option gives you the ability to forcefully control page caching on the server, add custom HTTP Headers, Edit Ratings (this helps identify the content your site provides to users), and create MIME types. Don't worry about this for now.</li>
	<li><strong>Custom Errors</strong> - This option allows you to define your own custom error pages. Rather than presenting the standard error messages that appear within Internet Explorer, you can customize error messages with your company's logo and messages of your choice.</li>
	<li><strong>ASP.NET</strong> - This tab allows you to configure the options for the ASP.NET applications stored in that folder.</li>
</ul>
</p>

<p>One thing to note at this point is that we can set properties for the Default Web Site node, and choose to have them &quot;propagate&quot; down to all the virtual directories we've created.</p>

<p><strong><em>Using Cassini</em></strong></p>

<p>If you're stuck using a version of Windows that doesn't support IIS, you'll need to make use of Cassini to get your simple ASP.NET web applications up and running. Cassini doesn't support virtual directories, security settings, or any of IIS's other fancy features; it's just a very simple web server that gives you the basics you need to get up and running.</p>

<p>To get started using Cassini:</p>

<p><ol>
	<li>Create a directory called <code>C:\WebDocs\Learning</code>, just like the one we created in the section called &quot;Virtual Directories&quot;.</li><br />
	<li>Copy index.htm into this folder. We first saw index.htm in the section called &quot;Using localhost&quot;.</li><br />
	<li>Start Cassini by opening <code>C:\Cassini</code> (or, if you chose to install Cassini somewhere else, open that folder), then double-click on the file <code>CassiniWebServer.exe</code>.</li><br />
	<li>Cassini has just three configuration options:<br />
<ol>
	<li>Application Directory - It's here that your application's files are stored. Enter C:\WebDocs\Learning into this field.</li><br />
	<li>Server Port - Web servers almost always operate on port 80, so we won't touch this setting.</li><br />
	<li>Virtual Root - This is similar to IIS's virtual directories feature, though it's nowhere near as flexible. By default, it's set to <code>/</code>, meaning that you can access the file <code>C:\WebDocs\Learning\index.htm</code> by entering the address <code>http://localhost/index.htm</code>. However, to match our IIS virtual directory configuration, we want to make this file's address <code>http://localhost/Learning/index.htm</code>. To create this effect, enter <code>/Learning/</code> into this field.</li>
</ol>
<br />
	<li>Once you have filled in the Application Directory and Virtual Root fields, click the Start button to start the web server.</li><br />
	<li>After clicking Start, a link to the web site that's being served will appear toward the bottom of the window, as shown in Figure 1.11.</li>
</ol>
</p>

<p><img src="http://sitepointstatic.com/graphics/fig-cassingserving.png"  height="317" width="500" alt="1556_fig-cassingserving" /><br />
<em>Figure 1.11. Cassini serving a web site</em></p>

<p>When you browse open this site in Cassini, you won't see <code>index.htm</code> straight away--you'll be presented with a list of files instead. Cassini only recognizes files named <code>default.htm</code> or <code>default.aspx</code> as default documents, and it doesn't allow you to configure this feature as IIS does.</p>

<p><div class="article-cms-pagebreak"></div></p>

<h5>Installing SQL Server 2005 Express Edition</h5>



<p>After making sure IIS, the .NET Framework, and the SDK are installed correctly, it's time to move forward and install the next piece of software that you'll be using as we work through this book: SQL Server 2005 Express Edition.</p>

<p>SQL Server 2005 is Microsoft's database solution for medium to large companies and enterprises. SQL Server 2005 can be quite expensive, it generally requires its own dedicated database server machine, and, at times, it necessitates that a certified database administrator (DBA) be employed to ensure its maintenance; yet it does offer a robust and scalable solution for larger web applications.</p>

<p>For the examples in this book, we'll use SQL Server 2005 Express Edition, which is free and sufficiently powerful for our needs. Unlike the expensive versions, SQL Server 2005 Express Edition doesn't ship with visual management utilities, but you can use another free tool from Microsoft--SQL Server Management Studio Express, which we'll install next)--for these purposes.</p>

<p>You can install SQL Server 2005 Express Edition as follows:</p>

<p><ol>
	<li>Navigate to <a class="sublink" href="http://msdn.microsoft.com/vstudio/express/sql/">http://msdn.microsoft.com/vstudio/express/sql/</a> <span class="tiny">[9]</span>, and click the Download Now link.</li><br />
	<li>In the next page, you can choose between SQL Server 2005 Express Edition, and SQL Server 2005 Express Edition with Advanced Services. The former will be fine for our purposes. Your system should meet the necessary requirements, so go ahead and click Download.</li><br />
	<li>Once the download has completed, double-click the downloaded executable file, and follow the steps to install the product. It's safe to use the default options all the way through, though it is a rather long process.</li>
</ol>
</p>

<p>Provided that everything goes well, SQL Server 2005 Express Edition will be up and running at the end of the process. Like IIS, SQL Server runs as a service in the background, accepting connections to databases instead of web pages. The SQL Server is accessible at the address <code>(local)\SqlExpress</code>.</p>

<h5>Installing SQL Server Management Studio Express</h5>



<p>In order to use your SQL Server 2005 install effectively, you'll need some sort of administration tool that will allow you to work with your databases. SQL Server Management Studio Express is a free tool provided by Microsoft to allow you to manage your installation of SQL Server 2005.</p>

<p>To install SQL Server Management Studio Express, follow these steps:</p>

<p><ol>
	<li>Navigate again to <a class="sublink" href="http://msdn.microsoft.com/vstudio/express/sql/">http://msdn.microsoft.com/vstudio/express/sql/</a> <span class="tiny">[10]</span>, and click the Download Now link.</li><br />
	<li>This time, download the SQL Server Management Studio Express edition that corresponds to the SQL Server 2005 version that you installed previously.</li><br />
	<li>After the download completes, execute the file and follow the steps to install the product.</li>
</ol>
</p>

<p>Once it's installed, SQL Server Manager Express can be accessed from Start &gt; All Programs &gt; Microsoft SQL Server 2005 &gt; SQL Server Management Studio Express. When executed, it will first ask for your credentials, as Figure 1.12 illustrates.</p>

<p><img src="http://sitepointstatic.com/graphics/0145_Connect.png"  height="315" width="416" alt="1556_0145_Connect" /><br />
<em>Figure 1.12. Connecting to SQL Server</em></p>

<p>By default, when installed, SQL Server 2005 Express Edition will only accept connections that use Windows Authentication, which means that you'll use your Windows user account to log in to the SQL Server. Because you're the user that installed SQL Server 2005, you'll already have full privileges to the SQL Server. Click Connect to connect to your SQL Server 2005 instance.</p>

<p><img src="http://sitepointstatic.com/graphics/0150_Managing.png"  height="319" width="500" alt="1556_0150_Managing" /><br />
<em>Figure 1.13. Managing your database server</em></p>

<p>After you're authenticated, you'll be shown the interface in Figure 1.13, which gives you many ways to interact with, and manage, your SQL Server 2005 instance.</p>

<p>SQL Server Management Studio lets you browse through the objects inside your SQL Server, and even modify their settings. For example, you can change the security settings of your server by right-clicking the COMPUTER\SQLEXPRESS (where COMPUTER is the name of your computer), choosing Properties, and selecting Security from the panel, as shown in Figure 1.14.</p>

<p><img src="http://sitepointstatic.com/graphics/0155_Security.png"  height="449" width="500" alt="1556_0155_Security" /><br />
Figure 1.14. Changing server settings with SQL Server Management Studio</p>

<p><em>SQL Server and Instances</em><br />
<em>You can run multiple SQL Servers on the one computer simultaneously?each SQL Server is called an instance of SQL Server. How is this useful? Imagine you have a production server that runs two applications with two separate databases on the same instance of SQL Server. If, for some reason, we need to restart SQL Server for the first application, the second application's database will become unavailable while the restart is taking place. If the second application's database was operating on a second instance of SQL Server, we wouldn't have such a problem--the second application would continue working without missing a beat.</em></p>

<p><em>Each instance of SQL Server requires a name. The default instance name for SQL Server 2005 Express Edition is <code>SQLEXPRESS</code>. When connecting to your database server, you must specify both the name of the computer and the name of the SQL Server instance in the form ComputerName/InstanceName. You can see this specification back in Figure 1.12 and Figure 1.13, where we're connecting to an instance called <code>SQLEXPRESS</code> on a computer called VM2.</em></p>

<h5>Installing Visual Web Developer 2005</h5>



<p>Visual Web Developer automates many of the tasks that you'd need to complete yourself in other environments, and includes many powerful features. For the first exercises in this book, we'll recommend you use a simple text editor such as Notepad, but you'll gradually learn how to use Visual Web Developer to ease some of the tasks we'll tackle.</p>

<p>So let's install this tool to make sure we'll have it ready when we need it.</p>

<p><ol>
	<li>Go to <a class="sublink" href="http://msdn.microsoft.com/vstudio/express/vwd/">http://msdn.microsoft.com/vstudio/express/vwd/</a> <span class="tiny">[11]</span> and click the Download link.</li><br />
	<li>Execute the downloaded file.</li><br />
	<li>Accept the default options. At one point, you'll be asked about installing Microsoft MSDN 2005 Express Edition, which is the product's documentation. It wouldn't hurt to install it, but you need to be patient, because it's quite big. (Note that you've already installed the .NET Framework 2.0 documentation, together with the SDK.)</li>
</ol>
</p>

<p><em>Bonus!</em><br />
<em>If you've already installed the .NET Framework 2.0 SDK, you've already installed Microsoft MSDN 2005 Express Edition.</em></p>

<p>In this book, we'll start using Visual Web Developer to build real web applications in Chapter 5, Building Web Applications. Until then, we'll create examples using Notepad (or another simple text editor) so you're prepared to take full advantage of the features offered by Visual Web Developer when the time comes to use it.</p>

<h5>Writing your First ASP.NET Page</h5>



<p>For your first ASP.NET exercise, we'll create the simple example shown in Figure 1.15.</p>

<p><img src="http://sitepointstatic.com/graphics/0160_FirstPage.png"  height="180" width="500" alt="1556_1060_FirstPage" /><br />
Figure 1.15. Your first ASP.NET page</p>

<p>Let's get started! Open your text editor (Notepad is fine). If you have software that creates ASP.NET pages automatically, such as Visual Studio .NET or Visual Web Developer 2005 Express Edition, please don't use it yet?while these are great tools that allow you to get up and running quickly, they do assume that you already understand how ASP.NET works.</p>

<p>So, open your text editor, and create a new file named FirstPage.aspx in the Learning folder you created earlier. Start editing FirstPage.aspx by entering the HTML for our page, shown below:</p>

<p><code>Example 1.2. FirstPage.aspx (excerpt) &nbsp; &nbsp;<br />
 &nbsp; &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp;<br />
&lt;html&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;My First ASP.NET 2.0 Page&lt;/title&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;p&gt;Hello there!&lt;/p&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;p&gt;The time is now: &lt;/p&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p>So far, so good, right? Now, let's add some ASP.NET code that will create the dynamic elements of the page, starting with the time.</p>

<p><code>Example 1.3. FirstPage.aspx (excerpt) &nbsp; &nbsp;<br />
 &nbsp; &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp;<br />
&lt;html&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;My First ASP.NET 2.0 Page&lt;/title&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;p&gt;Hello there!&lt;/p&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;p&gt;The time is now: &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;asp:Label runat=&quot;server&quot; id=&quot;timeLabel&quot; /&gt;&lt;/p&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p>We've added an <code>&lt;asp:Label/&gt;</code> tag to the document. This is a special tag that lets us insert dynamic content into the page. The asp: part of the tag name identifies it as a built-in ASP.NET tag. ASP.NET comes with numerous built-in tags; <code>&lt;asp:Label/&gt;</code> is one of the simplest.</p>

<p>The <code>runat=&quot;server&quot;</code> attribute identifies the tag as something that needs to be handled on the server. In other words, the web browser will never see the <code>&lt;asp:Label/&gt;</code> tag; when the page is requested by the client, ASP.NET sees it and converts it to regular HTML tags before the page is sent to the browser. It's up to us to write the code that will tell ASP.NET to replace this particular tag with the current time.</p>

<p>To do this, we must add some script to our page. ASP.NET gives you the choice of a number of different languages to use in your scripts. The two most common languages are VB and C#. Let's take a look at examples using both. Here's a version of the page in VB:</p>

<p><code>Example 1.4. FirstPage.aspx (excerpt) &nbsp; &nbsp;<br />
 &nbsp; &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;My First ASP.NET Page&lt;/title&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;script runat=&quot;server&quot; language=&quot;VB&quot;&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;Sub Page_Load(sender As Object, e As EventArgs) &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;timeLabel.Text = DateTime.Now.ToString() &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;End Sub &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/script&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;p&gt;Hello there!&lt;/p&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;p&gt;The time is now: &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &lt;asp:Label runat=&quot;server&quot; id=&quot;timeLabel&quot; /&gt;&lt;/p&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p>Here's the same page written in C#:</p>

<p><code>Example 1.5. FirstPage.aspx (excerpt) &nbsp; &nbsp;<br />
 &nbsp; &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;My First ASP.NET Page&lt;/title&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;script runat=&quot;server&quot; language=&quot;C#&quot;&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;protected void Page_Load(object sender, EventArgs e) &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;{ &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;timeLabel.Text = DateTime.Now.ToString(); &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;} &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/script&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;p&gt;Hello there!&lt;/p&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;p&gt;The time is now: &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &lt;asp:Label runat=&quot;server&quot; id=&quot;timeLabel&quot; /&gt;&lt;/p&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p><em>Clues for Case Sensitivity</em><br />
<em>Note that C#, unlike VB, is case-sensitive. If you type the case of a letter incorrectly, the page won't load. If these languages look complicated, don't worry: you'll learn more about them in Chapter 3, VB and C# Programming Basics.</em></p>

<p>Both versions of the page achieve exactly the same thing. You can even save them both, giving each a different filename, and test them separately. If you've never done any server-side programming before, the code may look a little scary. But before we analyze it in detail, let's load the page and test that it works. Using your web browser, load <code>http://localhost/Learning/FirstPage.aspx</code>. Whether you load the C# version or the VB version, the output should look like Figure 1.15.</p>

<p><em>No Time?</em><br />
<em>If the time isn't displayed in the page, chances are that you opened the file directly in your browser instead of loading it through your web server. Because ASP.NET is a server-side language, your web server needs to process the file before it's sent to your browser for display. If it doesn't get access to the file, the ASP.NET code is never converted into HTML that your browser can understand, so make sure you load the page by entering an actual HTTP URL (such as <code>http://localhost/Learning/FirstPage.aspx</code>), not a local path and filename (such as <code>C:\WebDocs\Learning\FirstPage.aspx</code>).</em></p>

<p>What happens there? Let's break down the new elements of this page.</p>

<p><code>Example 1.6. FirstPage.aspx (excerpt) &nbsp; &nbsp;<br />
 &nbsp; &nbsp;<br />
&lt;script runat=&quot;server&quot;&gt;</code></p>

<p>This tag marks the start of server-side code, or the code declaration block. Like the <code>&lt;asp:Label/&gt;</code> tag, this <code>&lt;script&gt;</code> tag uses the <code>runat=&quot;server&quot;</code> attribute to let ASP.NET know that the tag should be processed before sending the page to the browser.</p>

<p><code>Example 1.7. FirstPage.aspx (excerpt) &nbsp; &nbsp;<br />
 &nbsp; &nbsp;<br />
Sub Page_Load(sender As Object, e As EventArgs)</code></p>

<p><code>Example 1.8. FirstPage.aspx (excerpt) &nbsp; &nbsp;<br />
 &nbsp; &nbsp;<br />
protected void Page_Load(object sender, EventArgs e) &nbsp; &nbsp;<br />
{</code></p>

<p>I won't go into too much detail here. For now, all you need to know is that you can write script fragments that are run in response to different events, such as a button being clicked or an item being selected from a drop-down list. What the first line of code basically says is, &quot;execute the following script whenever the page is loaded.&quot; Note that C# groups code into blocks with curly braces (<code>{</code> and </code>}</code>), while Visual Basic uses statements such as <code>End Sub</code> to mark the end of a particular sequence. So, the curly brace in the C# code above (<code>{</code>) marks the start of the script that will be executed when the page loads for the first time.</p>

<p>Finally, here's the line that actually displays the time on the page:</p>

<p><code>Example 1.9. FirstPage.aspx (excerpt) &nbsp; &nbsp;<br />
 &nbsp; &nbsp;<br />
 &nbsp;timeLabel.Text = DateTime.Now.ToString()</code></p>

<p><code>Example 1.10. FirstPage.aspx (excerpt) &nbsp; &nbsp;<br />
 &nbsp; &nbsp;<br />
 &nbsp;timeLabel.Text = DateTime.Now.ToString();</code></p>

<p>As you can see, these .NET languages have much in common, because they're both built on the .NET Framework. In fact, the only difference between the ways the two languages handle the above line is that C# ends lines of code with a semicolon (<code>;</code>). In plain English, here's what this line says:</p>

<p><em>Set the Text of <code>timeLabel</code> to the current date and time, expressed as text.</em></p>

<p>Note that <code>timeLabel</code> is the value we gave for the <code>id</code> attribute of the <code>&lt;asp:Label/&gt;</code> tag where we want to show the time. So, <code>timeLabel.Text</code>, or the <code>Tex</code> property of <code>timeLabel</code>, refers to the text that will be displayed by the tag. <code>DateTime</code> is a class that's built into the .NET Framework; it lets you perform all sorts of useful functions with dates and times. The .NET Framework has thousands of these classes, which do countless handy things. The classes are collectively known as the .NET Framework Class Library.</p>

<p>The <code>DateTime</code> class has a property called <code>Now</code>, which returns the current date and time. This Now property has a method called <code>ToString</code>, which expresses that date and time as text (a segment of text is called a string in programming circles). Classes, properties, and methods: these are all important words in the vocabulary of any programmer, and we'll discuss them in more detail a little later in the book. For now, all you need to take away from this discussion is that <code>DateTime.Now.ToString()</code> will give you the current date and time as a text string, which you can then tell your <code>&lt;asp:Label/&gt;</code> tag to display. The rest of the script block simply ties up loose ends:</p>

<p><code>Example 1.11. FirstPage.aspx (excerpt) &nbsp; &nbsp;<br />
 &nbsp; &nbsp;<br />
End Sub &nbsp; &nbsp;<br />
&lt;/script&gt;</code></p>

<p><code>Example 1.12. FirstPage.aspx (excerpt) &nbsp; &nbsp;<br />
 &nbsp; &nbsp;<br />
} &nbsp; &nbsp;<br />
&lt;/script&gt;</code></p>

<p>The <code>End Sub</code> in the VB code, and the <code>}</code> in the C# code, mark the end of the script that's to be run when the page is loaded, and the <code>&lt;/script&gt;</code> tag marks the end of the script block.</p>

<p>One final thing that's worth investigating is the code that ASP.NET generated for you. It's clear by now that your web browser receives only HTML (no server-side code!), so what kind of HTML was generated for that label? The answer is easy to find! With the page displayed in your browser, you can use the browser's View Source feature to view the page's HTML code. Here's what you'll see:</p>

<p><code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;My First ASP.NET Page&lt;/title&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;p&gt;Hello there!&lt;/p&gt; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;p&gt;The time is now: &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &lt;span id=&quot;timeLabel&quot;&gt;6/20/2006 8:00:49 PM&lt;/span&gt;&lt;/p&gt; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p>Notice that all the ASP.NET code has gone! Even the script block has been completely removed, and the <code>&lt;asp:Label/&gt;</code> tag has been replaced by a <code>&lt;span&gt;</code> tag (which has the same id attribute as the <code>&lt;asp:Label/&gt;</code> tag we used) that contains the date and time.</p>

<p>That's how ASP.NET works. From the web browser's point of view, there's nothing special about an ASP.NET page; it's just plain HTML like any other. All the ASP.NET code is run by your web server and converted to plain HTML that's sent to the browser. So far, so good: the example above was fairly simple. The next chapter will get a bit more challenging as we investigate some valuable programming concepts.</p>

<h5>Getting Help</h5>



<p>As you develop ASP.NET web applications, you will undoubtedly have questions that need answers, and problems that need to be solved. <a class="sublink" href="http://www.asp.net/">The ASP.NET support web site</a> <span class="tiny">[12]</span> was developed by Microsoft as a portal for the ASP.NET community to answer the questions and solve the problems that developers encounter while using ASP.NET. The support web site provides useful information, such as news, downloads, articles, and discussion forums. You can also ask questions of the experienced community members in the <a class="sublink" href="http://www.sitepoint.com/forums/">SitePoint Forums</a> <span class="tiny">[13]</span>.</p>

<h5>Summary</h5>



<p>In this chapter, you learned about .NET. You also learned of the benefits of ASP.NET and that it's a part of the .NET Framework.</p>

<p>First, you learned about the components of ASP.NET and how to locate and install the .NET Framework. Then, we explored the software that's required not only to use this book, but also in order for you or your company to progress with ASP.NET development.</p>

<p>You've gained a solid foundation in the world of ASP.NET! The next chapter will build on this knowledge as we begin to introduce you to ASP.NET in more detail, covering page structure, the languages that you can use, various programming concepts, and the finer points of form processing.</p>

<p><div class="article-cms-pagebreak"></div></p>

<h5>Chapter 2. ASP.NET Basics</h5>



<p>So far, you've learned what ASP.NET is, and what it can do. You've installed the software you need to get going, and, having been introduced to some very simple form processing techniques, you even know how to create a simple ASP.NET page. Don't worry if it all seems a little bewildering right now, because, as this book progresses, you'll learn how to use ASP.NET at more advanced levels.</p>

<p>As the next few chapters unfold, we'll explore some more advanced topics, including the use of controls, and various programming techniques. But before you can begin to develop applications with ASP.NET, you'll need to understand the inner workings of a typical ASP.NET page--with this knowledge, you'll be able to identify the parts of the ASP.NET page referenced in the examples we'll discuss throughout this book. So, in this chapter, we'll talk about some key mechanisms of an ASP.NET page, specifically:</p>

<p><ul>
	<li>page structure</li>
	<li>view state</li>
	<li>namespaces</li>
	<li>directives</li>
</ul>
</p>

<p>We'll also cover two of the &quot;built-in&quot; languages supported by the .NET Framework: VB and C#. As this section progresses, we'll explore the differences and similarities between these two languages, and get a clear idea of the power that they provide to those creating ASP.NET applications.</p>

<p>So, what exactly makes up an ASP.NET page? The next few sections will give you an in-depth understanding of the constructs of a typical ASP.NET page.</p>

<h5>ASP.NET Page Structure</h5>



<p>ASP.NET pages are simply text files that have the <code>.aspx</code> file name extension, and can be placed on any web server equipped with ASP.NET.</p>

<p>When a client requests an ASP.NET page, the web server passes the page to the ASP.NET runtime, a program that runs on the web server that's responsible for reading the page and compiling it into a .NET class. This class is then used to produce the HTML that's sent back to the user. Each subsequent request for this page avoids the compilation process: the .NET class can respond directly to the request, producing the page's HTML and sending it to the client, until such time as the .aspx file changes. This process is illustrated in Figure 2.1.</p>

<p>An ASP.NET page consists of the following elements:</p>

<p><ul>
	<li>directives</li>
	<li>code declaration blocks</li>
	<li>code render blocks</li>
	<li>ASP.NET server controls</li>
	<li>server-side comments</li>
	<li>literal text and HTML tags</li>
</ul>
</p>

<p>Figure 2.2 illustrates the various parts of a simple ASP.NET page.</p>

<p><img src="http://sitepointstatic.com/graphics/fig-aspnetpagelifecycle.png"  height="381" width="500" alt="1556_fig-aspnetpagelifecycle" /><br />
<em>Figure 2.1. The life cycle of the ASP.NET page</em></p>

<p><img src="http://sitepointstatic.com/graphics/fig-partsofaspnetpage.png"  height="251" width="500" alt="1556_fig-partsofaspnetpage" /><br />
<em>Figure 2.2. The parts of an ASP.NET page</em></p>

<p>To make sure we're on the same page and that the code works, save this piece of code in a file named <code>Hello.aspx</code> within the Learning virtual directory you created in Chapter 1. Loading the file through <code>http://localhost/Learning/Hello.aspx</code> should render the result shown in Figure 2.3.</p>

<p><img src="http://sitepointstatic.com/graphics/0210_HelloWorld.png"  height="159" width="500" alt="1556_0210_HelloWorld" /><br />
<em>Figure 2.3. Sample Page in action</em></p>

<p>As you can see, this ASP.NET page contains examples of all the above components (except server-side includes) that make up an ASP.NET page. You won't often use every single element in a given page, but it's important that you are familiar with these elements, their purposes, and how and when it's appropriate to use them.</p>

<p><strong><em>Directives</em></strong></p>

<p>The directives section is one of the most important parts of an ASP.NET page. Directives control how a page is compiled, specify how a page is cached by web browsers, aid debugging (error-fixing), and allow you to import classes to use within your page's code. Each directive starts with <code>&lt;%@</code>. This is followed by the directive name, plus any attributes and their corresponding values. The directive then ends with <code>%&gt;</code>.</p>

<p>There are many directives that you can use within your pages, and we'll discuss them in greater detail later, but, for now, know that the Import and Page directives are the most useful for ASP.NET development. Looking at the sample ASP.NET page in Figure 2.2, we can see that a <code>Page</code> directive was used at the top of the page like so:</p>

<p><code>Example 2.1. Hello.aspx (excerpt) &nbsp; &nbsp; <br />
 &nbsp; &nbsp; <br />
&lt;%@ Page Language=&quot;VB&quot; %&gt;</code></p>

<p><code>Example 2.2. Hello.aspx (excerpt) &nbsp; &nbsp; <br />
 &nbsp; &nbsp; <br />
&lt;%@ Page Language=&quot;C#&quot; %&gt;</code></p>

<p>In this case, the <code>Page</code> directive specifies the language that's to be used for the application logic by setting the Language attribute. The value provided for this attribute, which appears in quotes, specifies that we're using either VB or C#. A whole range of different directives is available; we'll see a few more later in this chapter.</p>

<p>Unlike ASP, ASP.NET directives can appear anywhere on a page, but they're commonly included at its very beginning.</p>

<p><strong><em>Code Declaration Blocks</em></strong></p>

<p>In Chapter 3, VB and C# Programming Basics, we'll talk about code-behind pages and how they let us separate our application logic from an ASP.NET page's HTML. However, if you're not working with code-behind pages, you must use code declaration blocks to contain all the application logic of your ASP.NET page. This application logic defines variables, subroutines, functions, and more. In our page, we've placed the code inside <code>&lt;script&gt;</code> tags, like so:</p>

<p><code>&lt;script runat=&quot;server&quot;&gt; &nbsp; &nbsp; <br />
 &nbsp;Sub mySub() &nbsp; &nbsp; <br />
 &nbsp; &nbsp;' Code here &nbsp; &nbsp; <br />
 &nbsp;End Sub &nbsp; &nbsp; <br />
&lt;/script&gt;</code></p>

<p>Here, the tags enclose VB code, but it could just as easily be C#:</p>

<p><code>&lt;script runat=&quot;server&quot;&gt; &nbsp; &nbsp; <br />
 &nbsp;void mySub() &nbsp; &nbsp; &nbsp;<br />
 &nbsp;{ &nbsp; &nbsp; <br />
 &nbsp; &nbsp;// Code here &nbsp; &nbsp; <br />
 &nbsp;} &nbsp; &nbsp; <br />
&lt;/script&gt;</code></p>

<p><strong>Comments in VB and C# Code</strong></p>

<p>Both of these code snippets contain comments--explanatory text that will be ignored by ASP.NET, but which serves to describe to us how the code works.</p>

<p>In VB code, a single quote or apostrophe (<code>'</code>) indicates that the remainder of the line is to be ignored as a comment.</p>

<p>In C# code, two slashes (<code>//</code>) achieve the same end. C# code also lets us span a comment over multiple lines if we begin it with <code>/*</code> and end it with <code>*/</code>, as in this example:</p>

<p><code>&lt;script runat=&quot;server&quot;&gt; &nbsp; &nbsp; <br />
 &nbsp;void mySub() &nbsp; &nbsp; &nbsp;<br />
 &nbsp;{ &nbsp; &nbsp; <br />
 &nbsp; &nbsp;/* Multi-line &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; comment &nbsp; &nbsp;*/ &nbsp; &nbsp; <br />
 &nbsp;} &nbsp; &nbsp; <br />
&lt;/script&gt;</code></p>

<p>Before .NET emerged, ASP also supported such script tags using a <code>runat=&quot;server&quot;</code> attribute. However, they could only ever contain VBScript and, for a variety of reasons, they failed to find favor among developers.</p>

<p>Code declaration blocks are generally placed inside the head of your ASP.NET page. The sample ASP.NET page shown in Figure 2.2, for instance, contains the following code declaration block:</p>

<p><code>Example 2.3. Hello.aspx (excerpt) &nbsp; &nbsp; <br />
 &nbsp; &nbsp; <br />
&lt;script runat=&quot;server&quot;&gt; &nbsp; &nbsp; <br />
 &nbsp;Sub Page_Load() &nbsp; &nbsp; <br />
 &nbsp; &nbsp;messageLabel.Text = &quot;Hello World&quot; &nbsp; &nbsp; <br />
 &nbsp;End Sub &nbsp; &nbsp; <br />
&lt;/script&gt;</code></p>

<p>Perhaps you can work out what the equivalent C# code would be:</p>

<p><code>Example 2.4. Hello.aspx (excerpt) &nbsp; &nbsp; <br />
 &nbsp; &nbsp; <br />
&lt;script runat=&quot;server&quot;&gt; &nbsp; &nbsp; <br />
 &nbsp;void Page_Load() &nbsp; &nbsp; &nbsp;<br />
 &nbsp;{ &nbsp; &nbsp; <br />
 &nbsp; &nbsp;messageLabel.Text = &quot;Hello World&quot;; &nbsp; &nbsp; <br />
 &nbsp;} &nbsp; &nbsp; <br />
&lt;/script&gt;</code></p>

<p>The <code>&lt;script runat=&quot;server&quot;&gt;</code> tag also accepts two other attributes. We can set the language that's used in this code declaration block via the language attribute:</p>

<p><code>&lt;script runat=&quot;server&quot; language=&quot;VB&quot;&gt; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; <br />
&lt;script runat=&quot;server&quot; language=&quot;C#&quot;&gt;</code></p>

<p>If you don't specify a language within the code declaration block, the ASP.NET page will use the language provided by the <code>language</code> attribute of the <code>Page</code> directive. Each page's code must be written in a single language; for instance, it's not possible to mix VB and C# in the same page.</p>

<p>The second attribute that's available to us is <code>src</code>; this lets us specify an external code file for use within the ASP.NET page:</p>

<p><code>&lt;script runat=&quot;server&quot; language=&quot;VB&quot; src=&quot;mycodefile.vb&quot;&gt; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; <br />
&lt;script runat=&quot;server&quot; language=&quot;C#&quot; src=&quot;mycodefile.cs&quot;&gt;</code></p>

<p><strong><em>Code Render Blocks</em></strong></p>

<p>If you've had experience with traditional ASP, you might recognize these blocks. You can use code render blocks to define inline code or expressions that will execute when a page is rendered. Code within a code render block is executed immediately when it is encountered--usually when the page is loaded or rendered. On the other hand, code within a code declaration block (within <code>&lt;script&gt;</code> tags) is executed only when it is called or triggered by user or page interactions. There are two types of code render blocks?inline code, and inline expressions--both of which are typically written within the body of the ASP.NET page.</p>

<p>Inline code render blocks execute one or more statements, and are placed directly inside a page's HTML between <code>&lt;%</code> and <code>%&gt;</code> delimiters. In our example, the following is a code render block:</p>

<p><code>Example 2.5. Hello.aspx (excerpt) &nbsp; &nbsp; <br />
 &nbsp; &nbsp; <br />
&lt;% Dim Title As String = &quot;This is generated by a code render &quot; &amp; _ &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&quot;block.&quot; %&gt; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; <br />
Example 2.6. Hello.aspx (excerpt) &nbsp; &nbsp; <br />
 &nbsp; &nbsp; <br />
&lt;% string Title = &quot;This is generated by a code render block.&quot;; %&gt;</code></p>

<p>These code blocks simply declare a <code>String</code> variable called <code>Title</code>, and assign it the value <code>This is generated by a code render block</code>.</p>

<p>Inline expression render blocks can be compared to Response.Write in classic ASP. They start with <code>&lt;%=</code> and end with <code>%&gt;</code>, and are used to display the values of variables and methods on a page. In our example, an inline expression appears immediately after our inline code block:</p>

<p><code>Example 2.7. Hello.aspx (excerpt) &nbsp; &nbsp; <br />
 &nbsp; &nbsp; <br />
&lt;%= Title %&gt;</code></p>

<p>If you're familiar with classic ASP, you'll know what this code does: it simply outputs the value of the variable Title that we declared in the previous inline code block.</p>

<p><div class="article-cms-pagebreak"></div></p>

<p><strong><em>ASP.NET Server Controls</em></strong></p>

<p>At the heart of any ASP.NET page lie server controls, which represent dynamic elements with which your users can interact. There are three basic types of server control: ASP.NET controls, HTML controls, and web user controls.</p>

<p>Usually, an ASP.NET control must reside within a <code>&lt;form runat=&quot;server&quot;&gt;</code> tag in order to function correctly. </p>

<p>Controls offer the following advantages to ASP.NET developers:</p>

<p><ul>
	<li>They give us the ability to access HTML elements easily from within our code: we can change these elements' characteristics, check their values, or even update them dynamically from our server-side programming language of choice.</li>
	<li>ASP.NET controls retain their properties thanks to a mechanism called view state. We'll be covering view state later in this chapter. For now, you need to know that view state prevents users from losing the data they've entered into a form once that form has been sent to the server for processing. When the response comes back to the client, text box entries, drop-down list selections, and so on, are all retained through view state.</li>
	<li>With ASP.NET controls, developers are able to separate a page's presentational elements (everything the user sees) from its application logic (the dynamic portions of the ASP.NET page), so that each can be considered separately.</li>
	<li>Many ASP.NET controls can be &quot;bound&quot; to the data sources from which they will extract data for display with minimal (if any) coding effort.</li>
</ul>
</p>

<p>ASP.NET is all about controls, so we'll be discussing them in greater detail as we move through this book. In particular, Chapter 4, Constructing ASP.NET Web Pages explains many of the controls that ship with ASP.NET. For now, though, let's continue with our dissection of an ASP.NET page.</p>

<p><strong><em>Server-side Comments</em></strong></p>

<p>Server-side comments allow you to include within the page comments or notes that will not be processed by ASP.NET. Traditional HTML uses the <code>&lt;!--</code> and <code>--&gt;</code> character sequences to delimit comments; any information included between these tags will not be displayed to the user. ASP.NET comments look very similar, but use the sequences <code>&lt;%--</code> and <code>--%&gt;</code>.</p>

<p>Our ASP.NET example contains the following server-side comment block:</p>

<p><code>Example 2.8. Hello.aspx (excerpt) &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;<br />
&lt;%-- Declare the title as string and set it --%&gt;</code></p>

<p>The difference between ASP.NET comments and HTML comments is that ASP.NET comments are not sent to the client at all; HTML comments are, so they're not suited to commenting out ASP.NET code. Consider the following example:</p>

<p><code>&lt;!-- &nbsp; &nbsp; &nbsp;<br />
&lt;% string Title = &quot;This is generated by a code render block.&quot;; %&gt; &nbsp; &nbsp; &nbsp;<br />
&lt;%= Title %&gt; &nbsp; &nbsp; &nbsp;<br />
--&gt;</code></p>

<p>Here, it looks as if a developer has attempted to use an HTML comment to stop a code render block from being executed. Unfortunately, HTML comments will only hide information from the browser, not the ASP.NET runtime. So, in this case, while we won't see anything in the browser that represents these two lines, they will be processed by ASP.NET, and the value of the variable Title will be sent to the browser inside an HTML comment, as shown here:</p>

<p><code>&lt;!-- &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;<br />
This code generated by a code render block. &nbsp; &nbsp; &nbsp;<br />
--&gt;</code></p>

<p>The code could be modified to use server-side comments very simply:</p>

<p><code>&lt;%-- &nbsp; &nbsp; &nbsp; <br />
&lt;% string Title = &quot;This is generated by a code render block.&quot;; %&gt; &nbsp; &nbsp; &nbsp;<br />
&lt;%= Title %&gt; &nbsp; &nbsp; &nbsp;<br />
--%&gt;</code></p>

<p>The ASP.NET runtime will ignore the contents of this comment, and the value of the <code>Title</code> variable will not be output.</p>

<p><strong><em>Literal Text and HTML Tags</em></strong></p>

<p>The final elements of an ASP.NET page are plain old text and HTML. Generally, you can't do without these elements?after all, HTML allows the display of the information in your ASP.NET controls and code in a way that's suitable for users. Let's take a look at the literal text and HTML tags that were used to produce the display in Figure 2.2:</p>

<p><code>Example 2.9. Hello.aspx (excerpt) &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;<br />
&lt;%@ Page Language=&quot;VB&quot; %&gt; &nbsp; &nbsp; &nbsp;<br />
<strong>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp;<br />
&lt;html&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;Sample Page&lt;/title&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;script runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;Sub Page_Load() &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text = &quot;Hello World!&quot; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;End Sub &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/script&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt;</strong> &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;<strong>&lt;p&gt;</strong> &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;messageLabel&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;<strong>&lt;/p&gt;</strong> &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;<strong>&lt;p&gt;</strong> &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;%-- Declare the title as string and set it --%&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;% Dim Title As String = &quot;This is generated by a &quot; &amp; _ &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;code render block.&quot; %&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;%= Title %&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;<strong>&lt;/p&gt;</strong> &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;<strong>&lt;/body&gt; &nbsp; &nbsp; &nbsp;<br />
&lt;/html&gt;</strong></code></p>

<p><code>Example 2.10. Hello.aspx (excerpt) &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;<br />
&lt;%@ Page Language=&quot;C#&quot; %&gt; &nbsp; &nbsp; &nbsp;<br />
<strong>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp;<br />
&lt;html&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;Sample Page&lt;/title&gt;</strong> &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;script runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;void Page_Load() &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text = &quot;Hello World&quot;; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/script&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;<strong>&lt;/head&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt;</strong> &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;p&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;messageLabel&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;<strong>&lt;/p&gt;</strong> &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;<strong>&lt;p&gt;</strong> &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;%-- Declare the title as string and set it --%&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;% string Title = &quot;This is generated by a code render &quot; + &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;block.&quot;; %&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;%= Title %&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;<strong>&lt;/p&gt;</strong> &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;<strong>&lt;/body&gt;</strong> &nbsp; &nbsp; &nbsp;<br />
<strong>&lt;/html&gt;</strong></code></p>

<p>The bold code above highlights the fact that literal text and HTML tags provide the structure for presenting our dynamic data. Without these elements, this page would have no format, and the browser would be unable to understand it.</p>

<p>You now have a clearer understanding of the structure of an ASP.NET page. As you work through the examples in this book, you'll begin to realize that, in many cases, you won't need to use all of these elements. For the most part, your development will be modularized within code declaration blocks, and all of the dynamic portions of your pages will be contained within code render blocks or controls located inside a <code>&lt;form runat=&quot;server&quot;&gt;&gt;</code> tag.</p>

<p>In the following sections, we'll explore view state, discuss working with directives, and shine a little light on the languages that can be used within ASP.NET.</p>

<h5>View State</h5>



<p>As we saw briefly in the previous section, ASP.NET controls automatically retain their data when a page is sent to the server in response to an event (such as a user clicking a button). Microsoft calls this persistence of data &quot;view state.&quot; In the past, developers would have had to use hacks to remember the item a user had selected in a drop-down menu, or store the content entered into a text box; typically, these hacks would have relied on hidden form fields.</p>

<p>This is no longer the case: once they're submitted to the server for processing, ASP.NET pages automatically retain all the information contained in text boxes and drop-down lists, as well as radio button and checkbox selections. They even keep track of dynamically generated tags, controls, and text. Consider the following ASP (not ASP.NET!) page, called <code>Sample.asp</code>:</p>

<p><code>Example 2.11. Sample.asp &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp;<br />
&lt;html&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;Sample Page using VBScript&lt;/title&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;form method=&quot;post&quot; action=&quot;sample.asp&quot;&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;input type=&quot;text&quot; name=&quot;nameTextBox&quot;/&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;input type=&quot;submit&quot; name=&quot;submitButton&quot; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;value=&quot;Click Me&quot; /&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;% &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;If Request.Form(&quot;nameTextBox&quot;) &lt;&gt; &quot;&quot; Then &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;Response.Write(Request.Form(&quot;nameTextBox&quot;)) &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;End If &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;%&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p><em>Cassini and ASP</em><br />
<em>Cassini is an ASP.NET-only web server and will not execute pages written in ASP, such as Sample.asp above. Fortunately, this won't be a problem as you work your way through this book, as the above Sample.asp file is the only ASP code in this book.</em></p>

<p>If you save this as Sample.asp in the Learning virtual directory you created in Chapter 1, Introducing ASP.NET and the .NET Platform, and open it in your browser by entering <code>http://localhost/Learning/Sample.asp</code>, you'll see that view state is not automatically preserved. When the user submits the form, the information that was typed into the text box is cleared, although it's still available in <code>Request.Form(&quot;nameTextBox&quot;)</code>. The equivalent page in ASP.NET, <code>ViewState.aspx</code>, demonstrates this data persistence using view state:</p>

<p><code>Example 2.12. ViewState.aspx &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp;<br />
&lt;html&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;View State Example&lt;/title&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;script runat=&quot;server&quot; language=&quot;VB&quot;&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;Sub Click(s As Object, e As EventArgs) &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text = nameTextBox.Text &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;End Sub &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/script&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;asp:TextBox id=&quot;nameTextBox&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Button id=&quot;submitButton&quot; runat=&quot;server&quot; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Text=&quot;Click Me&quot; OnClick=&quot;Click&quot; /&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;messageLabel&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p><code>Example 2.13. ViewState.aspx &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp;<br />
&lt;html&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;View State Example&lt;/title&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;script runat=&quot;server&quot; language=&quot;C#&quot;&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;void Click(Object s, EventArgs e) &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text = nameTextBox.Text; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/script&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;asp:TextBox id=&quot;nameTextBox&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Button id=&quot;submitButton&quot; runat=&quot;server&quot; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Text=&quot;Click Me&quot; OnClick=&quot;Click&quot; /&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;messageLabel&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p>In this case, the code uses ASP.NET controls with the runat=&quot;server&quot; attribute. As you can see in Figure 2.4, the text from the box appears on the page when the button is clicked, but also notice that the data remains in the text box! The data in this example is preserved by view state.</p>

<p><img src="http://sitepointstatic.com/graphics/0215_ViewState.png"  height="159" width="500" alt="1556_0215_ViewState" /><br />
<em>Figure 2.4. ASP.NET maintaining the state of the controls</em></p>

<p>You can see the benefits of view state already. But where's all that information stored? ASP.NET pages maintain view state by encrypting the data within a hidden form field. View the source of the page after you've submitted the form, and look for the following code:</p>

<p><code>&lt;input type=&quot;hidden&quot; name=&quot;__VIEWSTATE&quot; id=&quot;__VIEWSTATE&quot; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;value=&quot;/wEPDwUKLTEwNDY1Nzg0MQ9...0fMCR+FN5P6v5pkTQwNEl5xhBk&quot; /&gt;</code></p>

<p>This is a standard HTML hidden form field. All information that's relevant to the view state of the page is stored within this hidden form field as an encrypted string.</p>

<p>View state is enabled for every page by default. If you do not intend to use view state, you can turn it off, which will result in a slight performance gain in your pages. To do this, set the <code>EnableViewState</code> property of the <code>Page</code> directive to false:</p>

<p><code>&lt;%@ Page EnableViewState=&quot;False&quot; %&gt;</code></p>

<p><em>Disabling View State, Control by Control</em><br />
<em>View state can also be disabled for particular controls in a page: simply set their EnableViewState property to false. We'll see working examples of this in the following chapters.</em></p>

<p>Speaking of directives, it's time to take a closer look at these curious beasts!</p>

<h5>Working with Directives</h5>



<p>For the most part, ASP.NET pages resemble traditional HTML pages with a few additions. In essence, just using the <code>.aspx</code> extension for an HTML file will ensure that IIS passes the page to the .NET Framework for processing. However, before you can work with certain, more advanced features, you'll need to know how to use directives.</p>

<p>We talked a little about directives and what they can do earlier in this chapter. You learned that directives control how a page is created, how a page is cached, help with bug-fixing, and allow us to import advanced functionality for use within our code. Three of the most commonly used directives are:</p>

<p><code>Page</code> - This directive defines page-specific attributes for the ASP.NET page, such as the language used for server-side code. We've already seen this directive in use.</p>

<p><code>Import</code> - The <code>Import</code> directive makes functionality that's been defined elsewhere available in a given page. The following example, for instance, imports functionality from the <code>System.Web.Mail</code> namespace, which you could use to send email from a page. Namespaces are simply .NET's way of keeping all its functionality neatly organized?we'll see how they work in Chapter 3.</p>

<p><code>&lt;%@ Import Namespace=&quot;System.Web.Mail&quot; %&gt;</code></p>

<p>You'll become very familiar with this directive as you work through this book.</p>

<p><code>Register</code> - This directive allows you to register a user control for use on your page. We'll cover Register in detail in Chapter 4, but the directive looks something like this:</p>

<p><code>&lt;%@ Register TagPrefix=&quot;uc&quot; TagName=&quot;footer&quot; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;Src=&quot;footer.ascx&quot; %&gt;</code></p>

<h5>ASP.NET Languages</h5>



<p>As we saw in the previous chapter, .NET supports many different languages; in fact, there's no limit to the number of languages that could be supported. If you're used to writing ASP, you may think the choice of VBScript or JScript would be an obvious one. But, with ASP.NET, Microsoft did away with VBScript, merging it with Visual Basic. ASP.NET's support for C# is likely to find favor with developers from other backgrounds. This section will introduce you to both these new languages, which will be covered in more depth in the next chapter. By the end of this section, you will, I hope, agree that the similarities between the two are astonishing?any differences are minor and, in most cases, easy to figure out.</p>

<p>Traditional server technologies are much more constrained in terms of the development languages they offer. For instance, old-style CGI scripts were typically written with Perl or C/C++, JSP uses Java, Coldfusion uses CFML, and PHP is a technology and a language rolled into one. .NET's support for many different languages lets developers choose the ones they prefer. To keep things simple, this book will consider the two most popular: VB and C#. You can choose the language that feels more comfortable to you, or stick with your current favorite if you have one.</p>

<p><strong><em>Visual Basic</em></strong></p>

<p>The latest version of Visual Basic is the result of a dramatic overhaul of Microsoft's hugely popular Visual Basic language. With the inception of Rapid Application Development (RAD) in the 1990s, Visual Basic became extremely popular, allowing in-house teams and software development shops to bang out applications two-to-the-dozen. The latest version of VB has many advantages over older versions, most notably the fact that it has now became a fully object oriented language. At last, it can call itself a true programming language that's on a par with the likes of Java and C++. Despite the changes, VB generally stays close to the structured, legible syntax that has always made it so easy to read, use, and maintain.</p>

<p><strong><em>C#</em></strong></p>

<p>The official line is that Microsoft created C# in an attempt to produce a programming language that coupled the simplicity of Visual Basic with the power and flexibility of C++. However, there's little doubt that its development was at least hurried along by Microsoft's legal disputes with Sun. After Microsoft's treatment (some would say abuse) of Sun's Java programming language, Microsoft was forced to stop developing its own version of Java, and instead developed C# and another language, which it calls J#. We're not going to worry about J# here, as C# is preferable. It's easy to read, use, and maintain, because it does away with much of the confusing syntax for which C++ became infamous.</p>

<h5>Summary</h5>



<p>In this chapter, we started out by introducing key aspects of an ASP.NET page including directives, code declaration blocks, code render blocks, includes, comments, and controls. As the chapter progressed, we took a closer look at the two most popular languages that ASP.NET supports, and which we'll use throughout this book.</p>

<p>In the next chapter, we'll create a few more ASP.NET pages to demonstrate form processing techniques and programming basics, before we turn our attention to the topic of object oriented programming for the Web.</p>

<p><div class="article-cms-pagebreak"></div></p>

<h5>Chapter 3. VB and C# Programming Basics</h5>



<p>As you learned at the end of the last chapter, one of the great things about using ASP.NET is that we can pick and choose which of the various .NET languages we like. In this chapter, we'll look at the key programming principles that will underpin our use of Visual Basic and C#. We'll start by discussing some basic concepts of programming ASP.NET web applications using these two languages. We'll explore programming fundamentals such as variables, arrays, functions, operators, conditionals, loops, and events, and work through a quick introduction to object oriented programming (OOP). Next, we'll dive into namespaces and address the topic of classes--seeing how they're exposed through namespaces, and which ones you'll use most often.</p>

<p>The final sections of the chapter cover some of the ideas underlying modern, effective ASP.NET design, including code-behind and the value it provides by helping us separate code from presentation. We finish with an examination of how object oriented programming techniques impact the ASP.NET developer.</p>

<h5>Programming Basics</h5>



<p>One of the building blocks of an ASP.NET page is the application logic: the actual programming code that allows the page to function. To get anywhere with ASP.NET, you need to grasp the concept of events. All ASP.NET pages will contain controls such as text boxes, checkboxes, and lists. Each of these controls allows the user to interact with the application in some way: checking checkboxes, scrolling through lists, selecting list items, and so on. Whenever one of these actions is performed, the control will raise an event. It is by handling these events within our code that we get ASP.NET pages to do what we want.</p>

<p>For instance, imagine that a user clicks a button on an ASP.NET page. That button (or, more specifically, the ASP.NET <code>Button</code> control) raises an event (in this case, it will be the <code>Click</code> event). A method called an event handler executes automatically when an event is raised--in this case, the event handler code performs a specific action for that button. For instance, the <code>Click</code> event handler could save form data to a file, or retrieve requested information from a database. Events really are the key to ASP.NET programming, which is why we'll start this chapter by taking a closer look at them.</p>

<p>It wouldn't be practical, or even necessary, to cover all aspects of VB and C# in this book, so we're going to discuss enough to get you started, and complete this chapter's projects and samples using both languages. Moreover, we'd say that the programming concepts you'll learn here will be more than adequate to complete the great majority of day-to-day web development tasks using ASP.NET.</p>

<p><strong><em>Control Events and Subroutines</em></strong></p>

<p>As I just mentioned, an event (sometimes more than one) is raised, and handler code is called, in response to a specific action on a particular control. For instance, the code below creates a server-side button and label. Note the use of the <code>OnClick</code> attribute on the <code>Button</code> control. If you want to test the code, save the file in the Learning virtual directory you've been using for the other examples.</p>

<p><code>Example 3.1. ClickEvent.aspx (excerpt) &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; <br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;title&gt;Click the Button&lt;/title&gt; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Button id=&quot;button&quot; runat=&quot;server&quot; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;OnClick=&quot;button_Click&quot; Text=&quot;Click Me&quot; /&gt; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;messageLabel&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; <br />
&lt;/html&gt;</code></p>

<p>When the button's clicked, it raises the <code>Click</code> event, and ASP.NET checks the button's <code>OnClick</code> attribute to find the name of the handler subroutine for that event. In the code above, we told ASP.NET to call the <code>button_Click</code> routine, so perhaps we'd better write this subroutine! We'd normally place it within a code declaration block inside the <code>&lt;head&gt;</code> tag, like this:</p>

<p><code>Example 3.2. ClickEvent.aspx (excerpt) &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; <br />
&lt;head&gt; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;title&gt;Click the Button&lt;/title&gt; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;script runat=&quot;server&quot; language=&quot;VB&quot;&gt; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;Public Sub button_Click(s As Object, e As EventArgs) &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;messageLabel.Text = &quot;Hello World&quot; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;End Sub &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/script&gt; &nbsp; &nbsp; &nbsp; <br />
&lt;/head&gt;</code></p>

<p><code>Example 3.3. ClickEvent.aspx (excerpt) &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; <br />
&lt;head&gt; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;title&gt;Click the Button&lt;/title&gt; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;script runat=&quot;server&quot; language=&quot;C#&quot;&gt; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;public void button_Click(Object s, EventArgs e) &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;messageLabel.Text = &quot;Hello World&quot;; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/script&gt; &nbsp; &nbsp; &nbsp; <br />
&lt;/head&gt;</code></p>

<p>This code simply sets a message to display on the label that we declared with the button. So, when this page is run, and users click the button, they'll see the message &quot;Hello World&quot; appear next to it.</p>

<p><img src="http://sitepointstatic.com/graphics/0305_ClickEvent.png"  height="129" width="500" alt="1556_0305_ClickEvent" /><br />
<em>Figure 3.1. Handling the <code>Click</code> event</em></p>

<p>Hopefully, you're starting to come to grips with the idea of control events, and the ways in which they're used to call particular subroutines. In fact, there are many events that your controls can use, though some of them are found only on certain controls. Here's the complete set of attributes that the Button control supports for handling events:</p>

<p><ul>
	<li><code>OnClick</code> - As we've seen, the subroutine indicated by this attribute is called for the <code>Click</code> event, which occurs when the user clicks the button.</li>
	<li><code>OnCommand</code> - As with <code>OnClick</code>, the subroutine indicated by this attribute is called when the button is clicked.</li>
	<li><code>OnLoad</code> - The subroutine indicated by this attribute is called when the button is loaded for the first time--usually when the page first loads.</li>
	<li><code>OnInit</code> - When the button is initialized, any subroutine given in this attribute will be called.</li>
	<li><code>OnPreRender</code> - We can use this attribute to run code just before the button is rendered.</li>
	<li><code>OnUnload</code> - This subroutine will run when the control is unloaded from memory--basically, when the user goes to a different page or closes the browser entirely.</li>
	<li><code>OnDisposed</code> - The subroutine specified by this attribute is executed when the button is released from memory.</li>
	<li><code>OnDataBinding</code> - This attribute fires when the button is bound to a data source.</li>
</ul>
</p>

<p>Don't worry too much about the intricacies of all these events and when they occur; I just want you to understand that a single control can produce a number of different events. In the case of the <code>Button</code> control, you'll almost always be interested in the <code>Click</code> event; the others are only useful in rather obscure circumstances.</p>

<p>When a control raises an event, the specified subroutine (if one is specified) is executed. Let's take a look at the structure of a typical subroutine that interacts with a web control:</p>

<p><code>Public Sub mySubName(s As Object, e As EventArgs) &nbsp; &nbsp; &nbsp; <br />
 &nbsp;' Write your code here &nbsp; &nbsp; &nbsp; <br />
End Sub &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; <br />
public void mySubName(Object s, EventArgs e) &nbsp; &nbsp; &nbsp; &nbsp;<br />
{ &nbsp; &nbsp; &nbsp; <br />
 &nbsp;// Write your code here &nbsp; &nbsp; &nbsp; <br />
}</code></p>

<p>Let's take a moment to break down all the components that make up a typical subroutine.</p>

<p><code>Public</code> (Visual Basic), <code>public</code> (C#)</p>

<p>This command defines the scope of the subroutine. There are a few different options to choose from, the most frequently used being <code>Public</code> (for a global subroutine that can be used anywhere within the entire page) and <code>Private</code> (for subroutines that are available for the specific class only). (The C# equivalents of <code>Public</code> and <code>Private</code> are, perhaps predictably, <code>public</code> and <code>private</code>.) We'll analyze these options in more detail a bit later in the chapter.</p>

<p><code>Sub</code> (Visual Basic), <code>void</code> (C#)</p>

<p>This command defines the chunk of code as a subroutine. A subroutine is a named block of code that doesn't return a result; thus, in C#, we use the void keyword, which means exactly what the name says. We don't need this in VB, though, because the Sub keyword implies that no value is returned.</p>

<p><code>mySubName(...)</code></p>

<p>This part gives the name we've chosen for the subroutine. The parameters and their data types are mentioned in the parentheses.</p>

<p><code>s As Object</code> (Visual Basic), <code>Object s</code> (C#)</p>

<p>When we write a subroutine that will function as an event handler, it must accept two parameters. The first is a reference to the control that fired the event. Each control has a particular type, such as <code>Label</code> or <code>TextBox</code>, but <code>Object</code> is a generic type that can be used to reference any kind of object in .NET--even basic types, such as numbers or strings. Here, we're putting that <code>Object</code> in a variable named <code>s</code> (again, we'll talk more about variables later in this chapter). We can then use that variable to access features and settings of the specific control from our subroutine.</p>

<p><code>e As EventArgs</code> (Visual Basic), <code>EventArgs e</code> (C#)</p>

<p>This, the second parameter, contains certain information that's specific to the event that was raised. Note that, in many cases, you won't need to use either of these two parameters, so you don't need to worry about them too much at this stage.</p>

<p>As this chapter progresses, you'll see how subroutines that are associated with particular events by the appropriate attributes on controls can revolutionize the way your user interacts with your application.</p>

<p><div class="article-cms-pagebreak"></div></p>

<p><strong><em>Page Events</em></strong></p>

<p>Until now, we've considered only events that are raised by controls. However, there is another type of event: the page event. Technically, a page is simply another type of control, so page events are a particular kind of control event.</p>

<p>The idea is the same as for control events, except that here, it is the page as a whole that generates the events. (Strictly speaking, a page is simply another type of control, so page events are actually control events. But when you're first learning ASP.NET, it can be helpful to think of page events as being different, especially since you don't usually use <code>OnEventName</code> attributes to assign subroutines to handle them.) You've already used one of these events: the <code>Page_Load</code> event, which is fired when the page loads for the first time. Note that we don't need to associate handlers for page events as we did for control events; instead, we just place our handler code inside a subroutine with a preset name.</p>

<p>The following list outlines the most frequently used page event subroutines:</p>

<p><ul>
	<li><code>Page_Init</code> - called when the page is about to be initialized with its basic settings</li>
	<li><code>Page_Load</code> - called once the browser request has been processed, and all of the controls in the page have their updated values</li>
	<li><code>Page_PreRender</code> - called once all objects have reacted to the browser request and any resulting events, but before any response has been sent to the browser</li>
	<li><code>Page_UnLoad</code> - called when the page is no longer needed by the server, and is ready to be discarded</li>
</ul>
</p>

<p>The order in which the events are listed above is also the order in which they're executed. In other words, the <code>Page_Init</code> event is the first event raised by the page, followed by <code>Page_Load</code>, <code>Page_PreRender</code>, and finally <code>Page_UnLoad</code>.</p>

<p>The best way to illustrate how these events work is through an example. Create the following <code>PageEvents.aspx</code> file in the <code>Learning</code> virtual directory:</p>

<p><code>Example 3.4. PageEvents.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;Page Events&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;script runat=&quot;server&quot; language=&quot;VB&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;Sub Page_Init(s As Object, e As EventArgs) &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text = &quot;1. Page_Init &lt;br/&gt;&quot; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;End Sub &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;Sub Page_Load(s As Object, e As EventArgs) &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text += &quot;2. Page_Load &lt;br/&gt;&quot; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;End Sub &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;Sub Page_PreRender(s As Object, e As EventArgs) &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text += &quot;3. Page_PreRender &lt;br/&gt;&quot; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;End Sub &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;Sub Page_UnLoad(s As Object, e As EventArgs) &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text += &quot;4. Page_UnLoad &lt;br/&gt;&quot; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;End Sub &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/script&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;messageLabel&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p><code>Example 3.5. PageEvents.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;Page Events&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;script runat=&quot;server&quot; language=&quot;C#&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;void Page_Init(Object s, EventArgs e) &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text = &quot;1. Page_Init &lt;br/&gt;&quot;; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;void Page_Load(Object s, EventArgs e) &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text += &quot;2. Page_Load &lt;br/&gt;&quot;; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;void Page_PreRender(Object s, EventArgs e) &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text += &quot;3. Page_PreRender &lt;br/&gt;&quot;; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;void Page_UnLoad(Object s, EventArgs e) &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text += &quot;4. Page_UnLoad &lt;br/&gt;&quot;; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/script&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;messageLabel&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p>You can see that the event handlers (the functions that are executed to handle the events) aren't specifically defined anywhere. There's no need to define them, because these events are generated by default by the ASP.NET page, and their handlers have the default names that we've used in the code (<code>Page_Init</code>, <code>Page_Load</code>, etc.). As the page loads, it will generate a number of events. Within each event's event handler, we've added a message to the Label control; this will give us visual proof that the events actually fire in order. No matter which version of the code you execute (C# or VB), the output should look like Figure 3.2.</p>

<p><img src="http://sitepointstatic.com/graphics/0310_PageEvents.png"  height="166" width="500" alt="1556_0310_PageEvents" /><br />
<em>Figure 3.2. Handling ASP.NET events</em></p>

<p>As you can see, <code>Page_UnLoad</code> doesn't generate any output. This is because, at that point, the HTML output has already been generated and sent to the browser.</p>

<p><em>Popular <code>Page_Load</code></em><br />
<em>The event you'll make the most use of in your code is <code>Page_Load</code>. However, in certain situations the other events will be helpful as well. It's also worth noting that ASP.NET supports other events, which we haven't covered here. You'll only need those in certain, complex applications that aren't in the scope of this book.</em></p>

<p><strong><em>Variables and Variable Declaration</em></strong></p>

<p>Variables are fundamental to programming, and you're almost certain to have come across the term before. Basically, variables let you give a name, or identifier, to a specific piece of data; we can then use that identifier to store, modify, and retrieve the data in question.</p>

<p>VB and C# have access to the same basic data types, which are defined as foundation classes of the .NET Framework. However, they can be named differently, as each language defines its own aliases. There are many different kinds of data types, including strings, integers (whole numbers), and floating point numbers (fractions or decimals). Before you can use a variable in VB or C#, you must specify the types of data it can contain, using keywords such as <code>String</code>, <code>Integer</code>, and <code>Decimal</code>, like this:</p>

<p><code>Dim name As String &nbsp; &nbsp; &nbsp; &nbsp;<br />
Dim age As Integer &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;<br />
string name; &nbsp; &nbsp; &nbsp; &nbsp;<br />
int age;</code></p>

<p>These lines declare the type of data we want our variables to store, and are therefore known as &quot;variable declarations.&quot; In VB, we use the keyword <code>Dim</code>, which stands for &quot;dimension,&quot; while in C#, we simply precede the variable name with the appropriate data type.</p>

<p>Sometimes, we want to set an initial value for variables that we declare; we can do this using a process known as initialization:</p>

<p><code>Dim carType As String = &quot;BMW&quot; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;<br />
string carType = &quot;BMW&quot;;</code></p>

<p>We can also declare and/or initialize a group of variables of the same type simultaneously. This practice isn't recommended, though, as it makes the code more difficult to read.</p>

<p><code>Dim carType As String, carColor As String = &quot;blue&quot; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;<br />
string carType, carColor = &quot;blue&quot;;</code></p>

<p>Table 3.1 lists the most useful data types available in VB and C#.</p>

<p><em>Table 3.1. A list of commonly used data types</em><br />
<img src="http://sitepointstatic.com/graphics/table31.png"  height="129" width="500" alt="1556_table31" /></p>

<p>You'll encounter many other data types as you progress, but this list provides an overview of the ones you'll use most often.</p>

<p><em>Many Aliases are Available</em><br />
<em>These data types are the VB- and C#-specific aliases for types of the .NET Framework. For example, instead of <code>Integer</code> or <code>int</code>, you could use <code>System.Int32</code> in any .NET language; likewise, instead of <code>Boolean</code> or <code>bool</code>, you could use <code>System.Boolean</code>, and so on.</em></p>

<p>To sum up, once you've declared a variable as a given type, it can only hold data of that type: you can't put a string into an integer variable, for instance. However, there are frequently times when you'll need to convert one data type to another. Have a look at this code:</p>

<p><code>Dim intX As Integer &nbsp; &nbsp; &nbsp; &nbsp;<br />
Dim strY As String = &quot;35&quot; &nbsp; &nbsp; &nbsp; &nbsp;<br />
intX = strY + 6 &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;<br />
int intX; &nbsp; &nbsp; &nbsp; &nbsp;<br />
string strY = &quot;35&quot;; &nbsp; &nbsp; &nbsp; &nbsp;<br />
intX = strY + 6;</code></p>

<p>Now, you or I might think that this could make sense--after all, the string <code>strY</code> contains a number, so we might wish to add it to another number. Well, this isn't so simple for a computer!</p>

<p>VB performs some conversions for us. The VB version of the code will execute without a hitch, because the string will be converted to a number before the mathematical operation is applied. C#, on the other hand, will throw an error, as it's more strict than VB about conversions.</p>

<p>As a rule of thumb, it's better to stay on the safe side and avoid mixing types wherever possible.</p>

<p><em>VB and C#--Strongly Typed Languages</em><br />
<em>Even though their behavior is a little bit different, both VB and C# are strongly typed languages. Strongly typed languages are those that are very strict about data types. Many other languages--mostly scripting languages such as JavaScript--are loosely typed, which means that they're more flexible when it comes to dealing with data types. For example, if you try to sum a number with a string, as we did in the previous code snippet, the JavaScript interpreter would make the conversion for you automatically. At times, despite being a strongly typed language at heart, VB does a bit of background work for you, which makes it slightly easier to work with.</em></p>

<p>In .NET, you can (and sometimes need to) explicitly convert, or cast, the string into an integer before you're able to sum them up:</p>

<p><code>Dim intX As Integer &nbsp; &nbsp; &nbsp; &nbsp;<br />
Dim strY As String = &quot;35&quot; &nbsp; &nbsp; &nbsp; &nbsp;<br />
intX = Int32.Parse(strY) + 6 &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;<br />
int intX; &nbsp; &nbsp; &nbsp; &nbsp;<br />
string strY = &quot;35&quot;; &nbsp; &nbsp; &nbsp; &nbsp;<br />
intX = Convert.ToInt32(strY) + 6;</code></p>

<p>Now, the computer will accept even with the C# code, because it ends up adding two numbers, rather than a number and a string, as we tried initially. This principle holds true whenever we're mixing types in a single expression.</p>

<p><div class="article-cms-pagebreak"></div></p>

<p><strong><em>Arrays</em></strong></p>

<p>Arrays are a special variety of variable that's tailored for storing related items of the same data type. Any one item in an array can be accessed using the array's name, followed by that item's position in the array (its offset). Let's create a sample page to see how it's done. The results of this code are shown in Figure 3.3:</p>

<p><code>Example 3.6. Arrays.aspx &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;title&gt;Arrays&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;script runat=&quot;server&quot; language=&quot;VB&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;Sub Page_Load() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;' Declare an array &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;Dim drinkList(4) As String &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;' Place some items in it &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;drinkList(0) = &quot;Water&quot; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;drinkList(1) = &quot;Juice&quot; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;drinkList(2) = &quot;Soda&quot; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;drinkList(3) = &quot;Milk&quot; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;' Access an item in the array by its position &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;drinkLabel.Text = drinkList(1) &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;End Sub &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/script&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;drinkLabel&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/html&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
Example 3.7. Arrays.aspx &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;title&gt;Arrays&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;script runat=&quot;server&quot; language=&quot;C#&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;void Page_Load() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;// Declare an array &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;string[] drinkList = new string[4]; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;// Place some items in it &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;drinkList[0] = &quot;Water&quot;; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;drinkList[1] = &quot;Juice&quot;; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;drinkList[2] = &quot;Soda&quot;; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;drinkList[3] = &quot;Milk&quot;; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;// Access an item in the array by its position &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;drinkLabel.Text = drinkList[1]; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/script&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;drinkLabel&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/html&gt;</code></p>

<p><img src="http://sitepointstatic.com/graphics/0315_Arrays.png"  height="129" width="500" alt="1556_0315_Arrays" /><br />
<em>Figure 3.3. Reading an element from an array</em></p>

<p>There are some important points to pick up from this code. First, notice how we declare an array. In VB, it looks like a regular declaration for a string, except that the number of items we want the array to contain is provided in parentheses after the name:</p>

<p><code>Example 3.8. Arrays.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
Dim drinkList(4) As String</code></p>

<p>In C#, it's a little different. First, we declare that drinkList is an array by following the data type with two empty square brackets. We then specify that this is an array of four items, using the new keyword:</p>

<p><code>Example 3.9. Arrays.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
string[] drinkList = new string[4];</code></p>

<p>A crucial point to realize here is that, in both C# and VB, these arrays are known as zero-based arrays. In a zero-based array, the first item has position 0, the second has position 1, and so on through to the last item, which has a position that's one less than the size of the array (3, in this case). So, we specify each item in our array like this:</p>

<p><code>Example 3.10. Arrays.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
drinkList(0) = &quot;Water&quot; &nbsp; &nbsp; &nbsp; &nbsp; <br />
drinkList(1) = &quot;Juice&quot; &nbsp; &nbsp; &nbsp; &nbsp; <br />
drinkList(2) = &quot;Soda&quot; &nbsp; &nbsp; &nbsp; &nbsp; <br />
drinkList(3) = &quot;Milk&quot; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
Example 3.11. Arrays.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
drinkList[0] = &quot;Water&quot;; &nbsp; &nbsp; &nbsp; &nbsp; <br />
drinkList[1] = &quot;Juice&quot;; &nbsp; &nbsp; &nbsp; &nbsp; <br />
drinkList[2] = &quot;Soda&quot;; &nbsp; &nbsp; &nbsp; &nbsp; <br />
drinkList[3] = &quot;Milk&quot;;</code></p>

<p>Note that C# uses square brackets for arrays, while VB uses standard parentheses. We have to remember that arrays are zero-based when we set the label text to the second item, as shown here:</p>

<p><code>Example 3.12. Arrays.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
drinkLabel.Text = drinkList(1) &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
Example 3.13. Arrays.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
drinkLabel.Text = drinkList[1];</code></p>

<p>To help this fact sink in, you might like to try changing this code to show the third item in the list, instead of the second. Can you work out what change you'd need to make? That's right--you need only to change the number in the brackets to reflect the new item's position in the array (don't forget to start at zero). In fact, it's this ability to select one item from a list using only its numerical location that makes arrays so useful in programming--we'll experience this first-hand as we get further into the book.</p>

<p><strong><em>Functions</em></strong></p>

<p>Functions are exactly the same as subroutines, but for one key difference: they return a value. In VB, we declare a function using the <code>Function</code> keyword in place of <code>Sub</code>, while in C#, we simply have to specify the return type in place of void. The following code shows a simple example:</p>

<p><code>Example 3.14. Functions.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;title&gt;ASP.NET Functions&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;script runat=&quot;server&quot; language=&quot;VB&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;' Here's our function &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;Function getName() As String &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;Return &quot;Zak Ruvalcaba&quot; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;End Function &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;' And now we'll use it in the Page_Load handler &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;Sub Page_Load(s As Object, e As EventArgs) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text = getName() &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;End Sub &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/script&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;messageLabel&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/html&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
Example 3.15. Functions.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;title&gt;ASP.NET Functions&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;script runat=&quot;server&quot; language=&quot;C#&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;// Here's our function &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;string getName() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;return &quot;Zak Ruvalcaba&quot;; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;// And now we'll use it in the Page_Load handler &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;void Page_Load() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text = getName(); &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/script&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;messageLabel&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/html&gt;</code></p>

<p>When the page above is loaded in the browser, the <code>Load</code> event will be raised which will cause the <code>Page_Load</code> event handler to be called, which in turn will call the <code>getName</code> function. Figure 3.4 shows the result in the browser.</p>

<p><img src="http://sitepointstatic.com/graphics/0320_Functions.png"  height="129" width="500" alt="1556_0320_Functions" /><br />
<em>Figure 3.4. Executing an ASP.NET function</em></p>

<p>Here's what's happening: the line in our <code>Page_Load</code> subroutine calls our function, which returns a simple string that we can assign to our label. In this simple example, we're merely returning a fixed string, but the function could just as easily retrieve the name from a database (or somewhere else). The point is that, regardless of how the function gets its data, we call it in just the same way.</p>

<p>When we're declaring our function, we must remember to specify the correct return type. Take a look at the following code:</p>

<p><code>' Here's our function &nbsp; &nbsp; &nbsp; &nbsp; <br />
Function addUp(x As Integer, y As Integer) As Integer &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Return x + y &nbsp; &nbsp; &nbsp; &nbsp; <br />
End Function &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
' And now we use it in Page_Load &nbsp; &nbsp; &nbsp; &nbsp; <br />
Sub Page_Load(s As Object, e As EventArgs) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;messageLabel.Text = addUp(5, 2).ToString() &nbsp; &nbsp; &nbsp; &nbsp; <br />
End Sub &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
// Here's our function &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
int addUp(int x, int y) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
{ &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;return x + y; &nbsp; &nbsp; &nbsp; &nbsp; <br />
} &nbsp; &nbsp; &nbsp; &nbsp; <br />
// And now we use it in Page_Load &nbsp; &nbsp; &nbsp; &nbsp; <br />
void Page_Load() &nbsp; &nbsp; &nbsp; &nbsp; <br />
{ &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;messageLabel.Text = addUp(5, 2).ToString(); &nbsp; &nbsp; &nbsp; &nbsp; <br />
}</code></p>

<p>You can easily adapt the previous example to use this new code so that you can see the results in your browser--just replace the code inside the <code>&lt;script&gt;</code> tags in <code>Functions.aspx</code> with the code above.</p>

<p>The first thing to notice in comparing this new code to the original version of <code>Functions.aspx</code> is that our function now accepts parameters. Any function or subroutine can take any number of parameters, of any type (there's no need for parameter types to match the return type--that's just coincidental in this example).</p>

<p>We can readily use the parameters inside the function or subroutine just by using the names we gave them in the function declaration (here, we've chosen <code>x</code> and <code>y</code>, but we could have chosen any names).</p>

<p>The other difference between this and the function declaration we had before is that we now declare our function with a return type of <code>Integer</code> or <code>int</code>, rather than <code>String</code>, because we want it to return a whole number.</p>

<p>When we call the new function, we simply have to specify the required number of parameters, and remember that the function will return a value with the type we specify. In this case, we have to convert the integer value that the function returns to a string, so that we can assign it to the label.</p>

<p>The simplest way to convert an integer to a string is to append <code>.ToString()</code> to the end of the variable name. In this case, we appended <code>ToString</code> on the function call which will return an integer during execution. Converting numbers to strings is a very common task in ASP.NET, so it's good to get a handle on it early.</p>

<p><em>Converting Numbers to Strings</em><br />
<em>There are more ways to convert numbers to strings in .NET, as the following lines of VB code illustrate:</em></p>

<p><code>messageLabel.Text = addUp(5, 2).ToString()<br />
messageLabel.Text = Convert.ToString(addUp(5, 2))</code></p>

<p><em>If you prefer C#, these lines of code perform the same operations as the VB code above:</em></p>

<p><code>messageLabel.Text = addUp(5, 2).ToString();<br />
messageLabel.Text = Convert.ToString(addUp(5, 2));</code></p>

<p><em>Don't be concerned if you're a little confused by how these conversions work, though--the syntax will become clear once we discuss object oriented concepts later in this chapter.</em></p>

<p><strong><em>Operators</em></strong></p>

<p>Throwing around values with variables and functions isn't of much use unless you can use them in some meaningful way, and to do so, we need operators. An operator is a symbol that has a certain meaning when it's applied to a value. Don't worry--operators are nowhere near as scary as they sound! In fact, in the last example, where our function added two numbers, we were using an operator: the addition operator, or + symbol. Most of the other operators are just as well known, although there are one or two that will probably be new to you. Table 3.2, outlines the operators that you'll use most often in your ASP.NET development.</p>

<p><em>Operators Abound!</em><br />
<em>The list of operators in Table 3.2 is far from complete. You can find detailed (though poorly written) lists of the differences between VB and C# operators on the Code Project web site.</em></p>

<p><em>Table 3.2. Common ASP.NET operators</em><br />
<img src="http://i2.sitepoint.com/graphics/commonoperators.png"  height="291" width="400" alt="ASP.NET common operators" /></p>

<p>The following code uses some of these operators:</p>

<p><code>If (user = &quot;Zak&quot; AndAlso itemsBought &nbsp;&lt;&gt; &nbsp;0) Then &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;messageLabel.Text = &quot;Hello Zak! Do you want to proceed to &quot; &amp; _ &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&quot;checkout?&quot; &nbsp; &nbsp; &nbsp; &nbsp; <br />
End If &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
if (user &nbsp;== &nbsp;&quot;Zak&quot; &amp;&amp; itemsBought &nbsp;!= &nbsp;0) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
{ &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;messageLabel.Text = &quot;Hello Zak! Do you want to proceed to &quot; + &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&quot;checkout?&quot;; &nbsp; &nbsp; &nbsp; &nbsp; <br />
}</code></p>

<p>Here, we use the equality, inequality (not equal to), and logical &quot;and&quot; operators in an <code>If</code> statement to print a tailored message for a given user when he has put a product in his electronic shopping cart. Of particular note is the C# equality operator, <code>==</code>, which is used to compare two values to see if they're equal. Don't use a single equals sign in C# unless you're assigning a value to a variable; otherwise your code will have a very different meaning than you expect!</p>

<p><strong>Breaking Long Lines of Code</strong></p>

<p>Since the message string in the above example was too long to fit on one line in this book, we used the string concatenation operator to combine two shorter strings on separate lines to form the complete message. In VB, we also had to break one line of code into two using the line continuation symbol (<code>_</code>, an underscore at the end of the line to be continued). Since C# marks the end of each command with a semicolon (<code>;</code>), you can split a single command over two lines in this language without having to do anything special.</p>

<p>We'll use these techniques throughout this book to present long lines of code within a limited page width. Feel free to recombine the lines in your own code if you like--there's no length limit on lines of VB and C# code.</p>

<p><strong><em>Conditional Logic</em></strong></p>

<p>As you develop ASP.NET applications, there will be many instances in which you'll need to perform an action only if a certain condition is met, for instance, if the user has checked a certain checkbox, selected a certain item from a <code>DropDownList</code> control, or typed a certain string into a <code>TextBox</code> control. We check for such occurrences using conditionals, the simplest of which is probably the <code>If</code> statement. This statement is often used in conjunction with an <code>Else</code> statement, which specifies what should happen if the condition is not met. So, for instance, we may wish to check whether or not the name entered in a text box is Zak, redirecting the user to a welcome page if it is, or to an error page if it's not:</p>

<p><code>If (userName.Text = &quot;Zak&quot;) Then &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;Response.Redirect(&quot;ZaksPage.aspx&quot;) &nbsp; &nbsp; &nbsp; &nbsp; <br />
Else &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;Response.Redirect(&quot;ErrorPage.aspx&quot;) &nbsp; &nbsp; &nbsp; &nbsp; <br />
End If &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
if (userName.Text == &quot;Zak&quot;) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;Response.Redirect(&quot;ZaksPage.aspx&quot;); &nbsp; &nbsp; &nbsp; &nbsp; <br />
} &nbsp; &nbsp; &nbsp; &nbsp; <br />
else &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
{ &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Response.Redirect(&quot;ErrorPage.aspx&quot;); &nbsp; &nbsp; &nbsp; &nbsp; <br />
}</code></p>

<p><em>Take Care with Case Sensitivity</em><br />
<em>Instructions are case-sensitive in both C# and VB, so be sure to use if in C# code, and If in VB code. On the other hand, variable and function names are case-sensitive only in C#. As such, in C# you could have two variables called <code>x</code> and <code>X</code>, which would be considered to be different; in VB, they would be considered to be the same variable.</em></p>

<p>Often, we want to check for many possibilities, and specify our application to perform a particular action in each case. To achieve this, we use the <code>Select Case</code> (VB) or <code>switch</code> (C#) construct:</p>

<p><code>Select Case userName &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Case &quot;Zak&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;Response.Redirect(&quot;ZaksPage.aspx&quot;) &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Case &quot;Mark&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;Response.Redirect(&quot;MarksPage.aspx&quot;) &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Case &quot;Fred&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;Response.Redirect(&quot;FredsPage.aspx&quot;) &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Case Else &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;Response.Redirect(&quot;ErrorPage.aspx&quot;) &nbsp; &nbsp; &nbsp; &nbsp; <br />
End Select &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; <br />
switch (userName) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
{ &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;case &quot;Zak&quot;: &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;Response.Redirect(&quot;ZaksPage.aspx&quot;); &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;break; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;case &quot;Mark&quot;: &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;Response.Redirect(&quot;MarksPage.aspx&quot;); &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;break; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;case &quot;Fred&quot;: &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;Response.Redirect(&quot;FredsPage.aspx&quot;); &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;break; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;default: &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;Response.Redirect(&quot;ErrorPage.aspx&quot;); &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;break; &nbsp; &nbsp; &nbsp; &nbsp; <br />
}</code></p>

<p><div class="article-cms-pagebreak"></div></p>

<p><strong><em>Loops</em></strong></p>

<p>As you've just seen, an <code>If</code> statement causes a code block to execute once if the value of its test expression is true. Loops, on the other hand, cause a code block to execute repeatedly for as long as the test expression remains true. There are two basic kinds of loop:</p>

<p><ul>
	<li><code>While</code> loops, also called <code>Do</code> loops (which sounds like something Betty Boop might say!)</li>
	<li><code>For</code> loops, including <code>For Next</code> and <code>For Each </code></li>
</ul>
</p>

<p>A <code>While</code> loop is the simplest form of loop; it makes a block of code repeat for as long as a particular condition is true. Here's an example:</p>

<p><code>Example 3.16. Loops.aspx &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;Loops&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;script runat=&quot;server&quot; language=&quot;VB&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;Sub Page_Load(s As Object, e As EventArgs) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;' Initialize counter &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;Dim counter As Integer = 0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;' Loop &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;Do While counter &lt;= 10 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' Update the label &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text = counter.ToString() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' We use the += operator to increase our variable by 1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;counter += 1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;Loop &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;End Sub &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/script&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;messageLabel&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
Example 3.17. Loops.aspx &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;Loops&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;script runat=&quot;server&quot; language=&quot;C#&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;void Page_Load() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;// initialize counter &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;int counter = 0; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;// loop &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;while (counter &lt;= 10) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Update the label &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text = counter.ToString(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// C# has the ++ operator to increase a variable by 1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;counter++; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/script&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;messageLabel&quot; runat=&quot;server&quot;/&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p>If you load this page, you'll get the result illustrated in Figure 3.5.</p>

<p><img src="http://sitepointstatic.com/graphics/0325_Loops.png"  height="144" width="500" alt="1556_0325_Loops" /><br />
<em>Figure 3.5. Results of a While loop</em></p>

<p>When you open the page, the label will be set to show the number 0, then 1, then 2, all the way to 10. Of course, since all this happens in <code>Page_Load</code> (i.e. before any output is sent to the browser), you'll only see the last value assigned: 10.</p>

<p>This demonstrates that the loop repeats until the condition is no longer met. Try changing the code so that the counter variable is initialized to 20 instead of 0. When you open the page now, you won't see anything on the screen, because the loop condition was never met.</p>

<p>The other form of the <code>While</code> loop, called a <code>Do While</code> loop, checks whether or not the condition has been met at the end of the code block, rather than at the beginning:</p>

<p><code>Example 3.18. Loops.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
Sub Page_Load(s As Object, e As EventArgs) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;' Initialize counter &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;Dim counter As Integer = 0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;' Loop &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;Do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;' Update the label &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;messageLabel.Text = counter.ToString() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;' We use the += operator to increase our variable by 1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;counter += 1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;Loop While counter &lt;= 10 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
End Sub &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
Example 3.19. Loops.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
void Page_Load() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;// initialize counter &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;int counter = 0; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;// loop &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;// Update the label &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;messageLabel.Text = counter.ToString(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;// C# has the operator ++ to increase a variable by 1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;counter++; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;while (counter &lt;= 10); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
}</code></p>

<p>If you run this code, you'll see it provides the exact same output we saw when we tested the condition before the code block. However, we can see the crucial difference if we change the code so that the counter variable is initialized to 20. In this case, we will, in fact, see 20 displayed, because the loop code is executed once before the condition is even checked! There are some instances when this is just what we want, so being able to place the condition at the end of the loop can be very handy.</p>

<p>A <code>For</code> loop is similar to a While loop, but we typically use it when we know beforehand how many times we need it to execute. The following example displays the count of items within a <code>DropDownList</code> control called <code>productList</code>:</p>

<p><code>Dim i As Integer &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
For i = 1 To productList.Items.Count &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;messageLabel.Text = i.ToString() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
Next &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
int i; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
for (i = 1; i &lt;= productList.Items.Count; i++) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;messageLabel.Text = i.ToString(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
}</code></p>

<p>In VB, the loop syntax specifies the starting and ending values for our counter variable within the <code>For</code> statement itself.</p>

<p>In C#, we assign a starting value <code>(i = 1)</code> along with a condition that will be tested each time we move through the loop <code>(i &lt;= productList.Items.Count)</code>, and identify how the counter variable should be incremented after each loop <code>(i++)</code>. While this allows for some powerful variations on the theme in our C# code, it can be confusing at first. In VB, the syntax is considerably simpler, but it can be a bit limiting in exceptional cases.</p>

<p>The other type of <code>For</code> loop is <code>For Each</code>, which loops through every item within a collection. The following example loops through an array called <code>arrayName</code>:</p>

<p><code>For Each item In arrayName &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;messageLabel.Text = item &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
Next &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
foreach (string item in arrayName) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;messageLabel.Text = item; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
}</code></p>

<p>You may also come across instances in which you need to exit a loop prematurely. In these cases, you would use either <code>Exit</code>, if your code is in VB, or the equivalent (<code>break</code>) statement in C#, to terminate the loop:</p>

<p><code>Dim i As Integer &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
For i = 0 To 10 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;If (i = 5) Then &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;Response.Write(&quot;Oh no! Not the number 5!!&quot;) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;Exit For &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;End If &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
Next &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
int i; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
for (i = 0; i &lt;= 10; i++) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;if (i == 5) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;Response.Write(&quot;Oh no! Not the number 5!!&quot;); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;break; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
}</code></p>

<p>In this case, as soon as our <code>For</code> loop hits the condition <code>i = 5</code>, it displays a warning message using the <code>Response.Write</code> method (which will be familiar to those with past ASP experience), and exits the loop so that no further passes through the loop will be made.</p>

<p>Although we've only scratched the surface, VB and C# provide a great deal of power and flexibility to web developers, and time spent learning the basics now will more than pay off in the future.</p>

<p><div class="article-cms-pagebreak"></div></p>

<h5>Object Oriented Programming Concepts</h5>



<p>VB and C# are modern programming languages that give you the tools to write structured, extensible, and maintainable code. The code can be separated into modules, each of which defines classes that can be imported and used in other modules. Both languages are relatively simple to get started with, yet they offer sophisticated features for writing complex, large-scale enterprise applications.</p>

<p>One of the reasons why these languages are so powerful is that they facilitate object oriented programming (OOP). In this section, we'll explain the fundamentals of OOP and learn how adopting good OOP style now can help you to develop better, more versatile web applications down the road. This section will provide a basic OOP foundation angled towards the web developer. In particular, we'll cover the following concepts:</p>

<p><ul>
	<li>objects</li>
	<li>properties</li>
	<li>methods</li>
	<li>classes</li>
	<li>scope</li>
	<li>events</li>
	<li>inheritance</li>
</ul>
</p>

<p>In the pages that follow, we'll discuss these concepts briefly, and from Chapter 4 onwards, you'll see some practical examples of OOP in action.</p>

<p><strong><em>Objects and Classes</em></strong></p>

<p>So what does the term &quot;object oriented programming&quot; mean? Basically, as the name suggests, it's an approach to development that puts objects at the center of the programming model. The object is probably the most important concept in the world of OOP; an object is a self-contained entity that has state and behavior, just like a real-world object.</p>

<p>In programming, an object's state is described by its fields and properties, while its behavior is defined by its methods and events. An important part of OOP's strength comes from the natural way it allows programmers to conceive and design their applications.</p>

<p>We often use objects in our programs to describe real-world objects?we can have objects that represent a car, a customer, a document, or a person. Each object has its own state and behavior.</p>

<p>It's very important to have a clear understanding of the difference between a class and an object. A class acts like a blueprint for the object, while an object represents an instance of the class. I just said that you could have objects of type <code>Car</code>, for example. If you did, <code>Car</code> would be the class, or the type, and we could create as many <code>Car</code> objects as we wanted, calling them <code>myCar</code>, <code>johnsCar</code>, <code>davesCar</code>, and so on.</p>

<p>The class defines the behavior of all objects of that type. So all objects of type <code>Car</code> will have the same behavior--for example, the ability to change gear. However, each individual <code>Car</code> object may be in a different gear at any particular time; thus, each object has its own particular state.</p>

<p>Let's take another example: think of <code>Integer</code> (or <code>int</code>) as a class, and <code>age</code> and <code>height</code> as objects of type <code>Integer</code>. The class defines the behavior of the objects--they're numeric, and we can perform mathematical operations on them--and the instances of objects (<code>age</code> and <code>height</code>) have their behavior defined by the class to which they belong, but they also hold state (so <code>age</code> could be <code>20</code>).</p>

<p>Take a look at the following code:</p>

<p><code>Dim age As Integer &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Dim name As String &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Dim myCar as Car &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Dim myOtherCar as Car &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
int age; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
string name; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Car myCar; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Car myOtherCar;</code></p>

<p>As you can see, the syntax for declaring an object is the same as that for declaring a simple integer or string variable. In C#, we first mention the type of the object, then we name that particular instance. In VB, we use the <code>Dim</code> keyword.</p>

<p>Object oriented programming sounds like an advanced topic, but getting started with it is actually very easy, because OOP offers us a natural way to conceive and design programs. Instead of writing long functions of code to perform specific tasks, OOP allows us to group pieces of related functionality into classes that we can reuse over and over, or even extend to incorporate new features. In OOP, one thinks of programming problems in terms of objects, properties, and methods. And, as we've seen, the best way to get a handle on these terms is to consider a real-world object and imagine how it might be represented in an OOP program. For the examples that follow, we'll use as our example my dog, an Australian Shepherd named Rayne.</p>

<p>Rayne is your average great big, friendly, loving, playful mutt. You might describe him in terms of his physical properties: he's gray, white, brown, and black, stands roughly one-and-a-half feet high, and is about three feet long. You might also describe some methods to make him do things: he sits when he hears the command &quot;Sit,&quot; lies down when he hears the command &quot;Lie down,&quot; and comes when his name is called.</p>

<p>So, if we were to represent Rayne in an OOP program, we'd probably start by creating a class called <code>Dog</code>. A class describes how certain types of objects look from a programming point of view. When we define a class, we must define the following two items:</p>

<p><ul>
	<li><strong>Properties</strong> - Properties hold specific information relevant to that class of object. You can think of properties as characteristics of the objects that they represent. Our <code>Dog</code> class might have properties such as <code>Color</code>, <code>Height</code>, and <code>Length</code>.</li>
	<li><strong>Methods</strong> - Methods are actions that objects of the class can be told to perform. Methods are subroutines (if they don't return a value) or functions (if they do) that are specific to a given class. So the <code>Dog</code> class could have methods such as <code>Sit</code> and <code>LieDown</code>.</li>
</ul>
</p>

<p>Once we've defined a class, we can write code that creates objects of that class, using the class a little like a template. This means that objects of a particular class expose (or make available) the methods and properties defined by that class. So, we might create an instance of our <code>Dog</code> class called <code>rayne</code>, set its properties accordingly, and use the methods defined by the class to interact with Rayne, as shown in Figure 3.6.</p>

<p><img src="http://sitepointstatic.com/graphics/fig-rayne.png"  height="203" width="500" alt="1556_fig-rayne" /><br />
<em>Figure 3.6. An instance of Dog</em></p>

<p>This is just a simple example to help you visualize what OOP is all about. In the next few sections, we'll cover properties and methods in greater detail, and talk about classes and class instances, scope, events, and inheritance.</p>

<p><strong><em>Properties</em></strong></p>

<p>As we've seen, properties are characteristics shared by all objects of a particular class. In the case of our example, the following properties might be used to describe any given dog:</p>

<p><ul>
	<li><code>color</code></li>
	<li><code>height</code></li>
	<li><code>length</code></li>
</ul>
</p>

<p>In the same way, the more useful ASP.NET <code>Button</code> class exposes properties including:</p>

<p><ul>
	<li><code>Width</code></li>
	<li><code>Height</code></li>
	<li><code>ID</code></li>
	<li><code>Text</code></li>
	<li><code>ForeColor</code></li>
	<li><code>BackColor</code></li>
</ul>
</p>

<p>Unfortunately for me, if I get sick of Rayne's color, I can't change it in real life. However, if Rayne was a .NET object, we could change any of his properties in the same way that we set variables (although a property can be read-only or write-only). For instance, we could make him brown very easily:</p>

<p><code>rayne.Color = &quot;Brown&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
rayne.Color = &quot;Brown&quot;;</code></p>

<p>In this example, we're using an instance of our <code>Dog</code> class called <code>rayne</code>. We use the dot operator (<code>.</code>) to access the property <code>Color</code> that the object exposes and set it to the string <code>&quot;Brown&quot;</code>.</p>

<p><strong><em>Methods</em></strong></p>

<p>With our dog example, we can make a particular dog do things by calling commands. If I want Rayne to sit, I tell him to sit. If I want Rayne to lie down, I tell him to lie down. In object oriented terms, I tell him what I want him to do by calling a predefined command or method, and an action results. For example, to make Rayne sit, we would use the following code to call his <code>Sit</code> method:</p>

<p><code>rayne.Sit() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
rayne.Sit();</code></p>

<p>Given that rayne is an instance of our <code>Dog</code> class, we say that the <code>Sit</code> method is exposed by the <code>Dog</code> class.</p>

<p><strong><em>Classes</em></strong></p>

<p>You can think of a class as a template for building as many objects of a particular type as you like. When you create an instance of a class, you are creating an object of that class, and the new object has all the characteristics and behaviors (properties and methods) defined by the class.</p>

<p>In our dog example, <code>rayne</code> was an instance of the <code>Dog</code> class, as Figure 3.6 illustrated. In our code, we'd create a new instance of the <code>Dog</code> class called <code>rayne</code>, as shown below:</p>

<p><code>Dim rayne As New Dog() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Dog rayne = new Dog();</code></p>

<p><div class="article-cms-pagebreak"></div></p>

<p><strong><em>Constructors</em></strong></p>

<p>Constructors are special kinds of method are that used to initialize the object. In OOP, when we create new instances of a class, we say we're instantiating that class. The constructor is a method of a class that's executed automatically when a class is instantiated.</p>

<p>At least one constructor will be defined for most of the classes you will write (though we can define more than one constructor for a class, as we'll see shortly), since it's likely that some data will need to be initialized for each class at creation time.</p>

<p>In C# and VB, the constructor is defined as a method that has the same name as the class, and has no return type.</p>

<p><strong><em>Scope</em></strong></p>

<p>You should now understand programming objects to be entities that exist in a program and are manipulated through the methods and properties they expose. However, in some cases, we want to create for use inside our class methods that are not available to code outside that class.</p>

<p>Imagine we're writing the <code>Sit</code> method inside this class, and we realize that before the dog can sit, it has to shuffle its back paws forward a little (bear with me on this one!). We could create a method called <code>ShufflePaws</code>, then call that method from inside the <code>Sit</code> method. However, we don't want code in an ASP.NET page or in some other class to call this method--it'd just be silly. We can prevent it by controlling the scope of the <code>ShufflePaws</code> method.</p>

<p>Carefully controlling which members of a class are accessible from outside that class is fundamental to the success of object oriented programming. You can control the visibility of a class member using a special set of keywords called access modifiers:</p>

<p><ul>
	<li><code>Public</code> - Defining a property or method of a class as public allows that property or method to be called from outside the class itself. In other words, if an instance of this class is created inside another object (remember, too, that ASP.NET pages themselves are objects), public methods and properties are freely available to the code that created that instance of the class. This is the default scope for VB and C# classes.</li>
	<li><code>Private</code> - If a property or method of a class is private, it cannot be used from outside the class itself. So, if an instance of this class is created inside an object of a different class, the creating object has no access to private methods or properties of the created object.</li>
	<li><code>Protected</code> - A protected property or method sits somewhere between public and private. A protected member is accessible from the code within its class, or to the classes derived from it. We'll learn more about derived classes a bit later.</li>
</ul>
 </p>

<p>Deciding which access modifier to use for a given class member can be a very difficult decision--it affects not only your class, but also the other classes and programs that use your class. Of special importance are the class's public members, which together form the class's public interface. The public interface acts like a contract between your class and the users of your class, and if it's designed properly, it shouldn't change over time. If, for example, you mark the <code>Sit</code> method as public, and later decide to make it private, all the other classes that use this method will have to change accordingly, which is not good. For an extreme scenario, imagine that in a year, Microsoft decided to remove the <code>ToString</code> method from its classes--obviously, this would wreak havoc with your code.</p>

<p><em>Keep Everything Private until you Need It</em><br />
<em>As a simple guideline for designing your classes, remember that it's often easier just to make all the members private, and make public only those that really need to be public. It's much easier to add to a public interface than it is to remove from it.</em></p>

<p><strong><em>Events</em></strong></p>

<p>We've covered events in some depth already. To sum up, events occur when a control object sends a message as a result of some change that has been made to it. Generally, these changes occur as the result of user interaction with the control via the browser. For instance, when a button is clicked, a <code>Click</code> event is raised, and we can handle that event to perform some action. The object that triggers the event is referred to as the event sender, while the object that receives the event is referred to as the event receiver. You'll learn more about these objects in Chapter 4.</p>

<p><strong><em>Understanding Inheritance</em></strong></p>

<p>The term inheritance refers to the ability of a specialized class to refine the properties and methods exposed by another, more generalized class.</p>

<p>In our dog example, we created a class called <code>Dog</code>, then created instances of that class to represent individual dogs such as Rayne. However, dogs are types of animals, and many characteristics of dogs are shared by all (or most) animals. For instance, Rayne has four legs, two ears, one nose, two eyes, etc. It might be better, then, for us to create a base class called <code>Animal</code>. When we then defined the <code>Dog</code> class, it would inherit from the <code>Animal</code> class, and all public properties and methods of <code>Animal</code> would be available to instances of the <code>Dog</code> class.</p>

<p>Similarly, we could create a new class based on the <code>Dog</code> class. In programming circles, this is called deriving a subclass from <code>Dog</code>. For instance, we might create a class called <code>AustralianShepherd</code>, and one for my other dog, Amigo, called <code>Chihuahua</code>, both of which would inherit the properties and methods of the <code>Dog</code> base class, and define new classes specific to each breed.</p>

<p>Don't worry too much if this is still a little unclear. The best way to appreciate inheritance is to see it used in a real program. The most obvious use of inheritance in ASP.NET is in the technique called code-behind, and we'll build plenty of examples using inheritance and code-behind in Chapter 4, Constructing ASP.NET Web Pages.</p>

<p><strong><em>Objects In .NET</em></strong></p>

<p>If this is the first book in which you've read about object oriented programming, you've probably started to dream about objects! Don't worry, the effect of first exposure to objects doesn't usually last for more than a week. Even though this is yet another discussion about objects, I promise it won't be boring. Moreover, in the course of this section, we'll cover some important concepts that every serious .NET programmer must know.</p>

<p>So far, we've explored various concepts that apply in one form or the other to almost any truly object oriented language. Every language has its peculiarities, but the general concepts are the same in all of these languages.</p>

<p>You may already have heard the common mantra of object oriented programmers: &quot;everything is an object.&quot; This has two meanings. First of all, in C#, every program consists of a class. In all stages of application development, from design to implementation, decisions must be made in regard to the way we design and relate objects and classes to each other. Yes, objects are everywhere.</p>

<p>.NET extends this to yet another level, giving the phrase &quot;everything is an object&quot; extra meaning. In the world of .NET, every class ultimately derives from a base class named <code>Object</code>, so &quot;everything is an object&quot; becomes &quot;everything is an <code>Object</code>.&quot;</p>

<p>If you look at the documentation for the ASP.NET <code>Page</code> class, you can see the list of classes from which this class inherits, as shown in Figure 3.7.</p>

<p><img src="http://sitepointstatic.com/graphics/fig-pagehierarchy.png"  height="320" width="500" alt="1556_fig-pagehierarchy" /><br />
<em>Figure 3.7. The <code>Page</code> class's documentation</em></p>

<p>You'll remember from the last section that we said our hypothetical <code>AustralianShepherd</code> class would inherit from the more general <code>Dog</code> class, which, in turn, would inherit from the even more general <code>Animal</code> class. This is exactly the kind of relationship that's being shown in Figure 3.7?<code>Page</code> inherits methods and properties from the <code>TemplateControl</code> class, which in turn inherits from a more general class called <code>Control</code>. In the same way that we say that an Australian Shepherd is an Animal, we say that a <code>Page</code> is a <code>Control</code>. <code>Control</code>, like all .NET classes, inherits from <code>Object</code>.</p>

<p>Since <code>Object</code> is so important that every other class derives from it, either directly or indirectly, it deserves a closer look. <code>Object</code> contains the basic functionality that the designers of .NET felt should be available in any object. The <code>Object</code> class contains these public members:</p>

<p><ul>
	<li><code>Equals</code></li>
	<li><code>ReferenceEquals</code></li>
	<li><code>GetHashCode</code></li>
	<li><code>GetType</code></li>
	<li><code>ToString</code></li>
</ul>
</p>

<p>The only member we're really interested in at this moment is <code>ToString</code>, which returns the text representation of an object. This method is called automatically when conversions to string are needed, as is the case in the following code, which joins a number and a string:</p>

<p><code>Dim age As Integer = 5 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
Dim message As String = &quot;Current Age: &quot; &amp; age &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
int age = 5; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
string message = &quot;Current Age: &quot; + age;</code></p>

<p><strong><em>Namespaces</em></strong></p>

<p>As ASP.NET is part of the .NET Framework, we have access to all the goodies that are built into it in the form of the .NET Framework Class Library. This library represents a huge resource of tools and features in the form of classes; these classes are organized in a hierarchy of namespaces. When we want to use certain features that .NET provides, we have only to find the namespace that contains the desired functionality, and import that namespace into our ASP.NET page. Once we've done that, we can make use of the .NET classes in that namespace to achieve our own ends.</p>

<p>For instance, if we wanted to access a database from a page, we would import the namespace that contains classes for this purpose, which could be <code>System.Data.SqlClient</code>. You can view the namespace of a class when visiting its page in the .NET documentation. For example, the <code>Button</code> control's class can be found in <code>System.Web.UI.WebControls</code>.</p>

<p>To use a class that's part of a namespace that isn't available to you by default, you either need to import the namespace, or reference the class using its fully qualified name, such as <code>System.Web.UI.WebControls</code>. To import a namespace page, we use the Imports directive in VB, and using in C#:</p>

<p><code>Imports System.Data.SqlClient &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
using System.Data.SqlClient;</code></p>

<p>As we've imported that namespace, we have access to all the classes that it contains.</p>

<p><div class="article-cms-pagebreak"></div></p>

<h5>Using Code-behind Files</h5>



<p>Most companies that employ web development teams usually split projects into two groups--visual design and functional development--because software engineers are usually poor designers, and designers are often poor engineers. Until now, our ASP.NET pages have contained code render blocks that place VB or C# code directly into the ASP.NET page. The problem with this approach is that there's no separation between the presentational elements of the page and the application logic. Traditional ASP was infamous for creating &quot;spaghetti&quot; code, which was scattered and intertwined throughout the presentation elements. This made it very tricky to manage the code between development teams, as you'll know if you've ever tried to pick apart someone else's ASP code. In response to these problems, ASP.NET introduced a new development approach that allows code developers to work separately from the presentation designers who lay out individual pages.</p>

<p>This new method, called code-behind, keeps all of your presentational elements (controls) inside the <code>.aspx</code> file, but moves all of your code to a separate class in a <code>.vb</code> or <code>.cs</code> code-behind file. Consider the following ASP.NET page, which displays a simple button and label:</p>

<p><code>Example 3.20. Hello.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;title&gt;Sample Page using VB&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;script runat=&quot;server&quot; language=&quot;VB&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;Sub Click(s As Object, e As EventArgs) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text = &quot;Hello World&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;End Sub &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/script&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Button id=&quot;submitButton&quot; Text=&quot;Click Me&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;runat=&quot;server&quot; OnClick=&quot;Click&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;messageLabel&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Example 3.21. Hello.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;title&gt;Sample Page using C#&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;script runat=&quot;server&quot; language=&quot;C#&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;void Click(Object s, EventArgs e) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;messageLabel.Text = &quot;Hello World&quot;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/script&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Button id=&quot;submitButton&quot; Text=&quot;Click Me&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; runat=&quot;server&quot; OnClick=&quot;Click&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;messageLabel&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/html&gt;</code></p>

<p>Let's see how this example could be separated into the following distinct files:</p>

<p><code>HelloCodeBehind.aspx &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;layout, presentation, and static content &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
HelloCodeBehind.vb or HelloCodeBehind.cs &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;code-behind files containing a custom page class</code></p>

<p>First, we take all the code and place it in the code-behind file (<code>HelloCodeBehind.vb</code> or <code>HelloCodeBehind.cs</code>). This file is a pure code file, and contains no HTML or other markup tags. Nevertheless, we can still access presentation elements from this file, using their IDs (such as <code>messageLabel</code>) as shown below:</p>

<p><code>Example 3.22. HelloCodeBehind.vb &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
' First off we import some useful namespaces &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Imports System &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Imports System.Web.UI &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Imports System.Web.UI.WebControls &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
' The partial class &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Public Partial Class HelloCodeBehind &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Inherits System.Web.UI.Page &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;' Here's the Click handler just as it appeared before &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Sub Click(s As Object, e As EventArgs) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;messageLabel.Text = &quot;Hello World&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;End Sub &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
End Class &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Example 3.23. HelloCodeBehind.cs &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
// First off we import some useful namespaces &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
using System; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
using System.Web.UI; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
using System.Web.UI.WebControls; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
// The partial class &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
public partial class HelloCodeBehind: System.Web.UI.Page &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;// Here's the Click handler just as it appeared before &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;public void Click(Object s, EventArgs e) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;messageLabel.Text = &quot;Hello World&quot;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
}</code></p>

<p>Without code, the main ASP.NET page becomes a bit simpler:</p>

<p><code>Example 3.24. HelloCodeBehind.aspx &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;%@ Page Language=&quot;VB&quot; CodeFile=&quot;HelloCodeBehind.vb&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;Inherits=&quot;HelloCodeBehind&quot;%&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;title&gt;Sample Page Code Behind Demo using VB&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Button id=&quot;submitButton&quot; Text=&quot;Click Me&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;runat=&quot;server&quot; OnClick=&quot;Click&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;messageLabel&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Example 3.25. HelloCodeBehind.aspx &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;%@ Page Language=&quot;C#&quot; CodeFile=&quot;HelloCodeBehind.cs&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;Inherits=&quot;HelloCodeBehind&quot;%&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;title&gt;Sample Page Code Behind Demo using C#&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Button id=&quot;submitButton&quot; Text=&quot;Click Me&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;runat=&quot;server&quot; OnClick=&quot;Click&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;messageLabel&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/html&gt;</code></p>

<p>As you can see, the only line that differs between these <code>.aspx</code> pages is the <code>Page</code> directive. Since the <code>.aspx</code> pages now contain only HTML layout, the contents are identical no matter what language you use for the code.</p>

<p><em>Partial Classes</em><br />
<em>If you have programmed with ASP.NET 1.1, you may already have noticed the changes in the code-behind model. In ASP.NET 2.0, the code-behind file is cleaner and smaller--a feat it achieves by using a new feature of VB and C# called partial classes. Read on for the details!</em></p>

<p>The code-behind file is written differently from what you've seen so far. While we no longer need <code>&lt;script&gt;</code> tags, we find a class definition in their place. As the VB example shows, we start with three lines that import namespaces for use within the code:</p>

<p><code>Example 3.26. HelloCodeBehind.vb (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Imports System &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Imports System.Web.UI &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Imports System.Web.UI.WebControls</code></p>

<p>The next lines create a new class, named <code>HelloCodeBehind</code>. Since our code-behind page contains code for an ASP.NET page, our class inherits from the <code>Page</code> class:</p>

<p><code>Example 3.27. HelloCodeBehind.vb (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Public Partial Class HelloCodeBehindSample &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Inherits System.Web.UI.Page</code></p>

<p>This is the practical application of inheritance that we mentioned earlier. The <code>HelloCodeBehind</code> class inherits from <code>Page</code>, borrowing all its functionality, and extending it according to the particular needs of the page.</p>

<p>But what does <code>Partial</code> mean? A new feature in .NET 2.0, partial classes allow a class to be spread over multiple files. ASP.NET 2.0 uses this feature to make programmers' lives easier. We write one part of the class in the code-behind file, and ASP.NET generates the other part of the class for us, adding the object declarations for all the user interface elements.</p>

<p>Take a look at the <code>Click</code> subroutine, though which we access the <code>messageLabel</code> object without defining it anywhere in the code:</p>

<p><code>Example 3.28. HelloCodeBehind.vb (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Sub Click(s As Object, e As EventArgs) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;messageLabel.Text = &quot;Hello World&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
End Sub</code></p>

<p>That's pretty handy! However, don't be fooled into thinking that you can use objects that haven't been declared--the <code>messageLabel</code> object has been declared in another partial class file that the ASP.NET runtime generates for us. The file contains declarations for all the controls referenced in <code>HelloCodeBehind.aspx</code>.</p>

<p>As I hope you can see, code-behind files are easy to work with, and they can make managing and using our pages much more straightforward than keeping your code in code declaration blocks. You'll find yourself using code-behind files in most of the real-world projects that you build, but for simplicity's sake, we'll stick with code declaration blocks for one more chapter.</p>

<h5>Summary</h5>



<p>Phew! We've covered quite a few concepts over the course of this chapter. Don't worry--with a little practice, these concepts will become second nature to you. I hope you leave this chapter with a basic understanding of programming concepts as they relate to the ASP.NET web developer.</p>

<p>The next chapter will begin to put all the concepts that we've covered so far into practice. We'll begin by working with HTML Controls, Web Forms, and Web Controls, before launching into our first hands-on project!</p>

<p><div class="article-cms-pagebreak"></div></p>

<h5>Chapter 4. Constructing ASP.NET Web Pages</h5>



<p>If you've ever built a model from Lego bricks, you're well prepared to start building real ASP.NET web pages. ASP.NET offers many techniques that allow web developers to build parts of web pages independently, then put them together later to build complete pages.</p>

<p>The content we're organizing through our work with ASP.NET is almost never static. At design time, we tend to think in terms of templates that contain placeholders for the content that will be generated dynamically at runtime. And to fill those placeholders, we can either use one of the many controls ASP.NET provides, or build our own.</p>

<p>In this chapter, we'll discuss many of the objects and techniques that give life and color to ASP.NET web pages, including:</p>

<p><ul>
	<li>web forms</li>
	<li>HTML server controls</li>
	<li>web server controls</li>
	<li>web user controls</li>
	<li>master pages</li>
	<li>handling page navigation</li>
	<li>styling pages and controls with CSS</li>
</ul>
</p>

<p>If the list looks intimidating, don't worry?all of this is far easier to understand than it might first appear.</p>

<h5>Web Forms</h5>



<p>As you know, there's always new terminology to master when you're learning new technologies. But with ASP.NET, even the simplest terms that are used to describe the basics of web pages change to reflect the processes that occur within them.</p>

<p>The term used to describe an ASP.NET web page is web form, and this is the central object in ASP.NET development. You've already met web forms--they're the <code>.aspx</code> files you've worked with so far in this book. At first glance, web forms look much like HTML pages, but in addition to static HTML content they also contain ASP.NET presentational elements, and code that executes on the server side to generate dynamic content and perform the desired server-side functionality.</p>

<p>Every web form includes a <code>&lt;form runat=&quot;server&quot;&gt;</code> tag, which contains the ASP.NET-specific elements that make up the page. Multiple forms aren't supported. The basic structure of a web form is shown here:</p>

<p><code>&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;script runat=&quot;server&quot; language=&quot;language&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;...code here... &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/script&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;...user interface elements here... &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p>To access and manipulate a web form programatically, we use the <code>System.Web.UI.Page</code> class. You might recognize this class from the code-behind example we saw in Chapter 3, VB and C# Programming Basics. We must mention the class explicitly in the code-behind file. In situations in which we're not using code-behind files (i.e. we write all the code inside the <code>.aspx</code> file instead), the <code>Page</code> class is still used--we just don't see it.</p>

<p>We can use a range of user interface elements inside the form--including typical, static HTML code--but we can also use elements whose values or properties can be generated or manipulated on the server either when the page first loads, or when the form is submitted. These elements--which, in ASP.NET parlance, are called controls--allow us to reuse common functionality, such as the page header, a calendar, a shopping cart summary, or a &quot;Today's Quote&quot; box, for example, across multiple web forms. There are several types of controls in ASP.NET:</p>

<p><ul>
	<li>HTML server controls</li>
	<li>web server controls</li>
	<li>web user controls</li>
	<li>master pages</li>
</ul>
</p>

<p>There are significant technical differences between these types of controls, but what makes them similar is the ease with which we can integrate and reuse them in our web sites. Let's take a look at them one by one.</p>

<h5>HTML Server Controls</h5>



<p>HTML server controls are outwardly identical to plain old HTML tags, but include a <code>runat=&quot;server&quot;</code> attribute. This gives the ASP.NET runtime control over the HTML server controls, allowing us to access them programatically. For example, if we have an <code>&lt;a&gt;</code> tag in a page and we want to be able to change the address to which it links dynamically, using VB or C# code, we use the <code>runat=&quot;server&quot;</code> attribute.</p>

<p>A server-side HTML server control exists for each of HTML's most common elements. Creating HTML server controls is easy: we simply stick a <code>runat=&quot;server&quot;</code> attribute on the end of a normal HTML tag to create the HTML control version of that tag. The complete list of current HTML control classes and their associated tags is given in Table 4.1.</p>

<p><em>Table 4.1. HTML control classes</em><br />
<img src="http://sitepointstatic.com/graphics/table41.png"  height="547" width="484" alt="1556_table41" /></p>

<p>For more details on these classes, see Appendix A.</p>

<p>All the HTML server control classes are contained within the <code>System.Web.UI.HtmlControls</code> namespace. As they're processed on the server side by the ASP.NET runtime, we can access their properties through code elsewhere in the page. If you're familiar with JavaScript, HTML, and CSS, then you'll know that manipulating text within HTML tags, or even manipulating inline styles within an HTML tag, can be cumbersome and error-prone. HTML server controls aim to solve these problems by allowing you to manipulate the page easily with your choice of .NET language--for instance, using VB or C#.</p>

<p><strong><em>Using the HTML Server Controls</em></strong></p>

<p>Nothing explains the theory better than a simple, working example. Let's create a simple survey form that uses the following HTML server controls:</p>

<p><ul>
	<li><code>HtmlForm</code></li>
	<li><code>HtmlButton</code></li>
	<li><code>HtmlInputText</code></li>
	<li><code>HtmlSelect</code></li>
</ul>
</p>

<p>We'll begin by creating a new file named <code>Survey.aspx</code>. Create the file in the <code>Learning</code> folder you created in Chapter 1. The following code creates the visual interface for the survey:</p>

<p><code>Example 4.1. Survey.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;Using ASP.NET HTML Server Controls&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;!-- code will go here --&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;h2&gt;Take the Survey!&lt;/h2&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;!-- Display user name --&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;Name:&lt;br /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;input type=&quot;text&quot; id=&quot;name&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;!-- Display email --&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;Email:&lt;br /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;input type=&quot;text&quot; id=&quot;email&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;!-- Display technology options --&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;Which server technologies do you use?&lt;br /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;select id=&quot;serverModel&quot; runat=&quot;server&quot; multiple=&quot;true&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;option&gt;ASP.NET&lt;/option&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;option&gt;PHP&lt;/option&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;option&gt;JSP&lt;/option&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;option&gt;CGI&lt;/option&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;option&gt;ColdFusion&lt;/option&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;/select&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;!-- Display .NET preference options --&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;Do you like .NET so far?&lt;br /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;select id=&quot;likeDotNet&quot; runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;option&gt;Yes&lt;/option&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;option&gt;No&lt;/option&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;/select&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;!-- Display confirmation button --&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;button id=&quot;confirmButton&quot; OnServerClick=&quot;Click&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;runat=&quot;server&quot;&gt;Confirm&lt;/button&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;!-- Confirmation label --&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;asp:Label id=&quot;feedbackLabel&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p>From what we've already seen of HTML controls, you should have a good idea of the classes we'll be working with in this page. All we've done is place some <code>HtmlInputText</code> controls, an <code>HtmlButton</code> control, and an <code>HtmlSelect</code> control inside the obligatory <code>HtmlForm</code> control. We've also added a <code>Label</code> control, which we'll use to give feedback to the user.</p>

<p><em>HTML Server Controls in Action</em><br />
<em>Remember, HTML server controls are essentially HTML tags with the <code>runat=&quot;server&quot;</code> attribute. In most cases, you'll also need to assign them IDs, which will enable you to use the controls in your code.</em></p>

<p>When it's complete, the <code>Survey.aspx</code> web form will resemble Figure 4.1.</p>

<p><img src="http://sitepointstatic.com/graphics/0405_Survey.png"  height="402" width="500" alt="1556_0405_Survey" /><br />
<em>Figure 4.1. A simple form that uses HTML server controls</em></p>

<p>When a user clicks on the button, we'll display the submitted responses in the browser. In a real application, we'd probably be more likely to save this information to a database and perhaps show the results as a chart. Whatever the case, we'd access the properties of the HTML controls as shown below:</p>

<p><code>Example 4.2. Survey.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;script runat=&quot;server&quot; language=&quot;VB&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;Sub Click(ByVal s As Object, ByVal e As EventArgs) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;Dim i As Integer &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;feedbackLabel.Text = &quot;Your name is: &quot; &amp; name.Value &amp; &quot;&lt;br /&gt;&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;feedbackLabel.Text += &quot;Your email is: &quot; &amp; email.Value &amp; _ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&quot;&lt;br /&gt;&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;feedbackLabel.Text += &quot;You like to work with:&lt;br /&gt;&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;For i = 0 To serverModel.Items.Count - 1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;If serverModel.Items(i).Selected Then &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;feedbackLabel.Text += &quot; - &quot; &amp; _ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;serverModel.Items(i).Text &amp; &quot;&lt;br /&gt;&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;End If &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;Next i &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;feedbackLabel.Text += &quot;You like .NET: &quot; &amp; likeDotNet.Value &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;End Sub &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/script&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
Example 4.3. Survey.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;script runat=&quot;server&quot; language=&quot;C#&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;void Click(Object s, EventArgs e) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;feedbackLabel.Text = &quot;Your name is: &quot; + name.Value + &quot;&lt;br /&gt;&quot;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;feedbackLabel.Text += &quot;Your email is: &quot; + email.Value + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&quot;&lt;br /&gt;&quot;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;feedbackLabel.Text += &quot;You like to work with:&lt;br /&gt;&quot;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;for (int i = 0; i &lt;= serverModel.Items.Count - 1; i++) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;if (serverModel.Items[i].Selected) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;feedbackLabel.Text += &quot; - &quot; + serverModel.Items[i].Text + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;&lt;br /&gt;&quot;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;feedbackLabel.Text += &quot;You like .NET: &quot; + likeDotNet.Value; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/script&gt;</code></p>

<p>As with the examples in previous chapters, we start by placing our VB and C# code inside a server-side script block within the <code>&lt;head&gt;</code> part of the page. Next, we create a new <code>Click</code> event handler that takes the two usual parameters. Finally, we use the <code>Label</code> control to display the user's responses within the page.</p>

<p><img src="http://sitepointstatic.com/graphics/0410_SurveyResults.png"  height="221" width="500" alt="1556_0410_SurveyResults" /><br />
<em>Figure 4.2. Viewing the survey results</em></p>

<p>Once you've written the code, save your work and test the results in your browser. Enter some information and click the button. To select multiple options in the <code>serverModel</code> option box, hold down Ctrl as you click on your preferences. The information you enter should appear at the bottom of the page when the Confirm button is clicked, as shown in Figure 4.2.</p>

<p>In conclusion, working with HTML server controls is really simple. All you need to do is assign each control an ID, and add the <code>runat=&quot;server&quot;</code> attribute. Then, you can simply access and manipulate them using VB or C# code on the server side.</p>

<p><div class="article-cms-pagebreak"></div></p>

<h5>Web Server Controls</h5>



<p>Web server controls can be seen as more advanced versions of HTML server controls. Web server controls are those that generate content for you--you're no longer in control of the HTML being used. While having good knowledge of HTML is useful, it's not a necessity for those working with web server controls.</p>

<p>Let's look at an example. We can use the Label web server control to place simple text inside a web form. To change the <code>Label</code>'s text from within our C# or VB code, we simply set its <code>Text</code> property like so:</p>

<p><code>myLabel.Text = &quot;Mickey Mouse&quot;</code></p>

<p>Similarly, to add a text box to our form, we use the <code>TextBox</code> web server control. Again, we can read or set its text using the <code>Text</code> property:</p>

<p><code>username = usernameTextBox.Text;</code></p>

<p>Though we're applying the <code>TextBox</code> control, ASP.NET still uses an input element behind the scenes; however, we no longer have to worry about this detail. With web server controls, Microsoft has basically reinvented HTML from scratch.</p>

<p>Unlike HTML server controls, web server controls don't have a direct, one-to-one correspondence with the HTML elements they generate. For example, we can use either of two web server controls--the <code>DropDownList</code> control, or the <code>ListBox</code> control--to generate a select element.</p>

<p>Web server controls follow the same basic pattern as HTML tags, but the tag name is preceded by asp:, and is capitalized using Pascal Casing. Pascal Casing is a form that capitalizes the first character of each word (e.g. <code>TextBox</code>). The object IDs are usually named using Camel Casing, where the first letter of each word except the first is capitalized (e.g. <code>usernameTextBox</code>).</p>

<p>Consider the following HTML <code>input</code> element, which creates an input text box:</p>

<p><code>&lt;input type=&quot;text&quot; name=&quot;usernameTextBox&quot; size=&quot;30&quot; /&gt;</code></p>

<p>The equivalent web server control is the <code>TextBox</code> control, and it looks like this:</p>

<p><code>&lt;asp:TextBox id=&quot;usernameTextBox&quot; runat=&quot;server&quot; Columns=&quot;30&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/asp:TextBox&gt;</code></p>

<p>Remember that, unlike any normal HTML that you might use in your web forms, web server controls are first processed by the ASP.NET engine, where they're transformed to HTML. A side effect of this approach is that you must be very careful to always include closing tags (the <code>&lt;/asp:TextBox&gt;</code> part above). The HTML parsers of most web browsers are forgiving about badly formatted HTML code, but ASP.NET is not. Remember that you can use the shorthand <code>/&gt;</code> syntax if nothing appears between your web server control's opening and closing tags. So, you could also write this <code>TextBox</code> like so:</p>

<p><code>&lt;asp:TextBox id=&quot;usernameTextBox&quot; runat=&quot;server&quot; Columns=&quot;30&quot; /&gt;</code></p>

<p>To sum up, the key points to remember when working with web server controls are:</p>

<p><ul>
	<li>Web server controls must be placed within a <code>&lt;form runat=&quot;server&quot;&gt;</code> tag to function properly.</li>
	<li>Web server controls require the <code>runat=&quot;server&quot;</code> attribute to function properly.</li>
	<li>We include web server controls in a form using the <code>asp:</code> prefix.</li>
</ul>
</p>

<p>There are more web server controls than HTML controls, some offer advanced features that simply aren't available using HTML alone, and some generate quite complex HTML code for you. We'll meet many of the web server controls as we work through this and future chapters.</p>

<p>For more information on web server controls, including the properties, methods, and events for each, have a look at Appendix B.</p>

<p><strong><em>Standard Web Server Controls</em></strong></p>

<p>The standard set of web server controls that comes with ASP.NET mirrors the HTML server controls in many ways. However, web server controls offer some new refinements and enhancements, such as support for events and view state, a more consistent set of properties and methods, and more built-in functionality. In this section, we'll take a look as some of the controls you're most likely to use in your day-to-day work.</p>

<p>Remember to use the .NET Framework 2.0 SDK Documentation whenever you need more details about any of the framework's classes (or controls). Access the documentation from Start &gt; All Programs &gt; Microsoft .NET Framework SDK v2.0 &gt; Documentation. To find a class, simply search for the class's name. If there are many classes with a given name in different namespaces, you'll be able to choose the one you want from the Index Results window. For example, you'll find that there are three classes named <code>Label</code>, situated in the <code>System.Web.UI.MobileControls</code>, <code>System.Web.UI.WebControls</code>, and <code>System.Windows.Forms</code> namespaces, as Figure 4.3 illustrates. You'll most likely be interested in the version of the class situated in the <code>WebControls</code> namespace.</p>

<p><img src="http://sitepointstatic.com/graphics/0415_LabelDocumentation.png"  height="352" width="500" alt="1556_0415_LabelDocumentation" /><br />
<em>Figure 4.3. Documentation for the Label control</em></p>

<p><strong><code>Label</code></strong></p>

<p>The easiest way to display static text on your page is simply to add the text to the body of the page without enclosing it in any tag. However, if you want to modify the text displayed on a page using ASP.NET code, you can display your text within a <code>Label</code> control. Here's a typical example:</p>

<p><code>&lt;asp:Label id=&quot;messageLabel&quot; Text=&quot;&quot; runat=&quot;server&quot; /&gt;</code></p>

<p>The following code sets the Text property of the <code>Label</code> control to display the text &quot;Hello World&quot;:</p>

<p><code>Public Sub Page_Load() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;messageLabel.Text = &quot;Hello World&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
End Sub &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
public void Page_Load() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;messageLabel.Text = &quot;Hello World&quot;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
}</code></p>

<p>Reading this <code>Page_Load</code> handler code, we can see that when the page first loads, the <code>Text</code> property of the <code>Label</code> control with the <code>id</code> of <code>message</code> will be set to &quot;Hello World.&quot;</p>

<p><code><strong>Literal</strong></code></p>

<p>This is perhaps the simplest control in ASP.NET. If you set <code>Literal</code>'s <code>Text</code> property, it will simply insert that text into the output HTML code without altering it. Unlike <code>Label</code>, which has similar functionality, <code>Literal</code> doesn't wrap the text in <code>&lt;span&gt;</code> tags that would allow the setting of style information.</p>

<p><strong><code>TextBox</code></strong></p>

<p>The <code>TextBox</code> control is used to create a box in which the user can type or read standard text. Using the <code>TextMode</code> property, this control can be set to display text in a single line, across multiple lines, or to hide the text being entered (for instance, in HTML password fields). The following code shows how we might use it in a simple login page:</p>

<p><code>&lt;p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Username: &lt;asp:TextBox id=&quot;userTextBox&quot; TextMode=&quot;SingleLine&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;Columns=&quot;30&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Password: &lt;asp:TextBox id=&quot;passwordTextBox&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;TextMode=&quot;Password&quot; Columns=&quot;30&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Comments: &lt;asp:TextBox id=&quot;commentsTextBox&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;TextMode=&quot;MultiLine&quot; Columns=&quot;30&quot; Rows=&quot;10&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/p&gt;</code></p>

<p>In each of the instances above, the attribute <code>TextMode</code> dictates the kind of text box that's to be rendered.</p>

<p><strong><code>HiddenField</code></strong></p>

<p><code>HiddenField</code> is a simple control that renders an input element whose type attribute is set to hidden. We can set its only important property, <code>Value</code>.</p>

<p><strong><code>Button</code></strong></p>

<p>By default, the <code>Button</code> control renders an input element whose type attribute is set to submit. When a button is clicked, the form containing the button is submitted to the server for processing, and both the <code>Click</code> and <code>Command</code> events are raised.</p>

<p>The following markup displays a <code>Button</code> control and a <code>Label</code>:</p>

<p><code>&lt;asp:Button id=&quot;submitButton&quot; Text=&quot;Submit&quot; runat=&quot;server&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;OnClick=&quot;WriteText&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;asp:Label id=&quot;messageLabel&quot; runat=&quot;server&quot; /&gt;</code></p>

<p>Notice the <code>OnClick</code> attribute on the control. When the button is clicked, the <code>Click</code> event is raised and the <code>WriteText</code> subroutine is called. The <code>WriteText</code> subroutine will contain the code that performs the intended function for this button, such as displaying a message to the user:</p>

<p><code>Public Sub WriteText(s As Object, e As EventArgs) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;messageLabel.Text = &quot;Hello World&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
End Sub &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
public void WriteText(Object s, EventArgs e) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;messageLabel.Text = &quot;Hello World&quot;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
}</code></p>

<p>It's important to realize that events are associated with most web server controls, and the basic techniques involved in using them, are the same events and techniques we used with the <code>Click</code> event of the <code>Button</code> control. All controls implement a standard set of events because they all inherit from the <code>WebControl</code> base class.</p>

<p><div class="article-cms-pagebreak"></div></p>

<p><strong><code>ImageButton</code></strong></p>

<p>An <code>ImageButton</code> control is similar to a <code>Button</code> control, but it uses an image that we supply in place of the typical system button graphic. Take a look at this example:</p>

<p><code>&lt;asp:ImageButton id=&quot;myImgButton&quot; ImageUrl=&quot;myButton.gif&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;runat=&quot;server&quot; OnClick=&quot;WriteText&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;asp:Label id=&quot;messageLabel&quot; runat=&quot;server&quot; /&gt;</code></p>

<p>The <code>Click</code> event of the <code>ImageButton</code> receives the coordinates of the point at which the image was clicked:</p>

<p><code>Public Sub WriteText(s As Object, e As ImageClickEventArgs) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;messageLabel.Text = &quot;Coordinate: &quot; &amp; e.X &amp; &quot;,&quot; &amp; e.Y &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
End Sub &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
public void WriteText(Object s, ImageClickEventArgs e) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;messageLabel.Text = &quot;Coordinate: &quot; + e.X + &quot;,&quot; + e.Y; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
}</code></p>

<p><code><strong>LinkButton</strong></code></p>

<p>A <code>LinkButton</code> control renders a hyperlink that fires the <code>Click</code> event when it's clicked. From the point of view of ASP.NET code, <code>LinkButtons</code> can be treated in much the same way as buttons, hence the name.</p>

<p><code>&lt;asp:LinkButton id=&quot;myLinkButon&quot; Text=&quot;Click Here&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;runat=&quot;server&quot; /&gt;</code></p>

<p><strong><code>HyperLink</code></strong></p>

<p>The <code>HyperLink</code> control creates on your page a hyperlink that links to the URL in the <code>NavigateUrl</code> property. Unlike the <code>LinkButton</code> control, which offers features such as <code>Click</code> events and validation, HyperLinks are meant to be used to navigate from one page to the next.</p>

<p><code>&lt;asp:HyperLink id=&quot;myLink&quot; NavigateUrl=&quot;http://www.sitepoint.com/&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;ImageUrl=&quot;splogo.gif&quot; runat=&quot;server&quot;&gt;SitePoint&lt;/asp:HyperLink&gt;</code></p>

<p>If it's specified, the <code>ImageUrl</code> attribute causes the control to display the specified image, in which case the text is demoted to acting as the image's alternate text.</p>

<p><strong><code>CheckBox</code></strong></p>

<p>You can use a <code>CheckBox</code> control to represent a choice that can have only two possible states?checked or unchecked.</p>

<p><code>&lt;asp:CheckBox id=&quot;questionCheck&quot; Text=&quot;I agree, I like .NET!&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;Checked=&quot;True&quot; runat=&quot;server&quot; /&gt;</code></p>

<p>The main event associated with a <code>CheckBox</code> is the <code>CheckChanged</code> event, which can be handled with the <code>OnCheckChanged</code> attribute. The <code>Checked</code> property is <code>True</code> if the checkbox is checked, and <code>False</code> otherwise.</p>

<p><strong><code>RadioButton</code></strong></p>

<p>A <code>RadioButton</code> is a lot like a <code>CheckBox</code>, except that <code>RadioButton</code>s can be grouped together to represent a set of options from which only one can be selected. Radio buttons are grouped together using the <code>GroupName</code> property.</p>

<p><code>&lt;asp:RadioButton id=&quot;sanDiego&quot; GroupName=&quot;City&quot; Text=&quot;San Diego&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;runat=&quot;server&quot; /&gt;&lt;br /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;asp:RadioButton id=&quot;boston&quot; GroupName=&quot;City&quot; Text=&quot;Boston&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;runat=&quot;server&quot; /&gt;&lt;br /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;asp:RadioButton id=&quot;phoenix&quot; GroupName=&quot;City&quot; Text=&quot;Phoenix&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;runat=&quot;server&quot; /&gt;&lt;br /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;asp:RadioButton id=&quot;seattle&quot; GroupName=&quot;City&quot; Text=&quot;Seattle&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;runat=&quot;server&quot; /&gt;</code></p>

<p>Like the <code>CheckBox</code> control, the main event associated with <code>RadioButton</code>s is the <code>CheckChanged</code> event, which can be handled with the <code>OnCheckChanged</code> attribute. The other control we can use to display radio buttons is <code>RadioButtonList</code>, which we'll also meet in this chapter.</p>

<p><strong><code>Image</code></strong></p>

<p>An <code>Image</code> control creates an image that can be accessed dynamically from code; it equates to the <code>&lt;img&gt;</code> tag in HTML.</p>

<p>Here's an example:</p>

<p><code>&lt;asp:Image id=&quot;myImage&quot; ImageUrl=&quot;mygif.gif&quot; runat=&quot;server&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;AlternateText=&quot;description&quot; /&gt;</code></p>

<p><strong><code>ImageMap</code></strong></p>

<p>The <code>ImageMap</code> control generates HTML to display images that have certain clickable regions called hot spots. Each hot spot reacts differently when clicked by the user.</p>

<p>These areas are defined using three controls that generate hot spots of different shapes: <code>CircleHotSpot</code>, <code>RectangleHotSpot</code>, and <code>PolygonHotSpot</code>. Here's an example that defines an image map with two circular hot spots:</p>

<p><code>&lt;asp:ImageMap ID=&quot;myImageMap&quot; runat=&quot;server&quot; ImageUrl=&quot;image.jpg&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;asp:CircleHotSpot AlternateText=&quot;Button1&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;Radius=&quot;20&quot; X=&quot;50&quot; Y=&quot;50&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;asp:CircleHotSpot AlternateText=&quot;Button2&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;Radius=&quot;20&quot; X=&quot;100&quot; Y=&quot;50&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/asp:ImageMap&gt;</code></p>

<p>Possible values of <code>HotSpotMode</code>, and the bahavior of each, include:</p>

<p><ul>
	<li><code>Inactive</code> - Exhibits no behavior when hotspot is clicked.</li>
	<li><code>Navigate</code> - The user is navigated to the specified URL.</li>
	<li><code>NotSet</code> - When set for a HotSpot, the behavior is inherited from the parent <code>ImageMap</code>; if the parent <code>ImageMap</code> doesn't specify a default value, <code>Navigate</code> is set. When set for an <code>ImageMap</code>, this value is effectively equivalent to <code>Navigate</code>.</li>
	<li><code>PostBack</code> - The hot spot raises the <code>Click</code> event that can be handled server-side to respond to the user action.</li>
</ul>
</p>

<p>To configure the action that results when a hot spot is clicked by the user, we set the <code>HotSpotMode</code> property of the <code>ImageMap</code> control, or the <code>HotSpotMode</code> property of the individual hot spot objects, or both, using the values shown in the list above. If the <code>HotSpotMode</code> property is set for the <code>ImageMap</code> control as well as for an individual hot spot, the latter property will override that set for the more general <code>ImageMap</code> control.</p>

<p>The Microsoft .NET Framework 2.0 SDK Documentation for the <code>ImageMap</code> class and <code>HotSpotMode</code> enumeration contains detailed examples of the usage of these values.</p>

<p><strong><code>PlaceHolder</code></strong></p>

<p>The <code>PlaceHolder</code> control lets us add elements at a particular place on a page at any time, dynamically, through our code.</p>

<p><code>&lt;asp:PlaceHolder id=&quot;placeHolder&quot; runat=&quot;server&quot; /&gt;</code></p>

<p>The following code dynamically adds a new <code>HtmlButton</code> control within the placeholder:</p>

<p><code>Public Sub Page_Load() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;Dim button myButton As HtmlButton = New HtmlButton() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;myButton.InnerText = &quot;My New Button&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;placeHolder.Controls.Add(myButton) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
End Sub &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
public void Page_Load() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;HtmlButton button myButton = new HtmlButton(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;myButton.InnerText = &quot;My New Button&quot;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;placeHolder.Controls.Add(myButton); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
}</code></p>

<p><strong><code>Panel</code></strong></p>

<p>The <code>Panel</code> control functions similarly to the div element in HTML, in that it allows the set of items that resides within the tag to be manipulated as a group. For instance, the <code>Panel</code> could be made visible or hidden by a <code>Button</code>'s <code>Click</code> event:</p>

<p><code>&lt;asp:Panel id=&quot;myPanel&quot; runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;p&gt;Username: &lt;asp:TextBox id=&quot;usernameTextBox&quot; Columns=&quot;30&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;runat=&quot;server&quot; /&gt;&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;p&gt;Password: &lt;asp:TextBox id=&quot;passwordTextBox&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;TextMode=&quot;Password&quot; Columns=&quot;30&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/asp:Panel&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;asp:Button id=&quot;hideButton&quot; Text=&quot;Hide Panel&quot; OnClick=&quot;HidePanel&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;runat=&quot;server&quot; /&gt;</code></p>

<p>The code above places two <code>TextBox</code> controls within a <code>Panel</code> control. The <code>Button</code> control is outside of the panel. The <code>HidePanel</code> subroutine would then control the <code>Panel</code>'s visibility by setting its Visible property to <code>False</code>:</p>

<p><code>Public Sub HidePanel(s As Object, e As EventArgs) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;myPanel.Visible = False &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
End Sub &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
public void HidePanel(Object s, EventArgs e) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;myPanel.Visible = false; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
}</code></p>

<p>In this case, when the user clicks the button, the <code>Click</code> event is raised and the HidePanel subroutine is called, which sets the <code>Visible</code> property of the <code>Panel</code> control to <code>False</code>.</p>

<p><strong><em>List Controls</em></strong></p>

<p>Here, we'll meet the ASP.NET controls that display simple lists of elements: <code>ListBox</code>, <code>DropDownList</code>, <code>CheckBoxList</code>, <code>RadioButtonList</code>, and <code>BulletedList</code>.</p>

<p><div class="article-cms-pagebreak"></div></p>

<p><strong><code>DropDownList</code></strong></p>

<p>A <code>DropDownList</code> control is similar to the HTML select element. The <code>DropDownList</code> control allows you to select one item from a list using a drop-down menu.</p>

<p><code>&lt;asp:DropDownList id=&quot;ddlFavColor&quot; runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;asp:ListItem Text=&quot;Red&quot; value=&quot;red&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;asp:ListItem Text=&quot;Blue&quot; value=&quot;blue&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;asp:ListItem Text=&quot;Green&quot; value=&quot;green&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/asp:DropDownList&gt;</code></p>

<p>The most useful event that this control provides is <code>SelectedIndexChanged</code>. This event is exposed by other list controls, such as the <code>CheckBoxList</code> and <code>RadioButtonList</code> controls, allowing for easy programmatic interaction with the control. These controls can also be bound to a database, allowing you to extract dynamic content into a drop-down menu.</p>

<p><code><strong>ListBox</strong></code></p>

<p>A <code>ListBox</code> control equates to the HTML select element with either the multiple or size attribute set (size would need to be set to a value of 2 or more). If you set the <code>SelectionMode</code> attribute to <code>Multiple</code>, the user will be able to select more than one item from the list, as in this example:</p>

<p><code>&lt;asp:ListBox id=&quot;listTechnologies&quot; runat=&quot;server&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;SelectionMode=&quot;Multiple&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;asp:ListItem Text=&quot;ASP.NET&quot; Value=&quot;aspnet&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;asp:ListItem Text=&quot;JSP&quot; Value=&quot;jsp&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;asp:ListItem Text=&quot;PHP&quot; Value=&quot;php&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;asp:ListItem Text=&quot;CGI&quot; Value=&quot;cgi&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;asp:ListItem Text=&quot;ColdFusion&quot; Value=&quot;cf&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/asp:ListBox&gt;</code></p>

<p><code><strong>RadioButtonList</strong></code></p>

<p>Like the <code>RadioButton</code> control, the <code>RadioButtonList</code> control represents radio buttons. However, the <code>RadioButtonList</code> control represents a list of radio buttons and uses more compact syntax. Here's an example:</p>

<p><code>&lt;asp:RadioButtonList id=&quot;favoriteColor&quot; runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;asp:ListItem Text=&quot;Red&quot; Value=&quot;red&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;asp:ListItem Text=&quot;Blue&quot; Value=&quot;blue&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;asp:ListItem Text=&quot;Green&quot; Value=&quot;green&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/asp:RadioButtonList&gt;</code></p>

<p><code><strong>CheckBoxList</code></strong></p>

<p>As you may have guessed, the <code>CheckBoxList</code> control represents a group of check boxes; it's equivalent to using several <code>CheckBox</code> controls in row:</p>

<p><code>&lt;asp:CheckBoxList id=&quot;favoriteFood&quot; runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;asp:ListItem Text=&quot;Pizza&quot; Value=&quot;pizza&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;asp:ListItem Text=&quot;Tacos&quot; Value=&quot;tacos&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;asp:ListItem Text=&quot;Pasta&quot; Value=&quot;pasta&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/asp:CheckBoxList&gt;</code></p>

<p><code><strong>BulletedList</strong></code></p>

<p>The <code>BulletedList</code> control displays bulleted or numbered lists, using <code>&lt;ul&gt;</code> (unordered list) or <code>&lt;ol&gt;</code> (ordered list) tags. Unlike the other list controls, the <code>BulletedList</code> doesn't allow the selection of items, so the <code>SelectedIndexChanged</code> event isn't supported.</p>

<p>The first property you'll want to set is <code>DisplayMode</code>, which can be <code>Text</code> (the default), or <code>HyperLink</code>, which will render the list items as links. When <code>DisplayMode</code> is set to <code>HyperLink</code>, you can use the <code>Click</code> event to react when the user clicks on one of the items.</p>

<p>The other important property is <code>BulletStyle</code>, which determines the style of the bullets. The accepted values are <code>Numbered</code> (1, 2, 3, ...), <code>LowerAlpha</code> (a, b, c, ...), <code>UpperAlpha</code> (A, B, C, ...), <code>LowerRoman</code> (i, ii, iii, ...), <code>UpperRoman </code> (I, II, III, ...), <code>Circle</code>, <code>Disc</code>, <code>Square</code>, and <code>CustomImage</code>. If the style is set to <code>CustomImage</code>, you'll also need to set the <code>BulletStyleImageUrl</code> to specify the image to be used for the bullets. If the style is one of the numbered lists, you can also set the <code>FirstBulletNumber</code> property to specify the first number or letter that's to be generated.</p>

<p><strong><em>Advanced Controls</em></strong></p>

<p>These controls are advanced in terms of their usage, the HTML code they generate, and the background work they do for you. Some of these controls aren't available to older versions of ASP.NET; we'll learn more about many of them (as well as others that aren't covered in this chapter) as we progress through this book.</p>

<p><code><strong>Calendar</strong></code></p>

<p>The <code>Calendar</code> is a great example of the reusable nature of ASP.NET controls. The <code>Calendar</code> control generate the markup to display an intuitive calendar in which the user can click to select or move between days, weeks, months, and so on.</p>

<p>The <code>Calendar</code> control requires very little customization, and can be created within a page like this:</p>

<p><code>Example 4.4. Calendar.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;title&gt;Calendar Test&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;asp:Calendar id=&quot;myCalendar&quot; runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/html&gt;</code></p>

<p>If you save this page in the <code>Learning</code> folder and load it, you'd get the output shown in Figure 4.4.</p>

<p><img src="http://sitepointstatic.com/graphics/0416A_Calendar.png"  height="254" width="500" alt="1556_0416A_Calendar" /><br />
<em>Figure 4.4. Displaying the default calendar</em></p>

<p>The Calendar control contains a wide range of properties, methods, and events, including those listed here:</p>

<p><ul>
	<li><code>DayNameFormat</code> - This property sets the format of the day names. Its possible values are <code>FirstLetter</code>, <code>FirstTwoLetters</code>, <code>Full</code>, and <code>Short</code>. The default is <code>Short</code>, which displays the three-letter abbreviation.</li>
	<li><code>FirstDayOfWeek</code> - This property sets the day of the week that begins each week in the calendar. By default, the value of this property is determined by your server's region settings, but you can set this to Sunday or Monday if you want to control it.</li>
	<li><code>NextPrevFormat</code> - Set to <code>CustomText</code> by default, this property can be set to <code>ShortMonth</code> or <code>FullMonth</code> to control the format of the next and previous month links.</li>
	<li><code>SelectedDate</code> - This property contains a DateTime value that specifies the highlighted day. You'll use this property a lot to determine which day the user has selected.</li>
	<li><code>SelectionMode</code> - This property determines whether days, weeks, or months can be selected; its possible values are <code>Day</code>, <code>DayWeek</code>, <code>DayWeekMonth</code>, and <code>None</code>, and the default is <code>Day</code>. When <code>Day</code> is selected, a user can only select a day; when <code>DayWeek</code> is selected, a user can select a day or an entire week; and so on.</li>
	<li><code>SelectMonthText</code> - This property controls the text of the link that's displayed to allow users to select an entire month from the calendar.</li>
	<li><code>SelectWeekText</code> - This property controls the text of the link that's displayed to allow users to select an entire week from the calendar.</li>
	<li><code>ShowDayHeader</code> - If <code>True</code>, this property displays the names of the days of the week. The default is <code>True</code>.</li>
	<li><code>ShowGridLines</code> - If <code>True</code>, this property renders the calendar with grid lines. The default is <code>True</code>.</li>
	<li><code>ShowNextPrevMonth</code> - If <code>True</code>, this property displays next/previous month links. The default is <code>True</code>.</li>
	<li><code>ShowTitle</code> - If <code>True</code>, this property displays the calendar's title. The default is <code>False</code>.</li>
	<li><code>TitleFormat</code> - This property determines how the month name appears in the title bar. Possible values are <code>Month</code> and <code>MonthYear</code>. The default is <code>MonthYear</code>.</li>
	<li><code>TodaysDate</code> - This <code>DateTime</code> value sets the calendar's current date. By default, this value is not highlighted within the <code>Calendar</code> control.</li>
	<li><code>VisibleDate</code> - This <code>DateTime</code> value controls which month is displayed.</li>
</ul>
</p>

<p>Let's take a look at an example that uses some of these properties, events, and methods to create a <code>Calendar</code> control that allows users to select days, weeks, and months. Modify the calendar in <code>Calendar.aspx</code>, and add a label to it, as follows:</p>

<p><code>Example 4.5. Calendar.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;asp:Calendar ID=&quot;myCalendar&quot; runat=&quot;server&quot; DayNameFormat=&quot;Short&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;FirstDayOfWeek=&quot;Sunday&quot; NextPrevFormat=&quot;FullMonth&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;SelectionMode=&quot;DayWeekMonth&quot; SelectWeekText=&quot;Select Week&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;SelectMonthText=&quot;Select Month&quot; TitleFormat=&quot;Month&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;OnSelectionChanged=&quot;SelectionChanged&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;h2&gt;You selected these dates:&lt;/h2&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;asp:Label ID=&quot;myLabel&quot; runat=&quot;server&quot; /&gt;</code></p>

<p>Now add a <code>&lt;script runat=&quot;server&quot;&gt;</code> tag to the head of the web form to include the <code>SelectionChanged</code> event handler referenced by your calendar:</p>

<p><code>Example 4.6. Calendar.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;script runat=&quot;server&quot; language=&quot;VB&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Sub SelectionChanged(ByVal s As Object, ByVal e As EventArgs) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;myLabel.Text = &quot;&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;For Each d As DateTime In myCalendar.SelectedDates &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;myLabel.Text &amp;= d.ToString(&quot;D&quot;) &amp; &quot;&lt;br /&gt;&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;Next &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;End Sub &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/script&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Example 4.7. Calendar.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;script runat=&quot;server&quot; language=&quot;C#&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;void SelectionChanged(Object s, EventArgs e) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;myLabel.Text = &quot;&quot;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;foreach (DateTime d in myCalendar.SelectedDates) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;myLabel.Text += d.ToString(&quot;D&quot;) + &quot;&lt;br /&gt;&quot;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/script&gt;</code></p>

<p>Save your work and test it in a browser. Try selecting a day, week, or month. The selection will be highlighted similar to this display shown in Figure 4.5.</p>

<p><img src="http://sitepointstatic.com/graphics/0416B_AnotherCalendar.png"  height="524" width="500" alt="1556_0416B_AnotherCalendar" /><br />
<em>Figure 4.5. Using the Calendar control</em></p>

<p>In <code>SelectionChanged</code>, we loop through each date that the user has selected, and append it to the <code>BulletedList</code> we added to the page.</p>

<p><div class="article-cms-pagebreak"></div></p>

<p><code><strong>AdRotator</strong></code></p>

<p>The <code>AdRotator</code> control allows you to display a list of banner advertisements within your web application at random. However, it's more than a mere substitute for creating a randomization script from scratch. Since the <code>AdRotator</code> control gets its content from an XML file, the administration and updating of banner advertisement files and their properties is a snap. Also, the XML file allows you to control the banner's image, link, link target, and frequency of appearance in relation to other banner ads.</p>

<p>The benefits of using this control don't stop there, though. As most of the <code>AdRotator</code> control's properties reside within an XML file, if you wished, you could share that XML file on the Web, essentially allowing value added resellers (VARS), or possibly your companies' partners, to use your banner advertisements on their web sites.</p>

<p><em>XML Basics</em><br />
<em>In essence, XML is simply a text-based format for the transfer or storage of data; it contains no details on how that data should be presented. XML is very easy to start with because of its close resemblance to your old friend HTML: both are largely comprised of tags inside angle brackets (<code>&lt;</code> and <code>&gt;</code>), and any tag may contain attributes specific to that tag. The biggest difference between XML and HTML is that, rather than providing a fixed set of tags as HTML does, XML allows us to create our own tags to describe the data we wish to represent.</em></p>

<p><em>Take a look at the following HTML element:</em></p>

<p><code>&lt;p&gt;Star Wars Episode I: The Phantom Menace&lt;/p&gt;</code></p>

<p><em>This example describes the content between the tags as a paragraph. This is fine if all we are concerned with is displaying the words &quot;Star Wars Episode I: The Phantom Menace&quot; on a web page. But what if we want to access those words as data?</em></p>

<p><em>Like HTML, XML's purpose is to describe the content of a document. But unlike HTML, XML doesn't describe how that content should be displayed; it describes what the content is. Using XML, the web author can mark up the contents of a document, describing that content in terms of its relevance as data.</em></p>

<p><em>We can use XML to mark up the words &quot;Star Wars Episode I: The Phantom Menace&quot; in a way that better reflects this content's significance as data:</em></p>

<p><code>&lt;film&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;title&gt;Star Wars Episode I: The Phantom Menace&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/film&gt;</code></p>

<p><em>Here, the XML tag names we've chosen best describe the contents of the element. We also define our own attribute names as necessary. For instance, in the example above, you may decide that you want to differentiate between the VHS version and the DVD version of the film, or record the name of the movie's director. This can be achieved by adding attributes and elements, as shown below:</em></p>

<p><code>&lt;film format=&quot;DVD&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;title&gt;Star Wars Episode I: The Phantom Menace&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;director&gt;George Lucas&lt;/director&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/film&gt;</code></p>

<p>If you want to test this out, create a file called ads.xml in your Learning folder, and insert the content presented below. Feel free to create your own banners, or to use those provided in the code archive for this book.</p>

<p><code>Example 4.8. Ads.xml (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;Advertisements&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;Ad&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;ImageUrl&gt;workatdorknozzle.gif&lt;/ImageUrl&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;NavigateUrl&gt;http://www.dorknozzle.com&lt;/NavigateUrl&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;TargetUrl&gt;_blank&lt;/TargetUrl&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;AlternateText&gt;Work at Dorknozzle.com!&lt;/AlternateText&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;Keyword&gt;HR Sites&lt;/Keyword&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;Impressions&gt;2&lt;/Impressions&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/Ad&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;Ad&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;ImageUrl&gt;getthenewsletter.gif&lt;/ImageUrl&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;NavigateUrl&gt;http://www.dorknozzle.com&lt;/NavigateUrl&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;TargetUrl&gt;_blank&lt;/TargetUrl&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;AlternateText&gt;Get the Nozzle Newsletter!&lt;/AlternateText&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;Keyword&gt;Marketing Sites&lt;/Keyword&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;Impressions&gt;1&lt;/Impressions&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/Ad&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/Advertisements&gt;</code></p>

<p>As you can see, the <code>Advertisements</code> element is the root node, and in accordance with the XML specification, it appears only once. For each individual advertisement, we simply add an <code>Ad</code> child element. For instance, the above advertisement file contains details for two banner advertisements.</p>

<p>As you've probably noticed by now, the <code>.xml</code> file enables you to specify properties for each banner advertisement by inserting appropriate elements inside each of the <code>Ad</code> elements. These elements include:</p>

<p><ul>
	<li><code>ImageURL</code> - the URL of the image to display for the banner ad</li>
	<li><code>NavigateURL</code> - the web page to which your users will navigate when they click the banner ad</li>
	<li><code>AlternateText</code> - the alternative text to display for browsers that do not support images</li>
	<li><code>Keyword</code> - the keyword to use to categorize your banner ad. If you use the <code>KeywordFilter</code> property of the <code>AdRotator</code> control, you can specify the categories of banner ads to display.</li>
	<li><code>Impressions</code> - the relative frequency that a particular banner ad should be shown in relation to other banner advertisements. The higher this number, the more frequently that specific banner will display in the browser. The number provided for this element can be as low as one, but cannot exceed 2,048,000,000; if it does, the page throws an exception.</li>
</ul>
</p>

<p>Except for <code>ImageURL</code>, all these elements are optional. Also, if you specify an <code>Ad</code> without a <code>NavigateURL</code>, the banner ad will display without a hyperlink.</p>

<p>To make use of this <code>Ads.xml</code> file, create a new ASP.NET page, called <code>AdRotator.aspx</code>, with the following code:</p>

<p><code>Example 4.9. AdRotator.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;AdRotator Control&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;asp:AdRotator ID=&quot;adRotator&quot; runat=&quot;server&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;AdvertisementFile=&quot;Ads.xml&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p>You'll need to download <code>workatdorknozzle.gif</code> and <code>getthenewsletter.gif</code> and place them in the <code>Learning</code> folder in order to see these ad images. Save your work and test it in the browser; the display should look something like Figure 4.6.</p>

<p><img src="http://sitepointstatic.com/graphics/041AX_AdRotator.png"  height="169" width="500" alt="1556_041AX_AdRotator" /><br />
<em>Figure 4.6. Displaying ads using AdRotator.aspx</em></p>

<p>Refresh the page a few times, and you'll notice that the first banner appears more often than the second. This occurs because the <code>Impression</code> value for the first <code>Ad</code> is double the value set for the second banner, so it will appear twice as often.</p>

<p><code><strong>TreeView</strong></code></p>

<p>The <code>TreeView</code> control is a very powerful control that's capable of displaying a complex hierarchical structure of items. Typically we'd use it to view a directory structure or a site navigation hierarchy, but it could be used to display a family tree, a corporate organizational structure, or any other hierarchical structure.</p>

<p>The <code>TreeView</code> can pull its data from various sources. You'll learn more about the various kinds of data sources later in the book; here, we'll focus on the <code>SiteMapDataSource</code> class, which, as its name suggests, contains a hierarchical sitemap. By default, this sitemap is read from a file called <code>Web.sitemap</code> located in the root of your project. The <code>Web.sitemap</code> file is an XML file that looks like this:</p>

<p><code>Example 4.10. Web.sitemap &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;siteMap &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;xmlns=&quot;http://schemas.microsoft.com/AspNet/SiteMap-File-1.0&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;siteMapNode title=&quot;Home&quot; url=&quot;~/Default.aspx&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;description=&quot;Home&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;siteMapNode title=&quot;TreeViewDemo&quot; url=&quot;~/TreeViewDemo.aspx&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp;description=&quot;TreeView Example&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;siteMapNode title=&quot;ClickEvent&quot; url=&quot;~/ClickEvent.aspx&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;description=&quot;ClickEvent Example&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;siteMapNode title=&quot;Loops&quot; &nbsp;url=&quot;~/Loops.aspx&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;description=&quot;Loops Example&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/siteMapNode&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/siteMap&gt;</code></p>

<p><em><code>Web.sitemap</code> Limitation</em><br />
<em>An important limitation to note when working with <code>Web.sitemap</code> files is that they must contain only one <code>siteMapNode</code> as the direct child of the root <code>siteMap</code> element.</em></p>

<p><em>In the example above, the <code>siteMapNode</code> with the title <code>Home</code> is this single <code>siteMapNode</code>. If we added another <code>siteMapNode</code> alongside (rather than inside) this element, the <code>Web.sitemap</code> file would no longer be valid.</em></p>

<p>To use this file, you'll need to add a <code>SiteMapDataSource</code> control to the page, as well as a <code>TreeView</code> control that uses this data source, like this:</p>

<p><code>Example 4.11. TreeViewDemo.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;TreeView Demo&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;asp:SiteMapDataSource ID=&quot;mySiteMapDataSource&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;asp:TreeView ID=&quot;myTreeView&quot; runat=&quot;server&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;DataSourceID=&quot;mySiteMapDataSource&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p>Note that although the <code>SiteMapDataSource</code> is a control, it does not generate any HTML within the web page. There are many data source controls like this; we'll delve into this in more detail later.</p>

<p>When combined with the example <code>Web.sitemap</code> file above, this web form would generate an output such as that shown in Figure 4.7.</p>

<p><img src="http://sitepointstatic.com/graphics/0422_TreeViewSiteMap.png"  height="184" width="500" alt="1556_0422_TreeViewSiteMap" /><br />
<em>Figure 4.7. A simple <code>TreeView</code> control</em></p>

<p>As you can see, the <code>TreeView</code> control generated the tree for us. The root Home node can even be collapsed or expanded.</p>

<p>In many cases, we don't want to show the root node; we can hide it from view by setting the <code>ShowStartingNode</code> property of the <code>SiteMapDataSource</code> to <code>false</code>:</p>

<p><code>&lt;asp:SiteMapDataSource ID=&quot;mySiteMapDataSource&quot; runat=&quot;server&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;ShowStartingNode=&quot;false&quot; /&gt;</code></p>

<p><code><strong>SiteMapPath</strong></code></p>

<p>The <code>SiteMapPath</code> control provides the functionality to generate a breadcrumb navigational structure for your site. Breadcrumb systems help to orientate users, giving them an easy way to identify their current location within the site, and provide handy links to the current location's ancestor nodes. An example of a breadcrumb navigation system is shown in Figure 4.8.</p>

<p><img src="http://sitepointstatic.com/graphics/0417_SiteMapPath.png"  height="212" width="500" alt="1556_0417_SiteMapPath" /><br />
<em>Figure 4.8. A breadcrumb created using the <code>SiteMapPath</code> control</em></p>

<p>The <code>SiteMapPath</code> control will automatically use any <code>SiteMapDataSource</code> control that exists in a web form to display a user's current location within the site. For example, you could simply add the following code to the form we worked with in the previous example to achieve the effect shown in Figure 4.8:</p>

<p><code>Example 4.12. TreeViewDemo.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;asp:SiteMapPath id=&quot;mySiteMapPath&quot; runat=&quot;server&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;PathSeparator=&quot; &gt; &quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/asp:SiteMapPath&gt;</code></p>

<p>If you run the example now, you'll see the breadcrumb appear exactly as it's shown in Figure 4.8.</p>

<p>Note that the <code>SiteMapPath</code> control shows only the nodes that correspond to existing pages of your site, so if you don't have a file named <code>Default.aspx</code>, the root node link won't show up. Similarly, if the page you're loading isn't named <code>TreeViewDemo.aspx</code>, the <code>SiteMapPath</code> control won't generate any output.</p>

<p><code><strong>Menu</strong></code></p>

<p>The <code>Menu</code> control is similar to <code>TreeView</code> in that it displays hierarchical data from a data source; the ways in which we work with both controls are also very similar. The most important differences between the two lie in their appearances, and the fact that <code>Menu</code> supports templates for better customization and displays only two levels of items (menu and submenu items).</p>

<p><code><strong>MultiView</strong></code></p>

<p>The <code>MultiView</code> control is similar to Panel in that it doesn't generate interface elements itself, but contains other controls. A <code>MultiView</code> can store more pages of data (called views), and lets you show one page at a time. You can change the active view (the one being presented to the visitor) by setting the value of the <code>ActiveViewIndex</code> property. The first page corresponds to an <code>ActiveViewIndex</code> of <code>0</code>, the second page is <code>1</code>, the third page is <code>2</code>, and so on.</p>

<p>The contents of each template are defined inside child <code>View</code> elements. Consider the following code snippet, which creates a <code>Button</code> control, and a <code>MultiView</code> control:</p>

<p><code>Example 4.13. MultiViewDemo.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;MultiView Demo&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;asp:Button id=&quot;myButton&quot; Text=&quot;Switch Page&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;runat=&quot;server&quot; OnClick=&quot;SwitchPage&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;asp:MultiView ID=&quot;myMultiView&quot; runat=&quot;server&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ActiveViewIndex=&quot;0&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;asp:View ID=&quot;firstView&quot; runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;p&gt;... contents of the first view ...&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;/asp:View&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;asp:View ID=&quot;secondView&quot; runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;p&gt;... contents of the second view ...&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;/asp:View&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;/asp:MultiView&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p>As you can see, by default, the <code>ActiveViewIndex</code> is <code>0</code>, so when this code is first executed, the <code>MultiView</code> will display its first template, shown in Figure 4.9.</p>

<p><img src="http://sitepointstatic.com/graphics/0420_MultiView.png"  height="154" width="500" alt="1556_0420_MultiView" /><br />
<em>Figure 4.9. Using the <code>MultiView</code> control</em></p>

<p>Clicking on the button will cause the second template to be displayed. Here's the code for the <code>SwitchPage</code> event handler:</p>

<p><code>Example 4.14. MultiViewDemo.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;script runat=&quot;server&quot; language=&quot;VB&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;Sub SwitchPage(s as Object, e as EventArgs) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;myMultiView.ActiveViewIndex = _ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;(myMultiView.ActiveViewIndex + 1) Mod 2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;End Sub &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/script&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
Example 4.15. MultiViewDemo.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;script runat=&quot;server&quot; language=&quot;C#&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;public void SwitchPage(Object s, EventArgs e) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;myMultiView.ActiveViewIndex = &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;(myMultiView.ActiveViewIndex + 1) % 2; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/script&gt;</code></p>

<p>This simple subroutine uses the modulo operator to set the <code>ActiveViewIndex</code> to <code>1</code> when its original value is <code>0</code>, and vice versa.</p>

<p>The <code>MultiView</code> controls has a number of other handy features, so be sure to check the documentation for this control if you're using it in a production environment.</p>

<p><code><strong>Wizard</strong></code></p>

<p>The <code>Wizard</code> control is a more advanced version of the <code>MultiView</code> control. It's able to display one or more pages at a time, but also includes additional built-in functionality such as navigation buttons, and a sidebar that displays the wizard's steps.</p>

<p><strong><code>FileUpload</code></strong></p>

<p>The <code>FileUpload</code> control allows you to let visitors upload files to your server. You'll learn how to use this control in Chapter 14, Working with Files and Email.</p>

<p><div class="article-cms-pagebreak"></div></p>

<h5>Web User Controls</h5>



<p>As you build real-world projects, you'll frequently encounter pieces of the user interface that appear in multiple places--headers or footers, navigation links, and login boxes are just a few examples. Packaging their forms and behaviors into your own controls will allow you to reuse these components just as you can reuse ASP.NET's built-in controls.</p>

<p>Building your own web server controls involves writing advanced VB or C# code, and is not within the scope of this book, but it's good to know that it's possible. Creating customized web server controls makes sense when you need to build more complex controls that provide a high level of control and performance, or you want to create controls that can be integrated easily into many projects.</p>

<p>Those of us without advanced coding skills can develop our own controls by creating web user controls. These are also powerful and reusable within a given project; they can expose properties, events, and methods, just like other controls; and they're easy to implement.</p>

<p>A web user control is represented by a class that inherits from <code>System.Web.UI.UserControl</code>, and contains the basic functionality that you need to extend to create your own controls. The main drawback to using web user controls is that they're tightly integrated into the projects in which they're implemented. As such, it's more difficult to distribute them, or include them in other projects, than it is to distribute or reuse web server controls.</p>

<p>Web user controls are implemented very much like normal web forms--they're comprised of other controls, HTML markup, and server-side code. The file extension of a web user control is <code>.ascx</code>.</p>

<p><strong><em>Creating a Web User Control</em></strong></p>

<p>Let's get a feel for web user controls by stepping through a simple example. Let's say that in your web site, you have many forms consisting of pairs of <code>Label</code> and <code>TextBox</code> controls, like the one shown in Figure 4.10.</p>

<p><img src="http://sitepointstatic.com/graphics/0430_SmartBoxTest.png"  height="241" width="500" alt="1556_0430_SmartBoxTest" /><br />
<em>Figure 4.10. A simple form</em></p>

<p>All the labels must have a fixed width of 100 pixels, and the text boxes must accept a maximum of 20 characters.</p>

<p>Rather than adding many labels and text boxes to the form, and then having to set all their properties, let's make life easier by building a web user control that includes a <code>Label</code> of the specified width, and a <code>TextBox</code> that accepts 20 characters; you'll then be able to reuse the web user control wherever it's needed in your project.</p>

<p>In your <code>Learning</code> folder, create a new file named <code>SmartBox.ascx</code>. Then, add the control's constituent controls--a <code>Label</code> control and a <code>TextBox</code> control--as shown below:</p>

<p><code>Example 4.16. SmartBox.ascx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;asp:Label ID=&quot;myLabel&quot; runat=&quot;server&quot; Text=&quot;&quot; Width=&quot;100&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;asp:TextBox ID=&quot;myTextBox&quot; runat=&quot;server&quot; Text=&quot;&quot; Width=&quot;200&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;MaxLength=&quot;20&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/p&gt;</code></p>

<p><em>Label Widths in Firefox</em><br />
<em>Unfortunately, setting the <code>Width</code> property of the <code>Label</code> control doesn't guarantee that the label will appear at that width in all browsers. The current version of Firefox, for example, will not display the above label in the way it appears in Internet Explorer.</em></p>

<p><em>To get around this, you should use a CSS style sheet and the <code>CssClass</code> property, which we'll take a look at later in this chapter.</em></p>

<p>In Chapter 3, VB and C# Programming Basics, we discussed properties briefly, but we didn't explain how you could create your own properties within your own classes. So far, you've worked with many properties of the built-in controls. For example, you've seen a lot of code that sets the <code>Text</code> property of the <code>Label</code> control.</p>

<p>As a web user control is a class, it can also have methods, properties, and so on. Our <code>SmartBox</code> control extends the base <code>System.Web.UI.UserControl</code> class by adding two properties:</p>

<p><ul>
	<li><code>LabelText</code> is a write-only property that allows the forms using the control to set the control's label text.</li>
	<li><code>Text</code> is a read-only property that returns the text typed by the user in the text box.</li>
</ul>
</p>

<p>Let's add a server-side script element that will give our control two properties --one called <code>Text</code>, for the text in the <code>TextBox</code>, and one called <code>LabelText</code>, for the text in the <code>Label</code>:</p>

<p><code>Example 4.17. SmartBox.ascx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;script runat=&quot;server&quot; language=&quot;VB&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Public WriteOnly Property LabelText() As String &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;Set(ByVal value As String) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;myLabel.Text = value &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;End Set &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;End Property &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Public ReadOnly Property Text() As String &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;Get &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;Text = myTextBox.Text &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;End Get &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;End Property &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/script&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Example 4.18. SmartBox.ascx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;script runat=&quot;server&quot; language=&quot;C#&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;public string LabelText &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;set &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;myLabel.Text = value; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;public string Text &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;get &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;return myTextBox.Text; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/script&gt;</code></p>

<p>Just like web forms, web user controls can work with code-behind files, but, in an effort to keep our examples simple, we aren't using them here. You'll meet more complex web user controls in the chapters that follow.</p>

<p>When you use the <code>SmartBox</code> control in a form, you can set its label and have the text entered by the user, like this:</p>

<p><code>mySmartBox.LabelText = &quot;Address:&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
userAddress = mySmartBox.Text &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
mySmartBox.LabelText = &quot;Address:&quot;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
userAddress = mySmartBox.Text;</code></p>

<p>Let's see how we implemented this functionality. In .NET, properties can be read-only, write-only, or read-write. In many cases, you'll want to have properties that can be both read and write, but in this case, we want to be able to set the text of the inner <code>Label</code>, and to read the text from the <code>TextBox</code>.</p>

<p>To define a write-only property in VB, you need to use the <code>WriteOnly</code> modifier. Write-only properties need only define a special block of code that starts with the keyword <code>Set</code>. This block of code, called an accessor, is just like a subroutine that takes as a parameter the value that needs to be set. The block of code uses this value to perform the desired action--in the case of the <code>LabelText</code> property, that action sets the <code>Text</code> property of our <code>Label</code> control, as shown below:</p>

<p><code>Example 4.19. SmartBox.ascx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Public WriteOnly Property LabelText() As String &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Set(ByVal value As String) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;myLabel.Text = value &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;End Set &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
End Property</code></p>

<p>Assuming that a form uses a <code>SmartBox</code> object called <code>mySmartBox</code>, we could set the <code>Text</code> property of the <code>Label</code> like this:</p>

<p><code>mySmartBox.LabelText = &quot;Address:&quot;</code></p>

<p>When this code is executed, the <code>Set</code> accessor of the <code>LabelText</code> property is executed with its value parameter set to <code>Address:</code>. The <code>Set</code> accessor uses this value to set the <code>Text</code> property of the <code>Label</code>.</p>

<p>The other accessor you can use when defining properties is <code>Get</code>; this allows us to read values instead of writing them. Obviously, you aren't allowed to add a <code>Get</code> accessor to a WriteOnly property, but one is required for a <code>ReadOnly</code> property, such as <code>Text</code>:</p>

<p><code>Example 4.20. SmartBox.ascx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Public ReadOnly Property Text() As String &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Get &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;Text = myTextBox.Text &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;End Get &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
End Property</code></p>

<p>The <code>Text</code> property is <code>ReadOnly</code>, but it doesn't need to be. If you wanted to allow the forms using the control to set some default text to the <code>TextBox</code>, you'd need to add a <code>Set</code> accessor, and remove the <code>ReadOnly</code> modifier.</p>

<p>When defining a property in C#, you don't need to set any special modifiers, such as <code>ReadOnly</code> or <code>WriteOnly</code>, for read-only or write-only properties. A property that has only a <code>get</code> accessor will, by default, be considered read-only:</p>

<p><code>Example 4.21. SmartBox.ascx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
public string Text &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;get &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;return myTextBox.Text; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
}</code></p>

<p>Likewise, a property that has only a set accessor will be considered to be write-only:</p>

<p><code>Example 4.22. SmartBox.ascx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
public string LabelText &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;set &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;myLabel.Text = value; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
}</code></p>

<p><strong>Using the Web User Control</strong></p>

<p>Once the user control has been created, it can be referenced from any ASP.NET page using the <code>Register</code> directive, as follows:</p>

<p><code>&lt;%@ Register TagPrefix=&quot;prefix&quot; TagName=&quot;name&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;Src=&quot;source.ascx&quot; %&gt;</code></p>

<p>The <code>Register</code> directive requires three attributes:</p>

<p><ul>
	<li><code>TagPrefix</code> - the prefix for the user control, which allows you to group related controls together, and avoid naming conflicts</li>
	<li><code>TagName</code> - the control's tag name, which will be used when the control is added to the ASP.NET page</li>
	<li><code>Src</code> - the path to the <code>.ascx</code> file that describes the user control</li>
</ul>
</p>

<p>After registering the control, we create instances of it using the <code>&lt;TagPrefix:TagName&gt;</code> format. Let's try an example that uses the <code>SmartBox</code> control. Create a new file named <code>ControlTest.aspx</code> in your <code>Learning</code> folder, and give it this content:</p>

<p><code>Example 4.23. ControlTest.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;%@ Register TagPrefix=&quot;sp&quot; TagName=&quot;SmartBox&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;Src=&quot;SmartBox.ascx&quot; %&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;title&gt;Creating ASP.NET Web Server Controls&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;form id=&quot;Form1&quot; runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;sp:SmartBox id=&quot;nameSb&quot; runat=&quot;server&quot; LabelText=&quot;Name:&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;sp:SmartBox id=&quot;addressSb&quot; runat=&quot;server&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LabelText=&quot;Address:&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;sp:SmartBox id=&quot;countrySb&quot; runat=&quot;server&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LabelText=&quot;Country:&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp;&lt;sp:SmartBox id=&quot;phoneSb&quot; runat=&quot;server&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LabelText=&quot;Phone:&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/html&gt;</code></p>

<p>Loading this page will produce the output we saw in Figure 4.10.</p>

<p>Now, this is a very simple example indeed, but we can easily extend it for other purposes. You can see in the code snippet that we set the <code>LabelText</code> property directly in the control's tag; we could have accessed the properties from our code instead. Here's an example:</p>

<p><code>Example 4.24. ControlTest.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;script runat=&quot;server&quot; language=&quot;VB&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;Protected Sub Page_Load() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;nameSb.LabelText = &quot;Name:&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;addressSb.LabelText = &quot;Address:&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;countrySb.LabelText = &quot;Country:&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;phoneSb.LabelText = &quot;Phone:&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;End Sub &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/script&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
Example 4.25. ControlTest.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;script runat=&quot;server&quot; language=&quot;C#&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;protected void Page_Load() &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;nameSb.LabelText = &quot;Name:&quot;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;addressSb.LabelText = &quot;Address:&quot;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;countrySb.LabelText = &quot;Country:&quot;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp;phoneSb.LabelText = &quot;Phone:&quot;; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;/script&gt;</code></p>

<p><div class="article-cms-pagebreak"></div></p>

<h5>Master Pages</h5>



<p>Master pages are a new feature of ASP.NET 2.0 that can make an important difference in the way we compose web forms. Master pages are similar to web user controls in that they are also composed of HTML and other controls; they can be extended with the addition of events, methods, or properties; and they can't be loaded directly by users--instead, they're used as building blocks to design the structure of your web forms.</p>

<p>A master page is a page template that can be applied to give many web forms a consistent appearance. For example, a master page can set out a standard structure containing the header, footer, and other elements that you expect to display in multiple web forms within a web application.</p>

<p>Master page files have the .master extension, and, just like web forms and web user controls, they support code-behind files. All master pages inherit from the class <code>System.Web.UI.MasterPage</code>.</p>

<p>Designing a site structure using master pages and web user controls gives you the power to easily modify and extend the site. If your site uses these features in a well-planned way, it can be very easy to modify certain details in the layout or functionality of your site, because updating a master page or a web user control has immediate effects on all the web forms that use the file.</p>

<p>As we've already mentioned, a master page is built using HTML and controls, including the special <code>ContentPlaceHolder</code> control. As its name suggests, the <code>ContentPlaceHolder</code> is a placeholder that can be filled with content relevant to the needs of each web form that uses the master page. In creating a master page, we include all of the basic structure of future pages in the master page itself, including the <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, and <code>&lt;body&gt;</code> tags, and let the web forms specify the content that appears in the placeholders.</p>

<p>Let's see how this works with a simple example. Suppose we have a site which has many pages that contain a standard header, footer, and navigation menu, laid out as per the wireframe shown in Figure 4.11.</p>

<p><img src="http://sitepointstatic.com/graphics/fig-basicpagelayout.png"  height="321" width="500" alt="1556_fig-basicpagelayout" /><br />
<em>Figure 4.11. A simple web site layout</em></p>

<p>If all the pages in the site have the same header, footer, and navigation menu, it makes sense to include these components in a master page, and to build several web forms that customize only the content areas on each page. We'll begin to create such a site in Chapter 5, Building Web Applications, but let's work through a quick example here.</p>

<p>To keep this example simple, we won't include a menu here: we'll include just the header, the footer, and the content placeholder. In your <code>Learning</code> folder, create a new file named <code>FrontPages.master</code>, and write the following code into it:</p>

<p><code>Example 4.26. FrontPages.master (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;Front Page&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;form id=&quot;myForm&quot; runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;h1&gt;Welcome to SuperSite Inc!&lt;/h1&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;asp:ContentPlaceHolder id=&quot;FrontPageContent&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;p&gt;Copyright 2006&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p>The master page looks almost like a web form, except for one important detail: it has an empty <code>ContentPlaceHolder</code> control. If you want to build a web form based on this master page, you just need to reference the master page using the <code>Page</code> directive in the web form, and add a <code>Content</code> control that includes the content you want to insert.</p>

<p>Let's try it. Create a web form called <code>FrontPage.aspx</code>, and add this code to it:</p>

<p><code>Example 4.27. FrontPage.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;%@ Page MasterPageFile=&quot;FrontPages.master&quot; %&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;asp:Content id=&quot;myContent&quot; runat=&quot;server&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;ContentPlaceHolderID=&quot;FrontPageContent&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;Welcome to our web site! We hope you'll enjoy your visit. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/asp:Content&gt;</code></p>

<p>You're all set now! Loading <code>FrontPage.aspx</code> in your browser will generate the output shown in Figure 4.12.</p>

<p><img src="http://sitepointstatic.com/graphics/0435_MasterPage.png"  height="209" width="500" alt="1556_0435_MasterPage" /><br />
<em>Figure 4.12. Using a master page</em></p>

<p>Although the example is simplistic, it's easy to see the possibilities: you can create many web forms based on this template very easily. In our case, the master page contains a single <code>ContentPlaceHolder</code>, but it could have more. Also, the master page can define some default content for display inside the <code>ContentPlaceHolder</code> on pages whose web forms don't provide a <code>Content</code> element for that placeholder.</p>

<h5>Using Cascading Style Sheets (CSS)</h5>



<p>It's clear that controls make it easy for us to reuse pieces of functionality in multiple places. For example, I can't imagine an easier way to add calendars to many web forms than to use the <code>Calendar</code> web server control.</p>

<p>However, controls don't solve the problem of defining and managing the visual elements of your web site. Modern web sites need constant updating to keep them fresh, and it's not much fun editing hundreds of pages by hand just to change a border color, for example, and then having to check everything to ensure that the changes are consistent. The process is even more painful if the client wants a more serious update, like rearranging components on the pages.</p>

<p>The good news is that this maintenance work can be made a lot easier by planning ahead, correctly following a few basic rules, and efficiently using the tools HTML and ASP.NET offer you.</p>

<p>An essential tool for building reusable visual styles is CSS (Cascading Style Sheets). HTML was initially designed to deliver simple text content, and paid little attention to the specifics of how particular items appeared in the browser. HTML left it to the individual browsers to work out these intricacies, and tailor the output to the limitations and strengths of users' machines. While we can change font styles, sizes, colors, and so on using HTML tags, this practice can lead to verbose code and pages that are very hard to restyle at a later date.</p>

<p>CSS gives web developers the power to create one set of styles in a single location, and to apply those styles to all of the pages in our web site. All the pages to which the style sheet is applied will display the same fonts, colors, and sizes, giving the site a consistent feel. Regardless of whether our site contains three pages or 300, when we alter the styles in the style sheet, our changes are immediately applied to all pages that use the style sheet.</p>

<p><em>Look out for Themes and Skins</em><br />
<em>ASP.NET 2.0 provides extra value and power to those building reusable visual elements through its offerings of themes and skins. You'll learn more about these features in Chapter 5, Building Web Applications.</em></p>

<p><strong><em>Types of Styles and Style Sheets</em></strong></p>

<p>There are three different ways in which we can associate styles to the elements of a particular web page:</p>

<p><strong>1. Using an external style sheet</strong></p>

<p>By placing your style rules in an external style sheet, you can link this one file to any web pages on which you want those styles to be used. This makes updating a web site's overall look a cakewalk.</p>

<p>To reference an external style sheet from a web form, insert the following markup inside the head element:</p>

<p><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;file.css&quot; /&gt;</code></p>

<p>In the above example, <code>file.css</code> would be a text file containing CSS rules, much like the example shown below:</p>

<p><code>a &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;background: #ff9; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;color: #00f; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;text-decoration: underline; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
}</code></p>

<p><strong>2. Using an embedded style sheet</strong></p>

<p>You can place style rules for a page within <code>&lt;style type=&quot;text/css&quot;&gt;</code> tags inside that page's <code>head</code>.</p>

<p><code>&lt;style type=&quot;text/css&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;a &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;background: #ff9; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;color: #00f; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;text-decoration: underline; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/style&gt;</code></p>

<p>The problem with using these &quot;embedded&quot; styles is that we can't reuse those styles in another page without having to type them in again, which makes global changes to the site very difficult to manage.</p>

<p><strong>3. Using inline style rules</strong></p>

<p>Inline styles allow us to set styles for a single element using the style attribute. For instance, we might give a paragraph a border, and color it red, with the following markup:</p>

<p><code>&lt;p style=&quot;border-style: groove; color: red;&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;Copyright 2006 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/p&gt;</code></p>

<p>When used in embedded or external style sheets, the first part of any style rule must determine the elements to which the rule will apply; we do this using a selector. In ASP.NET, we typically use two types of selectors:</p>

<p><strong>1. element type selectors</strong></p>

<p>An element type selector targets every single instance of the specified element. For example, if we wanted to change the colour of all level two headers in a document, we'd use an element type selector to target all <code>&lt;h2&gt;</code>s:</p>

<p><code>h2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;color: #369; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
}</code></p>

<p><strong>2. classes</strong></p>

<p>Arguably the most popular way to use styles within your pages is to give each element a <code>class</code> attribute, then target elements that have a certain class value. For example, the following markup shows a paragraph whose <code>class</code> attribute is set to <code>fineprint</code>:</p>

<p><code>&lt;p class=&quot;fineprint&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;Copyright 2006 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/p&gt;</code></p>

<p>Now, given that anything with the class <code>fineprint</code> should be displayed in, well, fine print, we can create a style rule that will reduce the size of the text in this paragraph, and any other element with the attribute <code>class=&quot;fineprint&quot;</code>:</p>

<p><code>.fineprint &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;font-family: Arial; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;font-size: x-small; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
}</code></p>

<p>Whether you're building external style sheets, embedded style sheets, or inline style rules, style declarations use the same syntax.</p>

<p>Now that you have a basic understanding of some of the fundamental concepts behind CSS, let's look at the different types of styles that can be used within our ASP.NET applications.</p>

<p><strong>Style Properties</strong></p>

<p>You can modify many different types of properties using style sheets. Here's a list of the most common property types:</p>

<p><ul>
	<li><code>font</code> - This category provides you with the ability to format text level elements, including their font faces, sizes, decorations, weights, colors, etc.</li>
	<li><code>background</code> - This category allows you to customize backgrounds for objects and text. These values give you control over the background, including whether you'd like to use a color or an image for the background, and whether or not you want to repeat a background image.</li>
	<li><code>block</code> - This category allows you to modify the spacing between paragraphs, between lines of text, between words, and between letters.</li>
	<li><code>box</code> - The <code>box</code> category allows us to customize tables. If you need to modify borders, padding, spacing, and colors on a table, row, or cell, use the elements within this category.</li>
	<li><code>border</code> - This category lets you draw boxes of different colors, styles, and thicknesses around page elements.</li>
	<li><code>list</code> - This category allows you to customize the way ordered and unordered lists are created.</li>
	<li><code>positioning</code> - Modifying positioning allows you to move and position tags and controls freely.</li>
</ul>
</p>

<p>These categories provide an outline of the aspects of a design that can typically be modified using CSS. As we progress through the book, the many types of style properties will become evident.</p>

<p><strong>The <code>CssClass</code> Property</strong></p>

<p>Once you've defined a class in a style sheet (be it external or internal), you'll want to begin to associate that class with elements in your Web Forms. You can associate classes with ASP.NET Web server controls using the <code>CssClass</code> property. In most cases, the value you give the <code>CssClass</code> property will be used as the value of the resulting element's class attribute.</p>

<p>Let's see an example. First, create in your Learning folder a file named <code>Styles.css</code>, and copy this code into it:</p>

<p><code>Example 4.28. Styles.css &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
.title &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;font-family: Arial, Helvetica, sans-serif; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;font-size: 19px &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
.dropdownmenu &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;font-family: Arial; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;background-color: #0099FF; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
.textbox &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;font-family: Arial; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;background-color: #0099FF; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;border: 1px solid &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
.button &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
{ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;font-family: Arial; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;background-color: #0099FF; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;border: 1px solid &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
}</code></p>

<p>Then, create a new file named <code>UsingStyles.aspx</code> with this code:</p>

<p><code>Example 4.29. UsingStyles.aspx (excerpt) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;html&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;title&gt;Testing CSS&lt;/title&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;link href=&quot;Styles.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/head&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;form runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;p class=&quot;title&quot;&gt;Please select a product:&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;asp:DropDownList id=&quot;productsList&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CssClass=&quot;dropdownmenu&quot; runat=&quot;server&quot;&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;asp:ListItem Text=&quot;Shirt&quot; selected=&quot;true&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;asp:ListItem Text=&quot;Hat&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;asp:Listitem Text=&quot;Pants&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;asp:ListItem Text=&quot;Socks&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;/asp:DropDownList&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;asp:TextBox id=&quot;quantityTextBox&quot; CssClass=&quot;textbox&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;runat=&quot;server&quot; /&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;asp:Button id=&quot;addToCartButton&quot; CssClass=&quot;button&quot; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Text=&quot;Add To Cart&quot; runat=&quot;server&quot; &nbsp;/&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp; &nbsp;&lt;/p&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp; &nbsp;&lt;/form&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
 &nbsp;&lt;/body&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br />
&lt;/html&gt;</code></p>

<p>Loading this page should produce the output shown in Figure 4.13.</p>

<p><img src="http://sitepointstatic.com/graphics/0445_CSS.png"  height="233" width="500" alt="1556_0445_CSS" /><br />
<em>Figure 4.13. CSS at work</em></p>

<p>In the next chapter, we'll learn to use Visual Web Developer to create CSS definitions through a simple visual interface.</p>

<h5>Summary</h5>



<p>In this chapter, we discussed web forms, HTML server controls, web server controls, web user controls, master pages, and CSS. All these elements can be combined to create powerful structures for your web sites.</p>

<p>In the next chapter, we'll start building &quot;real&quot; web applications, putting into practice most of the theory you've learned so far, and using a professional development environment that will do part of the work for you.</p>

<p>Unfortunately, this is where our excerpt of <a class="sublink" href="http://www.sitepoint.com/books/aspnet2/"><em>Build Your Own ASP.NET Web Site Using VB and C#</em></a> <span class="tiny">[14]</span> ends. Review <a class="sublink" href="http://www.sitepoint.com/books/aspnet2/toc.php">the rest of the book's content</a> <span class="tiny">[15]</span>, and don't forget to <a rel='external' class="sublink" href="http://www.sitepoint.com/popup/popup.php?zone=2&popupid=86">download these chapters in PDF format</a> <span class="tiny">[16]</span>.</p>

                <p  class='tiny'>
            [1] http://www.sitepoint.com/books/aspnet2/<br />
[2] http://www.sitepoint.com/article/asp-net-getting-started/3<br />
[3] http://www.sitepoint.com/article/asp-net-getting-started/4<br />
[4] http://www.sitepoint.com/article/asp-net-getting-started/6<br />
[5] http://www.sitepoint.com/popup/popup.php?zone=2&popupid=86<br />
[6] http://www.mono-project.com/<br />
[7] http://www.microsoft.com/sql/2005/productinfo/sql2005features.asp<br />
[8] http://www.asp.net/<br />
[9] http://msdn.microsoft.com/vstudio/express/sql/<br />
[10] http://msdn.microsoft.com/vstudio/express/sql/<br />
[11] http://msdn.microsoft.com/vstudio/express/vwd/<br />
[12] http://www.asp.net/<br />
[13] http://www.sitepoint.com/forums/<br />
[14] http://www.sitepoint.com/books/aspnet2/<br />
[15] http://www.sitepoint.com/books/aspnet2/toc.php<br />
[16] http://www.sitepoint.com/popup/popup.php?zone=2&popupid=86<br />

                </p>
                


            
	</div>
</div>

</div>
<div id="footer">
	<a href="http://www.sitepoint.com">Back to SitePoint.com</a>

<p>The contents of this webpage are copyright &copy; 1998-2010 SitePoint Pty. Ltd. All Rights Reserved.</p>

<p>
</div>


</div><!-- end footer -->
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"></script>
<script type="text/javascript">
_uacct = "UA-30131-1";
_udn="sitepoint.com";
urchinTracker();
</script>

</body>
</html>
