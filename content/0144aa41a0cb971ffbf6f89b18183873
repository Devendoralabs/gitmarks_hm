<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
	"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
	<title>StaticGenerator for Django</title>
	<link rel="stylesheet" href="/static/projects.css" type="text/css" charset="utf-8">
</head>

<body>
    <div id="container">
        <h1>StaticGenerator for Django</h1>
        <p><strong><a href="http://github.com/luckythetourist/staticgenerator/tree/master">StaticGenerator is on GitHub!</a></strong></p>

<h2 id="introduction">Introduction</h2>

<p>How many CPU cycles do you suppose are wasted on blogs that are generated every request? Wouldn’t it make more sense to generate them only when they’re updated? StaticGenerator is a Python class for Django that makes it easy to create static files for lightning fast performance. </p>

<p><img src="/static/images/staticgenerator-chart.png" alt="" /></p>

<h2 id="download">Download</h2>

<p>You can get StaticGenerator using <code>easy_install</code>:</p>

<pre><code>easy_install staticgenerator
</code></pre>

<p>Or download from the <a href="http://pypi.python.org/pypi/staticgenerator/1.3">cheeseshop</a>.</p>

<h2 id="usage">Usage</h2>

<p>There are two ways to generate the static files. Both setups first require <code>WEB_ROOT</code> to be set in <code>settings.py</code>:</p>

<pre><code>WEB_ROOT = '/var/www/example.com/public/'
</code></pre>

<h3 id="method_1_preferred_middleware">Method 1 (preferred): Middleware</h3>

<p>As of StaticGenerator 1.3, Middleware is available to generate the file only when the URL is requested. This solves the 404 Problem (see below).</p>

<p>First, add Regexes of URLs you want to cache to <code>settings.py</code> like so:</p>

<pre><code>STATIC_GENERATOR_URLS = (
    r'^/$',
    r'^/(blog|about|projects)',
)
</code></pre>

<p>Second, add the Middleware to <code>MIDDLEWARE_CLASSES</code>:</p>

<pre><code>MIDDLEWARE_CLASSES = (
    ...snip...
    'staticgenerator.middleware.StaticGeneratorMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    ...snip...
)
</code></pre>

<p><strong>Note</strong>: You must place the StaticGeneratorMiddleware before FlatpageFallbackMiddleware if you use it.</p>

<p>When the pages are accessed for the first time, the body of the page is saved into a static file. This is completely transparent to the end-user. When the page or an associated object has changed, simply delete the cached file (See notes on Signals).</p>

<h3 id="method_2_generate_on_save">Method 2: Generate on Save</h3>

<p>The second method works by saving the cache file on save. This method fakes a request to get the appropriate content. In this example we want to publish our home page, all live Posts and all FlatPages:</p>

<pre><code># Passing url, a QuerySet and Model
from staticgenerator import quick_publish
quick_publish('/', Post.objects.live(), FlatPage)
</code></pre>

<p>Deleting files and paths is just as easy:</p>

<pre><code>from staticgenerator import quick_delete
quick_delete('/path-to-delete/')
</code></pre>

<p><em>Note: Directory deletion fails silently while failing to delete a file will raise an exception.</em></p>

<h4 id="the_8220404_problem8221">The &#8220;404 Problem&#8221;</h4>

<p>The second method suffers from a problem herein called the &#8220;404 problem&#8221;. Say you have a blog post that is not yet to be published. When you save it, the file created is actually a 404 message since the blog post is not actually available to the public. Using the older method you&#8217;d have to re-save the object to generate the file again.</p>

<p>The new method solves this because it saves the file only when the URL is accessed successfully (read: only when the HTTP status is 200).</p>

<h3 id="using_signals">Using Signals</h3>

<p>Integrating with existing models is easy using <a href="http://code.djangoproject.com/wiki/Signals">Django’s signal dispatcher</a>. Simply create a function to delete your models, and connect to the dispatcher:</p>

<pre><code>from django.contrib.flatpages.models import FlatPage
from blog.models import Post
from django.db.models import signals
from staticgenerator import quick_delete

def delete_index(sender, instance):
    quick_delete(instance, '/')

signals.post_delete.connect(delete_index, sender=Post)
signals.post_delete.connect(delete_index, sender=FlatPage)
</code></pre>

<p>Every time you save a Post or FlatPage it deletes the static file (notice that I add &#8216;/&#8217; so my homepage is deleted as well). What happens when a comment is added? Just delete the corresponding page:</p>

<pre><code>from django.contrib.comments.models import Comment, FreeComment

def publish_comment(sender, instance):
    quick_delete(instance.get_content_object())

signals.post_save.connect(publish_comment, sender=Comment)
signals.post_save.connect(publish_comment, sender=FreeComment)
</code></pre>

<h2 id="configure_your_front_end">Configure your front-end</h2>

<h3 id="sample_nginx_configuration">Sample Nginx configuration</h3>

<p>This configuration snippet shows how Nginx can automatically show the index.html page generated by StaticGenerator, and pass all Django requests to Apache.</p>

<pre><code># This example configuration only shows parts relevant to a Django app
http {

    upstream django {
        # Apache/mod_python running on port 7000
        server example.com:7000;
    }

    server {
        server_name  example.com;
        root   /var/www/;

        location / {
            if (-f $request_filename/index.html) {
                rewrite (.*) $1/index.html break;
            }
            if (!-f $request_filename) {
                proxy_pass http://django;
                break;
            }
        }

    }

}
</code></pre>

<h2 id="its_not_for_everything">It’s not for Everything</h2>

<p>The beauty of the generator is that you choose when and what urls are made into static files. Obviously a contact form or search form won’t work this way, so we just leave them as regular Django requests. In your front-end http server (you are using a front-end web server, right?) just set the URLs you want to be served as static and they’re already being served.</p>

<h2 id="feedback">Feedback</h2>

<p>Love it? Hate it? <a href="http://superjared.com/contact/">Let me know what you think!</a></p>


        <div id="footer">
            StaticGenerator for Django is brought to you by <a href="http://superjared.com/">SuperJared</a>
        </div>
    </div>
    
    <script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
    </script>
    <script type="text/javascript">
    _uacct = "UA-276142-5";
    urchinTracker();
    </script>
</body>
</html>
