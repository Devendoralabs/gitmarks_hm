<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
 <HEAD>
   <TITLE> [ANNOUNCE] MyHDL 0.5 released
   </TITLE>
   <LINK REL="Index" HREF="index.html" >
   <LINK REL="made" HREF="mailto:python-list%40python.org?Subject=Re%3A%20%5BANNOUNCE%5D%20MyHDL%200.5%20released&In-Reply-To=%3C43d248a8%240%2482637%24ed2619ec%40ptn-nntp-reader03.plus.net%3E">
   <META NAME="robots" CONTENT="index,nofollow">
   <META http-equiv="Content-Type" content="text/html; charset=us-ascii">
   <LINK REL="Previous"  HREF="414554.html">
   <LINK REL="Next"  HREF="414808.html">
 </HEAD>
 <BODY BGCOLOR="#ffffff">
   <H1>[ANNOUNCE] MyHDL 0.5 released</H1>
    <B>Michael</B> 
    <A HREF="mailto:python-list%40python.org?Subject=Re%3A%20%5BANNOUNCE%5D%20MyHDL%200.5%20released&In-Reply-To=%3C43d248a8%240%2482637%24ed2619ec%40ptn-nntp-reader03.plus.net%3E"
       TITLE="[ANNOUNCE] MyHDL 0.5 released">ms at cerenity.org
       </A><BR>
    <I>Sat Jan 21 15:44:19 CET 2006</I>
    <P><UL>
        <LI>Previous message: <A HREF="414554.html">MyHDL 0.5 released
</A></li>
        <LI>Next message: <A HREF="414808.html">[ANNOUNCE] MyHDL 0.5 released
</A></li>
         <LI> <B>Messages sorted by:</B> 
              <a href="date.html#360901">[ date ]</a>
              <a href="thread.html#360901">[ thread ]</a>
              <a href="subject.html#360901">[ subject ]</a>
              <a href="author.html#360901">[ author ]</a>
         </LI>
       </UL>
    <HR>  
<!--beginarticle-->
<PRE>Jan Decaluwe wrote:
&gt;<i> Michael wrote:
</I>...
&gt;&gt;<i>    * <A HREF="http://article.gmane.org/gmane.comp.python.myhdl/19/match=mu0">http://article.gmane.org/gmane.comp.python.myhdl/19/match=mu0</A>
</I>&gt;&gt;<i> 
</I>&gt;&gt;<i> One question I've got, mainly because it strikes me as very intriguing is
</I>&gt;&gt;<i> do you know if the MU0 processor as described is synthesisable or have a
</I>&gt;&gt;<i> feeling as to how much work would be needed for it to be synthesisable?
</I>&gt;<i> 
</I>&gt;<i> This is a fairly &quot;old&quot; project (2003). At that time, MyHDL didn't
</I>&gt;<i> yet have conversion to Verilog.
</I>&gt;<i> 
</I>&gt;<i> After reviewing the code again, it's clear that it's written in
</I>&gt;<i> RTL (register-transfer level) style. This means that the building
</I>&gt;<i> blocks are combinatorial, or triggered on clock edges, closely
</I>&gt;<i> reflecting an actual implementation. As it is, it's not
</I>&gt;<i> convertible to Verilog (see the MyHDL manual for conversion
</I>&gt;<i> constraints), but it's close.
</I>
Thanks that's great to hear, and from something I find very interesting.

&gt;<i> To someone with some synthesis experience, it should be fairly
</I>&gt;<i> straightforward to make the code synthesizable. I don't expect
</I>&gt;<i> that this would make the code more verbose or less clear.
</I>
I find that even more intersting :-)

&gt;&gt;<i> I've been watching your project grow over the past couple of years with
</I>&gt;&gt;<i> great interest though little actual need at the moment, but for me seeing
</I>&gt;&gt;<i> MU0 crop up piques my interest because that shows that MyHDL is getting
</I>&gt;&gt;<i> up to a very interesting level.
</I>&gt;<i> 
</I>&gt;<i> As your interest was apparently triggered by an example, this
</I>&gt;<i> tells me that I should put more emphasis on publishing practical
</I>&gt;<i> examples, as conversion to Verilog was already introduced some time
</I>&gt;<i> ago (beginning of 2004).
</I>
Practical examples are great, I'd seen that you'd introduced conversion to
verilog some time back, but it wasn't clear how much was synthesisable. The
example on the website &amp; seeing MU0 description made me really wonder.
After all MU0 is used as a teaching example of how a very minimal CPU can
be constructed.

MU0 itself is not that interesting, but for me the fact MyHDL might be able
to synthesise it *is* interesting.  After all, synthesising such a beast
(essentially) directly from python shows to me a very powerful example
which can be built upon.

&gt;<i> Note also that by now, there are designers that use MyHDL in real
</I>&gt;<i> projects, showing that you really can use it to go from Python to
</I>&gt;<i> an FPGA (or ASIC). Moreover, with development tools such
</I>&gt;<i> as Xilinx WebPack (now on Linux also) that start from Verilog,
</I>&gt;<i> this can be done using a zero-cost development environment.
</I>
Hmm... Very interesting :-)

[different post]
&gt;<i> I believe it's meaningful because in my view digital hardware
</I>&gt;<i> design can be regarded as just another specialized software
</I>&gt;<i> engineering discipline. Of course, things have to be learned,
</I>&gt;<i> but it's not more difficult than other application domains.
</I>&gt;<i> I should add that this is not the mainstream view of the
</I>&gt;<i> hardware design community :-)
</I>
For what it's worth, I agree. I've had some limited experience with
compilation to hardware in the past, specifically to asynchronous hardware,
but given you write code that can include loops, conditionals and these can
be translated to FPGA descriptions and then run this for me blurs the
hardware/software distinction. A specific example that looks like software
I'm thinking of is this:
   <A HREF="http://www.cs.man.ac.uk/fmethods/projects/AHV-PROJECT/node8.html">http://www.cs.man.ac.uk/fmethods/projects/AHV-PROJECT/node8.html</A>

(In particularly it's not really that different from Occam)

Maybe I should continue this conversation on the MyHDL list, since I'd be
interested in getting started in this in a simple way. (Mainly because my
work project Kamaelia is designed, to an extent, with hardware constraints
in mind. Implementing some Kamaelia components in MyHDL would be pretty
cool. This might well be possible since we also use generators to model
concurrency.)

Best Regards,


Michael.


</PRE>

<!--endarticle-->
    <HR>
    <P><UL>
        <!--threads-->
	<LI>Previous message: <A HREF="414554.html">MyHDL 0.5 released
</A></li>
	<LI>Next message: <A HREF="414808.html">[ANNOUNCE] MyHDL 0.5 released
</A></li>
         <LI> <B>Messages sorted by:</B> 
              <a href="date.html#360901">[ date ]</a>
              <a href="thread.html#360901">[ thread ]</a>
              <a href="subject.html#360901">[ subject ]</a>
              <a href="author.html#360901">[ author ]</a>
         </LI>
       </UL>

<hr>
<a href="http://mail.python.org/mailman/listinfo/python-list">More information about the Python-list
mailing list</a><br>
</body></html>
