<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

  <html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
    <head>
      
      <meta content="text/html; charset=utf-8" http-equiv="content-type"/>
      <base href="http://pypi.python.org/pypi/virtualenv"/>
      <title>Python Package Index : virtualenv 1.5.1</title>
      <meta content="setuptools deployment installation distutils"/>
      <meta content="Virtual Python Environment builder"/>
       <link rel="stylesheet" type="text/css"
             href="http://www.python.org/css/pypi.css"/>
       <link rel="alternate" type="application/rss+xml" title="RSS: 30 latest updates" href="http://www.python.org/pypi?:action=rss"/>
       <link media="screen" type="text/css"
             id="screen-switcher-stylesheet"
             rel="stylesheet"
             href="http://www.python.org/styles/screen-switcher-default.css"/>
       <link media="screen" type="text/css" rel="stylesheet"
             href="http://www.python.org/styles/netscape4.css"/>
       <link media="print" type="text/css" rel="stylesheet"
             href="http://www.python.org/styles/print.css"/>
       <link media="screen" type="text/css"
             rel="alternate stylesheet" title="large text"
             href="http://www.python.org/styles/largestyles.css"/>
       <link media="screen" type="text/css"
             rel="alternate stylesheet"
             title="default fonts"
             href="http://www.python.org/styles/defaultfonts.css"/>
       <link rel="stylesheet" media="screen" href="/css/docutils.css" type="text/css"/>

       
 <meta name="keywords"
       content="setuptools deployment installation distutils"/>
 <meta name="description"
       content="Virtual Python Environment builder"/>
 <link rel="meta" title="DOAP" type="application/rdf+xml"
       href="/pypi?:action=doap&amp;name=virtualenv&amp;version=1.5.1"/>
 <style type="text/css">
  table.form th {white-space: pre;}
 </style>


       <style type="text/css" rel="stylesheet">
       </style>
    </head>
    <body>
      <!--  Logo  -->
      <h1 id="logoheader">
       <a accesskey="1" href="http://www.python.org" id="logolink">
        
        
          <img alt="homepage" border="0" id="logo"
               src="http://www.python.org/images/python-logo.gif"/>
        
       </a>
      </h1>
      <!--  Skip to Navigation  -->
      <div class="skiptonav"><a accesskey="2" href="#left-hand-navigation"><img
    alt="skip to navigation" border="0" id="skiptonav"
    src="http://www.python.org/images/trans.gif"/></a></div>
      <div class="skiptonav"><a accesskey="3" href="#content-body"><img
    alt="skip to content" border="0" id="skiptocontent"
    src="http://www.python.org/images/trans.gif"/></a></div>
      <!--  Utility Menu  -->

      <div id="utility-menu">
        <!--  Search Box  -->
        <div id="searchbox">
          <form id="searchform" method="get"
                name="searchform" action="/pypi">
            <input type="hidden" name=":action" value="search"/>
            <div id="search">
              <input class="input-text" id="term" name="term"/>
              <input class="input-button" type="submit" name="submit" value="search" id="submit"/>
            </div>
          </form>
        </div>
<!-- XXX: reinstate this       <div id="screen-switcher"></div> -->
      </div>
      <div id="left-hand-navigation">

        <!--  Main Menu NEED LEVEL TWO HEADER AND FOOTER -->
        <div id="menu">
          <ul class="level-one">
            <li class="selected">
              <a class="selected" href="/pypi">Package Index</a>

              <ul class="level-two">

                
                  <li class=""><a class="" href="/pypi?%3Aaction=browse">Browse&nbsp;packages</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=submit_form">Package&nbsp;submission</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=list_classifiers">List&nbsp;trove&nbsp;classifiers</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=index">List&nbsp;packages</a></li>
                
                
                  <li class=""><a class="" href="/pypi?%3Aaction=rss">RSS&nbsp;(last&nbsp;40&nbsp;updates)</a></li>
                
		<li><a href="/pypi?:action=browse&amp;c=533&amp;show=all">Python 3 packages</a></li>

                <li><a href="http://wiki.python.org/moin/CheeseShopTutorial">Tutorial</a></li>

                <li><a href="http://sourceforge.net/tracker/?group_id=66150&amp;atid=513504">Get
                help</a></li>
                <li><a href="http://sourceforge.net/tracker/?group_id=66150&amp;atid=513503">Bug
                reports</a></li>
                <li><a href="http://www.python.org/sigs/catalog-sig/">Comments</a></li>
                <li><a href="http://wiki.python.org/moin/CheeseShopDev">Developers</a></li>
              </ul>

            </li>




            <li class=""><a href="http://www.python.org/about" class="" title="About The Python Language">About</a>
            </li><li class=""><a href="http://www.python.org/news" class="" title="">News</a>
            </li><li class=""><a href="http://www.python.org/doc" class="" title="">Documentation</a>
            </li><li class=""><a href="http://www.python.org/download" title="">Download</a>


            </li><li class=""><a href="http://www.python.org/community" class="" title="">Community</a>
            </li><li class=""><a href="http://www.python.org/psf" class="" title="Python Software Foundation">Foundation</a>
            </li><li class=""><a href="http://www.python.org/dev" class="" title="Python Core Language Development">Core Development</a>
            </li><li class=""><a href="http://www.python.org/links" class="" title="">Links</a>
          </li>
          </ul>
        </div>

      </div>
      <div id="content-body">
        <div id="body-main">
          <div id="content">

            <div id="breadcrumb">
              <a href="/pypi">Package Index</a>
              
                <span class="breadcrumb-separator">&gt;</span>
                <a href="/pypi/virtualenv/1.5.1">virtualenv 1.5.1</a>
              

            </div>

            <div id="document-floating">

            <div id="document-navigation" style="overflow-y: auto; max-height: 15em; overflow-x: hidden;">
		
                  <h4>Not Logged In</h4>

                  <ul>
		    
                    <li><a href="/pypi?%3Aaction=login">Login</a></li>
                    <li><a href="/pypi?%3Aaction=register_form">Register</a></li>
                    <li><a href="/pypi?%3Aaction=forgotten_password_form">Lost Login?</a></li>
		    <li>Use <a href="/pypi?:action=openid">OpenID</a>
                      
			<a href="/pypi?:action=login&amp;provider=Google">
                       <img src="https://www.google.com/favicon.ico"
                            title="Google"/>
			</a>
                      
                      
			<a href="/pypi?:action=login&amp;provider=myOpenID">
                       <img src="https://www.myopenid.com/favicon.ico"
                            title="myOpenID"/>
			</a>
                      
                      
			<a href="/pypi?:action=login&amp;provider=Launchpad">
                       <img src="https://launchpad.net/@@/launchpad.png"
                            title="Launchpad"/>
			</a>
                      
                    </li>
                  </ul>

		

		

            </div>
        </div>
        


            <div class="section">
              <h1>virtualenv 1.5.1</h1>

              
<p style="font-style: italic">Virtual Python Environment builder</p>

<p>
    <a href="#downloads">Downloads &darr;</a>
</p>






<div class="section" id="status-and-license">
<h1>Status and License</h1>
<p><tt class="docutils literal"><span class="pre">virtualenv</span></tt> is a successor to <a class="reference external" href="http://cheeseshop.python.org/pypi/workingenv.py">workingenv</a>, and an extension
of <a class="reference external" href="http://peak.telecommunity.com/DevCenter/EasyInstall#creating-a-virtual-python">virtual-python</a>.</p>
<p>It is written by Ian Bicking, and sponsored by the <a class="reference external" href="http://openplans.org">Open Planning
Project</a>.  It is licensed under an
<a class="reference external" href="license.html">MIT-style permissive license</a>.</p>
<p>You can install it with <tt class="docutils literal"><span class="pre">easy_install</span> <span class="pre">virtualenv</span></tt>, or from the <a class="reference external" href="http://bitbucket.org/ianb/virtualenv">hg
repository</a> or from a <a class="reference external" href="http://bitbucket.org/ianb/virtualenv/get/tip.gz#egg=virtualenv-tip">tarball</a>
<tt class="docutils literal"><span class="pre">easy_install</span> <span class="pre">virtualenv==tip</span></tt>.</p>
</div>
<div class="section" id="what-it-does">
<h1>What It Does</h1>
<p><tt class="docutils literal"><span class="pre">virtualenv</span></tt> is a tool to create isolated Python environments.</p>
<p>The basic problem being addressed is one of dependencies and versions,
and indirectly permissions.  Imagine you have an application that
needs version 1 of LibFoo, but another application requires version
2.  How can you use both these applications?  If you install
everything into <tt class="docutils literal"><span class="pre">/usr/lib/python2.4/site-packages</span></tt> (or whatever your
platform's standard location is), it's easy to end up in a situation
where you unintentionally upgrade an application that shouldn't be
upgraded.</p>
<p>Or more generally, what if you want to install an application <em>and
leave it be</em>?  If an application works, any change in its libraries or
the versions of those libraries can break the application.</p>
<p>Also, what if you can't install packages into the global
<tt class="docutils literal"><span class="pre">site-packages</span></tt> directory?  For instance, on a shared host.</p>
<p>In all these cases, <tt class="docutils literal"><span class="pre">virtualenv</span></tt> can help you.  It creates an
environment that has its own installation directories, that doesn't
share libraries with other virtualenv environments (and optionally
doesn't use the globally installed libraries either).</p>
<p>The basic usage is:</p>
<pre class="literal-block">
$ python virtualenv.py ENV
</pre>
<p>If you install it you can also just do <tt class="docutils literal"><span class="pre">virtualenv</span> <span class="pre">ENV</span></tt>.</p>
<p>This creates <tt class="docutils literal"><span class="pre">ENV/lib/python2.4/site-packages</span></tt> (or
<tt class="docutils literal"><span class="pre">ENV/lib/python2.5/site-packages</span></tt> on Python 2.5, etc), where any
libraries you install will go.  It also creates <tt class="docutils literal"><span class="pre">ENV/bin/python</span></tt>,
which is a Python interpreter that uses this environment.  Anytime you
use that interpreter (including when a script has
<tt class="docutils literal"><span class="pre">#!/path/to/ENV/bin/python</span></tt> in it) the libraries in that environment
will be used.  (<strong>Note for Windows:</strong> scripts and executables on
Windows go in <tt class="docutils literal"><span class="pre">ENV\Scripts\</span></tt>; everywhere you see <tt class="docutils literal"><span class="pre">bin/</span></tt> replace it
with <tt class="docutils literal"><span class="pre">Scripts\</span></tt>)</p>
<p>It also installs <a class="reference external" href="http://peak.telecommunity.com/DevCenter/setuptools">Setuptools</a> for you, and if
you use <tt class="docutils literal"><span class="pre">ENV/bin/easy_install</span></tt> the packages will be installed into
the environment.</p>
<p>If you use the <tt class="docutils literal"><span class="pre">--distribute</span></tt> option, it will install <a class="reference external" href="http://pypi.python.org/pypi/distribute">distribute</a> for you, instead of setuptools,
and if you use <cite>ENV/bin/easy_install`</cite> the packages will be installed into the
environment.</p>
<p>To use Distribute just call virtualenv like this:</p>
<pre class="literal-block">
$ python virtualenv.py --distribute ENV
</pre>
<p>You can also set the environment variable VIRTUALENV_USE_DISTRIBUTE (since 1.4.4)
and be a good Comrade</p>
</div>
<div class="section" id="creating-your-own-bootstrap-scripts">
<h1>Creating Your Own Bootstrap Scripts</h1>
<p>While this creates an environment, it doesn't put anything into the
environment.  Developers may find it useful to distribute a script
that sets up a particular environment, for example a script that
installs a particular web application.</p>
<p>To create a script like this, call
<tt class="docutils literal"><span class="pre">virtualenv.create_bootstrap_script(extra_text)</span></tt>, and write the
result to your new bootstrapping script.  Here's the documentation
from the docstring:</p>
<p>Creates a bootstrap script, which is like this script but with
extend_parser, adjust_options, and after_install hooks.</p>
<p>This returns a string that (written to disk of course) can be used
as a bootstrap script with your own customizations.  The script
will be the standard virtualenv.py script, with your extra text
added (your extra text should be Python code).</p>
<p>If you include these functions, they will be called:</p>
<dl class="docutils">
<dt><tt class="docutils literal"><span class="pre">extend_parser(optparse_parser)</span></tt>:</dt>
<dd>You can add or remove options from the parser here.</dd>
<dt><tt class="docutils literal"><span class="pre">adjust_options(options,</span> <span class="pre">args)</span></tt>:</dt>
<dd>You can change options here, or change the args (if you accept
different kinds of arguments, be sure you modify <tt class="docutils literal"><span class="pre">args</span></tt> so it is
only <tt class="docutils literal"><span class="pre">[DEST_DIR]</span></tt>).</dd>
</dl>
<p><tt class="docutils literal"><span class="pre">after_install(options,</span> <span class="pre">home_dir)</span></tt>:</p>
<blockquote>
<p>After everything is installed, this function is called.  This
is probably the function you are most likely to use.  An
example would be:</p>
<pre class="literal-block">
def after_install(options, home_dir):
    if sys.platform == 'win32':
        bin = 'Scripts'
    else:
        bin = 'bin'
    subprocess.call([join(home_dir, bin, 'easy_install'),
                     'MyPackage'])
    subprocess.call([join(home_dir, bin, 'my-package-script'),
                     'setup', home_dir])
</pre>
<p>This example immediately installs a package, and runs a setup
script from that package.</p>
</blockquote>
<div class="section" id="bootstrap-example">
<h2>Bootstrap Example</h2>
<p>Here's a more concrete example of how you could use this:</p>
<pre class="literal-block">
import virtualenv, textwrap
output = virtualenv.create_bootstrap_script(textwrap.dedent(&quot;&quot;&quot;
import os, subprocess
def after_install(options, home_dir):
    etc = join(home_dir, 'etc')
    if not os.path.exists(etc):
        os.makedirs(etc)
    subprocess.call([join(home_dir, 'bin', 'easy_install'),
                     'BlogApplication'])
    subprocess.call([join(home_dir, 'bin', 'paster'),
                     'make-config', 'BlogApplication',
                     join(etc, 'blog.ini')])
    subprocess.call([join(home_dir, 'bin', 'paster'),
                     'setup-app', join(etc, 'blog.ini')])
&quot;&quot;&quot;))
f = open('blog-bootstrap.py', 'w').write(output)
</pre>
<p>Another example is available <a class="reference external" href="https://svn.openplans.org/svn/fassembler/trunk/fassembler/create-venv-script.py">here</a>.</p>
</div>
<div class="section" id="activate-script">
<h2>activate script</h2>
<p>In a newly created virtualenv there will be a <tt class="docutils literal"><span class="pre">bin/activate</span></tt> shell
script, or a <tt class="docutils literal"><span class="pre">Scripts/activate.bat</span></tt> batch file on Windows.</p>
<p>On Posix systems you can do:</p>
<pre class="literal-block">
$ source bin/activate
</pre>
<p>This will change your <tt class="docutils literal"><span class="pre">$PATH</span></tt> to point to the virtualenv <tt class="docutils literal"><span class="pre">bin/</span></tt>
directory.  Unlike workingenv, this is all it
does; it's a convenience.  But if you use the complete path like
<tt class="docutils literal"><span class="pre">/path/to/env/bin/python</span> <span class="pre">script.py</span></tt> you do not need to activate the
environment first.  You have to use <tt class="docutils literal"><span class="pre">source</span></tt> because it changes the
environment in-place.  After activating an environment you can use the
function <tt class="docutils literal"><span class="pre">deactivate</span></tt> to undo the changes.</p>
<p>The <tt class="docutils literal"><span class="pre">activate</span></tt> script will also modify your shell prompt to indicate
which environment is currently active.  You can disable this behavior,
which can be useful if you have your own custom prompt that already
displays the active environment name.  To do so, set the
<tt class="docutils literal"><span class="pre">VIRTUAL_ENV_DISABLE_PROMPT</span></tt> environment variable to any non-empty
value before running the <tt class="docutils literal"><span class="pre">activate</span></tt> script.</p>
<p>On Windows you just do:</p>
<pre class="literal-block">
&gt; \path\to\env\bin\activate.bat
</pre>
<p>And use <tt class="docutils literal"><span class="pre">deactivate.bat</span></tt> to undo the changes.</p>
</div>
<div class="section" id="the-no-site-packages-option">
<h2>The <tt class="docutils literal"><span class="pre">--no-site-packages</span></tt> Option</h2>
<p>If you build with <tt class="docutils literal"><span class="pre">virtualenv</span> <span class="pre">--no-site-packages</span> <span class="pre">ENV</span></tt> it will <em>not</em>
inherit any packages from <tt class="docutils literal"><span class="pre">/usr/lib/python2.5/site-packages</span></tt> (or
wherever your global site-packages directory is).  This can be used if
you don't have control over site-packages and don't want to depend on
the packages there, or you just want more isolation from the global
system.</p>
</div>
<div class="section" id="using-virtualenv-without-bin-python">
<h2>Using Virtualenv without <tt class="docutils literal"><span class="pre">bin/python</span></tt></h2>
<p>Sometimes you can't or don't want to use the Python interpreter
created by the virtualenv.  For instance, in a <a class="reference external" href="http://www.modpython.org/">mod_python</a> or <a class="reference external" href="http://www.modwsgi.org/">mod_wsgi</a>
environment, there is only one interpreter.</p>
<p>Luckily, it's easy.  You must use the custom Python interpreter to
<em>install</em> libraries.  But to <em>use</em> libraries, you just have to be sure
the path is correct.  A script is available to correct the path.  You
can setup the environment like:</p>
<pre class="literal-block">
activate_this = '/path/to/env/bin/activate_this.py'
execfile(activate_this, dict(__file__=activate_this))
</pre>
<p>This will change <tt class="docutils literal"><span class="pre">sys.path</span></tt> and even change <tt class="docutils literal"><span class="pre">sys.prefix</span></tt>, but also
allow you to use an existing interpreter.  Items in your environment
will show up first on <tt class="docutils literal"><span class="pre">sys.path</span></tt>, before global items.  However,
this cannot undo the activation of other environments, or modules that
have been imported.  You shouldn't try to, for instance, activate an
environment before a web request; you should activate <em>one</em>
environment as early as possible, and not do it again in that process.</p>
</div>
<div class="section" id="making-environments-relocatable">
<h2>Making Environments Relocatable</h2>
<p>Note: this option is somewhat experimental, and there are probably
caveats that have not yet been identified.  Also this does not
currently work on Windows.</p>
<p>Normally environments are tied to a specific path.  That means that
you cannot move an environment around or copy it to another computer.
You can fix up an environment to make it relocatable with the
command:</p>
<pre class="literal-block">
$ virtualenv --relocatable ENV
</pre>
<p>This will make some of the files created by setuptools or distribute
use relative paths, and will change all the scripts to use <tt class="docutils literal"><span class="pre">activate_this.py</span></tt>
instead of using the location of the Python interpreter to select the
environment.</p>
<p><strong>Note:</strong> you must run this after you've installed <em>any</em> packages into
the environment.  If you make an environment relocatable, then
install a new package, you must run <tt class="docutils literal"><span class="pre">virtualenv</span> <span class="pre">--relocatable</span></tt>
again.</p>
<p>Also, this <strong>does not make your packages cross-platform</strong>.  You can
move the directory around, but it can only be used on other similar
computers.  Some known environmental differences that can cause
incompatibilities: a different version of Python, when one platform
uses UCS2 for its internal unicode representation and another uses
UCS4 (a compile-time option), obvious platform changes like Windows
vs. Linux, or Intel vs. ARM, and if you have libraries that bind to C
libraries on the system, if those C libraries are located somewhere
different (either different versions, or a different filesystem
layout).</p>
<p>Currently the <tt class="docutils literal"><span class="pre">--no-site-packages</span></tt> option will not be honored if you
use this on an environment.</p>
</div>
</div>
<div class="section" id="compare-contrast-with-alternatives">
<h1>Compare &amp; Contrast with Alternatives</h1>
<p>There are several alternatives that create isolated environments:</p>
<ul>
<li><p class="first"><tt class="docutils literal"><span class="pre">workingenv</span></tt> (which I do not suggest you use anymore) is the
predecessor to this library.  It used the main Python interpreter,
but relied on setting <tt class="docutils literal"><span class="pre">$PYTHONPATH</span></tt> to activate the environment.
This causes problems when running Python scripts that aren't part of
the environment (e.g., a globally installed <tt class="docutils literal"><span class="pre">hg</span></tt> or <tt class="docutils literal"><span class="pre">bzr</span></tt>).  It
also conflicted a lot with Setuptools.</p>
</li>
<li><p class="first"><a class="reference external" href="http://peak.telecommunity.com/DevCenter/EasyInstall#creating-a-virtual-python">virtual-python</a>
is also a predecessor to this library.  It uses only symlinks, so it
couldn't work on Windows.  It also symlinks over the <em>entire</em>
standard library and global <tt class="docutils literal"><span class="pre">site-packages</span></tt>.  As a result, it
won't see new additions to the global <tt class="docutils literal"><span class="pre">site-packages</span></tt>.</p>
<p>This script only symlinks a small portion of the standard library
into the environment, and so on Windows it is feasible to simply
copy these files over.  Also, it creates a new/empty
<tt class="docutils literal"><span class="pre">site-packages</span></tt> and also adds the global <tt class="docutils literal"><span class="pre">site-packages</span></tt> to the
path, so updates are tracked separately.  This script also installs
Setuptools automatically, saving a step and avoiding the need for
network access.</p>
</li>
<li><p class="first"><a class="reference external" href="http://pypi.python.org/pypi/zc.buildout">zc.buildout</a> doesn't
create an isolated Python environment in the same style, but
achieves similar results through a declarative config file that sets
up scripts with very particular packages.  As a declarative system,
it is somewhat easier to repeat and manage, but more difficult to
experiment with.  <tt class="docutils literal"><span class="pre">zc.buildout</span></tt> includes the ability to setup
non-Python systems (e.g., a database server or an Apache instance).</p>
</li>
</ul>
<p>I <em>strongly</em> recommend anyone doing application development or
deployment use one of these tools.</p>
</div>
<div class="section" id="other-documentation-and-links">
<h1>Other Documentation and Links</h1>
<ul class="simple">
<li>James Gardner has written a tutorial on using <a class="reference external" href="http://wiki.pylonshq.com/display/pylonscookbook/Using+a+Virtualenv+Sandbox">virtualenv with
Pylons</a>.</li>
<li><a class="reference external" href="http://blog.ianbicking.org/2007/10/10/workingenv-is-dead-long-live-virtualenv/">Blog announcement</a>.</li>
<li>Doug Hellmann wrote a description of his <a class="reference external" href="http://www.doughellmann.com/articles/CompletelyDifferent-2008-05-virtualenvwrapper/index.html">command-line work flow
using virtualenv (virtualenvwrapper)</a>
including some handy scripts to make working with multiple
environments easier.  He also wrote <a class="reference external" href="http://www.doughellmann.com/articles/CompletelyDifferent-2008-02-ipython-and-virtualenv/index.html">an example of using virtualenv
to try IPython</a>.</li>
<li>Chris Perkins created a <a class="reference external" href="http://showmedo.com/videos/video?name=2910000&amp;fromSeriesID=291">showmedo video including virtualenv</a>.</li>
<li><a class="reference external" href="http://code.google.com/p/modwsgi/wiki/VirtualEnvironments">Using virtualenv with mod_wsgi</a>.</li>
<li><a class="reference external" href="http://thisismedium.com/tech/extending-virtualenv/">virtualenv commands</a> for some more
workflow-related tools around virtualenv.</li>
</ul>
</div>


<a name="downloads">&nbsp;</a>
<table class="list" style="margin-bottom: 10px;">
<tr>
  <th>File</th>
  <th>Type</th>
  <th>Py Version</th>
  <th>Uploaded on</th>
  <th style="text-align: right;">Size</th>
  <th style="text-align: right;"># downloads</th>
</tr>

<tr class="odd">

    <td>
    <span style="white-space: nowrap;">
      <a href="http://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.5.1.tar.gz#md5=3daa1f449d5d2ee03099484cecb1c2b7">virtualenv-1.5.1.tar.gz</a>
      (<a title="MD5 Digest"
          href="/pypi?:action=show_md5&amp;digest=3daa1f449d5d2ee03099484cecb1c2b7">md5</a>)
    </span>
    
        </td>
  <td style="white-space: nowrap;">
    Source
  </td>
  <td>
    
  </td>
  <td>2010-09-20</td>
  <td style="text-align: right;">1MB</td>
  <td style="text-align: right;">169697</td>

</tr>

<tr><td id="last" colspan="6"/></tr>
  </table>

<ul class="nodot">
 <li>
  <strong>Author:</strong>
  <span>Ian Bicking &lt;ianb at colorstudy com&gt;</span>
 </li>

 

 

<!-- The <th> elements below are a terrible terrible hack for setuptools -->
 <li>
  <strong>Home Page:</strong>
  <!-- <th>Home Page -->
  <a href="http://virtualenv.openplans.org">http://virtualenv.openplans.org</a>
 </li>

 


 <li>
  <strong>Keywords:</strong>
  <span>setuptools deployment installation distutils</span>
 </li>

 <li>
  <strong>License:</strong>
  
  
  <span>MIT</span>
  
 </li>

 

<!-- TODO: add link to products in follow dependencies... -->
 
 
 

 <li>
  <strong>Categories</strong>
  <ul class="nodot">
   <li>
    <a href="/pypi?:action=browse&amp;c=4">Development Status :: 4 - Beta</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=30">Intended Audience :: Developers</a>
   </li>
   <li>
    <a href="/pypi?:action=browse&amp;c=69">License :: OSI Approved :: MIT License</a>
   </li>
  </ul>
 </li>



 

 

 

 

 


 <li>
  <strong>Package Index Owner:</strong>
  <span>ianb</span>
 </li>

 

 <li>
  <strong><a href="http://usefulinc.com/doap">DOAP</a> record:</strong>
  <a href="/pypi?:action=doap&amp;name=virtualenv&amp;version=1.5.1">virtualenv-1.5.1.xml</a>
 </li>

</ul>


<div>
 <p><em>Log in to rate this package.</em></p>
</div>

<div>
       Package rating (1 vote): 
       5.0

  <ul>
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   <li>
    5 points:
    1 vote
   </li>
   
  </ul>
  <p>Ratings range from 0 to 5 (best).</p>
</div>









            </div>


          </div>
          <div id="footer"><div id="credits">
            <a href="http://www.python.org/about/website">Website maintained by the Python community</a><br/>
            <a href="http://www.xs4all.com/" title="Web and email hosting provided by xs4all, Netherlands">hosting by xs4all</a> /
            <a href="http://www.pollenation.net/" title="Design and content management system by Pollenation Internet, Yorkshire">design by pollenation</a>
          </div>
          Copyright © 1990-2010, <a href="http://www.python.org/psf">Python Software Foundation</a><br/>
          <a href="http://www.python.org/about/legal">Legal Statements</a>

          </div>
        </div>
      </div>
    </body>
  </html>

