<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<meta name="robots" content="index,nofollow">

<title>PigLatin - Pig Wiki</title>
<script type="text/javascript" src="/moin_static184/common/js/common.js"></script>

<script type="text/javascript">
<!--
var search_hint = "Search";
//-->
</script>


<link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="/moin_static184/modernized/css/common.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="screen" href="/moin_static184/modernized/css/screen.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="print" href="/moin_static184/modernized/css/print.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="projection" href="/moin_static184/modernized/css/projection.css">

<!-- css only for MS IE6/IE7 browsers -->
<!--[if lt IE 8]>
   <link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="/moin_static184/modernized/css/msie.css">
<![endif]-->





<link rel="Start" href="/pig/FrontPage">
<link rel="Alternate" title="Wiki Markup" href="/pig/PigLatin?action=raw">
<link rel="Alternate" media="print" title="Print View" href="/pig/PigLatin?action=print">
<link rel="Search" href="/pig/FindPage">
<link rel="Index" href="/pig/TitleIndex">
<link rel="Glossary" href="/pig/WordIndex">
<link rel="Help" href="/pig/HelpOnFormatting">
</head>

<body  lang="en" dir="ltr">

<div id="header">

<form id="searchform" method="get" action="/pig/PigLatin">
<div>
<input type="hidden" name="action" value="fullsearch">
<input type="hidden" name="context" value="180">
<label for="searchinput">Search:</label>
<input id="searchinput" type="text" name="value" value="" size="20"
    onfocus="searchFocus(this)" onblur="searchBlur(this)"
    onkeyup="searchChange(this)" onchange="searchChange(this)" alt="Search">
<input id="titlesearch" name="titlesearch" type="submit"
    value="Titles" alt="Search Titles">
<input id="fullsearch" name="fullsearch" type="submit"
    value="Text" alt="Search Full Text">
</div>
</form>
<script type="text/javascript">
<!--// Initialize search form
var f = document.getElementById('searchform');
f.getElementsByTagName('label')[0].style.display = 'none';
var e = document.getElementById('searchinput');
searchChange(e);
searchBlur(e);
//-->
</script>

<div id="logo"><a href="/pig/FrontPage">Pig Wiki</a></div>
<div id="username"><a href="/pig/PigLatin?action=login" id="login" rel="nofollow">Login</a></div>
<h1 id="locationline">

<span id="pagelocation"><a class="backlink" href="/pig/PigLatin?action=fullsearch&amp;context=180&amp;value=linkto%3A%22PigLatin%22" rel="nofollow" title="Click to do a full-text search for this title">PigLatin</a></span>
</h1>


<ul id="navibar">
<li class="wikilink"><a href="/pig/FrontPage">FrontPage</a></li><li class="wikilink"><a href="/pig/RecentChanges">RecentChanges</a></li><li class="wikilink"><a href="/pig/FindPage">FindPage</a></li><li class="wikilink"><a href="/pig/HelpContents">HelpContents</a></li><li class="current"><a href="/pig/PigLatin">PigLatin</a></li>
</ul>

<div id="pageline"><hr style="display:none;"></div>

<ul class="editbar"><li><span class="disabled">Immutable Page</span></li><li class="toggleCommentsButton" style="display:none;"><a href="#" class="nbcomment" onClick="toggleComments();return false;">Comments</a></li><li><a class="nbinfo" href="/pig/PigLatin?action=info" rel="nofollow">Info</a></li><li><a class="nbattachments" href="/pig/PigLatin?action=AttachFile" rel="nofollow">Attachments</a></li><li>
<form class="actionsmenu" method="GET" action="/pig/PigLatin">
<div>
    <label>More Actions:</label>
    <select name="action"
        onchange="if ((this.selectedIndex != 0) &&
                      (this.options[this.selectedIndex].disabled == false)) {
                this.form.submit();
            }
            this.selectedIndex = 0;">
        <option value="raw">Raw Text</option>
<option value="print">Print View</option>
<option value="RenderAsDocbook">Render as Docbook</option>
<option value="refresh">Delete Cache</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="SpellCheck">Check Spelling</option>
<option value="LikePages">Like Pages</option>
<option value="LocalSiteMap">Local Site Map</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="RenamePage" disabled class="disabled">Rename Page</option>
<option value="CopyPage">Copy Page</option>
<option value="DeletePage" disabled class="disabled">Delete Page</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="MyPages">My Pages</option>
<option value="show" disabled class="disabled">Subscribe User</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="show" disabled class="disabled">Remove Spam</option>
<option value="show" disabled class="disabled">Revert to this revision</option>
<option value="show" disabled class="disabled">Package Pages</option>
<option value="SyncPages">Sync Pages</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="Load">Load</option>
<option value="Save">Save</option>
    </select>
    <input type="submit" value="Do">
    
</div>
<script type="text/javascript">
<!--// Init menu
actionsMenuInit('More Actions:');
//-->
</script>
</form>
</li></ul>

</div>

<div id="page" lang="en" dir="ltr">
<div dir="ltr" id="content" lang="en"><span class="anchor" id="top"></span>
<span class="anchor" id="line-1"></span><p class="line867"><span class="anchor" id="Introduction_to_Pig_Latin"></span> <span class="anchor" id="line-2"></span><form method="get" action="/pig/PigLatin">
<div>
<input type="hidden" name="action" value="fullsearch">
<input type="hidden" name="titlesearch" value="0">
<input type="text" name="value" size="30" value="">
<input type="submit" value="Search Text">
<br>
<input type="checkbox" name="context" value="160" checked="checked">
Display context of search results
<br>
<input type="checkbox" name="case" value="1">
Case-sensitive searching
</div>
</form> <span class="anchor" id="line-3"></span><div class="table-of-contents"><p class="table-of-contents-heading">Contents<ol><li>
<a href="#Data_Types">Data Types</a></li><li>
<a href="#Data_Items">Data Items</a></li><li>
<a href="#Pig_Latin_Statements">Pig Latin Statements</a></li><li>
<a href="#Increasing_the_parallelism">Increasing the parallelism</a></li><li>
<a href="#Retrieving_Results">Retrieving Results</a></li><li>
<a href="#Debugging_Your_Scripts">Debugging Your Scripts</a></li><li>
<a href="#Working_with_Compressed_Files">Working with Compressed Files</a></li><li>
<a href="#Experimenting_with_Pig_Latin_syntax">Experimenting with Pig Latin syntax</a></li><li>
<a href="#Embedded_Pig_Latin">Embedded Pig Latin</a></li></ol></li></ol></li></ol></div> <span class="anchor" id="line-4"></span><span class="anchor" id="line-5"></span><p class="line867"><strong>THIS PAGE IS OBSOLETE. Please use Pig Latin documentation at <a class="http" href="http://hadoop.apache.org/pig/docs/r0.7.0/piglatin_ref1.html">http://hadoop.apache.org/pig/docs/r0.7.0/piglatin_ref1.html</a></strong> <span class="anchor" id="line-6"></span><span class="anchor" id="line-7"></span><p class="line867"><strong>Note:</strong> For Pig 0.2.0 or later, some content on this page may no longer be applicable. <span class="anchor" id="line-8"></span><span class="anchor" id="line-9"></span><p class="line874">So you want to learn Pig Latin. Welcome! Lets begin with the data types. <span class="anchor" id="line-10"></span><span class="anchor" id="line-11"></span><p class="line867"><span class="anchor" id="Data_Types"></span> <span class="anchor" id="line-12"></span>
<h3 id="Data_Types-1">Data Types</h3>
<span class="anchor" id="line-13"></span><span class="anchor" id="line-14"></span><p class="line874">Every piece of data in Pig has one of these four types: <span class="anchor" id="line-15"></span><span class="anchor" id="line-16"></span><ul><li><p class="line862">A <strong>Data Atom</strong> is a simple atomic data value. It is stored as a string but can be used as either a string or a number (see <a href="/pig/PigLatin#FILTER:_Getting_rid_of_data_you_are_not_interested_in_">Filters</a>). Examples of data atoms are 'apache.org' and '1.0'. <span class="anchor" id="line-17"></span></li><li><p class="line862">A <strong>Tuple</strong> is a data record consisting of a sequence of "fields". Each field is a piece of data of any type (data atom, tuple or data bag). We denote tuples with &lt; &gt; bracketing. An example of a tuple is &lt;apache.org,1.0&gt;. <span class="anchor" id="line-18"></span></li><li><p class="line862">A <strong>Data Bag</strong> is a set of tuples (duplicate tuples are allowed). You may think of it as a "table", except that Pig does not require that the tuple field  types match, or even that the tuples have the same number of fields! (It is up to you whether you want these properties.) We denote bags by { } bracketing. Thus, a data bag could be {&lt;apache.org,1.0&gt;, &lt;flickr.com,0.8&gt;} <span class="anchor" id="line-19"></span></li><li><p class="line862">A <strong>Data Map</strong> is a map from keys that are string literals to values that can be any data type. Think of it as a HashMap&lt;String,X&gt; where X can be any of the 4 pig data types. A Data Map supports the expected get and put interface. We denote maps by [ ] bracketing, with ":" separating the key and the value, and ";" separating successive key value pairs. Thus. a data map could be [ 'apache' : &lt;'search', 'news'&gt; ; 'cnn' : 'news' ]. Here, the key 'apache' is mapped to the tuple with 2 atomic fields 'search' and 'news', while the key 'cnn' is mapped to the data atom 'news'. <span class="anchor" id="line-20"></span><span class="anchor" id="line-21"></span></li></ul><p class="line867"><span class="anchor" id="Data_Items"></span> <span class="anchor" id="line-22"></span>
<h3 id="Data_Items-1">Data Items</h3>
<span class="anchor" id="line-23"></span><p class="line874">Data can be referred to in various powerful and convenient ways in Pig. Any data referred to is called a Data Item. We will illustrate all these ways by using the following example tuple. <span class="anchor" id="line-24"></span><span class="anchor" id="line-25"></span><p class="line867"><span class="anchor" id="line-26"></span><span class="anchor" id="line-27"></span><pre>t = &lt; 1, {&lt;2,3&gt;,&lt;4,6&gt;,&lt;5,7&gt;}, ['apache':'search']&gt;</pre><span class="anchor" id="line-28"></span><p class="line862">Thus, <tt class="backtick">t</tt> has 3 fields. Let these fields have names f1, f2, f3. Field f1 is an atom with value 1. Field f2 is a bag having 3 tuples. Field f3 is a data map having 1 key. <span class="anchor" id="line-29"></span><span class="anchor" id="line-30"></span><p class="line874">The following table lists the various methods of referring to data. <span class="anchor" id="line-31"></span><span class="anchor" id="line-32"></span><div><table><tbody><tr>  <td><p class="line862"> Method of Referring to Data </td>
  <td><p class="line862"> Example </td>
  <td><p class="line862"> Value for example tuple <tt class="backtick">t</tt> </td>
  <td><p class="line862"> Notes </td>
</tr>
<tr>  <td><span class="anchor" id="line-33"></span><p class="line862"> <strong>Constant</strong> </td>
  <td><p class="line862"> <strong>'1.0</strong>', or <strong>'apache.org</strong>', or <strong>'blah</strong>' </td>
  <td><p class="line862"> Value constant irrespective of <tt class="backtick">t</tt> </td>
  <td><p class="line862"> </td>
</tr>
<tr>  <td><span class="anchor" id="line-34"></span><p class="line862"> <strong>Field referred to by position</strong> </td>
  <td><p class="line862"> <strong>$0</strong> </td>
  <td><p class="line862"> Data Atom '1' </td>
  <td><p class="line862"> <strong>In Pig, positions start at 0 and not 1</strong> </td>
</tr>
<tr>  <td><span class="anchor" id="line-35"></span><p class="line862"> <strong>Field referred to by name</strong> </td>
  <td><p class="line862"> <strong>f2</strong></td>
  <td><p class="line862"> Bag {&lt;2,3&gt;,&lt;4,6&gt;,&lt;5,7&gt;} </td>
  <td><p class="line862"> </td>
</tr>
<tr>  <td><span class="anchor" id="line-36"></span><p class="line862"> <strong>Projection</strong> of another data item </td>
  <td><p class="line862"> <strong>f2.$0</strong> </td>
  <td><p class="line862"> Bag {&lt;2&gt;,&lt;4&gt;,&lt;5&gt;} - the bag f2 projected to the first field </td>
  <td><p class="line862"> </td>
</tr>
<tr>  <td><span class="anchor" id="line-37"></span><p class="line862"> <strong>Map Lookup</strong> against another data item </td>
  <td><p class="line862"> <strong>f3#'apache</strong>' </td>
  <td><p class="line862"> Data Atom 'search' </td>
  <td><p class="line862">User's responsibility to ensure that a lookup is written only against a data map, otherwise a runtime error is thrown. If the key being looked up does not exist, a Data Atom with an empty string is returned.</td>
</tr>
<tr>  <td><span class="anchor" id="line-38"></span><p class="line862"> <strong>Function</strong> applied to another data item </td>
  <td><p class="line862"> <strong>SUM(f2.$0)</strong> </td>
  <td><p class="line862"> 2+4+5 = 11 </td>
  <td><p class="line862"> SUM is a builtin Pig function. See <a href="/pig/PigFunctions">PigFunctions</a> for how to write your own functions </td>
</tr>
<tr>  <td><span class="anchor" id="line-39"></span><p class="line862"> <strong>Infix Expression</strong> of other data items </td>
  <td><p class="line862"> <strong>COUNT(f2) + f1 / '2.0</strong>' </td>
  <td><p class="line862"> 3 + 1 / 2.0 = 3.5 </td>
  <td><p class="line862">  </td>
</tr>
<tr>  <td><span class="anchor" id="line-40"></span><p class="line862"> <strong>Bincond</strong>, i.e., the value of the data item is chosen according to some condition </td>
  <td><p class="line862"> <strong>(f1 = =  '1' ? '2' : COUNT(f2))</strong> </td>
  <td><p class="line862"> '2' since f1=='1' is true. If f1 were != '1', then the value of this data item for t would be COUNT(f2)=3 </td>
  <td><p class="line862"> See <a href="/pig/PigLatin#Specifying_Conditions">Conditions</a> for what the format of the condition in the bincond can be </td>
</tr>
</tbody></table></div><span class="anchor" id="line-41"></span><span class="anchor" id="line-42"></span><span class="anchor" id="line-43"></span><p class="line867">
<h3 id="Pig_Latin_Statements">Pig Latin Statements</h3>
<span class="anchor" id="line-44"></span><span class="anchor" id="line-45"></span><p class="line862">A Pig Latin statement is a command that produces a <strong>Relation</strong>. A relation is simply a data bag with a name. That name is called the relation's <strong>alias</strong>. The simplest Pig Latin statement is LOAD, which reads a relation from a file in the file system. Other Pig Latin statements process one or more input relations, and produce a new relation as a result. <span class="anchor" id="line-46"></span><span class="anchor" id="line-47"></span><p class="line874">Starting with Pig 1.2 release due on 09/30/07, pig commands can span multiple lines and must include ";" at the end. <span class="anchor" id="line-48"></span><span class="anchor" id="line-49"></span><p class="line874">Examples: <span class="anchor" id="line-50"></span><span class="anchor" id="line-51"></span><p class="line867"><span class="anchor" id="line-52"></span><span class="anchor" id="line-53"></span><span class="anchor" id="line-54"></span><span class="anchor" id="line-55"></span><span class="anchor" id="line-56"></span><span class="anchor" id="line-57"></span><span class="anchor" id="line-58"></span><span class="anchor" id="line-59"></span><span class="anchor" id="line-60"></span><pre>grunt&gt; A = load 'mydata' using PigStorage()
as (a, b, c);
grunt&gt;B = group A by a;
grunt&gt; C = foreach B {
D = distinct A.b;
generate flatten(group), COUNT(D);
}
grunt&gt; </pre><span class="anchor" id="line-61"></span><span class="anchor" id="line-62"></span><p class="line867"><span class="anchor" id="LOAD:_Loading_data_from_a_file"></span> <span class="anchor" id="line-63"></span><span class="anchor" id="line-64"></span><p class="line867">
<h4 id="LOAD:_Loading_data_from_a_file-1">LOAD: Loading data from a file</h4>
<span class="anchor" id="line-65"></span><span class="anchor" id="line-66"></span><p class="line874">Before you can do any processing, you first need to load the data. This is done by the LOAD statement. Suppose we have a tab-delimited file called "myfile.txt" that contains a relation, whose contents are: <span class="anchor" id="line-67"></span><span class="anchor" id="line-68"></span><p class="line867"><span class="anchor" id="line-69"></span><span class="anchor" id="line-70"></span><span class="anchor" id="line-71"></span><span class="anchor" id="line-72"></span><span class="anchor" id="line-73"></span><span class="anchor" id="line-74"></span><span class="anchor" id="line-75"></span><pre>1    2    3
4    2    1
8    3    4
4    3    3
7    2    5
8    4    3</pre><span class="anchor" id="line-76"></span><span class="anchor" id="line-77"></span><p class="line874">Suppose we want to refer to the 3 fields as f1, f2, and f3. We can load this relation using the following command: <span class="anchor" id="line-78"></span><span class="anchor" id="line-79"></span><p class="line867"><span class="anchor" id="line-80"></span><span class="anchor" id="line-81"></span><pre>A = LOAD 'myfile.txt' USING PigStorage('\t') AS (f1,f2,f3);</pre><span class="anchor" id="line-82"></span><span class="anchor" id="line-83"></span><p class="line862">Here, PigStorage is the name of a "storage function" that takes care of parsing the file into a Pig relation. This storage function expects simple newline-separated records with delimiter-separated fields; it has one parameter, namely the field delimiter(s).   <span class="anchor" id="line-84"></span><span class="anchor" id="line-85"></span><p class="line874">Future Pig Latin commands can refer to the alias "A" and will receive data that has been loaded from "myfile.txt". A will contain this data: <span class="anchor" id="line-86"></span><span class="anchor" id="line-87"></span><p class="line867"><span class="anchor" id="line-88"></span><span class="anchor" id="line-89"></span><span class="anchor" id="line-90"></span><span class="anchor" id="line-91"></span><span class="anchor" id="line-92"></span><span class="anchor" id="line-93"></span><span class="anchor" id="line-94"></span><pre>&lt;1, 2, 3&gt;
&lt;4, 2, 1&gt;
&lt;8, 3, 4&gt;
&lt;4, 3, 3&gt;
&lt;7, 2, 5&gt;
&lt;8, 4, 3&gt;</pre><span class="anchor" id="line-95"></span><span class="anchor" id="line-96"></span><p class="line874">Notes: <span class="anchor" id="line-97"></span><ul><li>The storage function shown above is the default and can be omitted.  <span class="anchor" id="line-98"></span></li><li>In the current (1.2) and earlier releases, storage functions are case sensitive. This will get changes in the future releases. <span class="anchor" id="line-99"></span></li><li>If you don't want give names to fields, the AS clause can be omitted. You can refer to the fields by position, $0 for the first field and so on.  <span class="anchor" id="line-100"></span></li><li>If you do provide AS clause, you need to make sure to name all the fields in your data or you can get wrong results. <span class="anchor" id="line-101"></span></li><li><p class="line862">You can specify more complex schemas in the AS clause (see <a href="/pig/PigLatinSchemas">PigLatinSchemas</a>). <span class="anchor" id="line-102"></span></li><li><p class="line862">If your records are stored in some special format that our functions can't parse, you can of course write your own storage function (see <a href="/pig/PigFunctions">PigFunctions</a>). <span class="anchor" id="line-103"></span></li><li><p class="line862">In Pig, relations are <em>unordered</em>, which means we do not guarantee that tuples are processed in any particular order. (In fact, processing may be parallelized, in which case tuples are not processed according to <em>any</em> total ordering.) <span class="anchor" id="line-104"></span></li><li>If you are in hadoop mode and pass a directory name to LOAD, it will load all files within the directory.  (Throws an exception in local mode.) <span class="anchor" id="line-105"></span></li><li><p class="line862">You can use hadoop supported globbing to specify a file or list of files to load.  See <a class="http" href="http://lucene.apache.org/hadoop/api/org/apache/hadoop/fs/FileSystem.html#globPaths(org.apache.hadoop.fs.Path)the">hadoop glob documentation</a> for details on globbing syntax.  Globs can be used at the file system or directory levels.  (This functionality is available as of pig 1.1e.) <span class="anchor" id="line-106"></span><span class="anchor" id="line-107"></span><span class="anchor" id="line-108"></span></li></ul><p class="line867"><span class="anchor" id="FILTER:_Getting_rid_of_data_you_are_not_interested_in_"></span> <span class="anchor" id="line-109"></span>
<h4 id="FILTER:_Getting_rid_of_data_you_are_not_interested_in">FILTER: Getting rid of data you are not interested in</h4>
<span class="anchor" id="line-110"></span><p class="line874">Very often, the first thing that you want to do with data is to get rid of tuples that you are not interested in. This can be done by the filter statement. For example, <span class="anchor" id="line-111"></span><span class="anchor" id="line-112"></span><p class="line867"><span class="anchor" id="line-113"></span><span class="anchor" id="line-114"></span><pre>Y = FILTER A BY f1 == '8';</pre><span class="anchor" id="line-115"></span><span class="anchor" id="line-116"></span><p class="line874">The result is Y = <span class="anchor" id="line-117"></span><span class="anchor" id="line-118"></span><p class="line867"><span class="anchor" id="line-119"></span><span class="anchor" id="line-120"></span><span class="anchor" id="line-121"></span><pre>&lt;8, 3, 4&gt;
&lt;8, 4, 3&gt;</pre><span class="anchor" id="line-122"></span><span class="anchor" id="line-123"></span><p class="line867"><span class="anchor" id="Specifying_Conditions"></span> <span class="anchor" id="line-124"></span>
<h5 id="Specifying_Conditions-1">Specifying Conditions</h5>
<span class="anchor" id="line-125"></span><p class="line874">The condition following the keyword BY can be much more general than as shown above.  <span class="anchor" id="line-126"></span><ul><li>The logical connectives AND, OR and NOT can be used to build a condition from various atomic conditions.  <span class="anchor" id="line-127"></span></li><li><p class="line862">Each atomic condition can be of the form <tt class="backtick">&amp;lt;Data&nbsp;Item&amp;gt;&nbsp;&amp;lt;compOp&amp;gt;&nbsp;&amp;lt;Data&nbsp;Item&amp;gt;</tt> (see <a href="/pig/PigLatin#Data_Items">Data Items</a> for what the format of data items can be).  <span class="anchor" id="line-128"></span></li><li>The comparison operator compOp can be one of  <span class="anchor" id="line-129"></span><ul><li><p class="line891"><strong>==, &lt;nop&gt;!=, &gt;, &gt;=, &lt;, or &lt;=</strong> for <strong>numerical</strong> comparisons. <strong>Note that if these operators are used on non-numeric data, a runtime error will be thrown</strong>. <span class="anchor" id="line-130"></span></li><li><p class="line891"><strong>eq, neq, gt, gte, lt, or lte</strong> for string comparisons <span class="anchor" id="line-131"></span></li><li><p class="line891"><strong>matches</strong> for regular expression matching, e.g., $0 matches '.*apache.*'. The <a class="http" href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/Pattern.html">format</a> of regular expressions is that supported by Java. <span class="anchor" id="line-132"></span><span class="anchor" id="line-133"></span></li></ul></li></ul><p class="line874">Thus, a somewhat more complicated condition can be <span class="anchor" id="line-134"></span><span class="anchor" id="line-135"></span><span class="anchor" id="line-136"></span><pre>Y = FILTER A BY (f1 == '8') OR (NOT (f2+f3 &gt; f1));</pre><span class="anchor" id="line-137"></span><span class="anchor" id="line-138"></span><p class="line874">Note: <span class="anchor" id="line-139"></span><ul><li><p class="line862">If you want to get rid of specifc columns or fields, rather than whole tuples, you should use the <a href="/pig/PigLatin#FOREACH_..._GENERATE:_Applying_transformations_to_the_data">FOREACH</a> statement and not the filter statement. <span class="anchor" id="line-140"></span></li><li><p class="line862">If the builtin comparison operators are not sufficient for your needs, you can write your own <strong>filter function</strong> (see <a href="/pig/PigFunctions">PigFunctions</a> for details). Suppose you wrote a new equality function (say myEquals). Then the first example above can be written as <tt class="backtick">Y&nbsp;=&nbsp;FILTER&nbsp;A&nbsp;BY&nbsp;myEquals(f1,'8');</tt> <span class="anchor" id="line-141"></span><span class="anchor" id="line-142"></span></li></ul><p class="line867"><span class="anchor" id="COGROUP:_Getting_the_relevant_data_together"></span> <span class="anchor" id="line-143"></span>
<h4 id="COGROUP:_Getting_the_relevant_data_together-1">COGROUP: Getting the relevant data together</h4>
<span class="anchor" id="line-144"></span><span class="anchor" id="line-145"></span><p class="line874">We can group the tuples in A according to some specification. A simple specification is to group according to the value of one of the fields, e.g. the first field. This is done as follows: <span class="anchor" id="line-146"></span><span class="anchor" id="line-147"></span><p class="line867"><span class="anchor" id="line-148"></span><span class="anchor" id="line-149"></span><span class="anchor" id="line-150"></span><pre>X = GROUP A BY f1;
X = GROUP A BY (f1, f2 ..);</pre><span class="anchor" id="line-151"></span><span class="anchor" id="line-152"></span><p class="line862">The result of the group statement consists of one tuple for each group. The first field of the tuple has name <tt class="backtick">group</tt> and has the value on which the grouping has been performed, and the second field has name A and is a bag containing the tuples belonging to that group. Thus, X = : <span class="anchor" id="line-153"></span><span class="anchor" id="line-154"></span><p class="line867"><span class="anchor" id="line-155"></span><span class="anchor" id="line-156"></span><span class="anchor" id="line-157"></span><span class="anchor" id="line-158"></span><span class="anchor" id="line-159"></span><pre>&lt;1, {&lt;1, 2, 3&gt;}&gt;
&lt;4, {&lt;4, 2, 1&gt;, &lt;4, 3, 3&gt;}&gt;
&lt;7, {&lt;7, 2, 5&gt;}&gt;
&lt;8, {&lt;8, 3, 4&gt;, &lt;8, 4, 3&gt;}&gt;</pre><span class="anchor" id="line-160"></span><span class="anchor" id="line-161"></span><p class="line874">Suppose we have a second relation B = <span class="anchor" id="line-162"></span><span class="anchor" id="line-163"></span><p class="line867"><span class="anchor" id="line-164"></span><span class="anchor" id="line-165"></span><span class="anchor" id="line-166"></span><span class="anchor" id="line-167"></span><span class="anchor" id="line-168"></span><span class="anchor" id="line-169"></span><span class="anchor" id="line-170"></span><span class="anchor" id="line-171"></span><pre>&lt;2, 4&gt;
&lt;8, 9&gt;
&lt;1, 3&gt;
&lt;2, 7&gt;
&lt;2, 9&gt;
&lt;4, 6&gt;
&lt;4, 9&gt;</pre><span class="anchor" id="line-172"></span><span class="anchor" id="line-173"></span><p class="line862">We can <em>co-group</em> A and B, which means that we jointly group the tuples from A and B, using this command: <span class="anchor" id="line-174"></span><span class="anchor" id="line-175"></span><p class="line867"><span class="anchor" id="line-176"></span><span class="anchor" id="line-177"></span><pre>COGROUP A BY f1, B BY $0;</pre><span class="anchor" id="line-178"></span><span class="anchor" id="line-179"></span><p class="line874">You can co-group by multiple columns the same way as for group. <span class="anchor" id="line-180"></span><span class="anchor" id="line-181"></span><p class="line874">The result is: <span class="anchor" id="line-182"></span><span class="anchor" id="line-183"></span><p class="line867"><span class="anchor" id="line-184"></span><span class="anchor" id="line-185"></span><span class="anchor" id="line-186"></span><span class="anchor" id="line-187"></span><span class="anchor" id="line-188"></span><span class="anchor" id="line-189"></span><pre>&lt;1, {&lt;1, 2, 3&gt;}, {&lt;1, 3&gt;}&gt;
&lt;2, {}, {&lt;2, 4&gt;, &lt;2, 7&gt;, &lt;2, 9&gt;}&gt;
&lt;4, {&lt;4, 2, 1&gt;, &lt;4, 3, 3&gt;}, {&lt;4, 6&gt;,&lt;4, 9&gt;}&gt;
&lt;7, {&lt;7, 2, 5&gt;}, {}&gt;
&lt;8, {&lt;8, 3, 4&gt;, &lt;8, 4, 3&gt;}, {&lt;8, 9&gt;}&gt;</pre><span class="anchor" id="line-190"></span><span class="anchor" id="line-191"></span><p class="line862">Now, all of the original tuples whose first field is 1 are grouped together, the original tuples whose first value is 2 are together, and so on. Thus, similar to a group, the result of a co-group has one tuple for each group. The first field is called <tt class="backtick">group</tt> as before and contains the value on which grouping has been performed. Besides, every tuple has a bag for each relation being co-grouped (having the same name as the alias for that relation) that contains the tuples of that relation belonging to that group.  <span class="anchor" id="line-192"></span><span class="anchor" id="line-193"></span><p class="line862">Note that some of the bags are empty, which indicates that no tuples from the corresponding input belong to that group. If we only wish to see groups for which &lt;i&gt;both&lt;/i&gt; inputs have at least one tuple, we can write: <span class="anchor" id="line-194"></span><span class="anchor" id="line-195"></span><p class="line867"><span class="anchor" id="line-196"></span><span class="anchor" id="line-197"></span><pre>C = COGROUP A BY $0 INNER, B BY $0 INNER;</pre><span class="anchor" id="line-198"></span><span class="anchor" id="line-199"></span><p class="line874">The result is C =  <span class="anchor" id="line-200"></span><span class="anchor" id="line-201"></span><p class="line867"><span class="anchor" id="line-202"></span><span class="anchor" id="line-203"></span><span class="anchor" id="line-204"></span><span class="anchor" id="line-205"></span><pre>&lt;1, {&lt;1, 2, 3&gt;}, {&lt;1, 3&gt;}&gt;
&lt;4, {&lt;4, 2, 1&gt;, &lt;4, 3, 3&gt;}, {&lt;4, 6&gt;, &lt;4, 9&gt;}&gt;
&lt;8, {&lt;8, 3, 4&gt;, &lt;8, 4, 3&gt;}, {&lt;8, 9&gt;}&gt;</pre><span class="anchor" id="line-206"></span><span class="anchor" id="line-207"></span><p class="line874">The INNER keyword can be used asymmetrically, with the obvious meaning. <span class="anchor" id="line-208"></span><span class="anchor" id="line-209"></span><p class="line874">In addition to using columns to group the data, an arbitrary expression can be used: <span class="anchor" id="line-210"></span><span class="anchor" id="line-211"></span><p class="line867"><span class="anchor" id="line-212"></span><span class="anchor" id="line-213"></span><span class="anchor" id="line-214"></span><span class="anchor" id="line-215"></span><span class="anchor" id="line-216"></span><span class="anchor" id="line-217"></span><span class="anchor" id="line-218"></span><span class="anchor" id="line-219"></span><span class="anchor" id="line-220"></span><span class="anchor" id="line-221"></span><span class="anchor" id="line-222"></span><span class="anchor" id="line-223"></span><span class="anchor" id="line-224"></span><span class="anchor" id="line-225"></span><span class="anchor" id="line-226"></span><span class="anchor" id="line-227"></span><span class="anchor" id="line-228"></span><span class="anchor" id="line-229"></span><span class="anchor" id="line-230"></span><span class="anchor" id="line-231"></span><span class="anchor" id="line-232"></span><span class="anchor" id="line-233"></span><span class="anchor" id="line-234"></span><span class="anchor" id="line-235"></span><span class="anchor" id="line-236"></span><span class="anchor" id="line-237"></span><span class="anchor" id="line-238"></span><span class="anchor" id="line-239"></span><pre>grunt&gt; cat a        
r1      1       2
r2      2       1
r3      2       8
r4      4       4
grunt&gt; a = load 'a';
grunt&gt; b = group a by $1*$2;
grunt&gt; dump b;

------ MapReduce Job -----
Input: [/user/utkarsh/a:org.apache.pig.builtin.PigStorage()]
Map: [[*]]
Group: [GENERATE {[org.apache.pig.impl.builtin.MULTIPLY(GENERATE {[PROJECT
$1],[PROJECT $2]})],[*]}]
Combine: null
Reduce: null
Output: /tmp/temp1762405695/tmp1820603819:org.apache.pig.builtin.BinStorage
Split: null
Map parallelism: -1
Reduce parallelism: -1
Job jar size = 399671
Pig progress = 0%
Pig progress = 50%
Pig progress = 100%
(2.0, {(r1, 1, 2), (r2, 2, 1)})
(16.0, {(r3, 2, 8), (r4, 4, 4)})
grunt&gt; </pre><span class="anchor" id="line-240"></span><span class="anchor" id="line-241"></span><p class="line874">Note:  <span class="anchor" id="line-242"></span><ul><li><p class="line862">If we want all tuples to go to a single group, e.g., when doing aggregates across entire relations, we can write <tt class="backtick">GROUP&nbsp;A&nbsp;ALL</tt>. <span class="anchor" id="line-243"></span></li><li><p class="line862">Similarly, if we don't care about how grouping is performed, we can write <tt class="backtick">GROUP&nbsp;A&nbsp;ANY</tt>. In this case, the system will group tuples randomly into groups. <span class="anchor" id="line-244"></span></li><li><p class="line862">A relation can be grouped (or co-grouped) according to the composite value of multiple fields. Thus, we can write <tt class="backtick">COGROUP&nbsp;A&nbsp;BY&nbsp;(f1,f2),&nbsp;B&nbsp;BY&nbsp;($0,$1)</tt>. <span class="anchor" id="line-245"></span></li><li><p class="line862">If the criteria on which the grouping has to be performed is more complicated that just the values of some fields, you can write your own Group Function, say myGroupFunc. Then we can write <tt class="backtick">GROUP&nbsp;A&nbsp;by&nbsp;myGroupFunc(*)</tt>. Here "*" is a shorthand for all fields in the tuple. See <a href="/pig/PigFunctions">PigFunctions</a> for details. <span class="anchor" id="line-246"></span></li><li>A Group function can return multiple values for a tuple, i.e., a single tuple can belong to multiple groups.  <span class="anchor" id="line-247"></span><span class="anchor" id="line-248"></span><span class="anchor" id="line-249"></span></li></ul><p class="line867"><span class="anchor" id="FOREACH_..._GENERATE:_Applying_transformations_to_the_data"></span> <span class="anchor" id="line-250"></span>
<h4 id="FOREACH_..._GENERATE:_Applying_transformations_to_the_data-1">FOREACH ... GENERATE: Applying transformations to the data</h4>
<span class="anchor" id="line-251"></span><p class="line862">The FOREACH statement is used to apply transformations to the data and to generate new <a href="/pig/PigLatin#Data_Items">data items</a>. The basic syntax is <span class="anchor" id="line-252"></span><span class="anchor" id="line-253"></span><p class="line867"><tt class="backtick">&lt;output-alias&gt;&nbsp;=&nbsp;FOREACH&nbsp;&lt;input-alias&gt;&nbsp;GENERATE&nbsp;&lt;data-item&nbsp;1&gt;,&nbsp;&lt;data-item&nbsp;2&gt;,&nbsp;...&nbsp;;</tt> <span class="anchor" id="line-254"></span><span class="anchor" id="line-255"></span><p class="line874">For each tuple in the input alias, the data items are evaluated, and a tuple containing these data items is put in the output alias. We explain this statement in greater detail by giving examples of typical uses. <span class="anchor" id="line-256"></span><span class="anchor" id="line-257"></span><p class="line867"><span class="anchor" id="Projection"></span> <span class="anchor" id="line-258"></span>
<h5 id="Projection-1">Projection</h5>
<span class="anchor" id="line-259"></span><span class="anchor" id="line-260"></span><p class="line874">To select a subset of columns from a relation, use this command: <span class="anchor" id="line-261"></span><span class="anchor" id="line-262"></span><p class="line867"><span class="anchor" id="line-263"></span><span class="anchor" id="line-264"></span><pre>X = FOREACH A GENERATE f1, f2;</pre><span class="anchor" id="line-265"></span><span class="anchor" id="line-266"></span><p class="line874">X contains tuples from A, but with only the first and second fields present in each tuple. For the value of A given above, X = <span class="anchor" id="line-267"></span><span class="anchor" id="line-268"></span><p class="line867"><span class="anchor" id="line-269"></span><span class="anchor" id="line-270"></span><span class="anchor" id="line-271"></span><span class="anchor" id="line-272"></span><span class="anchor" id="line-273"></span><span class="anchor" id="line-274"></span><span class="anchor" id="line-275"></span><pre>&lt;1, 2&gt;
&lt;4, 2&gt;
&lt;8, 3&gt;
&lt;4, 3&gt;
&lt;7, 2&gt;
&lt;8, 4&gt;</pre><span class="anchor" id="line-276"></span><span class="anchor" id="line-277"></span><p class="line862">Projection elements can be given names using <tt class="backtick">as&nbsp;&lt;alias&gt;</tt> construct. This allows to refer to the fields of the produced expression by name in the later statements: <span class="anchor" id="line-278"></span><span class="anchor" id="line-279"></span><p class="line867"><span class="anchor" id="line-280"></span><span class="anchor" id="line-281"></span><span class="anchor" id="line-282"></span><pre>X = FOREACH A GENERATE f1+f2 as sumf1f2;
Y = FILTER X by sumf1f2 &gt; '5';</pre><span class="anchor" id="line-283"></span><span class="anchor" id="line-284"></span><p class="line874">As with SQL, asterisk (*) is shorthand for all columns. For example, with: <span class="anchor" id="line-285"></span><span class="anchor" id="line-286"></span><p class="line867"><span class="anchor" id="line-287"></span><span class="anchor" id="line-288"></span><pre>X = FOREACH A GENERATE *;</pre><span class="anchor" id="line-289"></span><span class="anchor" id="line-290"></span><p class="line874">X is identical to A. <span class="anchor" id="line-291"></span><span class="anchor" id="line-292"></span><p class="line867"><span class="anchor" id="Nested_projection"></span> <span class="anchor" id="line-293"></span>
<h5 id="Nested_projection-1">Nested projection</h5>
<span class="anchor" id="line-294"></span><span class="anchor" id="line-295"></span><p class="line874">If one of the fields in the input relation, is a non-atomic field, we can perform projection on that field. For example,  <span class="anchor" id="line-296"></span><span class="anchor" id="line-297"></span><p class="line867"><span class="anchor" id="line-298"></span><span class="anchor" id="line-299"></span><pre>FOREACH C GENERATE group, B.$1;</pre><span class="anchor" id="line-300"></span><span class="anchor" id="line-301"></span><p class="line874">The result is: <span class="anchor" id="line-302"></span><span class="anchor" id="line-303"></span><p class="line867"><span class="anchor" id="line-304"></span><span class="anchor" id="line-305"></span><span class="anchor" id="line-306"></span><span class="anchor" id="line-307"></span><pre>&lt;1, {&lt;3&gt;}&gt;
&lt;4, {&lt;6&gt;, &lt;9&gt;}&gt;
&lt;8, {&lt;9&gt;}&gt;</pre><span class="anchor" id="line-308"></span><span class="anchor" id="line-309"></span><p class="line874">Here is another example, in which multiple nested columns are retained: <span class="anchor" id="line-310"></span><span class="anchor" id="line-311"></span><p class="line867"><span class="anchor" id="line-312"></span><span class="anchor" id="line-313"></span><pre>FOREACH C GENERATE group, A.(f1, f2);</pre><span class="anchor" id="line-314"></span><span class="anchor" id="line-315"></span><p class="line874">The result is: <span class="anchor" id="line-316"></span><span class="anchor" id="line-317"></span><p class="line867"><span class="anchor" id="line-318"></span><span class="anchor" id="line-319"></span><span class="anchor" id="line-320"></span><span class="anchor" id="line-321"></span><pre>&lt;1, {&lt;1, 2&gt;}&gt;
&lt;4, {&lt;4, 2&gt;, &lt;4, 3&gt;}&gt;
&lt;8, {&lt;8, 3&gt;, &lt;8, 4&gt;}&gt;</pre><span class="anchor" id="line-322"></span><span class="anchor" id="line-323"></span><p class="line867"><span class="anchor" id="Applying_functions"></span> <span class="anchor" id="line-324"></span>
<h5 id="Applying_functions-1">Applying functions</h5>
<span class="anchor" id="line-325"></span><span class="anchor" id="line-326"></span><p class="line874">Pig has a number of built-in functions. An example is the SUM() function, which takes the sum of a set of numbers in a bag. For example: <span class="anchor" id="line-327"></span><span class="anchor" id="line-328"></span><p class="line867"><span class="anchor" id="line-329"></span><span class="anchor" id="line-330"></span><pre>FOREACH C GENERATE group, SUM(A.f1);</pre><span class="anchor" id="line-331"></span><span class="anchor" id="line-332"></span><p class="line874">gives: <span class="anchor" id="line-333"></span><span class="anchor" id="line-334"></span><p class="line867"><span class="anchor" id="line-335"></span><span class="anchor" id="line-336"></span><span class="anchor" id="line-337"></span><span class="anchor" id="line-338"></span><pre>&lt;1, 1&gt;
&lt;4, 8&gt;
&lt;8, 16&gt;</pre><span class="anchor" id="line-339"></span><span class="anchor" id="line-340"></span><p class="line862">You may also register your own function with Pig, and refer to it in Pig Latin commands. See <a href="/pig/PigFunctions">PigFunctions</a>. <span class="anchor" id="line-341"></span><span class="anchor" id="line-342"></span><p class="line867"><em><strong>note:</em></strong> <strong>In Pig, all functions, e.g., COUNT() and SUM(), are <em>case-sensitive</em></strong> (this is true for built-in functions as well as user-supplied functions). <span class="anchor" id="line-343"></span><span class="anchor" id="line-344"></span><p class="line867"><span class="anchor" id="Flattening"></span> <span class="anchor" id="line-345"></span>
<h5 id="Flattening-1">Flattening</h5>
<span class="anchor" id="line-346"></span><span class="anchor" id="line-347"></span><p class="line874">Sometimes we want to eliminate nesting. This can be accomplished via the FLATTEN keyword which can be attached before any valid data item. For example: <span class="anchor" id="line-348"></span><span class="anchor" id="line-349"></span><p class="line867"><span class="anchor" id="line-350"></span><span class="anchor" id="line-351"></span><pre>FOREACH C GENERATE group, FLATTEN(A);</pre><span class="anchor" id="line-352"></span><span class="anchor" id="line-353"></span><p class="line874">yields: <span class="anchor" id="line-354"></span><span class="anchor" id="line-355"></span><p class="line867"><span class="anchor" id="line-356"></span><span class="anchor" id="line-357"></span><span class="anchor" id="line-358"></span><span class="anchor" id="line-359"></span><span class="anchor" id="line-360"></span><span class="anchor" id="line-361"></span><pre>&lt;1, 1, 2, 3&gt;
&lt;4, 4, 2, 1&gt;
&lt;4, 4, 3, 3&gt;
&lt;8, 8, 3, 4&gt;
&lt;8, 8, 4, 3&gt;</pre><span class="anchor" id="line-362"></span><span class="anchor" id="line-363"></span><p class="line874">As another example, <span class="anchor" id="line-364"></span><span class="anchor" id="line-365"></span><p class="line867"><span class="anchor" id="line-366"></span><span class="anchor" id="line-367"></span><pre>FOREACH C GENERATE group, FLATTEN(A.f3);</pre><span class="anchor" id="line-368"></span><span class="anchor" id="line-369"></span><p class="line874">yields: <span class="anchor" id="line-370"></span><span class="anchor" id="line-371"></span><p class="line867"><span class="anchor" id="line-372"></span><span class="anchor" id="line-373"></span><span class="anchor" id="line-374"></span><span class="anchor" id="line-375"></span><span class="anchor" id="line-376"></span><span class="anchor" id="line-377"></span><pre>&lt;1, 3&gt;
&lt;4, 1&gt;
&lt;4, 3&gt;
&lt;8, 4&gt;
&lt;8, 3&gt;</pre><span class="anchor" id="line-378"></span><span class="anchor" id="line-379"></span><p class="line874">As a final example, <span class="anchor" id="line-380"></span><span class="anchor" id="line-381"></span><p class="line867"><span class="anchor" id="line-382"></span><span class="anchor" id="line-383"></span><pre>FOREACH C GENERATE flatten(A.(f1, f2)), flatten(B.$1);</pre><span class="anchor" id="line-384"></span><span class="anchor" id="line-385"></span><p class="line874">yields: <span class="anchor" id="line-386"></span><span class="anchor" id="line-387"></span><p class="line867"><span class="anchor" id="line-388"></span><span class="anchor" id="line-389"></span><span class="anchor" id="line-390"></span><span class="anchor" id="line-391"></span><span class="anchor" id="line-392"></span><span class="anchor" id="line-393"></span><span class="anchor" id="line-394"></span><span class="anchor" id="line-395"></span><pre>&lt;1, 2, 3&gt;
&lt;4, 2, 6&gt;
&lt;4, 3, 6&gt;
&lt;4, 2, 9&gt;
&lt;4, 3, 9&gt;
&lt;8, 3, 9&gt;
&lt;8, 4, 9&gt;</pre><span class="anchor" id="line-396"></span><span class="anchor" id="line-397"></span><p class="line862">Note that for the group '4' in C, there were 2 tuples each in the bags A and B. Thus, when both the bags are flattened, the cross product of these tuples is returned, i.e., the tuples  &lt;4, 2, 6&gt;, &lt;4, 3, 6&gt;, &lt;4, 2, 9&gt;, and &lt;4, 3, 9&gt; in the result. <span class="anchor" id="line-398"></span><span class="anchor" id="line-399"></span><p class="line867"><span class="anchor" id="Joining"></span> <span class="anchor" id="line-400"></span>
<h5 id="Joining-1">Joining</h5>
<span class="anchor" id="line-401"></span><span class="anchor" id="line-402"></span><p class="line874">The equi-join of A and B on column 0 can be expressed as follows: <span class="anchor" id="line-403"></span><span class="anchor" id="line-404"></span><p class="line867"><span class="anchor" id="line-405"></span><span class="anchor" id="line-406"></span><pre>JOIN A BY $0, B BY $0;</pre><span class="anchor" id="line-407"></span><span class="anchor" id="line-408"></span><p class="line874">which is equivalent to: <span class="anchor" id="line-409"></span><span class="anchor" id="line-410"></span><p class="line867"><span class="anchor" id="line-411"></span><span class="anchor" id="line-412"></span><span class="anchor" id="line-413"></span><pre>X = COGROUP A BY $0 INNER, B BY $0 INNER;
FOREACH X GENERATE FLATTEN(A), FLATTEN(B);</pre><span class="anchor" id="line-414"></span><span class="anchor" id="line-415"></span><p class="line874">The result is: <span class="anchor" id="line-416"></span><span class="anchor" id="line-417"></span><p class="line867"><span class="anchor" id="line-418"></span><span class="anchor" id="line-419"></span><span class="anchor" id="line-420"></span><span class="anchor" id="line-421"></span><span class="anchor" id="line-422"></span><span class="anchor" id="line-423"></span><span class="anchor" id="line-424"></span><span class="anchor" id="line-425"></span><pre>&lt;1, 2, 3, 1, 3&gt;
&lt;4, 2, 1, 4, 6&gt;
&lt;4, 3, 3, 4, 6&gt;
&lt;4, 2, 1, 4, 9&gt;
&lt;4, 3, 3, 4, 9&gt;
&lt;8, 3, 4, 8, 9&gt;
&lt;8, 4, 3, 8, 9&gt;</pre><span class="anchor" id="line-426"></span><span class="anchor" id="line-427"></span><p class="line867">&lt;i&gt;Note:&lt;/i&gt; On flattening, we might end with fields that have the same name but which came from different tables. They are disambiguated by prepending <tt class="backtick">&lt;alias&gt;::</tt> to their names. See <a href="/pig/PigLatinSchemas">PigLatinSchemas</a>. <span class="anchor" id="line-428"></span><span class="anchor" id="line-429"></span><p class="line867"><span class="anchor" id="ORDER:_Sorting_data_according_to_some_fields"></span> <span class="anchor" id="line-430"></span>
<h4 id="ORDER:_Sorting_data_according_to_some_fields-1">ORDER: Sorting data according to some fields</h4>
<span class="anchor" id="line-431"></span><p class="line874">We can sort the contents of any alias according to any set of columns. For example, <span class="anchor" id="line-432"></span><span class="anchor" id="line-433"></span><p class="line867"><span class="anchor" id="line-434"></span><span class="anchor" id="line-435"></span><pre>X = ORDER A BY $2;</pre><span class="anchor" id="line-436"></span><span class="anchor" id="line-437"></span><p class="line874">One possible output (since ties are resolved arbitrarily) is X = <span class="anchor" id="line-438"></span><span class="anchor" id="line-439"></span><span class="anchor" id="line-440"></span><span class="anchor" id="line-441"></span><span class="anchor" id="line-442"></span><span class="anchor" id="line-443"></span><span class="anchor" id="line-444"></span><span class="anchor" id="line-445"></span><pre>&lt;4, 2, 1&gt;
&lt;1, 2, 3&gt;
&lt;4, 3, 3&gt;
&lt;8, 4, 3&gt;
&lt;8, 3, 4&gt;
&lt;7, 2, 5&gt;</pre><span class="anchor" id="line-446"></span><span class="anchor" id="line-447"></span><p class="line874">Notes: <span class="anchor" id="line-448"></span><ul><li>From the point of view of the Pig data model, A and X contain the same thing (since we mentioned earlier that relations are logically unordered). If you process X further, there is no guarantee that tuples will be processes in order. <span class="anchor" id="line-449"></span></li><li><p class="line862">However, the only guarantee is that if we retrieve the contents of X (see <a href="/pig/PigLatin#Retrieving_Results">Retreiving Results</a>), they are guaranteed to be in order of $2 (the third field). <span class="anchor" id="line-450"></span></li><li><p class="line862">To sort according to the combination of all columns, you can write <tt class="backtick">ORDER&nbsp;A&nbsp;by&nbsp;*</tt>  <span class="anchor" id="line-451"></span><span class="anchor" id="line-452"></span></li></ul><p class="line867"><span class="anchor" id="DISTINCT:_Eliminating_duplicates_in_data"></span> <span class="anchor" id="line-453"></span>
<h4 id="DISTINCT:_Eliminating_duplicates_in_data-1">DISTINCT: Eliminating duplicates in data</h4>
<span class="anchor" id="line-454"></span><p class="line874">We can eliminate duplicates in the contents of any alias. For example, suppose we first say <span class="anchor" id="line-455"></span><span class="anchor" id="line-456"></span><p class="line867"><span class="anchor" id="line-457"></span><span class="anchor" id="line-458"></span><pre>X = FOREACH A GENERATE $2;</pre><span class="anchor" id="line-459"></span><span class="anchor" id="line-460"></span><p class="line874">As we know, this will result in  X = <span class="anchor" id="line-461"></span><span class="anchor" id="line-462"></span><p class="line867"><span class="anchor" id="line-463"></span><span class="anchor" id="line-464"></span><span class="anchor" id="line-465"></span><span class="anchor" id="line-466"></span><span class="anchor" id="line-467"></span><span class="anchor" id="line-468"></span><span class="anchor" id="line-469"></span><pre>&lt;3&gt;
&lt;1&gt;
&lt;4&gt;
&lt;3&gt;
&lt;5&gt;
&lt;3&gt;</pre><span class="anchor" id="line-470"></span><span class="anchor" id="line-471"></span><p class="line874">Now, if we say <span class="anchor" id="line-472"></span><span class="anchor" id="line-473"></span><p class="line867"><span class="anchor" id="line-474"></span><span class="anchor" id="line-475"></span><pre>Y = DISTINCT X;</pre><span class="anchor" id="line-476"></span><span class="anchor" id="line-477"></span><p class="line874">The output is Y = <span class="anchor" id="line-478"></span><span class="anchor" id="line-479"></span><p class="line867"><span class="anchor" id="line-480"></span><span class="anchor" id="line-481"></span><span class="anchor" id="line-482"></span><span class="anchor" id="line-483"></span><span class="anchor" id="line-484"></span><pre>&lt;1&gt;
&lt;3&gt;
&lt;4&gt;
&lt;5&gt;</pre><span class="anchor" id="line-485"></span><span class="anchor" id="line-486"></span><p class="line874">Notes: <span class="anchor" id="line-487"></span><ul><li>Note that original order is not preserved (another illustration of the fact that Pig relations are unordered). In fact, to eliminate duplicates, the input will be first sorted.  <span class="anchor" id="line-488"></span></li><li><p class="line862">You can <strong>not</strong> request for distinct on a subset of the columns. This can be done by <a href="/pig/PigLatin#Projection">projection</a> followed by the DISTINCT statement as in the above example. <span class="anchor" id="line-489"></span><span class="anchor" id="line-490"></span></li></ul><p class="line867"><span class="anchor" id="STREAMING:_Using_Custom_Code_with_Pig"></span> <span class="anchor" id="line-491"></span>
<h4 id="STREAM:_Using_Custom_Code_with_Pig">STREAM: Using Custom Code with Pig</h4>
<span class="anchor" id="line-492"></span><span class="anchor" id="line-493"></span><p class="line862">This is a recent addition to the language. It allows to add custom processing into Pig's execution pipeline. The details can be found in <a href="/pig/PigStreamingFunctionalSpec">PigStreamingFunctionalSpec</a>. <span class="anchor" id="line-494"></span><span class="anchor" id="line-495"></span><p class="line867"><span class="anchor" id="CROSS:_Computing_the_cross_product_of_multiple_relations"></span> <span class="anchor" id="line-496"></span>
<h4 id="CROSS:_Computing_the_cross_product_of_multiple_relations-1">CROSS: Computing the cross product of multiple relations</h4>
<span class="anchor" id="line-497"></span><span class="anchor" id="line-498"></span><p class="line874">To compute the cross product (also known as "cartesian product") of two or more relations, use: <span class="anchor" id="line-499"></span><span class="anchor" id="line-500"></span><p class="line867"><span class="anchor" id="line-501"></span><span class="anchor" id="line-502"></span><pre>X = CROSS A, B;</pre><span class="anchor" id="line-503"></span><span class="anchor" id="line-504"></span><p class="line874">Based on the values of A and B given earlier in the document, the result is X = <span class="anchor" id="line-505"></span><span class="anchor" id="line-506"></span><p class="line867"><span class="anchor" id="line-507"></span><span class="anchor" id="line-508"></span><span class="anchor" id="line-509"></span><span class="anchor" id="line-510"></span><span class="anchor" id="line-511"></span><span class="anchor" id="line-512"></span><span class="anchor" id="line-513"></span><span class="anchor" id="line-514"></span><span class="anchor" id="line-515"></span><span class="anchor" id="line-516"></span><span class="anchor" id="line-517"></span><pre>&lt;1, 2, 3, 2, 4&gt;
&lt;1, 2, 3, 8, 9&gt;
&lt;1, 2, 3, 1, 3&gt;
&lt;1, 2, 3, 2, 7&gt;
&lt;1, 2, 3, 2, 9&gt;
&lt;1, 2, 3, 4, 6&gt;
&lt;1, 2, 3, 4, 9&gt;
&lt;4, 2, 1, 2, 4&gt;
&lt;4, 2, 1, 8, 9&gt;
...</pre><span class="anchor" id="line-518"></span><span class="anchor" id="line-519"></span><p class="line874">Notes: <span class="anchor" id="line-520"></span><ul><li>This is an expensive operation and should not be usually necessary. <span class="anchor" id="line-521"></span><span class="anchor" id="line-522"></span></li></ul><p class="line867"><span class="anchor" id="UNION:_Computing_the_union_of_multiple_relations"></span> <span class="anchor" id="line-523"></span>
<h4 id="UNION:_Computing_the_union_of_multiple_relations-1">UNION: Computing the union of multiple relations</h4>
<span class="anchor" id="line-524"></span><span class="anchor" id="line-525"></span><p class="line874">We can vertically glue together contents of multiple aliases into a single alias by the UNION command. For example, <span class="anchor" id="line-526"></span><span class="anchor" id="line-527"></span><p class="line867"><span class="anchor" id="line-528"></span><span class="anchor" id="line-529"></span><pre>X = UNION A, B;</pre><span class="anchor" id="line-530"></span><span class="anchor" id="line-531"></span><p class="line874">The result is X = <span class="anchor" id="line-532"></span><span class="anchor" id="line-533"></span><p class="line867"><span class="anchor" id="line-534"></span><span class="anchor" id="line-535"></span><span class="anchor" id="line-536"></span><span class="anchor" id="line-537"></span><span class="anchor" id="line-538"></span><span class="anchor" id="line-539"></span><span class="anchor" id="line-540"></span><span class="anchor" id="line-541"></span><span class="anchor" id="line-542"></span><span class="anchor" id="line-543"></span><span class="anchor" id="line-544"></span><span class="anchor" id="line-545"></span><span class="anchor" id="line-546"></span><span class="anchor" id="line-547"></span><pre>&lt;1, 2, 3&gt;
&lt;4, 2, 1&gt;
&lt;8, 3, 4&gt;
&lt;4, 3, 3&gt;
&lt;7, 2, 5&gt;
&lt;8, 4, 3&gt;
&lt;2, 4&gt;
&lt;8, 9&gt;
&lt;1, 3&gt;
&lt;2, 7&gt;
&lt;2, 9&gt;
&lt;4, 6&gt;
&lt;4, 9&gt;</pre><span class="anchor" id="line-548"></span><span class="anchor" id="line-549"></span><p class="line874">Notes: <span class="anchor" id="line-550"></span><ul><li>UNION is not order-preserving. The inputs are interpreted as unordered bag of tuples and the output union is also an unordered bag. <span class="anchor" id="line-551"></span></li><li>UNION does not ensure (like in databases) that the tuples all adhere to the same schema, or even that they have the same number of fields, as in the above example. However, in the typical case, it should be so, and it is the user's responsibility to  <span class="anchor" id="line-552"></span><ul><li>either ensure the same kind of tuples in all aliases being unioned, or  <span class="anchor" id="line-553"></span></li><li>be able to handle the different kinds of tuples while processing the result of the union. <span class="anchor" id="line-554"></span></li></ul></li><li>UNION does not eliminate duplicate tuples. <span class="anchor" id="line-555"></span><span class="anchor" id="line-556"></span></li></ul><p class="line867"><span class="anchor" id="SPLIT:_Separating_data_into_different_relations"></span> <span class="anchor" id="line-557"></span>
<h4 id="SPLIT:_Separating_data_into_different_relations-1">SPLIT: Separating data into different relations</h4>
<span class="anchor" id="line-558"></span><p class="line874">The SPLIT statement, in some sense, is the converse of the UNION statement. It is used to partition the contents of a relation into multiple relations based on desired conditions.  <span class="anchor" id="line-559"></span><span class="anchor" id="line-560"></span><span class="anchor" id="line-561"></span><p class="line874">An example of a SPLIT statement is the following, <span class="anchor" id="line-562"></span><span class="anchor" id="line-563"></span><p class="line867"><span class="anchor" id="line-564"></span><span class="anchor" id="line-565"></span><pre>SPLIT A INTO X IF $0 &lt; 7, Y IF ($0 &gt; 2 AND $0&lt;&gt; 7);</pre><span class="anchor" id="line-566"></span><span class="anchor" id="line-567"></span><p class="line874">The output is  <span class="anchor" id="line-568"></span><span class="anchor" id="line-569"></span><p class="line867"><span class="anchor" id="line-570"></span><span class="anchor" id="line-571"></span><span class="anchor" id="line-572"></span><span class="anchor" id="line-573"></span><span class="anchor" id="line-574"></span><span class="anchor" id="line-575"></span><span class="anchor" id="line-576"></span><span class="anchor" id="line-577"></span><span class="anchor" id="line-578"></span><span class="anchor" id="line-579"></span><span class="anchor" id="line-580"></span><span class="anchor" id="line-581"></span><span class="anchor" id="line-582"></span><pre>X = 
&lt;1, 2, 3&gt;
&lt;4, 2, 1&gt;
&lt;4, 3, 3&gt;

and 

Y = 
&lt;4, 2, 1&gt;
&lt;8, 3, 4&gt;
&lt;4, 3, 3&gt;
&lt;8, 4, 3&gt;</pre><span class="anchor" id="line-583"></span><span class="anchor" id="line-584"></span><p class="line874">Notes: <span class="anchor" id="line-585"></span><ul><li>This construct is useful if you want to logically output multiple things from your function. You can then attach a field to the output of your function, and later split on that field to get the multiple outputs. <span class="anchor" id="line-586"></span></li><li><p class="line862">One tuple can go to multiple partitions, e.g., the &lt;4, 2, 1&gt; tuple above. <span class="anchor" id="line-587"></span></li><li><p class="line862">A tuple might also go to none of the partitions, if it doesn't satisfy any of the conditions, e.g., the &lt;7, 2, 5&gt; tuple above. <span class="anchor" id="line-588"></span></li><li><p class="line891"><a href="/pig/PigLatin#Specifying_Conditions">Conditions</a> can be specified as mentioned in the Filter statement. <span class="anchor" id="line-589"></span><span class="anchor" id="line-590"></span><span class="anchor" id="line-591"></span></li></ul><p class="line867"><span class="anchor" id="Nested_Operations_in_FOREACH...GENERATE"></span> <span class="anchor" id="line-592"></span>
<h4 id="Nested_Operations_in_FOREACH...GENERATE-1">Nested Operations in FOREACH...GENERATE</h4>
<span class="anchor" id="line-593"></span><p class="line862">If one of the fields in the input relation is a data bag, the nested data bag can be treated as an <strong>inner</strong> or a <strong>nested relation</strong>. Consequently, in a FOREACH...GENERATE statement, we can perform many of the operations on this nested relation that we can on a regular relation.  <span class="anchor" id="line-594"></span><span class="anchor" id="line-595"></span><p class="line862">The specific operations that we can do on the nested relations are <a href="/pig/PigLatin#FILTER:_Getting_rid_of_data_you_are_not_interested_in_">FILTER</a>, <a href="/pig/PigLatin#ORDER:_Sorting_data_according_to_some_fields">ORDER</a>, and <a href="/pig/PigLatin#DISTINCT:_Eliminating_duplicates_in_data">DISTINCT</a>. Note that we do not allow FOREACH...GENERATE on the nested relation, since that leads to the possibility of arbitrary number of nesting levels.  <span class="anchor" id="line-596"></span><span class="anchor" id="line-597"></span><p class="line874">The syntax for doing the nested operations is very similar to the regular syntax and is demonstrated by the following example: <span class="anchor" id="line-598"></span><span class="anchor" id="line-599"></span><p class="line867"><span class="anchor" id="line-600"></span><span class="anchor" id="line-601"></span><span class="anchor" id="line-602"></span><span class="anchor" id="line-603"></span><span class="anchor" id="line-604"></span><span class="anchor" id="line-605"></span><span class="anchor" id="line-606"></span><span class="anchor" id="line-607"></span><span class="anchor" id="line-608"></span><pre>W = LOAD '...' AS (url, outlink);
G = GROUP W by url;
R = FOREACH G {
        FW = FILTER W BY outlink eq 'www.apache.org';
        PW = FW.outlink;
        DW = DISTINCT PW;
        GENERATE group, COUNT(DW);
}</pre><span class="anchor" id="line-609"></span><span class="anchor" id="line-610"></span><p class="line874">Notes: <span class="anchor" id="line-611"></span><ul><li>Note the nested block within the FOREACH...GENERATE statement. The syntax is the same as regular Pig Latin syntax. <span class="anchor" id="line-612"></span></li><li>The last statement in the nested block must be a GENERATE. <span class="anchor" id="line-613"></span></li><li>Within the nested block, one can do nested filering, projection, sorting, and duplicate elimination. <span class="anchor" id="line-614"></span><span class="anchor" id="line-615"></span><span class="anchor" id="line-616"></span></li></ul><p class="line867"><span class="anchor" id="Increasing_the_parallelism"></span> <span class="anchor" id="line-617"></span>
<h3 id="Increasing_the_parallelism-1">Increasing the parallelism</h3>
<span class="anchor" id="line-618"></span><span class="anchor" id="line-619"></span><p class="line874">To increase the parallelism of a job, include the PARALLEL clause in any of your Pig latin statements. <span class="anchor" id="line-620"></span><span class="anchor" id="line-621"></span><p class="line862">For example, <tt class="backtick">J&nbsp;=&nbsp;JOIN&nbsp;A&nbsp;by&nbsp;url,&nbsp;B&nbsp;by&nbsp;url&nbsp;PARALLEL&nbsp;50</tt>  <span class="anchor" id="line-622"></span><span class="anchor" id="line-623"></span><p class="line874">Couple of notes: <span class="anchor" id="line-624"></span><ul><li>PARALLEL keyword only effects the number of reduce tasks. Map parallelism is determined by the input file, one map for each HDFS block. <span class="anchor" id="line-625"></span></li><li>Degree of parallelism depends on the size of your cluster.  At most 2 map or reduce tasks can run on a machine simultaneously. So if you ask for 40 machines, you might ask for a 1000 reduces, but they will still run 80 at a time. The example above would generate 50 reduce jobs if your cluster has at least 25 machines. <span class="anchor" id="line-626"></span></li><li>When you don’t specify parallel, you still get the same map parallelism but only 1 reduce task. <span class="anchor" id="line-627"></span><span class="anchor" id="line-628"></span></li></ul><p class="line867"><span class="anchor" id="Retrieving_Results"></span> <span class="anchor" id="line-629"></span>
<h3 id="Retrieving_Results-1">Retrieving Results</h3>
<span class="anchor" id="line-630"></span><span class="anchor" id="line-631"></span><p class="line874">There are several convenient ways to retrieve the contents in a particular alias:  <span class="anchor" id="line-632"></span><span class="anchor" id="line-633"></span><ul><li><p class="line862">If you are issuing PigLatin through Grunt <span class="anchor" id="line-634"></span><ol type="1"><li><p class="line862">The command <tt class="backtick">dump&nbsp;&lt;alias&gt;</tt> will dump the contents of the alias on your screen. This is typically useful only as a sanity check to see if the correct results are being produced.  <span class="anchor" id="line-635"></span></li><li><p class="line862">The command <tt class="backtick">store&nbsp;&lt;alias&gt;&nbsp;into&nbsp;&lt;filename&gt;&nbsp;[&nbsp;using&nbsp;&lt;store&nbsp;function&nbsp;spec&gt;]</tt> will store the contents of the alias into the requested filename using the requested storage function (or the default function PigStorage if the storage function is not specified. ) <span class="anchor" id="line-636"></span><span class="anchor" id="line-637"></span></li></ol></li><li class="gap"><p class="line862">If you are issuing PigLatin through your java program <span class="anchor" id="line-638"></span><ol type="1"><li><p class="line862">The call <tt class="backtick">PigServer.openIterator(String&nbsp;alias)</tt> will give you an iterator over the contents of the alias. You may find it useful to know the <a href="/pig/PigDataTypeApis">PigDataTypeApis</a> to process these contents. <span class="anchor" id="line-639"></span></li><li><p class="line862">The call <tt class="backtick">PigServer.store(String&nbsp;alias,&nbsp;String&nbsp;fileName,&nbsp;String&nbsp;storeFunc)</tt> will (like the store command in grunt) store the contents of the alias into the requested filename using the requested storage function (or the default function PigStorage if the storage function is not specified). <span class="anchor" id="line-640"></span><span class="anchor" id="line-641"></span></li></ol></li></ul><p class="line874">Note <span class="anchor" id="line-642"></span><ul><li>In the current (1.2) and earlier releases, storage functions are case sensitive. This will get changes in the future releases. <span class="anchor" id="line-643"></span></li><li><p class="line891">PigStorage can only store flat tuples, i.e., tuples having atomic fields. If you want to store nested data, use BinStorage instead. <span class="anchor" id="line-644"></span><span class="anchor" id="line-645"></span></li></ul><p class="line867"><span class="anchor" id="Debugging_Your_Scripts"></span> <span class="anchor" id="line-646"></span>
<h3 id="Debugging_Your_Scripts-1">Debugging Your Scripts</h3>
<span class="anchor" id="line-647"></span><span class="anchor" id="line-648"></span><p class="line874">Pig provides several ways to assist in building and validating your script. <span class="anchor" id="line-649"></span><span class="anchor" id="line-650"></span><ul><li><p class="line891"><tt class="backtick">describe</tt> command allows to review schema of a particular relation. <span class="anchor" id="line-651"></span></li><li><p class="line891"><tt class="backtick">explain</tt> command shows logical and physical execution plan to compute a particular relation. <span class="anchor" id="line-652"></span></li><li><p class="line891"><tt class="backtick">illustrate</tt> command shows step-by-step execution of your script on a small data sample. <span class="anchor" id="line-653"></span><span class="anchor" id="line-654"></span></li></ul><p class="line862">All three commands are described in <a class="http" href="http://wiki.apache.org/pig/Grunt">Grunt Manual</a>. <span class="anchor" id="line-655"></span><span class="anchor" id="line-656"></span><p class="line867"><span class="anchor" id="Working_with_compressed_files"></span> <span class="anchor" id="line-657"></span>
<h3 id="Working_with_Compressed_Files">Working with Compressed Files</h3>
<span class="anchor" id="line-658"></span><span class="anchor" id="line-659"></span><p class="line867">
<h4 id="Compressed_Input">Compressed Input</h4>
<span class="anchor" id="line-660"></span><p class="line874">Compressed files are difficult to process in parallel, since they cannot, in general, be split into fragments and independently decompressed. However, if the compression is block-oriented (e.g. bz2), the splitting and parallel processing is easy to do. <span class="anchor" id="line-661"></span><span class="anchor" id="line-662"></span><p class="line874">Pig has inbuilt support for processing .bz2 files in parallel (.gz support is coming soon). If the input file name extension is .bz2, Pig decompresses the file on the fly and passes the decompressed input stream to your load function. For example, <span class="anchor" id="line-663"></span><span class="anchor" id="line-664"></span><p class="line867"><span class="anchor" id="line-665"></span><span class="anchor" id="line-666"></span><pre>A = LOAD 'input.bz2' USING myLoad();</pre><span class="anchor" id="line-667"></span><span class="anchor" id="line-668"></span><p class="line874">Multiple instances of myLoad() (as dictated by the degree of parallelism) will be created and each will be given a fragment of the *decompressed* version of input.bz2 to process. <span class="anchor" id="line-669"></span><span class="anchor" id="line-670"></span><p class="line867">
<h4 id="Compressed_Output">Compressed Output</h4>
<span class="anchor" id="line-671"></span><span class="anchor" id="line-672"></span><p class="line874">Pig currently supports output compression in the .bz2 format (so that the output can subsequently be loaded in parallel). All you have to do is include a .bz2 extension in the name of your output file. Your store function (if any) should simply write uncompressed data, and Pig will compress it on the fly. <span class="anchor" id="line-673"></span><span class="anchor" id="line-674"></span><p class="line874">For example, <span class="anchor" id="line-675"></span><span class="anchor" id="line-676"></span><span class="anchor" id="line-677"></span><pre>STORE A into 'output.bz2' USING myStore();</pre><span class="anchor" id="line-678"></span><span class="anchor" id="line-679"></span><span class="anchor" id="line-680"></span><p class="line867"><span class="anchor" id="Experimenting_with_Pig_Latin_syntax"></span> <span class="anchor" id="line-681"></span>
<h3 id="Experimenting_with_Pig_Latin_syntax-1">Experimenting with Pig Latin syntax</h3>
<span class="anchor" id="line-682"></span><span class="anchor" id="line-683"></span><p class="line862">To experiment with the Pig Latin syntax, you can use the StandAloneParser. Invoke it by the following command: <span class="anchor" id="line-684"></span><span class="anchor" id="line-685"></span><p class="line867"><span class="anchor" id="line-686"></span><span class="anchor" id="line-687"></span><pre>java -cp pig.jar org.apache.pig.StandAloneParser</pre><span class="anchor" id="line-688"></span><span class="anchor" id="line-689"></span><span class="anchor" id="line-690"></span><p class="line874">Example usage: <span class="anchor" id="line-691"></span><span class="anchor" id="line-692"></span><p class="line867"><span class="anchor" id="line-693"></span><span class="anchor" id="line-694"></span><span class="anchor" id="line-695"></span><span class="anchor" id="line-696"></span><span class="anchor" id="line-697"></span><span class="anchor" id="line-698"></span><span class="anchor" id="line-699"></span><span class="anchor" id="line-700"></span><span class="anchor" id="line-701"></span><span class="anchor" id="line-702"></span><span class="anchor" id="line-703"></span><span class="anchor" id="line-704"></span><span class="anchor" id="line-705"></span><span class="anchor" id="line-706"></span><span class="anchor" id="line-707"></span><span class="anchor" id="line-708"></span><span class="anchor" id="line-709"></span><span class="anchor" id="line-710"></span><pre>$ java -cp pig.jar org.apache.pig.StandAloneParser
&gt; A = LOAD 'myfile.txt';
---- Query parsed successfully ---
&gt; B = FOREACH A GENERATE $1, $2;
---- Query parsed successfully ---
&gt; C = COGROUP A BY $0, B BY $0;
---- Query parsed successfully ---
Current aliases: A-&gt;null, 
&gt; D = FOREACH C blah blah blah;
Parse error: org.apache.pig.impl.logicalLayer.parser.ParseException: Encountered "blah" at line 1, column 15.
Was expecting one of:
    "generate" ...
    "{" ...
&gt; D = FOREACH C GENERATE 'hello world';
---- Query parsed successfully ---
&gt; quit
$ </pre><span class="anchor" id="line-711"></span><span class="anchor" id="line-712"></span><span class="anchor" id="line-713"></span><p class="line867"><span class="anchor" id="OUTER_JOIN"></span> <span class="anchor" id="line-714"></span>
<h5 id="Outer_Join">Outer Join</h5>
<span class="anchor" id="line-715"></span><span class="anchor" id="line-716"></span><p class="line874">[pi] We should add this join rewrite logic in the parser. <span class="anchor" id="line-717"></span><span class="anchor" id="line-718"></span><p class="line874">Outer join by example: <span class="anchor" id="line-719"></span><span class="anchor" id="line-720"></span><p class="line867"><span class="anchor" id="line-721"></span><span class="anchor" id="line-722"></span><span class="anchor" id="line-723"></span><span class="anchor" id="line-724"></span><span class="anchor" id="line-725"></span><span class="anchor" id="line-726"></span><span class="anchor" id="line-727"></span><span class="anchor" id="line-728"></span><span class="anchor" id="line-729"></span><span class="anchor" id="line-730"></span><span class="anchor" id="line-731"></span><span class="anchor" id="line-732"></span><span class="anchor" id="line-733"></span><span class="anchor" id="line-734"></span><span class="anchor" id="line-735"></span><span class="anchor" id="line-736"></span><span class="anchor" id="line-737"></span><span class="anchor" id="line-738"></span><span class="anchor" id="line-739"></span><span class="anchor" id="line-740"></span><span class="anchor" id="line-741"></span><span class="anchor" id="line-742"></span><span class="anchor" id="line-743"></span><span class="anchor" id="line-744"></span><span class="anchor" id="line-745"></span><span class="anchor" id="line-746"></span><span class="anchor" id="line-747"></span><span class="anchor" id="line-748"></span><span class="anchor" id="line-749"></span><span class="anchor" id="line-750"></span><span class="anchor" id="line-751"></span><span class="anchor" id="line-752"></span><span class="anchor" id="line-753"></span><span class="anchor" id="line-754"></span><span class="anchor" id="line-755"></span><span class="anchor" id="line-756"></span><span class="anchor" id="line-757"></span><span class="anchor" id="line-758"></span><span class="anchor" id="line-759"></span><span class="anchor" id="line-760"></span><span class="anchor" id="line-761"></span><span class="anchor" id="line-762"></span><span class="anchor" id="line-763"></span><span class="anchor" id="line-764"></span><span class="anchor" id="line-765"></span><span class="anchor" id="line-766"></span><span class="anchor" id="line-767"></span><span class="anchor" id="line-768"></span><pre>A = load 'test1';
grunt&gt; dump A;
(k1, vq)
(k1, v2)
(k2, v3)
(k2, v4)
(k3, v5)
(k4, v6)

B = load 'test2';
grunt&gt; dump B;
(k1, w1)
(k2, w2)
(k2, w3)
(k3, w4)
(k8, w8)

CG = COGROUP A by $0, B by $0;
grunt&gt; dump CG;
(k1, {(k1, vq), (k1, v2)}, {(k1, w1)})
(k2, {(k2, v3), (k2, v4)}, {(k2, w2), (k2, w3)})
(k3, {(k3, v5)}, {(k3, w4)})
(k4, {(k4, v6)}, {})
(k8, {}, {(k8, w8)})

A_ONLY_FILTERED =  FILTER CG by (COUNT(B) == '0');
A_ONLY_FLAT = FOREACH A_ONLY_FILTERED GENERATE FLATTEN(A);
dump A_ONLY_FLAT;

(k4, v6)


B_ONLY_FILTERED =  FILTER CG by (COUNT(A) == '0');
B_ONLY_FLAT = FOREACH B_ONLY_FILTERED GENERATE FLATTEN(B);
dump B_ONLY_FLAT;

(k8, w8)

B_AND_A_FILTERED =  FILTER CG by ((COUNT(A) != '0') and (COUNT(B) != '0'));
B_AND_A_FLAT = FOREACH B_AND_A_FILTERED GENERATE FLATTEN(B);
dump B_AND_A_FLAT;

(k1, w1)
(k2, w2)
(k2, w3)
(k3, w4)</pre><span class="anchor" id="line-769"></span><span class="anchor" id="line-770"></span><p class="line874">Another way is following:  <span class="anchor" id="line-771"></span><span class="anchor" id="line-772"></span><p class="line867"><span class="anchor" id="line-773"></span><span class="anchor" id="line-774"></span><span class="anchor" id="line-775"></span><span class="anchor" id="line-776"></span><span class="anchor" id="line-777"></span><span class="anchor" id="line-778"></span><span class="anchor" id="line-779"></span><span class="anchor" id="line-780"></span><span class="anchor" id="line-781"></span><span class="anchor" id="line-782"></span><span class="anchor" id="line-783"></span><span class="anchor" id="line-784"></span><span class="anchor" id="line-785"></span><span class="anchor" id="line-786"></span><span class="anchor" id="line-787"></span><span class="anchor" id="line-788"></span><span class="anchor" id="line-789"></span><pre>A = load 'test1';
B = load 'test2';
CG_I_O = COGROUP A by $0 inner, B by $0 outer;
F = FOREACH CG_I_O GENERATE A, ((COUNT(B) == '0')? '' : B) as MODIFIED_B;
G = FOREACH F GENERATE FLATTEN(A), FLATTEN(MODIFIED_B);
-- You can do it in one pass: Y = FOREACH CG_I_O GENERATE FLATTEN(A), FLATTEN(((COUNT(B) == '0')? '' : B));
dump G;

(k1, vq, k1, w1)
(k1, v2, k1, w1)
(k2, v3, k2, w2)
(k2, v4, k2, w2)
(k2, v3, k2, w3)
(k2, v4, k2, w3)
(k3, v5, k3, w4)
(k4, v6, )</pre><span class="anchor" id="line-790"></span><span class="anchor" id="line-791"></span><p class="line867"><span class="anchor" id="Embedded_Pig_Latin"></span> <span class="anchor" id="line-792"></span>
<h3 id="Embedded_Pig_Latin-1">Embedded Pig Latin</h3>
<span class="anchor" id="line-793"></span><span class="anchor" id="line-794"></span><p class="line862">Pig Latin can be embedded into a Java program in a manner similar to JDBC. See <a href="/pig/EmbeddedPig">EmbeddedPig</a> for details. <span class="anchor" id="line-795"></span><span class="anchor" id="bottom"></span></div><p id="pageinfo" class="info" lang="en" dir="ltr">PigLatin  (last edited 2010-09-30 18:37:38 by <span title="jsha @ 174-46-233-130.static.twtelecom.net[174.46.233.130]"><a class="nonexistent" href="/pig/jsha" title="jsha @ 174-46-233-130.static.twtelecom.net[174.46.233.130]">jsha</a></span>)</p>

<div id="pagebottom"></div>
</div>


<div id="footer">
<ul class="editbar"><li><span class="disabled">Immutable Page</span></li><li class="toggleCommentsButton" style="display:none;"><a href="#" class="nbcomment" onClick="toggleComments();return false;">Comments</a></li><li><a class="nbinfo" href="/pig/PigLatin?action=info" rel="nofollow">Info</a></li><li><a class="nbattachments" href="/pig/PigLatin?action=AttachFile" rel="nofollow">Attachments</a></li><li>
<form class="actionsmenu" method="GET" action="/pig/PigLatin">
<div>
    <label>More Actions:</label>
    <select name="action"
        onchange="if ((this.selectedIndex != 0) &&
                      (this.options[this.selectedIndex].disabled == false)) {
                this.form.submit();
            }
            this.selectedIndex = 0;">
        <option value="raw">Raw Text</option>
<option value="print">Print View</option>
<option value="RenderAsDocbook">Render as Docbook</option>
<option value="refresh">Delete Cache</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="SpellCheck">Check Spelling</option>
<option value="LikePages">Like Pages</option>
<option value="LocalSiteMap">Local Site Map</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="RenamePage" disabled class="disabled">Rename Page</option>
<option value="CopyPage">Copy Page</option>
<option value="DeletePage" disabled class="disabled">Delete Page</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="MyPages">My Pages</option>
<option value="show" disabled class="disabled">Subscribe User</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="show" disabled class="disabled">Remove Spam</option>
<option value="show" disabled class="disabled">Revert to this revision</option>
<option value="show" disabled class="disabled">Package Pages</option>
<option value="SyncPages">Sync Pages</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="Load">Load</option>
<option value="Save">Save</option>
    </select>
    <input type="submit" value="Do">
    
</div>
<script type="text/javascript">
<!--// Init menu
actionsMenuInit('More Actions:');
//-->
</script>
</form>
</li></ul>

<ul id="credits">
<li><a href="http://moinmo.in/" title="This site uses the MoinMoin Wiki software.">MoinMoin Powered</a></li><li><a href="http://moinmo.in/Python" title="MoinMoin is written in Python.">Python Powered</a></li><li><a href="http://moinmo.in/GPL" title="MoinMoin is GPL licensed.">GPL licensed</a></li><li><a href="http://validator.w3.org/check?uri=referer" title="Click here to validate this page.">Valid HTML 4.01</a></li>
</ul>


</div>
</body>
</html>

