<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>JavaScript - Web Developer Boot Camp</title>
    <meta name="generator" content="HTML Tidy for Cygwin (vers 1st September 2004), see www.w3.org" />
    <title>JavaScript - Web Developer Boot Camp</title>
    <link rel="stylesheet" type="text/css" href="javascript.css" />
    <script type="text/javascript" src="examples.js">
</script>
    <link rel="stylesheet" type="text/css" href="/2004/12/23/style" />
    <link rel="shortcut icon" href="/favicon.png" type="image/png" />
    <link rel="top" href="/" />
    <link rel="up" href="../" />
    <script type="text/javascript" src="/2005/build/js/geckoGetRv.js"></script>
    <script type="text/javascript" src="/2005/build/js/checkBuild.js"></script>
    <link rel="first" href="/2004/09/26/boot-camp" />
    <link rel="prev" href="/2004/09/26/boot-camp-content-type" />
    <meta name="DC.creator" content="Bob Clary" />
    <meta name="DC.description" content="JavaScript™ (also known as ECMAScript or JScript) is an interpreted, object-oriented programming language commonly used throughout the web to provide interactive features to web pages. This article introduces JavaScript, outlines some of the basic principles behind programming using JavaScript and illustrates the differences between the different implementations available in Mozilla and Internet Explorer." />
    <meta name="DC.identifier" content="/2004/09/26/boot-camp-javascript" />
    <meta name="DC.rights" content="Copyright © 2004 by Bob Clary" />
    <meta name="DC.subject" content="Web Development, Web, Training, JavaScript, JavaScript Tutorial, Mozilla, Mozilla Firefox, Firefox, Internet Explorer" />
    <meta name="DCTERMS.created" content="2004-12-23" />
    <meta name="DCTERMS.issued" content="2004-12-23" />
    <meta name="DCTERMS.modified" content="2005-01-18" />
  </head>
  <body><div id="banner"><a href="/index">bclary.com</a></div><h1>JavaScript - Web Developer Boot Camp</h1><div class="metatop"><div>
	      Author Bob Clary</div><div>
		Created 2004-12-23,
		Modified 2005-01-18</div></div><blockquote><div>

        JavaScript™ (also known as ECMAScript or JScript) is an
        interpreted, object-oriented programming language commonly
        used throughout the web to provide interactive features to
        web pages. This article introduces JavaScript, outlines some
        of the basic principles behind programming using JavaScript and
        illustrates the differences between the different
        implementations available in Mozilla and Internet Explorer.

      </div></blockquote>
  <dl>
    <dt><a href="#About">About this Article</a></dt>

    <dt><a href="#Part_I">Part I - Introduction to JavaScript</a></dt>

    <dd>
      <dl>
        <dt><a href="#About_JavaScript">About JavaScript</a></dt>

        <dt><a href="#JavaScript_Implementations">JavaScript
        Implementations</a></dt>

        <dt><a href="#Interpreted_Programming_Languages">Interpreted
        Programming Languages</a></dt>

        <dt><a href="#Including_JavaScript">Including JavaScript
        programs in Web Pages</a></dt>

        <dt><a href="#Example_JavaScript_Programs">Example JavaScript
        Programs</a></dt>
      </dl>
    </dd>

    <dt><a href="#Part_II">Part II - JavaScript (<em>Pseudo</em>)
    Reference</a></dt>

    <dd>
      <dl>
        <dt><a href="#JavaScript_Data_Types">JavaScript Data
        Types</a></dt>

        <dt><a href="#Type_Conversions">Type Conversions</a></dt>

        <dt><a href="#Execution_Contexts">Execution Contexts</a></dt>

        <dt><a href="#Expressions">JavaScript Expressions</a></dt>

        <dt><a href="#Operators">JavaScript Operators</a></dt>

        <dt><a href="#JavaScript_Statements">JavaScript
        Statements</a></dt>

        <dt><a href="#JavaScript_Native_Objects">JavaScript Native
        Objects</a></dt>
      </dl>
    </dd>

    <dt><a href="#Links">Links</a></dt>

    <dt><a href="#Index">Index</a></dt>
  </dl>

  <div>
    <h2><a name="Part_I" id="Part_I">Part I - Introduction to
    JavaScript</a></h2>

    <dl>
      <dt><a name="About" id="About">About this Article</a></dt>

      <dd>
        <p>This article is intended to provide an introduction to
        JavaScript and a reference on the differences in the
        implementations of JavaScript in Mozilla and Microsoft Internet
        Explorer (MSIE). Examples which can be run directly from the
        article using Mozilla, Mozilla Firefox, Internet Explorer and
        Opera are used to illustrate general concepts as well as the
        use of each feature and Object in JavaScript. This is a
        <em>work in progress</em> and is provided in the current state
        in the hope that you will find it useful. I plan to continue
        work on this article in the hope it can become the definitive
        online resource for JavaScript. Email to
        <code>feedback@bclary.com</code> regarding this article is
        encouraged and welcome.</p>

        <p>The article is organized into two parts.</p>

        <p>Part I is intended as a general introduction to JavaScript.
        It is primarily targeted for beginning to intermediate level
        programmers but hopefully contains some information which will
        be useful for those with more advanced skills.</p>

        <p>Part II serves as a reference for JavaScript.</p>

        <p>Distinctive formatting is used for specific specialized
        topics:</p>

        <p>Code samples and examples are presented in a <code>monospace
        font</code>. Variables are presented in an <var>italic</var>
        font in the text and as <code><var>monospace
        italic</var></code> in code samples.</p>

        <p>Boxes with distinctive formatting are used to highlight
        specific sections.</p>

        <div class="example">
          <p>Boxes with single line black borders are used to contain
          runnable examples.</p>

          <p>Please note that the examples require the use of a pop-up
          window and you must enable pop-ups on this site in order to
          run them.</p>
        </div>

        <div class="implnote">
          <p>Boxes with double line red borders enclose notes which
          explain differences in how Mozilla and Internet Explorer
          implement JavaScript.</p>
        </div>

        <div class="note">
          <p>Boxes with notes.</p>
        </div>

        <div class="xxx">
          <p>Boxes with with todo notes.</p>
        </div>

        <div class="tbw">
          <p>Boxes indicating that the topic has yet to be written.</p>
        </div>
      </dd>

      <dt><a name="About_JavaScript" id="About_JavaScript">About
      JavaScript</a></dt>

      <dd>
        <p>JavaScript is a powerful, object-oriented programming
        language which, like <a href="http://en.wikipedia.org/wiki/Rodney_Dangerfield">Rodney
        Dangerfield</a>, does not get the respect it deserves. It is
        available in stand-alone, open source implementations in
        <tt>C</tt> and <tt>Java</tt> for a variety of platforms from
        <a href="http://www.mozilla.org/js/">mozilla.org</a> and as
        part of modern web browsers such as Mozilla, Mozilla Firefox,
        Internet Explorer, Opera and Safari. JavaScript is available on
        practically every computer world-wide.</p>

        <p>JavaScript was created by Brendan Eich, then of Netscape and
        now with Mozilla Foundation, and was first introduced in the
        Netscape Navigator 2.0 web browser in early 1996. Originally
        the language was called <em>LiveScript</em> and was later
        renamed to <em>JavaScript</em> as part of a marketing effort of
        Netscape and Sun Microsystems although it has little to do with
        Java. Microsoft incorporated an implementation of JavaScript
        called <tt>JScript</tt> into Internet Explorer 3.</p>

        <p>JavaScript's syntax resembles that of the computer languages
        <tt>C</tt> and <tt>Java</tt> although several of its features
        such as typeless variables, automatic semi-colon insertion, and
        automatic type coversions were designed to make it more
        accessible to non-professional programmers. Like <tt>C</tt>,
        the JavaScript language does not define any means of performing
        input and output and relies entirely upon its <em>host</em>
        environment (web browser) for such features. Unlike
        <tt>C++</tt> or <tt>Java</tt>, JavaScript is not a strongly
        typed computer language nor does it currently support
        <em>class-based</em> object oriented programming but instead
        relies on the use of <em>Prototypes</em> which serve as
        templates for creating new objects.</p>

        <p><a href="http://www.mozilla.org/js/" title="mozilla.org's JavaScript Project">JavaScript</a> was
        standardized as ECMAScript in ECMA 262 in June 1997. A second
        edition of the standard was released in August 1998 which
        consisted primarily of editorial changes to the first edition.
        The most recent edition is <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">
        ECMAScript Language Specification ECMA-262 3<sup>rd</sup>
        Edition</a> (<a href="ecma-262">ECMAScript Language
        Specification ECMA-262 3<sup>rd</sup> Edition (Unofficial HTML
        version)</a>) which was released in August 1998 and added a
        number of new features such as exception processing. JavaScript
        is an evolving language with future editions expected to
        include native XML processing ( <a href="http://www.ecma-international.org/publications/standards/Ecma-357.htm">
        ECMAScript for XML (E4X) Specification</a> ), strongly typed
        variables, and class-based inheritance in <a href="http://www.mozilla.org/js/language/js20/index.html">JavaScript
        2.0</a> and <a href="http://www.mozilla.org/js/language/es4/index.html">ECMAScript
        Language Specification 4<sup>th</sup> Edition
        (Proposed)</a>.</p>

        <p>Any one who is familiar with <tt>C</tt> or <tt>Java</tt>,
        can easily learn JavaScript. Conversely, JavaScript can be
        learned as a first programming language and the skills
        transferred to programming in other languages such as
        <tt>C</tt> and <tt>Java</tt>.</p>
      </dd>

      <dt><a name="JavaScript_Implementations" id="JavaScript_Implementations">JavaScript Implementations</a></dt>

      <dd>
        <p>Comparing the support for various implementations of
        different versions of JavaScript can be difficult due to the
        different versioning schemes used by Netscape and Microsoft.
        Netscape traditionally released different versions of their
        JavaScript interpreter to be associated with distinct
        <code>script</code> element <code>language</code> JavaScript
        versions such as <code>JavaScript1.1</code> or
        <code>JavaScript1.3</code> which did not necessarily map
        directly to an edition of the ECMA 262 standard. Microsoft used
        a different versioning scheme for JScript and only used the
        <code>script</code> <code>language</code> attribute in a very
        loose association with the actual JScript version.</p>

        <p><strong>JavaScript in Netscape Navigator, Mozilla and
        Mozilla Firefox</strong></p>

        <table summary="Netscape Navigator JavaScript versions">
          <caption>
            Netscape Navigator JavaScript versions
          </caption>

          <tbody>
            <tr align="left" valign="middle">
              <th align="left" valign="middle">JavaScript version</th>

              <th align="left" valign="middle">ECMA 262</th>

              <th align="left" valign="middle">Introduced</th>
            </tr>

            <tr>
              <td valign="middle">JavaScript 1.0</td>

              <td>N/A</td>

              <td valign="middle">Navigator 2.0</td>
            </tr>

            <tr>
              <td valign="middle">JavaScript 1.1</td>

              <td>N/A</td>

              <td valign="middle">Navigator 3.0</td>
            </tr>

            <tr>
              <td valign="middle">JavaScript 1.2</td>

              <td>N/A</td>

              <td valign="middle">Navigator 4.0-4.05</td>
            </tr>

            <tr>
              <td valign="middle">JavaScript 1.3</td>

              <td>1<sup>st</sup></td>

              <td valign="middle">Navigator 4.06-4.7x</td>
            </tr>
          </tbody>
        </table>

        <p>Mozilla and its family of browsers (Mozilla Firefox, Mozilla
        Application Suite, Netscape 6.x, Netscape 7.x, …)
        introduced support for JavaScript 1.5. Mozilla performs a
        partial emulation of earlier versions of JavaScript if the
        version is specified in the <code>script</code> element. For
        compatibility with other modern browsers, it is best to only
        specify the JavaScript language without version either through
        the <code>language</code> or <code>type</code> attributes.</p>

        <table summary="Mozilla JavaScript versions">
          <caption>
            Mozilla JavaScript versions
          </caption>

          <tbody>
            <tr align="left" valign="middle">
              <th align="left" valign="middle">JavaScript version</th>

              <th align="left" valign="middle">ECMA 262</th>

              <th align="left" valign="middle">Introduced</th>
            </tr>

            <tr>
              <td valign="middle">JavaScript 1.5</td>

              <td>3<sup>rd</sup></td>

              <td valign="middle">Mozilla / Firefox / Netscape 6.x,
              7.x, …</td>
            </tr>
          </tbody>
        </table>

        <p>Guides and References for the various editions of JavaScript
        used in Netscape Navigator and Mozilla were available on
        <a href="http://devedge.netscape.com/">Netscape DevEdge</a>
        however are no longer available since the site was taken down
        by AOL. Copies of the Netscape JavaScript Guides and References
        can be found on the web, however they are not authorised.</p>

        <p><strong>JavaScript in Internet Explorer</strong></p>

        <p>A <a href="http://www.microsoft.com/windows/WinHistoryIE.mspx" title="Internet Explorer History">history of Internet Explorer</a> is
        available from Microsoft. The mapping in the following table of
        JScript version to maximum supported JavaScript language
        version for each version of MSIE is based upon guess work since
        it is not possible to test multiple versions of MSIE on the
        same machine and there is a dearth of documentation available
        from Microsoft regarding JavaScript language versions. Feedback
        and corrections are welcome.</p>

        <p>A list of <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/script56/html/js56jslrffeatureinformation.asp" title="Internet Explorer JScript Features">feature
        availability</a> for the various JScript versions is also
        available from Microsoft.</p>

        <p>Guides and references for Internet Explorer's implementation
        of JavaScript are available from <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/script56/html/js56jsoriJScript.asp" title="Internet Explorer JavaScript References">MSDN</a></p>

        <table summary="Internet Explorer JScript versions">
          <caption>
            Internet Explorer JScript versions
          </caption>

          <tbody>
            <tr align="left" valign="middle">
              <th align="left" valign="middle">JavaScript version</th>

              <th align="left" valign="middle">JScript version</th>

              <th align="left" valign="middle">ECMA 262</th>

              <th align="left" valign="middle">Introduced</th>
            </tr>

            <tr>
              <td valign="middle">JavaScript 1.0</td>

              <td valign="middle">JScript 1.0</td>

              <td>N/A</td>

              <td valign="middle">MSIE 3.0</td>
            </tr>

            <tr>
              <td valign="middle">JavaScript 1.1</td>

              <td valign="middle">JScript 3.0</td>

              <td>1<sup>st</sup></td>

              <td valign="middle">MSIE 4.0</td>
            </tr>

            <tr>
              <td valign="middle">JavaScript 1.3</td>

              <td valign="middle">JScript 5.0</td>

              <td>3<sup>rd</sup></td>

              <td valign="middle">MSIE 5.0</td>
            </tr>

            <tr>
              <td valign="middle">JavaScript 1.3</td>

              <td valign="middle">JScript 5.1</td>

              <td>3<sup>rd</sup></td>

              <td valign="middle">MSIE 5.01</td>
            </tr>

            <tr>
              <td valign="middle">JavaScript 1.3</td>

              <td valign="middle">JScript 5.5</td>

              <td>3<sup>rd</sup></td>

              <td valign="middle">MSIE 5.5</td>
            </tr>

            <tr>
              <td valign="middle">JavaScript 1.3</td>

              <td valign="middle">JScript 5.6</td>

              <td>3<sup>rd</sup></td>

              <td valign="middle">MSIE 6.0</td>
            </tr>

            <tr>
              <td valign="middle">N/A</td>

              <td valign="middle">JScript 7.0</td>

              <td>N/A</td>

              <td valign="middle">.Net</td>
            </tr>
          </tbody>
        </table>

        <p>Much of the information in this article regarding
        differences in the implementations of JavaScript in Mozilla and
        Internet Explorer were developed using <a href="http://www.mozilla.org/js/tests/library.html">mozilla.org's
        JavaScript Test Library</a>, the experimental online <a href="/2004/10/03/javascript-test-suite">JavaScript Test Suite</a>
        and <a href="/2004/11/18/js-test-results/view.html">JavaScript
        Test Results</a></p>
      </dd>

      <dt><a name="Interpreted_Programming_Languages" id="Interpreted_Programming_Languages">Interpreted Programming
      Languages</a></dt>

      <dd>
        <p>JavaScript is an example of an <em>interpreted</em>
        programming language. Unlike other interpreted languages which
        compile (translate source code into machine code) each
        statement each time it is executed, JavaScript first compiles
        the entire JavaScript program before beginning to execute it.
        JavaScript also provides the ability to <q>compile</q> source
        code on the fly.</p>

        <p>Interpreted computer languages have the advantage that they
        can be run in any environment so long as an interpreter program
        for that environment is available. A disadvantage of
        interpreted computer languages is the need to compile the
        programs each time they are run. Other examples of interpreted
        programming languages are Basic, Perl and Python. Python has
        the additional capability to save compiled programs to disk
        where they can be run later without having to be
        interpreted.</p>
      </dd>

      <dt><a name="Including_JavaScript" id="Including_JavaScript">Including JavaScript programs in Web
      Pages</a></dt>

      <dd>
        <p>JavaScript programs can be run either from the command-line
        using a stand-alone JavaScript interpreter or executed in Web
        Pages using Web browsers. By far, the most common use of
        JavaScript is in web pages and all examples in this article
        will use such an approach.</p>

        <p>Script programs are included into web pages through the use
        of the <a href="http://www.w3.org/TR/html401/interact/scripts.html#edef-SCRIPT" title="HTML script tag"><code>script</code></a> element
        anywhere inside the <a href="http://www.w3.org/TR/html401/struct/global.html#edef-HEAD" title="HTML head tag"><code>HTML head</code></a> or <a href="http://www.w3.org/TR/html401/struct/global.html#edef-BODY" title="HTML body tag"><code>body</code></a> elements of an HTML
        document. The program code can be included in the HTML document
        by placing it inside of the <code>script</code> element or by
        placing it in an external file and referencing the file through
        the <code>src</code> attribute of the <code>script</code>
        element. The <code>language</code> or <code>type</code>
        attributes of the <code>script</code> element can be used to
        specify the programming language and version the script is
        written. If no scripting language or version is specified, the
        web browser will use its default values which is typically the
        latest version of JavaScript the browser supports.</p>

        <div>
          <p><strong>Specifying Script Language Versions</strong></p>

          <p>Script authors typically use the script language version
          to hide advanced scripts from older browsers which do not
          support the language features being used. This approach has
          some drawbacks since older browsers may still compile the
          script even if they do not execute it. This can lead to
          compile time errors for unsupported language features in
          older browsers such as Netscape Navigator 3.x and 4.x
          although this is less of a problem today since the
          market-share of these older browsers has diminished to
          insignificance.</p>

          <p>There are two methods for specifing the language version
          in the <code>script</code> tag.</p>

          <ol>
            <li>
              <p>specify the language and version in the
              <code>language</code> attribute of the
              <code>script</code> tag.</p>
              <pre>
&lt;script language="javascript"&gt;
// default version of javascript
&lt;/script&gt;
</pre>
              <pre>
&lt;script language="javascript1.3"&gt;
// javascript version 1.3
&lt;/script&gt;
</pre>
            </li>

            <li>
              <p>specify the language mime type and version in the
              <code>type</code> attribute in the <code>script</code>
              tag.</p>
              <pre>
&lt;script type="text/javascript"&gt;
// default version of javascript
&lt;/script&gt;
</pre>
              <pre>
&lt;script type="text/javascript;version=1.3"&gt;
// javascript version 1.3
&lt;/script&gt;
</pre>
            </li>
          </ol>

          <p>The Mozilla family of browsers (Mozilla Firefox, Mozilla
          Application Suite, …) up to Gecko 1.7 support
          JavaScript versions 1.1, 1.2, 1.3, 1.4 and 1.5 specified
          either as the language attribute or as the type attribute of
          the script tag. If a higher version is specified, the script
          is ignored. If no version is specified in the
          <code>script</code> element, Mozilla will default to
          JavaScript 1.5. An additional feature of Mozilla's current
          implementation is that it will <em>emulate</em> the features
          of the specified version of the language if the language
          version is specified. This can cause some
          browser-compatibility problems since Internet Explorer does
          not attempt such emulation. A change to Mozilla's
          implementation to not emulate older JavaScript versions is
          under consideration in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=255895">Bugzilla
          255895</a> although this change would not appear before
          Mozilla 1.8.</p>

          <p>Internet Explorer 6 supports JavaScript versions 1.1, 1.2
          and 1.3 specified as the language attribute and ignores
          scripts which specify a higher version. Internet Explore 6
          only supports <code>type="text/javascript"</code> and ignores
          any other value of <code>type</code> which includes
          <code>version</code> or other information. Internet Explorer
          does not emulate the behavior of older versions of JavaScript
          when older versions are specified.</p>

          <p>Opera 7.54 supports JavaScript versions 1.1, 1.2, 1.3,
          1.4, 1.5 when specified as the <code>language</code>
          attribute. Opera will execute any JavaScript language version
          if it is specified in the <code>type</code> attribute.</p>

          <p>Konqueror 3.2.1 will execute any version of JavaScript
          when specified as the language attribute or the
          <code>type</code> attribute.</p>

          <p>Work is underway to develop the next generation of
          JavaScript, JavaScript 2.0, which will introduce many new
          advanced features to the language. When an implementation of
          JavaScript 2.0 becomes available, the proper use of the
          <code>script</code> element language version should be able
          to hide the new scripts from older versions of Mozilla and
          Internet Explorer although other browsers such as Opera and
          Konqueror may have problems.</p>
        </div>

        <div>
          <p><strong><a href="javascript/inline.html">Inline JavaScript
          Examples</a></strong></p>
          <pre>
&lt;html&gt;
  &lt;head&gt;
    &lt;script language="javascript"&gt;
      // inline JavaScript code here
    &lt;/script&gt;

    &lt;script language="javascript1.3"&gt;
      // inline JavaScript 1.3 code here
    &lt;/script&gt;

    &lt;script type="text/javascript"&gt;
      // inline JavaScript code here
    &lt;/script&gt;

    &lt;script type="text/javascript;version=1.3"&gt;
      // inline JavaScript 1.3 code here
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    stuff
  &lt;/body&gt;
&lt;/html&gt;
</pre>
        </div>

        <div>
          <p><strong><a href="javascript/external.html">External
          JavaScript Examples</a></strong></p>
          <pre>
&lt;html&gt;
  &lt;head&gt;
    &lt;-- external JavaScript code in file somefileuri --&gt;
    &lt;script language="javascript" src="somefileurl" &gt;&lt;/script&gt;

    &lt;-- external JavaScript 1.3 code in file somefileuri --&gt;
    &lt;script language="javascript1.3" src="somefileurl" &gt;&lt;/script&gt;

    &lt;-- external JavaScript 1.3 code in file somefileuri --&gt;
    &lt;script type="text/javascript" src="somefileurl" &gt;&lt;/script&gt;

    &lt;-- external JavaScript 1.3 code in file somefileuri --&gt;
    &lt;script type="text/javascript;version=1.3" src="somefileurl" &gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    stuff
  &lt;/body&gt;
&lt;/html&gt;
</pre>

          <p>Note the use of HTML comments</p>
          <pre>
&lt;-- … --&gt;      
</pre>

          <p>inside of the HTML document and the use of single line
          JavaScript comments</p>
          <pre>
// …
</pre>

          <p>inside of the <code>script</code> element. An HTML comment
          prevents its contents from being displayed by a web browser
          while a JavaScript comment prevents the JavaScript
          interpreter from attempting to compile and execute the line.
          Comments are typically used for communicating with other web
          developers who read the source code of a web document or
          JavaScript program.</p>
        </div>

        <div>
          Hiding JavaScript from Non-scriptable browsers

          <p>The HTML 4.01 specification <a href="http://www.w3.org/TR/html401/appendix/notes.html#notes-invalid-docs" title="HTML 4.01 - Notes on invalid documents">states</a>
          that if a web brower does not recognize an HTML element in a
          document, it should attempt to render the contents of the
          element. This can cause some browsers which do not support
          the <code>script</code> element to display inline JavaScript
          programs as text in a web page. A standard technique to hide
          JavaScript code from such browsers is to enclose inline
          JavaScript inside of HTML comments as in the following
          example:</p>
          <pre>
&lt;script type="text/javascript"&gt;
&lt;--
// inline javascript code 
//--&gt;
&lt;/script&gt;
</pre>

          <p>The <code>&lt;-- … --&gt;</code> hides the script
          from non-scriptable browsers while the last line comment
          <code>//</code> hides the end of the HTML comment
          <code>--&gt;</code> from the JavaScript interpreter. Other
          techniques involving <code>CDATA sections</code> are used for
          hiding inline scripts in XHTML or XML documents.</p>

          <p>A common error by those who do not understand HTML and
          JavaScript is to wrap JavaScript code in external JavaScript
          files inside of HTML comments. The only reason to use HTML
          comments inside of a <code>script</code> element is to hide
          the inline script from non-scriptable browsers which do not
          recognize the <code>script</code> element. If a script is
          contained in an external file, a non-scriptable browser will
          not even attempt to load the file. There is no reason to
          include such HTML comments in an external file and it is
          technically an error to do so although most browsers are
          forgiving of this common beginner's mistake.</p>
        </div>
      </dd>

      <dt><a name="Example_JavaScript_Programs" id="Example_JavaScript_Programs">Example JavaScript
      Programs</a></dt>

      <dd>
        <dl>
          <dt>Hello World!</dt>

          <dd>
            <p>Ever since Kernighan and Ritchie's <q>The <code>C</code>
            Programming Language</q> (<abbr>K&amp;R</abbr>) was first
            published in 1978, the standard first program in any
            language is one that prints the message <samp>hello,
            world</samp>. Since this article is inspired by
            <abbr>K&amp;R</abbr> our first JavaScript program will do
            the same.</p>

            <p>"hello world" can be written in a web page as:</p>
            <pre>
&lt;html&gt;
&lt;head&gt;
&lt;script type="text/javascript"&gt;
document.write('hello, world');
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;The Hello World JavaScript Program&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

            <p>To run the program, create a document containing the
            above text, then open the web page with Mozilla or Internet
            Explorer which will display</p>

            <div style="border: solid 1px black;">
              <h1>The Hello World Program</h1>hello, world
            </div>

            <p>The actual JavaScript program consists of the
            <tt>statement</tt></p>
            <pre>
document.write('hello, world');
</pre>

            <p>Unlike <tt>C</tt> there is no preferred
            <code>main</code> function where execution of the program
            begins. In JavaScript, the source code is first compiled,
            then each global statement is executed in turn. Web
            browsers and HTML provide other means to begin execution of
            JavaScript depending upon events in the browser but will
            not be covered in this article.</p>

            <p>Let's pick the "hello, world" program a part and look at
            its pieces</p>

            <p><code>document.write('hello, world')</code> is a
            function call which calls a method (function)
            <code>write</code> of the object <code>document</code> with
            argument <code>'hello, world'</code>.</p>

            <p><code>document</code> is a <em>host</em> object provided
            by the web browser and <code>document.write</code> is a
            function property (method) of the <code>document</code>
            object which outputs text in a web page.
            <code>document</code> and <code>document.write</code> are
            not official parts of the JavaScript language, but are
            supplied by the web browser as part of its <em>Document
            Object Model</em> (<acronym title="Document Object Model">DOM</acronym>). We will not be
            discussing the Document Object Model in this article
            instead focusing our attention on the JavaScript language
            itself. If you are already familiar with <tt>C</tt>, you
            may consider the <acronym>DOM</acronym> to be an external
            library provided by the web browser.</p>

            <p><code>'hello, world'</code> is an example of a
            <em>literal</em> primitive string value. Literal primitive
            string values are sequences of characters which are
            surrounded by either single quotes (<code>'</code>) or
            double quotes (<code>"</code>).</p>

            <p>The function call <code>document.write('hello,
            world')</code> is an example of an <em>expression</em>. The
            terminating semi-colon (<code>;</code>) terminates the
            <em>statement</em> composed of the expression.</p>
          </dd>

          <dt>Examples in this article</dt>

          <dd>
            <p>The examples in this article are written in such a
            fashion that they can be executed directly from the article
            itself. The examples use a <dfn>user-defined function</dfn>
            named <code>msg</code> which uses the
            <acronym>DOM</acronym> to output strings to web pages.</p>

            <p><code>msg</code> is defined as:</p>
            <pre>
function msg(s)
{
  document.write(s + '&lt;br&gt;');
}
</pre>

            <p>When a function call <code>msg(arg)</code> is performed,
            the body of the function <code>msg</code> ( the statements
            inside of the braces <code>{</code> and <code>}</code>) are
            executed with the value of the argument variable
            <code>s</code> set to the value of the variable
            <code>arg</code>.</p>

            <p><code>document.write</code> writes the argument
            <code>s</code> followed by the HTML tag &lt;br&gt; to the
            output document where it is displayed by your web
            browser.</p>

            <p>Each example will consist of the JavaScript source code
            followed by an HTML <code>select</code> element which
            allows the choice of JavaScript version to be used when
            executing the example and an HTML <code>button</code>
            element which will open a new browser window and execute
            the example code. The new window will display the source
            code of the example, followed by the output. Note that the
            source code for the function <code>msg</code> is not
            displayed for brevity's sake.</p>

            <p>If you have a popup blocker enabled, you must configure
            it to allow this site to open popup windows.</p>

            <p>The "Hello World" program would appear as:</p>

            <div class="example">
              Example Hello_World!
              <pre id="Example_Hello_World">
msg('hello, world');
</pre><script type="text/javascript">
//
generate_example('Example_Hello_World');
//
</script>
            </div>

            <p>Run this example by selecting the JavaScript version and
            then clicking the <em>execute</em> button.</p>
          </dd>

          <dt>A slightly more realistic example.</dt>

          <dd>
            <p>Our next example program is a slightly more realistic
            program based upon <abbr>K&amp;R</abbr>'s Fahrenheit to
            Celsius conversion program and introduces a number of
            JavaScript features which are found in all JavaScript
            programs.</p>

            <div class="example">
              Example Fahrenheit_to_Celsius
              <pre id="Example_Fahrenheit_to_Celsius">
/*
* Display Fahrenheit to Celsius Conversion table
* for 0°F to 100°F in steps of 10°F.
*/
var lower = 0;    // lower limit of Fahrenheit temperature
var upper = 100;  // upper limit of Fahrenheit temperature
var step  = 10;   // increment of Fahrenheit temperature
var fahrenheit;   // current Fahrenheit temperature
var celsius;      // current Celsius temperature

fahrenheit = lower;
while (fahrenheit &lt;= upper)
{
  celsius = Fahrenheit2Celsius(fahrenheit); 
  msg(fahrenheit + '°F is ' + celsius + '°C');
  fahrenheit = fahrenheit + step;
}

function Fahrenheit2Celsius(fahr)
{
  var cels = (5/9)*(fahr - 32);
  return cels;
}
</pre><script type="text/javascript">
//
generate_example('Example_Fahrenheit_to_Celsius');
//
</script>
            </div>

            <p>The program begins with a multiple line comment which
            describes the purpose of the program.</p>
            <pre>
/*
* Display Fahrenheit to Celsius Conversion table
* for 0°F to 100°F in steps of 10°F.
*/
</pre>

            <p>Comments are text which are intended to be read by
            programmers trying to understand how a program work. They
            are ignored by the JavaScript interpreter.</p>

            <p>Multiple line comments begin with <code>/*</code> and
            end with <code>*/</code> and are useful in circumstances
            when a single comment line is insufficient or when you
            would like to <q>comment out</q> a portion of the program
            so that the JavaScript interpreter will ignore it.</p>

            <p>Note that multiple line comments <strong>can not
            nest</strong>. For example</p>
            <pre>
<code>/* this /* is an invalid */ comment */</code>
</pre>

            <p>For this reason, many people use single line comments
            inside of functions, so that if it is desired to <q>comment
            out</q> the entire function later, a single <code>/*
            … */</code> can be placed around the entire
            function. If multiple line comments had been used inside of
            the function, this would not have been possible.</p>

            <p>The next 5 lines of the program contain
            <em>statements</em> which declare the variables
            <var>lower</var>, <var>upper</var>, <var>step</var>,
            <var>fahrenheit</var>, <var>celsius</var> as global
            variables.</p>
            <pre>
var lower = 0;    // lower limit of Fahrenheit temperature
var upper = 100;  // upper limit of Fahrenheit temperature
var step  = 10;   // increment of Fahrenheit temperature
var fahrenheit;   // current Fahrenheit temperature
var celsius;      // current Celsius temperature
</pre>

            <p>A <dfn>variable</dfn> is a name for a data item in a
            program and is an example of an <a href="#Identifiers"><em>identifier</em></a>. An identifier is a
            sequence of characters beginning with either <code>$</code>
            (<em>dollar sign</em>), <code>_</code>
            (<em>underscore</em>) or a <em>unicode letter</em> followed
            by unicode letters, unicode digits, underscores
            (<code>_</code>) or dollar signs (<code>$</code>). Note
            that the use of unicode allows the creation of variable and
            function names in character sets other than latin.</p>

            <p>These variables are <em>global</em> because they were
            declared outside of any function definition and thus are
            available everywhere in the JavaScript program. In
            JavaScript variables <strong>do not</strong> have to be
            declared before use but it is recommended. JavaScript
            variables, unlike <tt>C</tt> or <tt>Java</tt>, do not have
            declared data types. A variable in JavaScript can hold any
            type of data.</p>

            <p>Each of the variable declarations is followed by a
            <tt>C++</tt> style single line comment of the form <code>//
            …</code>. Single line comments begin with
            <code>//</code> and end at the end of the line where they
            appear and are ignored by the JavaScript interpreter. They
            are extremely useful for attaching a descriptive note to a
            single line of code.</p>

            <p>The variable declarations for <var>lower</var>,
            <var>upper</var> and <var>step</var> include
            <em>initializers</em> which set the initial values of the
            variables to primitive number values <code>0</code>,
            <code>100</code> and <code>10</code> respectively. The
            variable declarations for <var>fahrenheit</var> and
            <var>celsius</var> do not include intializers which means
            they have the value <code>undefined</code> as their initial
            values.</p>

            <p>The next statement</p>
            <pre>
fahrenheit = lower;
</pre>

            <p><em>assigns</em> the value of the variable
            <var>lower</var> to the variable <var>fahrenheit</var>
            using the <dfn>assignment</dfn> operator
            <code>=</code>.</p>

            <p>The next statement is a <code>while</code> statement
            which has the general form:</p>
            <pre>
while (<kbd>condition</kbd>)
  <kbd>statement</kbd>
</pre>

            <p><code>while</code> first evaluates <kbd>condition</kbd>
            as a primitive boolean value (<code>true</code> or
            <code>false</code>) and will execute <kbd>statement</kbd>
            so long as <kbd>condition</kbd> is <code>true</code>. If
            <kbd>condition</kbd> is initially <code>false</code>,
            <kbd>statement</kbd> will not be executed.
            <code>while</code> is an example of an iterative or looping
            statement. Other examples of iterative statements in
            JavaScript are <code>for</code> and <code>do
            while</code>.</p>

            <p>Our <code>while</code> statement looks like:</p>
            <pre>
while (fahrenheit &lt;= upper)
{
  celsius = Fahrenheit2Celsius(fahrenheit);
  msg(fahrenheit + '°F is ' + celsius + '°C');
  fahrenheit = fahrenheit + step;
}
</pre>

            <p>The <kbd>condition</kbd> is <code>fahrenheit &lt;=
            upper</code>. <code>&lt;=</code> is a comparison operator
            which returns <code>true</code> when the left operand (
            <var>fahrenheit</var> in our example ) is less than or
            equal to the right operand ( <var>upper</var> in our
            example ).</p>

            <p>The <kbd>statement</kbd> is the block statement</p>
            <pre>
{
  celsius = Fahrenheit2Celsius(fahrenheit);
  msg(fahrenheit + '°F is ' + celsius + '°C');
  fahrenheit = fahrenheit + step;
}
</pre>

            <p>consisting of all statements between the braces
            <code>{</code> and <code>}</code>.</p>

            <p>This <code>while</code> statement generates the
            conversion table by repeatedly executing (<em>looping
            over</em>) the set of statements contained in the block
            statement as long as the <em>condition</em>
            <code>fahrenheit &lt;= upper</code> is
            <code>true</code>.</p>

            <p>The three statements inside of the block statement of
            the <code>while</code>:</p>

            <ol>
              <li>
                <p>call the function <code>Fahrenheit2Celsius</code>
                with the value of the argument <var>fahr</var> set to
                the value of the variable <var>fahrenheit</var> then
                set the value of the variable <var>celsius</var> to the
                <code>return</code> value of the function.</p>
              </li>

              <li>
                <p>output a message by calling the function
                <code>msg</code> with the value of the argument set to
                a primitive string consisting of the
                <em>concatenation</em> of the <var>fahrenheit</var>
                value, the string value <code>'°F is '</code>, the
                <var>celsius</var> value and the string value
                <code>'°C'</code>. JavaScript creates this string
                value by automatically converting the primitive number
                values in <var>fahrenheit</var> and <var>celsius</var>
                to string values and the applying the string
                concatenation operator <code>+</code>. Note that this
                automatic conversion behavior is dramatically different
                from other languages.</p>
              </li>

              <li>
                <p>increment the value of the <var>fahrenheit</var>
                variable by the value of the variable
                <var>step</var>.</p>
              </li>
            </ol>

            <p>Note that the <code>while</code> <em>loop</em> will
            terminate as soon as <var>fahrenheit</var> is greater than
            the variable <var>upper</var>.</p>

            <p>The final part of the program is the definition of the
            function <code>Fahrenheit2Celsius</code> with argument
            <code>fahr</code>.</p>
            <pre>
function Fahrenheit2Celsius(fahr)
{
  var cels = (5/9)*(fahr - 32);
  return cels;
}
</pre>

            <p>The body of the function consists of the two statements
            contained within the braces <code>{</code> and
            <code>}</code>. Each time the function is called, the
            argument is initialized to the value passed by the caller
            and the body of the function is executed. The
            <code>return</code> value of the function is used as the
            value of the function in whatever expression the function
            call occured.</p>

            <p>The first statement of <code>Fahrenheit2Celsius</code>
            declares the variable <var>cels</var> in the <em>scope</em>
            of the function which is initialized by the value of the
            expression <code>(5/9)*(fahr - 32)</code>. The expression
            <code>(5/9)*(fahr - 32)</code> is evaluated by first
            calculating the contents of the first parentheses
            <code>(5/9)</code> by dividing the number <code>5</code> by
            the number <code>9</code>, then calculating the value of
            the second parentheses <code>(fahr - 32)</code> by
            subtracting the number <code>32</code> from the value in
            the variable <var>fahr</var>, then multiplying the two
            results together. Note that JavaScript automatically
            converts the result of dividing two integers into a
            floating point number unlike <tt>C</tt>. The next statement
            returns the value of the variable <var>cels</var> as the
            value of the function.</p>

            <p>The <em>scope of the function</em> determines how the
            values of variables are determined inside the function.
            When a function is called, its <em>scope</em> consists of
            the variable (or variables) defined as arguments to the
            function along with the variables declared inside of the
            function. Whenever an expression in the function refers to
            a variable, JavaScript first tries to find the variable in
            the function scope and if it is found, the value of that
            variable is used. However if the variable is not found in
            the function's scope, JavaScript will attempt to find the
            variable in the parent scope of the function. In our
            example, the parent scope of the function
            <code>Fahrenheit2Celsius</code> is the global scope of the
            program. The parent scope of a function is determined at
            compile time and does not change regardless of the scope
            where the function is executed. Once the function has
            completed executing, any variables defined in the scope of
            the function will cease to exist.</p>

            <p>If a variable is used inside of a function
            <strong>without</strong> being declared using the
            <code>var</code> statement, JavaScript considers the
            variable to part of the program's global scope. Declaring
            function variables helps isolate functions from side
            effects in programs and helps increase maintainability in
            programs. For example, the Venkman JavaScript debugger,
            available from mozilla.org, will display all variables
            declared in function scope in a separate "local variables"
            panel from the "global variables/properties". Considering
            the large number of global variables and properties which
            are defined by the browser's DOM, it is much easier to
            inspect the variables used in a function <em>if they are
            declared as local</em>.</p>

            <p>Note that JavaScript does not require that a function be
            declared or defined before it is used in a program. The
            function <code>Fahrenheit2Celsius</code> could have been
            located <em>anywhere</em> in the program.</p>
          </dd>

          <dt><a name="Introduction_to_Objects" id="Introduction_to_Objects">Introduction to Objects</a></dt>

          <dd>
            <p><strong>Properties</strong></p>

            <p>JavaScript objects are named collections of
            <em>properties</em>. Properties have names and can contain
            primitive values such as strings, numbers or references to
            other Objects. <tt>C++</tt> and <tt>Java</tt> programmers
            can think of a JavaScript object as similar (in their use)
            as an instance of a <code>struct</code> or
            <code>class</code>. JavaScript objects can be created
            either by using literal object initializers using braces
            (<code>{}</code>) or using the <code>new</code> operator on
            <em>constructors</em>.</p>

            <p>For example, the following creates an empty object
            <var>literalObject</var> using an literal object
            initializer and another empty object
            <var>constructedObject</var> using the <a href="#new_Operator"><code>new</code></a> operator on the
            <a href="#Object_Objects"><code>Object()</code></a>
            constructor.</p>
            <pre>
var literalObject = {};
var contructedObject = new Object();
</pre>

            <p>Properties are set and retrieved using the <a href="#Member_of_Operators">member of operators</a>
            (<code>.</code>) or (<code>[]</code>). If variable
            <var>myobject</var> references an object, then the property
            named <var>propname</var> can be accessed in one of two
            ways:</p>

            <ol>
              <li><code>myobject.<var>propname</var></code></li>

              <li><code>myobject['<var>propname</var>']</code></li>
            </ol>

            <p>where <em>propname</em> is some sequence of characters.
            The only difference in these two approaches is the first
            (<code>myobject.<var>propname</var></code>) requires that
            <var>propname</var> be an identifier, that is the
            characters in propname must begin with a unicode letter, an
            underscore (<code>_</code>) or a dollar sign
            (<code>$</code>) and the remaining characters must be
            unicode letters, unicode digits, underscores or dollar
            signs.</p>

            <p>If <em>propname</em> is not an identifier, the second
            syntax (<code>myobject['<em>propname</em>']</code>) can
            still be used. For example <code>myobject['this is a
            property name that is not an identifier']</code> is a valid
            property reference. The second syntax can also be used with
            a variable containing the property name
            (<code>object[<var>prop</var>]</code>) which is useful in
            circumstances where the property name is not known until
            the program runs.</p>

            <p><strong>Local versus Shared Properties</strong></p>

            <p>Every JavaScript object has a special <em>internal</em>
            property called its prototype object which is used to
            implement shared properties and object inheritance. To
            understand the role of the prototype object a little
            better, lets look at how JavaScript determines the value of
            an object's property.</p>

            <p>When you access the value of an object's property
            <code><var>myobject</var>.propname</code>, JavaScript first
            looks in <code>myobject</code> for a local property named
            <var>propname</var>. If a local property with the requested
            name is found, JavaScript will return the value of that
            property. If the property is not found, JavaScript will try
            to find the property in the object's <em>prototype</em>
            object. If again the property is not found, JavaScript will
            attempt to find the property in the prototype of the
            prototype and so on until either the property is found or
            the prototype <em>chain</em> ends. If the property was not
            found, then JavaScript will return <code>undefined</code>
            as the result.</p>

            <p>As a result, JavaScript objects which <em>share</em>
            prototype objects effectively share the properties of the
            prototype (and those of the entire prototype chain).</p>

            <p>A local property is defined when you assign a value to
            an object property as in <code>myobject.propname =
            value;</code>. The value of this property is not shared
            with any other instances of objects. If a property is
            shared via the prototype chain, any assignment to the local
            property <em>shadows</em> the shared property effectively
            replacing it for that object.</p>

            <p>Literal Object initializers can be used to define local
            properties and their initial values by listing each
            property name followed by a colon (<code>:</code>),
            followed by the property value as in</p>
            <pre>
var literalObject = { property1: 'value1',
                      'property 2': 'value2' };
</pre>

            <p>Each <em>property/value</em> pair (except the last) is
            terminated by a comma (<code>,</code>). Note that property
            names which are not identifiers (<code>property 2</code> in
            the above example) can be written as string literal
            values.</p>

            <div class="example">
              Example Literal Object Properties
              <pre id="Example_Object_literalObject">
// create an instance of Object using a literal initializer
var literalObject = {
  property1: 'value1',
  'property 2': 'value2'
};

// display the values of the properties
msg('literalObject.property1 = ' + literalObject.property1);
msg('literalObject[\'property 2\'] = ' + literalObject['property 2']);
</pre><script type="text/javascript">
//
generate_example('Example_Object_literalObject');
//
</script>
            </div>

            <p>To create a similar object using the
            <code>Object()</code> constructor, we would first create
            the object using <code>new Object()</code>, then create the
            local properties by assigning values to them as in:</p>

            <div class="example">
              Example Constructed Object Properties
              <pre id="Example_Object_constructedObject">
// create an instance of Object using a Constructor
var constructedObject = new Object();

// add properties to object
constructedObject.property1     = 'value1';
constructedObject['property 2'] = 'value2';

// display the values of the properties
msg('constructedObject.property1 = ' + constructedObject.property1);
msg('constructedObject[\'property 2\'] = ' + constructedObject['property 2']);
</pre><script type="text/javascript">
//
generate_example('Example_Object_constructedObject');
//
</script>
            </div>

            <p>As you can see, the only difference in these examples is
            the means by which the objects were created.</p>

            <p><strong>Simple Object methods</strong></p>

            <p>Object properties are not limited to simple values such
            as strings or numbers but can also be functions which are
            also known as <em>methods</em>. For example, we can create
            an object which represents a circle which can report its
            area.</p>

            <div class="example">
              Example Simple Circle
              <pre id="Example_Simple_Circle">
// define the method getArea
function getArea()
{
  return Math.PI * this.radius * this.radius;
}

// create a 'circle' with radius 1
var circle = {radius: 1};

// attach the method to the circle object 
// as a local property
circle.getArea = getArea;

msg('circle with radius ' + circle.radius + 
    ' has area ' + circle.getArea());
</pre><script type="text/javascript">
//
generate_example('Example_Simple_Circle');
//
</script>
            </div>

            <p>This program first defines a function <var>getArea</var>
            which will be used as a method of the <var>circle</var>
            object. <var>getArea</var> returns the value of area of the
            <var>circle</var> by calculating the square of the circle's
            radius multiplied by π. <code>this</code> is a special
            name which is used inside of methods to refer to the object
            which contains the method. Inside of the <var>getArea</var>
            method, <code>this.<var>radius</var></code> refers to
            <var>circle.radius</var>. <code>Math</code> is a built-in
            JavaScript object which contains a number of properties and
            methods useful in mathematical calculations.
            <code>Math.PI</code> is the value of the mathemetical
            constant PI (π).</p>

            <p>The next statement creates the <var>circle</var> object
            via an object initializer to contain a numeric property
            called <var>radius</var> representing a radius of the
            circle.</p>

            <p>The next statement creates a local property of the
            <var>circle</var> object <code><var>getArea</var></code> by
            assigning a reference to the function
            <var>getArea</var>.</p>

            <p><strong>Simple Constructors</strong></p>

            <p>The simple approach to creating and using JavaScript
            objects is useful when you have only a few objects with a
            small number of properties each but can be awkward when you
            have more objects to create. Consider the situation where
            you have many instances of the same <q>kind</q> of object
            to create:</p>
            <pre>
function getArea()
{
  return Math.PI * this.radius * this.radius;
}

var circle1 = {radius: 1};
circle1.getArea = getArea;

var circle2 = {radius: 2};
circle2.getArea = getArea;

var circle3 = {radius: 3};
circle3.getArea = getArea;

…
</pre>

            <p>The repetitive creation and initialization of the
            properties and methods of the various <var>circle</var>
            objects is boring and error prone. Fortunately, JavaScript
            provides the ability to encapsulate the creation and
            initialization of similar instances of objects through the
            use of <em>constructors</em>.</p>

            <div class="example">
              Example Simple Constructor
              <pre id="Example_Simple_Constructor">
function Circle(radius)
{
  this.radius = radius;
  this.getArea = function () 
                 {
                   return Math.PI * (this.radius * this.radius); 
                 };
}

// create an array to hold the circle objects
var circles = [];
var i;

// loop from i == 0 to 2 creating Circle objects
for (i = 0; i &lt; 3; i++)
{
  circles[i] = new Circle(i + 1);
}

for (i = 0; i &lt; 3; i++)
{
  msg('The area of a circle of radius ' + 
      circles[i].radius + ' is ' + circles[i].getArea());
}
</pre><script type="text/javascript">
//
generate_example('Example_Simple_Constructor');
//
</script>
            </div>

            <p>The function <code>Circle</code> defines a constructor
            for <code>Circle</code> objects. It takes one argument,
            <code>radius</code>, which is a number representing the
            radius of the circle.</p>

            <p>The next statement uses an <em>array initializer</em> to
            create an empty <code>Array</code> object called
            <var>circles</var>. An <code>Array</code> is a kind of
            JavaScript object used to store lists of items which can be
            accessed by using the <code>[]</code> member of operator
            and the numeric position (<em>index</em>) of the item in
            the list. Items in <code>Array</code>s are indexed from
            <code>0</code>. For example, if <var>list</var> is an
            <code>Array</code>, then <code>list[0]</code> is the first
            item in the list, <code>list[1]</code> is the second item,
            and so on.</p>

            <p>The <code>for</code> loop is very similar to the
            <code>while</code> loop we saw in the Fahrenheit conversion
            example and is used to create <code>3</code> instances of
            the <code>Circle</code> object which are stored in the
            <var>circles</var> array.</p>

            <p><code>for</code> loops have the form:</p>
            <pre>
for (initializer; conditional; increment)
  statement
</pre>

            <p>and are equivalent to the following <code>while</code>
            loop:</p>
            <pre>
initializer;
while (conditional)
{
  statement
  increment;
}
</pre>

            <p>The <var>initializer</var> expression is evaluated
            first. It is used to set up the initial values before the
            loop is executed. Then the <var>conditional</var>
            expression is evaluated. If it is <code>false</code>, the
            <code>for</code> loop terminates and the statement
            following it in the program is executed. If the
            <var>condition</var> is true, the <var>statement</var> is
            executed and the <var>initializer</var> expression is
            evaluated and the whole process begins again by testing if
            the <var>conditional</var> is still <code>true</code>.</p>

            <p>The <code>new Circle(radius)</code> statement creates an
            instance of the <code>Circle</code> object by creating an
            empty native JavaScript object, then setting its
            <code>prototype</code> object to the prototype of the
            function <code>Circle</code>, then calls the
            <code>Circle</code> constructor with the <code>this</code>
            identifier set to reference the newly created object. The
            constructor adds the local properties <code>radius</code>
            and <code>getArea</code> to the instance.
            <code>getArea</code> is initialized with a <em>function
            expression</em> which can be called like any other
            function.</p>

            <p>Since the properties <code>radius</code> and
            <code>getArea</code> were created as local properties of
            the <code>Circle</code> instance, they are created
            independently for each instance of <code>Circle</code>.
            Even though each instance of Circle has the same method
            <code>getArea</code>, the compiled code is duplicated for
            each separate instance thus increasing the memory usage if
            there are many such instances created. We could have saved
            the extra code by defining the function separately and
            simply assigning a reference to the function to
            <var>getArea</var> however that would have still meant we
            needed an extra local property for <var>getArea</var> in
            each instance. We will see later how to save both the
            compiled code and the extra reference when we discuss
            object prototypes in more detail.</p>

            <p>Finally, the program outputs a message by concatenating
            the string value <code>'The area of a circle of radius
            '</code>, the value of the <code>radius</code> property of
            the <var>Circle</var> instance, the string <code>' is
            '</code> and the value returned by calling the method
            <code>getArea</code> of the <var>Circle</var> instance.</p>

            <p>Note that constructor functions such as
            <code>Circle()</code> should not be called as ordinary
            functions unless they are specifically designed to be
            called that way. The reason has to do with the value of the
            <code>this</code> object reference inside of normal
            function calls does not reference the object you expect.
            For more details see <a href="#Execution_Contexts">Execution Contexts</a>.</p>

            <p><strong>Object Inheritance</strong></p>

            <p>The style of creating objects using <em>Simple
            Constructors</em> is sufficient for most cases however it
            fails to handle cases where different <q>kinds</q> of
            objects need to share properties and methods. What is
            needed is a way for us to create objects which
            <em>share</em> properties and methods. What we need to do
            is combine the use of constructors and prototypes.</p>

            <p>Remember, constructors are functions (and also objects)
            which the <code>new</code> operator acts upon to create
            <em>instances</em> of the object defined by the
            constructor.</p>

            <p>Since constructors are objects, constructors also have a
            prototype property which is conveniently named
            <code>prototype</code>. When the <code>new</code> operator
            acts upon a constructor, it first creates an empty native
            JavaScript object (called the <em>instance</em>), then sets
            the internal <code>prototype</code> property of the
            instance to the <code>prototype</code> property of the
            constructor, then the identifier <code>this</code> is set
            to point to the new instance and the constructor is called.
            The constructor can create local properties of the newly
            created object by creating the properties on the
            <code>this</code> object.</p>

            <p>It is possible to create chains of constructors where
            the prototype of one constructor is an instance of another
            constructor. JavaScript uses these <em>prototype
            chains</em> to implement object-oriented inheritance.</p>

            <p>Lets generalize our <var>Circle</var> object to be a
            part of a graphics program where we use families of objects
            to represent geometric shapes.</p>

            <div class="example">
              Example Object_Inheritance
              <pre id="Example_Object_Inheritance">
/*
* Circles and Squares
*/

// Define a Shape Object which is intended to serve as the ancestor
// of all "shapes" in the program.
function Shape(size)
{
  if (size &gt; 0)
  {
    // only define the size property as a local property 
    // of each instance if it is non-zero. Otherwise, the 
    // shared size property of the Shape Object's prototype 
    // object will be used.
    this.size = size;
  }
}

// Add a shared sized property to Shape's prototype
// Every instance of Shape has a default size of 0
// unless it is overridden by the constructor.
Shape.prototype.size = 0;

// Every instance of Shape has the same name. Implement it
// as a shared property so that only one instance of the name
// can be shared amongst all instances.
Shape.prototype.name = 'Shape';

// Every instance of Shape has an area which scales as the 
// square of the size of the shape. Define a default getArea
// method which can be shared or overridden by child classes.
Shape.prototype.getArea = function _getArea()
{
  return this.size * this.size;
}

/*
 * Squares
 */
// Define a Square as a kind of Shape
function Square(size)
{
  // call the Shape constructor on this
  // object to initialize it
  Shape.call(this, size);
}

// set Square's prototype to Shape to
// share Shape's properties
Square.prototype = new Shape;

// override the shared name property
Square.prototype.name = 'Square';

// Note that Square does not need to 
// override Shape's getArea method

/*
 * Circles
 */
// Define Circle as a kind of Shape
function Circle(size)
{
  // call the Shape constructor on this
  // object to initialize it
  Shape.call(this, size);
}

// set Circle's prototype to Shape to
// share Shape's properties
Circle.prototype = new Shape;

// override the shared name property
Circle.prototype.name = 'Circle';

// override the getArea method to return the 
// proper area of a Circle
Circle.prototype.getArea = function()
{
  return Math.PI * Shape.prototype.getArea.call(this);
};

function tellMeAbout(shape)
{
  var list = '';
  for (var propname in shape)
    list += propname + ', ';

  msg(shape.name + ' has the following properties: ' + list);

  msg('shape ' + 
      ('size' in shape ? ' has ' : ' does not have ') + 
      'property size');
 
  msg('shape ' + 
      (shape.hasOwnProperty('size') ? ' has ' : ' does not have ') + 
      'local property size');
  
  msg('shape ' + 
      ('name' in shape ? ' has ' : ' does not have ') + 
      'property name');
  
  msg('shape ' + 
      (shape.hasOwnProperty('name') ? ' has ' : ' does not have ') + 
      'local property name');
  
  msg('shape ' + 
      ('getArea' in shape ? ' has ' : ' does not have ') + 
      'property getArea');
  
  msg('shape ' + 
      (shape.hasOwnProperty('getArea') ? ' has ' : ' does not have ') + 
      'local property getArea');
  
  msg('shape ' + shape.name + ' ' + 
      (shape instanceof Object ? 'is' : 'is not') + 
      ' an instance of Object');
  
  msg('shape ' + shape.name + ' ' + 
      (shape instanceof Shape ? 'is' : 'is not') + 
      ' an instance of Shape');
  
  msg('shape ' + shape.name + ' ' +
      (shape instanceof Circle ? 'is' : 'is not') + 
      ' an instance of Circle');
  
  msg('shape ' + shape.name + ' ' +
      (shape instanceof Square ? 'is' : 'is not') + 
      ' an instance of Square');
  
  msg('The area of a ' + shape.name + ' of size ' + 
      shape.size + ' is ' + shape.getArea());
}
var shape;

msg('&lt;br&gt;create an instance of Shape with no size&lt;br&gt;');

shape = new Shape;

tellMeAbout(shape);

msg('&lt;br&gt;create an instance of Circle with size 1&lt;br&gt;');

shape = new Circle(1);

tellMeAbout(shape);

msg('&lt;br&gt;create an instance of Square with size 2&lt;br&gt;');

shape = new Square(2);

tellMeAbout(shape);
</pre><script type="text/javascript">
//
generate_example('Example_Object_Inheritance');
//
</script>
            </div>

            <p>This example is quite a bit longer than we have seen so
            far however it is really not any more complicated. There
            are four sections to the program:</p>

            <ol>
              <li>Definition of the <var>Shape</var> Object.</li>

              <li>Definition of the <var>Square</var> Object as a kind
              of <var>Shape</var>.</li>

              <li>Definition of the <var>Circle</var> Object as a kind
              of <var>Shape</var>.</li>

              <li>Creation of instances of <var>Square</var> and
              <var>Circle</var> and the output of messages</li>
            </ol>

            <p>In the first section of the program, the
            <var>Shape</var> constructor is defined as a function which
            takes one argument: the <var>size</var> of the object in
            some unit of measure. The body of the <var>Shape</var>
            constructor consists of an <code>if</code> statement.
            <code>if</code> statements are used to select which set of
            statements are to be executed depending on the value of a
            conditional test and have the form:</p>
            <pre>
if (<var>condition</var>)
  <var>statement</var>
</pre>

            <p>If <var>condition</var> evaluates to <code>true</code>,
            the <var>statement</var> will be executed, otherwise it
            will be skipped. Another form allows the choice of one of
            two possible statements depending on the
            <var>condition</var>.</p>
            <pre>
if (<var>condition</var>)
  <var>statement1</var>
else
  <var>statement2</var>
</pre>

            <p>In this case, if <var>condition</var> evaluates to
            <code>true</code>, <var>statement1</var> will be executed,
            but if <var>condition</var> is <code>false</code>, then
            <var>statement2</var> will be executed.</p>

            <p>In our example, the <var>condition</var> is the test
            <code>size &gt; 0</code>. If the <var>size</var> is greater
            than <code>0</code>, the set of statements in the block (
            the statements surrounded by the braces <code>{}</code> )
            is executed. If the <var>size</var> is less than or equal
            to <code>0</code>, the local property <var>this.size</var>
            is not defined in order to allow it to be shared as the
            <code>0</code> value. Since in our example a
            <var>Shape</var> of <code>0</code> size doesn't make much
            sense the trick doesn't add much to our example, but does
            illustrate a technique where you can save memory usage by
            sharing the most common value of a property and only
            defining the property as local if the value differs.</p>

            <p>Immediately following the <var>Shape</var> constructor,
            the shared <var>size</var> property is added to
            <var>Shape</var>'s prototype object initialized to
            <code>0</code>.</p>

            <p>In order to allow our <var>Shape</var>s to know what
            kind of shape they are, the next statement adds a shared
            property <var>name</var> with value <code>'Shape'</code> to
            each instance of the <var>Shape</var> object. Note that
            even if we create 100,000 <var>Shape</var>s, no additional
            memory will be required to store the <var>Shape</var>s
            <var>name</var>s since each will share the <var>name</var>
            property.</p>

            <p>As the final part of the definition of <var>Shape</var>
            objects, a shared method <var>getArea</var> is defined.
            Since areas scale as the square of the size of an object, I
            went ahead and defined the shared method as such.</p>

            <p>The second section of the program defines the
            <var>Square</var> Objects. The constructor
            <var>Square</var> is defined to take the same argument as
            the <var>Shape</var> constructor. In order to
            <em>re-use</em> the initialization code in
            <var>Shape</var>, the <code>call</code> method of
            <code>Function</code> objects is used to call
            <var>Shapes</var> constructor. <code>call</code> allows us
            to set the <code>this</code> value to point to our newly
            created <var>Square</var> while passing any required
            arguments.</p>

            <p>Following the definition of the <var>Square</var>
            constructor, the <code>prototype</code> property of
            <var>Square</var> is initialized to be an <em>instance</em>
            of the <var>Shape</var> Object. This step is what makes the
            sharing of properties and methods between
            <var>Square</var>s and <var>Shape</var>s possible. If a
            property is not found as a local property of a
            <var>Square</var>, <var>Square</var>'s prototype is search
            for the property and so on.</p>

            <p>Next the <var>name</var> property is overridden since we
            want our <var>Square</var>s to know they are
            <var>Squares</var> and not just <var>Shape</var>s.</p>

            <p>Since the area of a square is exactly the square of the
            length of its sides, there is no need to override the
            <var>getArea</var> method <em>inherited</em> from
            <var>Shape</var>.</p>

            <p>The third section creates the <var>Circle</var> Object
            in a very similar fashion to that used to define
            <var>Square</var>s. The only difference in the overriding
            of the <var>getArea</var> method to apply the correct
            forumula for the area of a circle.</p>

            <p>The fourth section of the program creates instances of
            <var>Shape</var>, <var>Circle</var> and <var>Square</var>
            and generates various reports about them. To simplify the
            program, a function <var>tellMeAbout</var> is defined to
            take an argument <var>shape</var> and then report various
            items about the shape such as:</p>

            <ul>
              <li>list of <em>enumerable</em> properties in an
              object</li>

              <li>whether properties exist in objects</li>

              <li>whether properties are local or shared</li>

              <li>whether an object <em>inherits</em> from a particular
              Constructor</li>

              <li>the area of the shape</li>
            </ul>

            <p><var>tellMeAbout</var> uses the operator <code>in</code>
            which tests if a property exists in a object either as a
            local property or as a property found in the object's
            protocol chain. For example:</p>
            <pre>
'propname' in object
</pre>

            <p>will return <code>true</code> if
            <code>object.propname</code> exists.</p>

            <p>The operator <code>in</code> can also be used in a
            <code>for</code> loop to enumerate each of an object's
            properties so long as the properties do not have the
            internal <em>DontEnum</em> attribute. For example, to
            iterate over the list of enumerable properties in an
            object:</p>
            <pre>
var prop;
for (prop in object)
{
  // prop is a string value 
  // containing the name of a property
}
</pre>

            <p>The member function <code>hasOwnProperty</code> of
            <code>Function</code> objects, is used to test if a
            property is <em>local</em> or shared.
            <code><var>object</var>.hasOwnProperty(<var>propname</var>)</code>
            returns true if <var>propname</var> is a <em>local</em>
            property of <var>object</var>.</p>

            <p><var>tellMeAbout</var> also uses the
            <code>instanceof</code> operator to test if an instance of
            an object is an instance of a particular constructor. For
            example:</p>
            <pre>
object instanceof SomeConstructor
</pre>

            <p>A new type of expression called the <em>ternary</em> or
            <em>conditional</em> expression is used throughout the
            function <var>tellMeAbout</var>. The <em>conditional</em>
            expression looks like:</p>
            <pre>
<var>condition</var> ? <var>expression1</var> : <var>expression2</var>
</pre>

            <p>The value of the <em>conditional</em> expression is the
            value of <var>expression1</var> if the <var>condition</var>
            evaluates to <code>true</code>. If <var>condition</var> is
            <code>false</code>, the value of the <em>conditional</em>
            expression is the value of <var>expression2</var>. This
            operator is convenient shorthand for:</p>
            <pre>
var <var>value</var>;
if (<var>condition</var>)
  value = expression1;
else
  value = expression2;
</pre>
          </dd>
        </dl>
      </dd>
    </dl>
  </div>

  <div>
    <h2><a name="Part_II" id="Part_II">Part II - JavaScript
    (<em>Pseudo</em>) Reference</a></h2>
  </div>

  <dl>
    <dt><a name="JavaScript_Data_Types" id="JavaScript_Data_Types">JavaScript Data Types</a></dt>

    <dd>
      <p>Data types in JavaScript are divided into two categories:</p>

      <ol>
        <li>
          <p>Primitive types whose members are primitive values. The
          primitive types in JavaScript consist of <em>Undefined</em>,
          <em>Null</em>, <em>Boolean</em>, <em>Number</em> and
          <em>String</em>.</p>
        </li>

        <li>
          <p>Object types whose members are all objects. A JavaScript
          object is really just an unordered collection of properties
          which may have attributes governing how the properties
          behave.</p>
        </li>
      </ol>

      <p>Even though there is a one-one correspondence between some of
      the primitive types and some Object types, <strong>they are not
      the same</strong>.</p>

      <dl>
        <dt>Undefined</dt>

        <dd>
          <p>The <em>Undefined</em> primitive type has only one value:
          <code>undefined</code> which is used to represent the value a
          variable contains when it has not been initialized.</p>
        </dd>

        <dt>Null</dt>

        <dd>
          <p>The <em>Null</em> primitive type has only value:
          <code>null</code>. While <code>null</code> and
          <code>undefined</code> are used in similar circumstances, the
          primary difference is that if a variable which has value
          <code>null</code> has been <em>intentionally initialized</em>
          to contain a value whereas an <code>undefined</code> value
          can mean the variable is uninitialized or even does not exist
          at all.</p>
        </dd>

        <dt>Boolean</dt>

        <dd>
          <p>The <em>Boolean</em> primitive type has two values:
          <code>true</code> and <code>false</code>. Boolean primitive
          values are <strong>not the same as instances of Boolean
          Objects</strong>.</p>
        </dd>

        <dt>String</dt>

        <dd>
          <p>The <em>String</em> primitive type are sequences of
          characters. String primitive values are <strong>not the same
          as instances of String Objects</strong>.</p>

          <p>Literal primitive string values are written as a sequence
          of characters surrounded either by single quotes
          (<code>'</code>) or double quotes (<code>"</code>). For
          example,
          <code>"this is primitive string"</code> and
          <code>'this is primitive string'</code> are
          both primitive string values.</p>

          <p>To include quotes in a string literal, you can alternate
          the type of quote as in
          <code>"this contains a single ' quote"</code>
          or you can use <em>character escapes</em> to temporarily
          change the quote to a normal character as in
          <code>'this contains a single \' quote'</code>.</p>

          <p>Character escapes are a means of temporarily changing the
          meaning of a character and are used to describe control
          characters as well as all quotes to be included in literal
          string. A character is <dfn>escaped</dfn> by preceding it
          with a <code>\</code> character, for example to escape the
          letter <code>a</code>, you would write it as <code>\a</code>.
          Section <a href="ecma-262#a-7.8.4">ECMAScript 7.8.4 String
          Literals</a> describes the character escapes <code>\'</code>
          (escaped single quote), <code>\"</code> (escaped double
          quote), <code>\\</code> (escaped escape character),
          <code>\b</code> (backspace), <code>\f</code> (form feed),
          <code>\n</code> (newline), <code>\r</code> (carriage return),
          <code>\t</code> (tab), <code>\v</code> (vertical tab) which
          allow special characters to be included in string
          literals.</p>

          <div class="implnote">
            <p>MSIE does not support the <code>\v</code> vertical tab
            character in literal strings. Since <code>\v</code> is
            defined to be a <em>white space</em> character in Section
            7.2 of the ECMAScript standard, MSIE also fails white space
            handling involving <code>\v</code>.</p>

            <div class="example">
              Example Character Escapes

              <p>MSIE does not recognize vertical tab '\v' in
              strings.</p>
              <pre id="Example_Character_Escapes">
msg('\' supported ' + (String.fromCharCode(39) == '\''));
msg('\" supported ' + (String.fromCharCode(34) == '\"'));
msg('\\ supported ' + (String.fromCharCode(92) == '\\'));
msg('\b supported ' + (String.fromCharCode(8) == '\b'));
msg('\f supported ' + (String.fromCharCode(12) == '\f'));
msg('\n supported ' + (String.fromCharCode(10) == '\n'));
msg('\r supported ' + (String.fromCharCode(13) == '\r'));
msg('\t supported ' + (String.fromCharCode(9) == '\t'));
msg('\v supported ' + (String.fromCharCode(11) == '\v'));
</pre><script type="text/javascript">
//
generate_example('Example_Character_Escapes');
//
</script>
            </div>
          </div>
        </dd>

        <dt>Number</dt>

        <dd>
          <p>The <em>Number</em> primitive type are the lowest level
          representation of integers and floating point numbers. Number
          primitive values are <strong>not the same as instances of
          Number Objects</strong>.</p>

          <p>Literal primitive number values can be written as integers
          (<code>123</code>), as floating point with decimals
          (<code>123.456</code>), as floating point with exponents
          (<code>123.456e10</code>, the <code>e</code> may be either
          case), as hexadecimal integers (<code>0xFF</code>, the
          <code>x</code> or hex digits A-F may be either case)</p>
        </dd>

        <dt>Objects</dt>

        <dd>
          <p>As I already mentioned, objects in JavaScript are
          collections of unordered properties. Each property of an
          object has a set of <dfn>internal</dfn> (not directly
          accessible to JavaScript programs) attributes which control
          how the property can be accessed: <em>DontDelete</em>,
          <em>ReadOnly</em>, and <em>DontEnum</em>.</p>

          <dl>
            <dt>DontDelete</dt>

            <dd>the property is permanent and can not be removed from
            the object using the <code>delete</code> operator. Any
            attempt to delete the property is ignored without
            error.</dd>

            <dt>DontEnum</dt>

            <dd>
              the property is not listed when the <code>in</code>
              operator is used in a <code>for</code> loop to enumerate
              properties of an object. For example,
              <pre>
for (var propname in object) { … }
</pre>

              <p>will not list the property if it is <em>DontEnum</em>.
              However the <code>in</code> operator can be used to test
              if the property exists. For example,</p>
              <pre>
('propname' in object)
</pre>

              <p>will return <code>true</code> if
              <code>object.propname</code> exists and
              <code>false</code> otherwise.</p>
            </dd>

            <dt>ReadOnly</dt>

            <dd>the property can not be changed through assignment and
            any attempt to assign to it is ignored without error.</dd>
          </dl>

          <div class="implnote">
            <p>When JavaScript1.1 or JavaScript1.2 are used in Mozilla,
            attempting to delete a <em>{DontDelete}</em> property or
            attempting to change a <em>{ReadOnly}</em> property will
            throw an error.</p>

            <div class="example">
              <pre id="Example_Property_Attributes">
try
{
  Math.PI = 3;
  msg('Math.PI == ' + Math.PI);
}
catch(e)
{
  msg('Error assigning to a [ReadOnly] property. ' + 
      e.name + ': ' + e.message);
}
try
{
  delete Math.PI;
  msg('Math.PI == ' + Math.PI);
}
catch(e)
{
  msg('Error deleting a [DontDelete] property. ' +  
      e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_Property_Attributes');
//
</script>
            </div>
          </div>
        </dd>
      </dl>
    </dd>

    <dt><a name="Type_Conversions" id="Type_Conversions">Type
    Conversions</a></dt>

    <dd>
      <p>JavaScript automatically converts primitive values and object
      instances from one type to another depending upon the context.
      For example, as we have seen, when a number is <em>added</em> to
      a string using the <code>+</code> operator, JavaScript will
      determine that the appropriate operator is the string
      concatenation operator and will convert the number to a string
      before performing the operation.</p>

      <table summary="type conversions">
        <thead>
          <tr>
            <th>input</th>

            <th>To Boolean</th>

            <th>To Number</th>

            <th>To String</th>

            <th>To Object</th>
          </tr>
        </thead>

        <tbody>
          <tr>
            <th>Undefined</th>

            <td><code>false</code></td>

            <td><code>NaN</code></td>

            <td><code>'undefined'</code></td>

            <td><code>throw TypeError</code></td>
          </tr>

          <tr>
            <th>Null</th>

            <td><code>false</code></td>

            <td><code>+0</code></td>

            <td><code>'null'</code></td>

            <td><code>throw TypeError</code></td>
          </tr>

          <tr>
            <th>Boolean</th>

            <td>no conversion</td>

            <td><code>1</code> if input is <code>true</code>,
            <code>+0</code> if input is <code>false</code></td>

            <td><code>'true'</code> if input is <code>true</code>,
            <code>'false'</code> if input is <code>false</code></td>

            <td><code>new Boolean(input)</code></td>
          </tr>

          <tr>
            <th>Number</th>

            <td><code>false</code> if input <code>+0</code>,
            <code>-0</code>, or <code>NaN</code> otherwise
            <code>true</code></td>

            <td>no conversion</td>

            <td><code>'NaN'</code> if input is <code>NaN</code><br />
            <code>'0'</code> if input is <code>+0</code>,
            <code>-0</code><br />
            'Infinity' if input is <code>Infinity</code><br />
            otherwise a string primitive value consisting of the
            literal representation of the input value</td>

            <td><code>new Number(input)</code></td>
          </tr>

          <tr>
            <th>String</th>

            <td><code>false</code> if string is empty, otherwise
            <code>true</code></td>

            <td><code>NaN</code> if the input does not match a literal
            number value, otherwise the number represented by the
            equivalent literal number value.</td>

            <td>no conversion</td>

            <td><code>new String(input)</code></td>
          </tr>

          <tr>
            <th>Object</th>

            <td><code>true</code></td>

            <td>convert the object's default value to a number</td>

            <td>convert the object's default value to a string</td>

            <td>no conversion</td>
          </tr>
        </tbody>
      </table>

      <p>Type Conversions to primitive types can be performed by using
      the <em>constructors</em> of the Native Object types as functions
      rather than as <em>constructors</em>. For example:</p>

      <div class="example">
        <pre id="Example_Type_Conversions">
// Convert undefined to primitive values
msg('Boolean(undefined) is ' + Boolean(undefined));
msg('Boolean(null)      is ' + Boolean(null));
msg('Boolean(10)        is ' + Boolean(10));
msg('Boolean("42x")     is ' + Boolean("42x"));
msg('Number(undefined)  is ' + Number(undefined));
msg('Number(null)       is ' + Number(null));
msg('Number(10)         is ' + Number(10));
msg('Number("42x")      is ' + Number("42x"));
msg('String(undefined)  is ' + String(undefined));
msg('String(null)       is ' + String(null));
msg('String(10)         is ' + String(10));
msg('String("42x")      is ' + String("42x"));
</pre><script type="text/javascript">
//
generate_example('Example_Type_Conversions');
//
</script>
      </div>

      <p>One surprising result of the <em>Object to Boolean</em>
      conversion is that <strong>an instance of the
      <code>Boolean</code> Object with value <code>false</code>
      evaluates to <code>true</code> in conditional
      expressions</strong> but the <em>Object to String</em> conversion
      of the instance is the string 'false'.</p>

      <div class="example">
        <pre id="Example_False_is_True">
var bool = new Boolean(false);
if (bool)
{
  msg('new Boolean(false) is true');
}
else
{
  msg('new Boolean(false) is false');
}

msg('String(new Boolean(false)) is ' + String(bool));
</pre><script type="text/javascript">
//
generate_example('Example_False_is_True');
//
</script>
      </div>

      <div class="implnote">
        <p>In Mozilla (JavaScript1.1, JavaScript1.2), <code>new
        Boolean(false)</code> is converted to <code>false</code>
        instead of <code>true</code></p>
      </div>

      <div class="implnote">
        <p>When called as a function, the <code>Number</code>
        constructor attempts to convert its argument to a number
        value.</p>

        <p>Mozilla JavaScript1.2 converts an Array object to its
        length. Mozilla JavaScript1.1, JavaScript1.3-JavaScript1.5
        converts an empty Array to <code>0</code>, an Array with one
        element to <code>1</code> and a non-empty Array with length
        greater than <code>1</code> to <code>NaN</code> …
        <code>Number(array)</code> is like
        <code>Number(array.toString())</code>.</p>

        <div class="example">
          <pre id="Example_Number_Conversion_Array">
var empty = [];
var one = [1];
var nonempty = [1,2,3];

msg('Number(empty) == ' + Number(empty));
msg('Number(one) == ' + Number(one));
msg('Number(nonempty) == ' + Number(nonempty));
</pre><script type="text/javascript">
//
generate_example('Example_Number_Conversion_Array');
//
</script>
        </div>

        <p>MSIE converts all strings representing negative hexadecimal
        numbers to <code>NaN</code>.</p>

        <div class="example">
          <pre id="Example_Number_Conversion_Hex">
msg('Number("0x10") == ' + Number("0x10"));
msg('Number("-0x10") == ' + Number("-0x10"));
          
</pre><script type="text/javascript">
//
generate_example('Example_Number_Conversion_Hex');
//
</script>
        </div>
      </div>
    </dd>

    <dt><a name="Execution_Contexts" id="Execution_Contexts">Execution
    Contexts</a></dt>

    <dd>
      <p>Before any JavaScript code is executed, a unique <em>Global
      object</em> is created which has {DontEnum} properties for the
      standard built-in objects (Math, String, Date, etc.) and any
      properties created by the host environment.</p>

      <p>The environment in which a JavaScript program is executing is
      maintained in a <dfn>stack</dfn> of objects called <em>execution
      contexts</em>. A stack, also known as a Last in First Out
      (<acronym>LIFO</acronym>) list is a list of data items where
      items are added (pushed) or removed (popped) from one end called
      the top of the stack. The execution context at the top of the
      stack is used by the executing program as the current
      context.</p>

      <p>Each execution context maintains an <em>internal</em> object
      called the <em>variable</em> object which is used to hold
      references to the variables and functions created in that
      context. Each variable (or function) is stored in the
      <em>variable</em> object as a property with property name equal
      to the variable (or function) name.</p>

      <p>Each execution context also maintains a <dfn>scope chain</dfn>
      which is a list of objects which are searched when a variable or
      name needs to be resolved. Whenever JavaScript needs to resolve a
      reference to a name, it first looks in the current object in the
      scope chain for a property with the same name. If it is found,
      the data referenced by that propery is returned as the value of
      the name. If the name is not found, the next object in the scope
      chain is searched and so on until either the name has been
      resolved or all objects in the scope chain have been searched.
      Once created for a context, the scope chain is only effected by
      <code>with</code> statements and <code>catch</code> clauses.</p>

      <div class="example">
        Example Scope_Chain
        <pre id="Example_Scope_Chain">
var v = 'global scope';
var o = {v: 'object scope'};
var e;

msg('global this  == ' + this);
msg('global v     == ' + v);
msg('global e     == ' + e);

function test()
{
  msg('function this == ' + this);
  msg('function v    == ' + v);
  
  var v = 'function scope';

  with (o)
  {
    msg('with this == ' + this);
    msg('with o v  == ' + v);
  }

  try
  {
    throw 'string exception';
  }
  catch(e)
  {
    msg('catch this == ' + this);
    msg('catch e    == ' +  
         e.name + ': ' + e.message);
    e = 'catch scope';
  }
  msg('function e == ' + e);
  msg('function v == ' + v);
}
test();

msg('global v == ' + v);
msg('global e == ' + e);
        
</pre><script type="text/javascript">
//
generate_example('Example_Scope_Chain');
//
</script>
      </div>

      <div class="implnote">
        <p>MSIE creates the <code>catch</code> variable <code>e</code>
        containing the thrown exception in function scope. This means
        the variable <code>e</code> exists after the <code>catch</code>
        clause has finished executing but ceases to exist after the
        function where the <code>catch</code> clause was located exits.
        This is not the same as Mozilla which does not define the catch
        variable outside of the <code>catch</code> clause.</p>
      </div>

      <div class="implnote">
        <p>Both MSIE and Mozilla <em>bind</em> the initial scope to a
        function when it is created as a function expression. In the
        following example, <code>function f1()</code> is bound to a
        scope consisting of the global object while <code>function
        f2()</code> is defined inside a <code>with</code> clause which
        adds the object <code>o</code> to the beginning of the scope
        followed by the global object.</p>

        <div class="example">
          <pre id="Example_Scope_With_Func_Expr">
var v = 'value 1';
var o = {v: 'value 2'};

var f1 = function () { msg('v == ' + v); };

with (o)
{
  var f2 = function () { msg('v == ' + v); };
}

// call with the initial values 
f1();
f2();

// now modify the values 
v = 'modified value 1';
o.v = 'modified value 2';
f1();
f2();
</pre><script type="text/javascript">
//
generate_example('Example_Scope_With_Func_Expr');
//
</script>
        </div>

        <p>However when the function is defined using a function
        declaration, MSIE differs from Mozilla and <em>binds</em> the
        function to the global scope regardless of any scope changes
        introduced by <code>with</code> clauses.</p>

        <div class="example">
          <pre id="Example_Scope_With_Func_Def">
var v = 'value 1';
var o = {v: 'value 2'};

function f1() { msg('v == ' + v); };

with (o)
{
  function f2() { msg('v == ' + v); };
}

// call with the initial values 
f1();
f2();

// now modify the values 
v = 'modified value 1';
o.v = 'modified value 2';
f1();
f2();
</pre><script type="text/javascript">
//
generate_example('Example_Scope_With_Func_Def');
//
</script>
        </div>
      </div>

      <p>Each execution context maintains a special value called the
      <code>this</code> value which is determined by how the context
      was created and the type of code being executed. The
      <code>this</code> value can not be changed to point to a
      different object, although properties can be added or removed
      from it.</p>

      <dl>
        <dt>Global Execution Context</dt>

        <dd>
          <p>Whenever a JavaScript program begins, a <em>Global
          execution context</em> is created and pushed onto the top of
          the stack. The <em>scope chain</em> is initialized to contain
          just the global object and the <code>this</code> value is set
          to point to the global object. Variables are created as
          {DontDelete} properties of the global object.</p>

          <div class="example">
            Example Global_Execution_Context
            <pre id="Example_Global_Execution_Context">
var globalVar = 'this is a global variable';

msg('globalVar = ' + globalVar);
msg('this.globalVar = ' + globalVar);

try
{
  // it should not be possible delete the variable
  // but no error should be thrown.
  delete this.globalVar;
  msg('this.globalVar after delete = ' + this.globalVar);
}
catch(e)
{
  msg('An unexpected error occured deleting a globalVar variable ' +  
      e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_Global_Execution_Context');
//
</script>
          </div>

          <div class="implnote">
            <p>Mozilla (JavaScript1.1, JavaScript1.2) will throw an
            error when deleting a global variable since it is defined
            as <em>{DontDelete}</em>. Note that Mozilla JavaScript1.3
            and later do not have the behavior and that Mozilla
            JavaScript1.1, JavaScript1.2 do not throw errors when
            deleting function local variables even though they are also
            <em>{DontDelete}</em>.</p>
          </div>
        </dd>

        <dt>Eval Code Context</dt>

        <dd>
          <p>Whenever JavaScript code is compiled using the
          <code>eval</code> function, an <em>eval execution
          context</em> is created and pushed onto the stack until the
          <em>eval</em>'d code completes when the <em>eval execution
          context</em> is removed from the stack.</p>

          <p>The calling execution context determines the scope chain,
          the variable object and the <code>this</code> value for the
          eval execution context. If there is no calling context, the
          scope chain, variable object and the <code>this</code> value
          are determined in the same way as for the global execution
          context.</p>

          <div class="example">
            Example Eval_Execution_Context
            <pre id="Example_Eval_Execution_Context">
eval("var evalVar = 'this is an eval variable'");
msg('evalVar = ' + evalVar);
msg('this.evalVar = ' + evalVar);
try
{
  // it should be possible delete the variable
  // and no error should be thrown.
  delete this.evalVar;
  msg('this.evalVar after delete = ' + this.evalVar);
}
catch(e)
{
  msg('An unexpected error occured deleting a global variable ' +  
      e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_Eval_Execution_Context');
//
</script>
          </div>
        </dd>

        <dt>Function Execution Context</dt>

        <dd>
          <p>Each time a function call is performed, a <em>function
          execution context</em> is created and pushed onto the top of
          the stack and then removed from the stack when the function
          call ends.</p>

          <p>An <em>Activation Object</em> is created in the execution
          context for each function call and is treated as the
          <em>variable</em> object for the execution context. The scope
          chain for the context is created by placing the activation
          object in front of the scope chain of the calling execution
          context.</p>

          <p>An <code>arguments</code> object is added as a {DontEnum}
          property to the variable. The <code>arguments</code> object
          is initialized with the following properties:</p>

          <dl>
            <dt><code>callee</code></dt>

            <dd>
              <p>a {DontEnum} property which points to the function
              object being executed.</p>
            </dd>

            <dt><code>caller</code> (non-standard)</dt>

            <dd>
              <div class="implnote">
                <p>In Mozilla and MSIE, the non-standard
                <code>caller</code> property was used to point to the
                function which called the currently executing function.
                This property has been removed from recent releases of
                both browsers due to security considerations.</p>

                <div class="example">
                  <pre id="Example_Arguments_Caller">
function Caller()
{
  msg('Caller: Caller.arguments ' + Caller.arguments);
  Callee();
}
function Callee()
{
  msg('Callee: arguments.caller ' + arguments.caller);
}
Caller();
</pre><script type="text/javascript">
//
generate_example('Example_Arguments_Caller');
//
</script>
                </div>
              </div>
            </dd>

            <dt><code>length</code></dt>

            <dd>
              <p>a {DontEnum} property which contains the number of
              actual arguments in the function call.</p>
            </dd>

            <dt>a property for each argument</dt>

            <dd>
              <p>For each argument supplied, a {DontEnum} property of
              the same name is created in the
              <code>arguments</code>.</p>

              <div class="implnote">
                <p>Mozilla JavaScript1.1, JavaScript1.2 will allow
                function arguments to be enumerated as zero based
                indexes into the arguments list. This is not possible
                in Mozilla JavaScript1.3 or later.</p>
              </div>
            </dd>
          </dl>

          <p>In normal function calls, the <code>this</code> value
          remains unchanged from that of the calling context however in
          the context of a <em>constructor</em> call (<code>new
          SomeFunction()</code>), the <code>this</code> value is set to
          the newly created JavaScript object.</p>

          <p>An example of a normal function call…</p>

          <div class="example">
            Example Function_Call_Context
            <pre id="Example_Function_Call_Context">
var global = this;
var avar   = 'this is a global variable';

func('this is arg0', 'this is arg1');

msg('After func this === global is ' + (this === global));
msg('After func avar should be unchanged ' + avar);

function func(arg0, arg1, arg2)
{
  // the this value should point to the global object
  msg('Inside func this === global is ' + (this === global));

  // declare a varible local to the function
  var avar = 'this is a local variable';
  msg('Inside func avar == ' + avar);

  // attempt to delete the local variable
  try
  {
    msg('delete avar  == ' + (delete avar));
  }
  catch(e)
  {
    msg('an error occured during delete avar ' +  
      e.name + ': ' + e.message);
  }
  msg('typeof avar == ' + typeof avar);

  // the length of the function should be the number
  // of defined arguments. In this case 3.
  msg('func.length is ' + func.length);
  msg('arguments ' + arguments);

  // the length of the arguments object should be the
  // number of actual arguments the function was called with.
  // In this example it should be 2.
  msg('arguments.length is ' + arguments.length);

  // this function
  msg('arguments.callee &lt;pre&gt;' + arguments.callee +
      '&lt;/pre&gt;');

  // the caller function which will be undefined.
  msg('arguments.caller &lt;pre&gt;' + arguments.caller + '&lt;/pre&gt;');

  // the properties of the arguments object should be {DontEnum} 
  // so this should output the empty string.
  var arglist = '';
  for (var arg in arguments)
  {
    arglist += arg + ', ';
  }
  msg('Enumerable properties of arguments ' + arglist);
}
</pre><script type="text/javascript">
//
generate_example('Example_Function_Call_Context');
//
</script>
          </div>

          <p>An example of a constructor function call…</p>

          <div class="example">
            Example Constructor_Call_Context
            <pre id="Example_Constructor_Call_Context">
var global = this;
var avar   = 'this is a global variable';
var instance = new func('this is arg0', 'this is arg1');

msg('After func this === global is ' + (this === global));
msg('this.propname should be undefined ' + this.propname);
msg('instance.propname should be defined ' + instance.propname);

function func(arg0, arg1, arg2)
{
  // the this value should point to the newly created object
  // and _not_ the global object.
  msg('Inside func this === global is ' + (this === global));

  // add a property to this instance
  this.propname = 'a property in our new object';

  // attempt to delete the local variable
  try
  {
    msg('delete avar  == ' + (delete avar));
  }
  catch(e)
  {
    msg('an error occured during delete avar ' +  
      e.name + ': ' + e.message);
  }
  msg('typeof avar == ' + typeof avar);

  // the length of the function should be the number
  // of defined arguments. In this case 3.
  msg('func.length is ' + func.length);
  msg('arguments ' + arguments);

  // the length of the arguments object should be the
  // number of actual arguments the function was called with.
  // In this example it should be 2.
  msg('arguments.length is ' + arguments.length);

  // this function
  msg('arguments.callee &lt;pre&gt;' + arguments.callee +
      '&lt;/pre&gt;');

  // the caller function which will be undefined.
  msg('arguments.caller &lt;pre&gt;' + arguments.caller + '&lt;/pre&gt;');

  // the properties of the arguments object should be {DontEnum} 
  // so this should output the empty string.
  var arglist = '';
  for (var arg in arguments)
  {
    arglist += arg + ', ';
  }
  msg('Enumerable properties of arguments ' + arglist);
}
</pre><script type="text/javascript">
//
generate_example('Example_Constructor_Call_Context');
//
</script>
          </div>
        </dd>
      </dl>
    </dd>

    <dt><a name="Expressions" id="Expressions">JavaScript
    Expressions</a></dt>

    <dd>
      <dl>
        <dt><a name="Identifiers" id="Identifiers">Identifiers</a></dt>

        <dd>
          <p>An identifier is a sequence of characters beginning with
          either <code>$</code> (<em>dollar sign</em>), <code>_</code>
          (<em>underscore</em>) or a <em>unicode letter</em> followed
          by unicode letters, unicode digits, underscores
          (<code>_</code>) or dollar signs (<code>$</code>). The
          characters can also be written using unicode escape
          sequences. Note that identifiers are not restricted to the
          <em>normal</em> latin character set, but are instead allowed
          to have letters and digits from the unicode character
          set.</p>

          <div class="example">
            <pre id="Example_Valid_Identifiers">
// Valid Identifiers

// latin type variable identifiers
var _foo123;
var $foo123;
var foo123;
var foo_123$

// hindi variable identifier using unicode escapes
var \u092F\u0942\u0928\u093F\u0915\u094B\u0921 = 'unicode';
msg('\u092F\u0942\u0928\u093F\u0915\u094B\u0921 == ' + 
    \u092F\u0942\u0928\u093F\u0915\u094B\u0921);

// hindi variable identifier using unicode characters
var यूनिकोड = 'unicode';
msg('यूनिकोड == ' + यूनिकोड);

msg('Test passed');
</pre><script type="text/javascript">
//
generate_example('Example_Valid_Identifiers');
//
</script>
          </div>

          <div class="example">
            <pre id="Example_Invalid_Identifiers">
// Invalid Identifiers
// Mozilla will fire a window.onerror or exception handler 
// for compile time errors, however MSIE will not. 
try
{
  eval('var 0foo;');

  // the next statement is an error
  // the next statement should not be executed
  msg('Test failed: invalid identifier 0foo == ' + 0foo);
}
catch(e)
{
  msg('Test passed: 0foo is an invalid identifier ' +  
      e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_Invalid_Identifiers');
//
</script>
          </div>
        </dd>

        <dt><a name="Reserved_Words" id="Reserved_Words">Reserved
        Words</a></dt>

        <dd>
          <p>Keywords are identifiers which have special meanings in
          JavaScript and should not be used as variable or property
          names. Reserved words are identifiers which
          <strong>may</strong> be used as keywords in future versions
          of JavaScript and <em>should not be used as variable or
          property names</em>.</p>

          <div class="example">
            <p>Example 7.5.1 - Reserved Words</p>
            <pre id="Example_e-7.5.1">
// test if a word can be declared as var
function testvar(words)
{
  var e;
  for (var i = 0; i &lt; words.length; i++)
  {
    var word = words[i];
    try
    {
      eval('var ' + word + ';');
      msg('test failed: ' + word + ' is declarable');
    }
    catch(e)
    {
      msg('test passed: ' + word + ' is not declarable ' +  
      e.name + ': ' + e.message);
    }
  }
}

// test if a word can be assigned to
function testwrite(words)
{
  var e;
  for (var i = 0; i &lt; words.length; i++)
  {
    var word = words[i];
    try
    {
      eval(word + ' = "foo";');
      msg('test failed: ' + word + ' is writable');
    }
    catch(e)
    {
      msg('test passed: ' + word + ' is not writable ' +  
      e.name + ': ' + e.message);
    }
  }
}

// keywords
var keywords = 
['break',        'else',      'new',      'var',        'case', 
'finally',      'return',    'void',     'catch',      'for', 
'switch',       'while',     'continue', 'function',   'this', 
'with',         'default',   'if',       'throw',      'delete', 
'in',           'try',       'do',       'instanceof', 'typeof'];

// future reserved words
var reserved = 
['abstract',     'enum',      'int',      'short',      'boolean', 
'export',       'interface', 'static',   'byte',       'extends', 
'long',         'super',     'char',     'final',      'native', 
'synchronized', 'class',     'float',    'package',    'throws', 
'const',        'goto',      'private',  'transient',  'debugger', 
'implements',   'protected', 'volatile', 'double',     'import', 
'public'];

testvar(keywords);
testvar(reserved);
testwrite(keywords);
testwrite(reserved);
</pre><script type="text/javascript">
//
generate_example('Example_e-7.5.1');
//
</script>
          </div>

          <div class="implnote">
            <p>MSIE incorrectly allows the following to be declared as
            variables and assigned values: <code>abstract</code>,
            <code>int</code>, <code>short</code>, <code>boolean</code>,
            <code>interface</code>, <code>static</code>,
            <code>byte</code>, <code>long</code>, <code>char</code>,
            <code>final</code>, <code>native</code>,
            <code>synchronized</code>, <code>float</code>,
            <code>package</code>, <code>throws</code>,
            <code>goto</code>, <code>private</code>,
            <code>transient</code>, <code>implements</code>,
            <code>protected</code>, <code>volatile</code>,
            <code>double</code>, <code>public</code>.</p>

            <p>In Mozilla 1.7 (Firefox 1.0) JavaScript 1.1, JavaScript
            1.2 instanceof, enum, export, debugger are declarable and
            writable however in Mozilla 1.7 (Firefox 1.0) for
            JavaScript 1.3 and later the other keywords and reserved
            words are not declarable or writable.</p>

            <p>Mozilla 1.8 (Firefox 1.1) and later (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=240317">Bugzilla
            240317</a>) relax the declaration and assignment of
            reserved identifiers to improve MSIE compatibility. The
            following words will no longer throw errors but will still
            issue JavaScript warnings: <code>abstract</code>,
            <code>enum</code>, <code>int</code>, <code>short</code>,
            <code>boolean</code>, <code>interface</code>,
            <code>static</code>, <code>byte</code>,
            <code>extends</code>, <code>long</code>,
            <code>super</code>, <code>char</code>, <code>final</code>,
            <code>native</code>, <code>synchronized</code>,
            <code>class</code>, <code>float</code>,
            <code>package</code>, <code>throws</code>,
            <code>goto</code>, <code>private</code>,
            <code>transient</code>, <code>implements</code>,
            <code>protected</code>, <code>volatile</code>,
            <code>double</code>, <code>public</code></p>
          </div>
        </dd>

        <dt><a name="Function_Expressions" id="Function_Expressions">Function Expressions</a></dt>

        <dd>
          <div class="implnote">
            <p>Mozilla can define functions in conditionals. If the
            code branch is not executed due to the conditional the
            function is not defined. MSIE however uses the definition
            of the last occurence of the function. Both Mozilla and
            MSIE can conditionally define function expressions.</p>

            <div class="example">
              <pre id="Example_Function_Definition_Conditional">
// works in Mozilla, not MSIE
if (true)
{
  function f() { return 'true'; };
}
else
{
  function f() { return false; };
}
msg('Conditional Function: ' + f()); 
</pre><script type="text/javascript">
//
generate_example('Example_Function_Definition_Conditional');
//
</script>
            </div>

            <div class="example">
              <pre id="Example_Function_Expression_Conditional">
// works in Mozilla and MSIE
var f;
if (true)
{
  f = function () { return 'true'; };
}
else
{
  f = function () { return false; };
}
msg('Conditional Function: ' + f()); 
</pre><script type="text/javascript">
//
generate_example('Example_Function_Expression_Conditional');
//
</script>
            </div>
          </div>

          <div class="implnote">
            <p>MSIE violates the ECMSAcript standard since it can
            reference a function name outside of the function
            expression.</p>
            <pre id="Example_Function_Expression_Name">
f = function foo(){alert('foo');};
foo();
</pre><script type="text/javascript">
//
generate_example('Example_Function_Expression_Name');
//
</script>
          </div>
        </dd>
      </dl>
    </dd>

    <dt><a name="Operators" id="Operators">Operators</a></dt>

    <dd>
      <table summary="Operator Precedence and Associativity">
        <caption>
          <a name="Operator_Precedence" id="Operator_Precedence">Operator Precedence and
          Associativity</a>
        </caption>

        <thead>
          <tr>
            <th>Description</th>

            <th>Operator</th>

            <th>Associativity</th>
          </tr>
        </thead>

        <tbody>
          <tr>
            <td><a href="#Member_of_Operators">member of</a></td>

            <td><a href="#Member_of_Brackets_Operator"><code>[]</code></a>  
            <a href="#Member_of_DOT_Operator"><code>.</code></a></td>

            <td>left to right</td>
          </tr>

          <tr>
            <td>(grouping | function call), create instance</td>

            <td><a href="#Parentheses_Operator"><code>()</code></a>  
            <a href="#new_Operator"><code>new</code></a></td>

            <td>right to left</td>
          </tr>

          <tr>
            <td><a href="#Unary_Operators">unary</a></td>

            <td><a href="#Unary_Logical_Not_Operator"><code>!</code></a>  
            <a href="#Unary_Complement_Operator"><code>~</code></a>  
            <a href="#Increment_Operator"><code>++</code></a>  
            <a href="#Decrement_Operator"><code>--</code></a>  
            <a href="#Unary_Plus_Operator"><code>+</code></a>  
            <a href="#Unary_Minus_Operator"><code>-</code></a>  
            <a href="#Typeof_Operator"><code>typeof</code></a>  
            <a href="#Void_Operator"><code>void</code></a>  
            <a href="#Delete_Operator"><code>delete</code></a></td>

            <td>right to left</td>
          </tr>

          <tr>
            <td>multiplicative</td>

            <td><a href="#Multiplication_Operator"><code>*</code></a>  
            <a href="#Division_Operator"><code>/</code></a>  
            <a href="#Modulus_Operator"><code>%</code></a></td>

            <td>left to right</td>
          </tr>

          <tr>
            <td>addition</td>

            <td><a href="#Addition_Operator"><code>+</code></a>  <a href="#Subtraction_Operator"><code>-</code></a></td>

            <td>left to right</td>
          </tr>

          <tr>
            <td>bitwise shift</td>

            <td><a href="#Left_Shift_Operator"><code>&lt;&lt;</code></a>  
            <a href="#Signed_Right_Shift_Operator"><code>&gt;&gt;</code></a>  
            <a href="#Unsigned_Right_Shift_Operator"><code>&gt;&gt;&gt;</code></a></td>

            <td>left to right</td>
          </tr>

          <tr>
            <td>relational</td>

            <td><a href="#Less_than_Operator"><code>&lt;</code></a>  
            <a href="#Less_than_or_equal_Operator"><code>&lt;=</code></a>  
            <a href="#Greater_than_Operator"><code>&gt;</code></a>  
            <a href="#Greater_than_or_equal_Operator"><code>&gt;=</code></a>  
            <a href="#In_Operator"><code>in</code></a>  <a href="#Instanceof_Operator"><code>instanceof</code></a></td>

            <td>left to right</td>
          </tr>

          <tr>
            <td>equality</td>

            <td><a href="#Equals_Operator"><code>==</code></a>  <a href="#Strict_Equals_Operator"><code>===</code></a>  
            <a href="#Does_not_equal_Operator"><code>!=</code></a>  
            <a href="#Strict_Does_not_equal_Operator"><code>!==</code></a></td>

            <td>left to right</td>
          </tr>

          <tr>
            <td>bitwise and</td>

            <td><a href="#Binary_And_Operator"><code>&amp;</code></a></td>

            <td>left to right</td>
          </tr>

          <tr>
            <td>bitwise xor</td>

            <td><a href="#Binary_XOR_Operator"><code>^</code></a></td>

            <td>left to right</td>
          </tr>

          <tr>
            <td>bitwise or</td>

            <td><a href="#Binary_Or_Operator"><code>|</code></a></td>

            <td>left to right</td>
          </tr>

          <tr>
            <td>logical and</td>

            <td><a href="#Logical_And_Operator"><code>&amp;&amp;</code></a></td>

            <td>left to right</td>
          </tr>

          <tr>
            <td>logical or</td>

            <td><a href="#Logical_Or_Operator"><code>||</code></a></td>

            <td>left to right</td>
          </tr>

          <tr>
            <td>conditional</td>

            <td><a href="#Conditional_Operator"><code>?:</code></a></td>

            <td>right to left</td>
          </tr>

          <tr>
            <td>assignment</td>

            <td><a href="#Simple_Assignment_Operator"><code>=</code></a>  
            <a href="#Compound_Assignment_Operators"><code>*=</code></a>  
            <a href="#Compound_Assignment_Operators"><code>/=</code></a>  
            <a href="#Compound_Assignment_Operators"><code>%=</code></a>  
            <a href="#Compound_Assignment_Operators"><code>-=</code></a>  
            <a href="#Compound_Assignment_Operators"><code>&lt;&lt;=</code></a>  
            <a href="#Compound_Assignment_Operators"><code>&gt;&gt;=</code></a>  
            <a href="#Compound_Assignment_Operators"><code>&gt;&gt;&gt;=</code></a>  
            <a href="#Compound_Assignment_Operators"><code>&amp;=</code></a>  
            <a href="#Compound_Assignment_Operators"><code>^=</code></a>  
            <a href="#Compound_Assignment_Operators"><code>|=</code></a></td>

            <td>right to left</td>
          </tr>

          <tr>
            <td>comma</td>

            <td><a href="#Comma_Operator"><code>,</code></a></td>

            <td>left to right</td>
          </tr>
        </tbody>
      </table>

      <dl>
        <dt><a name="Member_of_Operators" id="Member_of_Operators">Member of Operators</a></dt>

        <dd>
          <div class="implnote">
            <p>Mozilla has the ability to define getter and setter
            methods for user defined objects. Note that Mozilla
            introduced this feature in JavaScript 1.5, however it is
            available for all language versions in Mozilla.</p>

            <ul>
              <li>
                <p><strong>deprecated</strong> - can only create
                <em>getters</em> and <em>setters</em> as local
                properties.</p>
                <pre>
{_prop: stuff, get prop() {...}, set prop() {...}}
</pre>or
                <pre>
instance.propname getter = function(arglist) {...};
</pre>or
                <pre>
instance.propname setter = function(arglist) {...};
</pre>
              </li>

              <li>
                <p><strong>recommended</strong> - can create
                <em>getters</em> and <em>setters</em> as shared
                properties.</p>
                <pre>
someObject.prototype.__defineGetter__('propname', 
                                      function(arglist) )
someObject.prototype.__lookupGetter__('propname');
</pre>and
                <pre>
someObject.prototype.__defineSetter__('propname', 
                                      function(arglist) )
someObject.prototype.__lookupSetter__('propname');
</pre>
              </li>
            </ul>

            <div class="example">
              <pre id="Example_Get_Set">
var deprecated_1 = {
  _prop: 'default value',

  get prop()  { return this._prop; },
  set prop(v) { return this._prop = v; }
}

msg('deprecated_1.prop == ' + deprecated_1.prop);
     deprecated_1.prop = 'foo';
msg('deprecated_1.prop == ' + deprecated_1.prop);

var deprecated_2 = {
  _prop: 'default value'
};

deprecated_2.prop getter = 
function()  { return this._prop; };

deprecated_2.prop setter = 
function(v) { return this._prop = v; };


msg('deprecated_2.prop == ' + deprecated_2.prop);
     deprecated_2.prop = 'foo';
msg('deprecated_2.prop == ' + deprecated_2.prop);

function NonDeprecated(v)
{
  this.prop = v;
}

NonDeprecated.prototype.__defineGetter__('prop', 
  function() { 
    return this._prop;
  }
);

NonDeprecated.prototype.__defineSetter__('prop', 
  function (v) { 
    return this._prop = v; 
  }
);
 
var nondeprecated = new NonDeprecated('initial value');

// call getter
msg('nondeprecated.prop == ' + nondeprecated.prop);

// call setter
nondeprecated.prop = 'foo';

msg('nondeprecated.prop == ' + nondeprecated.prop);

// lookup getter
msg('nondeprecated.__lookupGetter__(\'prop\') == ' + 
     nondeprecated.__lookupGetter__('prop'));


// lookup setter
msg('nondeprecated.__lookupSetter__(\'prop\') == ' + 
     nondeprecated.__lookupSetter__('prop'));

</pre><script type="text/javascript">
//
generate_example('Example_Get_Set');
//
</script>
            </div>
          </div>
	  <div class="implnote">
	  <p>
	    The <code>__noSuchMethod__</code> handler was introduced in
	    Mozilla 1.6 in <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=196097">Bug
	    196097 '__noSuchMethod__' handler</a> for trapping calls to
	    undefined object methods.
	  </p>
	  <div class="example">
	    <pre id="Example__noSuchMethod__">
// define on an object instance
var obj = {};

obj.__noSuchMethod__ = 
function(id, args) {
  msg('Undefined method ' + id + 
      ' called with arguments (' + args.join(', ') + ')');
};

obj.foo('bar');

// define on an object prototype
Object.prototype.__noSuchMethod__ = 
function(id, args) {
  msg('Undefined method ' + id + 
      ' called with arguments (' + args.join(', ') + ')');
};

var date = new Date();

date.baz('foobar');
	    </pre>
	    <script type="text/javascript">
//
generate_example('Example__noSuchMethod__');
//
	    </script>
	  </div>
	  </div>
        </dd>

        <dt><a name="Member_of_Brackets_Operator" id="Member_of_Brackets_Operator" title="Operator: []">Member of
        (<code>[]</code>) Operator</a></dt>

        <dd>
          <p>Syntax</p>
          <pre>
<i>expression[propertyexpression]</i>
</pre>

          <dl>
            <dt><a name="Access_Object_Properties" id="Access_Object_Properties">Access Object
            Properties</a></dt>

            <dd>
              <p>Returns the value of a property from an instance of an
              object.</p>

              <p>The result of evaluating <var>expression</var> must be
              or be convertable to an instance of an object, otherwise
              a <code>TypeError</code> is thrown. For example, it is a
              <code>TypeError</code> to attempt to access or set a
              property on <code>undefined</code> or <code>null</code>
              values.</p>

              <div class="example">
                <pre id="Example_Member_of_Brackets_1">
try
{
  null['prop'] = 'foo';
}
catch(e)
{
  msg(e.name + ': ' + e.message)
}
</pre><script type="text/javascript">
//
generate_example('Example_Member_of_Brackets_1');
//
</script>
              </div>

              <p>The name of the property is obtained by evaluating
              <var>propertyexpression</var> and converting the result
              to a string primitive value. There is no restriction on
              the characters which can be used as part of the property
              name.</p>

              <div class="example">
                <pre id="Example_Member_of_Brackets_2">
var object = {};
object['0' + Math.PI] = 'bar';
</pre><script type="text/javascript">
//
generate_example('Example_Member_of_Brackets_2');
//
</script>
              </div>

              <p>If the property exists in the object, the values is
              returned, otherwise <code>undefined</code> is
              returned.</p>

              <div class="example">
                <pre id="Example_Member_of_Brackets_3">
var object = {foo: 'bar'};
msg('object["foo"] == ' + object["foo"]);
msg('object["fu"]  == ' + object["fu"]);
</pre><script type="text/javascript">
//
generate_example('Example_Member_of_Brackets_3');
//
</script>
              </div>
            </dd>

            <dt><a name="Access_Array_items" id="Access_Array_items">Access Array items</a></dt>

            <dd>
              <p>Instances of <code>Array</code> Objects treat the
              numeric index (position) values of items in the array as
              special object property values which must be less than
              2<sup>32</sup>. If an item does not exist at the
              specified position in the array, <code>undefined</code>
              is returned.</p>

              <div class="implnote">
                Neither Mozilla nor MSIE appear to limit the index
                values to less than 2<sup>32</sup>.
              </div>

              <div class="example">
                <pre id="Example_Member_of_Brackets_4">
var array = [0, 1, 2];
msg('array[0] == ' + array[0]);
msg('array[1] == ' + array[1]);
msg('array[2] == ' + array[2]);
msg('array[3] == ' + array[3]);

var exponents = [32, 64, 128, 256];
for (var i = 0; i &lt; exponents.length; i++)
{
  var exponent = exponents[i];
  var index = Math.pow(2,exponent);
  try
  {
    array[index] = index;
    msg('array[' + index + '] == ' + array[index]);
  }
  catch(e)
  {
    msg('Exception attempting to set array item at index ' + 
        index + ' ' + 
      e.name + ': ' + e.message);
  }
}
</pre><script type="text/javascript">
//
generate_example('Example_Member_of_Brackets_4');
//
</script>
              </div>
            </dd>

            <dt>Access characters in Strings</dt>

            <dd>
              <div class="implnote">
                Mozilla extends the <code>[]</code> operator to allow
                it to access characters from string values as if the
                string were an array of characters. This is not
                supported in MSIE.

                <div class="example">
                  <pre id="Example_Member_of_Brackets_5">
var string = "abc";
msg('string[0] == ' + string[0]);
msg('string[1] == ' + string[1]);
msg('string[2] == ' + string[2]);
msg('string[3] == ' + string[3]);
</pre><script type="text/javascript">
//
generate_example('Example_Member_of_Brackets_5');
//
</script>
                </div>
              </div>
            </dd>
          </dl>
        </dd>

        <dt><a name="Member_of_DOT_Operator" id="Member_of_DOT_Operator">Member of (<code>.</code>)
        Operator</a></dt>

        <dd>
          <p class="tbw">.</p>
        </dd>

        <dt><a name="Parentheses_Operator" id="Parentheses_Operator">Grouping (<code>()</code>)
        Operator</a></dt>

        <dd>
          <p class="tbw">grouping and function call</p>
        </dd>

        <dt><a name="new_Operator" id="new_Operator" title="Operator: new">Create instance (<code>new</code>)
        Operator</a></dt>

        <dd>
          <div class="example">
            <pre id="Example_New_Operator">
// new Operand, Operand must be an Object with Constructor else 
// throws TypeError
try
{
  var o  = new 'foo';
}
catch(e)
{
  msg('Test passed : ' +  
      e.name + ': ' + e.message);
  if (e instanceof TypeError)
  {
    msg('Error Object is a TypeError');
  }
  else
  {
    msg('Error: Error Object is not a TypeError');
  }
}
</pre><script type="text/javascript">
//
generate_example('Example_New_Operator');
//
</script>
          </div>
        </dd>

        <dt><a name="Unary_Operators" id="Unary_Operators">Unary
        Operators</a></dt>

        <dd>
          <p class="tbw">.</p>
        </dd>

        <dt><a name="Unary_Logical_Not_Operator" id="Unary_Logical_Not_Operator" title="Operator: !">&gt;Unary
        Logical Not (<code>!</code>) Operator</a></dt>

        <dd>
          <p>Unary Logical Not (<code>!</code>) converts the value to
          boolean, then returns <code>false</code> if the value was
          <code>true</code> and <code>true</code> otherwise.</p>
        </dd>

        <dt><a name="Unary_Complement_Operator" id="Unary_Complement_Operator" title="Operator: ~">Unary Bitwise
        Complement (<code>~</code>) Operator</a></dt>

        <dd>
          <p>Unary Bitwise Complement <code>~</code> converts its
          operand to a 32-bit integer, then performs bitwise complement
          (switching 0 ↔ 1). Non-numeric values are converted to
          -1 (the complement of <code>0</code>).</p>

          <div class="example">
            Example Unary_Bit_Negation
            <pre id="Example_Unary_Bit_Negation">
msg('~(+1) == ' + ~(+1))
msg('~(-1) == ' + ~(-1));
msg('~0x0f) == ' + ~0x0f);
msg('~(NaN) == ' + ~(NaN));
msg('~(0)  == ' + ~(0));
msg('~(\'1\') == ' + ~('1'));
msg('~(\'a\') == ' + ~('a'));
</pre><script type="text/javascript">
//
generate_example('Example_Unary_Bit_Negation');
//
</script>
          </div>
        </dd>

        <dt><a name="Increment_Operator" id="Increment_Operator" title="Operator: ++">Increment (<code>++</code>) Operator</a></dt>

        <dd>
          <p>The <em>increment</em> operator (<code>++</code>) is used
          to add the number <code>1</code> to a variable or object
          property. It can be applied either in prefix
          (<code>++<var>variable</var></code>) or postfix
          (<code><var>variable</var>++</code>) forms. When used as a
          prefix, <code>++<var>variable</var></code>, it first converts
          the value to a primitive number value, increments the value
          and then returns the new value as a primitive number value
          for use in the expression. When used as a postfix,
          <code><var>variable</var>++</code>, it increments the value
          but returns the original value for use in the expression.</p>

          <p><code>++</code> can only be used on named instances
          containing values which can be converted to number primitive
          values.</p>

          <div class="example">
            Example Increment_Operator
            <pre id="Example_Increment_Operator">
var value = 0;
msg('before: value == ' + value + 
    ', during: ++value == ' + ++value + 
    ', after: value == ' + value);

value = 0;
msg('before: value == ' + value + 
    ', during: value++ == ' + value++ + 
    ', after: value == ' + value);

// instances of Number Objects are converted to primitive number values
value = new Number(0);
msg('before: typeof value == ' + typeof value + 
    ', value == ' + value + 
    ', during: value++ == ' + value++ + 
    ', after: typeof value == ' + typeof value + 
    ', value == ' + value);

// instances of strings are converted to primitive number values
value = '0';
msg('before: typeof value == ' + typeof value + 
    ', value == ' + value + 
    ', during: value++ == ' + value++ + 
    ', after: typeof value == ' + typeof value + 
    ', value == ' + value);
</pre><script type="text/javascript">
//
generate_example('Example_Increment_Operator');
//
</script>
          </div>

          <div class="example">
            Example Increment_Operator_Errors
            <pre id="Example_Increment_Operator_Errors">
try
{
  // attempt to increment a literal is a compile time error
  // use eval to force runtime error.
  eval('++1;');
  msg('Test failed. ++1 == ' + eval('++1'));
}
catch (e)
{
  msg('The operand of ++ can not be a literal');
}
try
{
  // It is an error to increment a string if it can 
  // not be converted to a primitive number value.
  var s = 'string';
  eval('++s;');
  msg('Test failed. ++s == ' + string);
}
catch (e)
{
  msg('The operand of ++ must convertable to a number');
}
</pre><script type="text/javascript">
//
generate_example('Example_Increment_Operator_Errors');
//
</script>
          </div>
        </dd>

        <dt><a name="Decrement_Operator" id="Decrement_Operator" title="Operator: --">Decrement (<code>--</code>) Operator</a></dt>

        <dd>
          <p>The <em>increment</em> operator (<code>--</code>) is used
          to subtract the number <code>1</code> from a variable or
          object property. It can be applied in prefix
          (<code>--<var>variable</var></code>) or postfix
          (<code><var>variable</var>--</code>) forms. When used as a
          prefix, <code>--<var>variable</var></code>, it first converts
          the value to a primitive number value, increments the
          variable and then returns the new value as a primitive number
          value for use in the expression. When used as a postfix,
          <code><var>variable</var>--</code>, it increments the value
          but returns the original value for use in the expression.</p>

          <p><code>--</code> can only be used on named instances
          containing values which can be converted to number primitive
          values.</p>
        </dd>

        <dt><a name="Unary_Plus_Operator" id="Unary_Plus_Operator" title="Operator: + (unary)">Unary (<code>+</code>)
        Operator</a></dt>

        <dd>
          <p>unary <code>+</code> operator converts its single operand
          to a primitive number value. If the operand can not be
          converted to a number, the value <code>NaN</code> is
          returned.</p>

          <div class="example">
            <pre id="Example_Unary_Plus">
var before = '1';
var after  = +before;
msg('typeof before == ' + typeof before + ', before == ' + before);
msg('typeof after == ' + typeof after + ', after == ' + after);

before = 'a';
after = +before;
msg('typeof before == ' + typeof before + ', before == ' + before);
msg('typeof after == ' + typeof after + ', after == ' + after);
</pre><script type="text/javascript">
//
generate_example('Example_Unary_Plus');
//
</script>
          </div>
        </dd>

        <dt><a name="Unary_Minus_Operator" id="Unary_Minus_Operator" title="Operator: - (unary)">Unary (<code>-</code>)
        Operator</a></dt>

        <dd>
          <p>unary <code>-</code> operator converts its single operand
          to a primitive number value and then returns the negative of
          that value. If the operand can not be converted to a number,
          the value <code>NaN</code> is returned.</p>

          <div class="example">
            <pre id="Example_Unary_Minus">
var before = '1';
var after  = -before;
msg('typeof before == ' + typeof before + ', before == ' + before);
msg('typeof after == ' + typeof after + ', after == ' + after);

before = 'a';
after = -before;
msg('typeof before == ' + typeof before + ', before == ' + before);
msg('typeof after == ' + typeof after + ', after == ' + after);
</pre><script type="text/javascript">
//
generate_example('Example_Unary_Minus');
//
</script>
          </div>
        </dd>

        <dt><a name="Typeof_Operator" id="Typeof_Operator" title="Operator: typeof">Typeof (<code>typeof</code>)
        Operator</a></dt>

        <dd>
          <p>The <code>typeof</code> operator returns a string value
          representing the primitive type of its operand.</p>

          <table summary="typeof results">
            <caption>
              typeof operator results
            </caption>

            <thead>
              <tr>
                <th>Input Type</th>

                <th>Output</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>undefined</td>

                <td>'undefined'</td>
              </tr>

              <tr>
                <td>null</td>

                <td>'object'</td>
              </tr>

              <tr>
                <td>primitive boolean</td>

                <td>'boolean'</td>
              </tr>

              <tr>
                <td>primitive number</td>

                <td>'number'</td>
              </tr>

              <tr>
                <td>primitive string</td>

                <td>'string'</td>
              </tr>

              <tr>
                <td>any native object</td>

                <td>'object'</td>
              </tr>

              <tr>
                <td>any native function</td>

                <td>'function</td>
              </tr>

              <tr>
                <td>host object</td>

                <td>implementation-dependent</td>
              </tr>
            </tbody>
          </table>

          <div class="example">
            Example typeof Operator
            <pre id="Example_Typeof_Operator">
msg('typeof undefined   == ' + typeof undefined);
msg('typeof null        == ' + typeof null);
msg('typeof true        == ' + typeof true);
msg('typeof 1           == ' + typeof 1);
msg('typeof \'s\'        == ' + typeof 's');
msg('typeof new Boolean == ' + typeof new Boolean);
msg('typeof new Number  == ' + typeof new Number);
msg('typeof new String  == ' + typeof new String);
msg('typeof new Object  == ' + typeof new Object);
msg('typeof function f(){} == ' + typeof function f(){});
</pre><script type="text/javascript">
//
generate_example('Example_Typeof_Operator');
//
</script>
          </div>
        </dd>

        <dt><a name="Void_Operator" id="Void_Operator" title="Operator: void">Void (<code>void</code>) Operator</a></dt>

        <dd>
          <p>The <code>void</code> operator evaluates an expression but
          discards any return value and returns
          <code>undefined</code>.</p>

          <div class="example">
            Example void Operator
            <pre id="Example_Void_Operator">
msg('void (1+2) == ' + void (1+2));
</pre><script type="text/javascript">
//
generate_example('Example_Void_Operator');
//
</script>
          </div>
        </dd>

        <dt><a name="Delete_Operator" id="Delete_Operator" title="Operator: delete">Delete property (<code>delete</code>)
        Operator</a></dt>

        <dd>
          <p>The <code>delete</code> operator removes a property from
          an Object and returns <code>true</code> if the variable does
          not exist after being removed. Note that <code>delete</code>
          has no effect on JavaScript object properties which are
          defined to be <em>{DontDelete}</em>.</p>

          <div class="example">
            Example Delete Operator
            <pre id="Example_Delete_Operator">
// attempt to delete a declared variable
// which should fail without an error
var value  = 'a value';
var before = value;
var result = delete value;
var after  = value;
msg('before: value == ' + before +
    ' result: ' + result + 
    ' after: value == ' + after);

// attempt to delete an undeclared variable
// which should succeed
undeclared  = 'a value';
var before = undeclared;
var result = delete undeclared;
var after  = typeof(undeclared);
msg('before: undeclared == ' + before +
    ' result: ' + result + 
    ' after: undeclared == ' + after);

// attempt to delete a property from a user defined object
var object = {property: 'value'}
var before = object.property;
var result = delete object.property;
var after  = object.property;
msg('before: object.property == ' + before +
    ' result: ' + result + 
    ' after: object.property == ' + after);

// attempt to delete a property that does not exist
before = object.foo;
result = delete object.foo;
after  = object.foo;
msg('before: object.foo == ' + before +
    ' result: ' + result + 
    ' after: object.foo == ' + after);

// attempt to delete a {DontDelete} property 
before = Math.PI;
result = delete Math.PI;
after  = Math.PI;
msg('before: Math.PI == ' + before +
    ' result: ' + result + 
    ' after: Math.PI == ' + after);
</pre><script type="text/javascript">
//
generate_example('Example_Delete_Operator');
//
</script>
          </div>
        </dd>

        <dt><a name="Multiplication_Operator" id="Multiplication_Operator" title="Operator: *">Multiplication
        (<code>*</code>) Operator</a></dt>

        <dd>
          <p>Multiplication <code>*</code> operator converts its
          operands to number values, then returns the product of the
          two values as the result. If the conversion results in
          <code>NaN</code>, the result is <code>NaN</code>.</p>

          <div class="example">
            Example Multiplication_Operator
            <pre id="Example_Multiplication_Operator">
msg('2 * 2 == ' + (2*2));
msg('"2" * "2" == ' + ("2" * "2"));
msg('"a" * "b" == ' + ("a" * "b"));
</pre><script type="text/javascript">
//
generate_example('Example_Multiplication_Operator');
//
</script>
          </div>
        </dd>

        <dt><a name="Division_Operator" id="Division_Operator" title="Operator: /">Division (<code>/</code>) Operator</a></dt>

        <dd>
          <p>Division <code>/</code> operator converts its operands to
          number values, then returns the quotient of the two values as
          a result. If the divisor is <code>0</code>,
          <code>Infinity</code> is returned. If the conversion results
          in <code>NaN</code>, the result in <code>NaN</code>.</p>

          <div class="example">
            Example Division_Operator
            <pre id="Example_Division_Operator">
msg('1 / 2 == ' + (1 / 2));
msg('1 / 0 == ' + (1 / 0));
msg('"1" / "2" == ' + ("1" / "2"));
msg('"a" / "b" == ' + ("a" / "b"));
</pre><script type="text/javascript">
//
generate_example('Example_Division_Operator');
//
</script>
          </div>
        </dd>

        <dt><a name="Modulus_Operator" id="Modulus_Operator" title="Operator: %">Modulus (<code>%</code>) Operator</a></dt>

        <dd>
          <p>The Modulus <code>%</code> operator converts it operands
          to number values, then returns the remainder of a division of
          its left operand by its right. Unlike <code>C</code>,
          <code>%</code> can operate on non-integers.</p>

          <ul>
            <li>If the conversion of either operand results in
            <code>NaN</code>, the result in <code>NaN</code>.</li>

            <li>If the left operand is <code>Infinity</code>, or the
            right operand is <code>0</code>, the result is
            <code>NaN</code>.</li>

            <li>If the left operand is <code>0</code> and the right
            operand is not <code>Infinite</code>, the result is
            <code>0</code>.</li>

            <li>otherwise the sign of the result equals the sign of the
            left operand and the result is <code>left*right*q</code>
            for the largest integer <code>q</code> which has the same
            sign of <code>left/right</code> such that <code>q &lt;=
            left/right</code>.</li>
          </ul>

          <div class="example">
            Example Modulus Operator
            <pre id="Example_Modulus_Operator">
msg('"a" % 2 == ' + "a" % 2);
msg('2 % "a" == ' + 2 % "a");
msg('Infinity % 2 == ' + Infinity % 2);
msg('0 % Infinity == ' + 0 % Infinity);
msg('1 % Infinity == ' + 1 % Infinity);
msg('3 % 0 == ' + 3 % 0);
msg('3 % 2 == ' + 3 % 2);
msg('(-3) % 2 == ' + (-3) % 2);
msg('3 % (-2) == ' + 3 % (-2));
msg('3.5 % 2.5 == ' + 3.5 % 2.5);
msg('Math.PI % 3 == ' + Math.PI % 3);
</pre><script type="text/javascript">
//
generate_example('Example_Modulus_Operator');
//
</script>
          </div>
        </dd>

        <dt><a name="Addition_Operator" id="Addition_Operator" title="Operator: + (addition)">Addition (<code>+</code>)
        Operator</a></dt>

        <dd>
          <p>Depending on the types of its operands, <code>+</code>
          either performs numeric addition or string concatenation.</p>

          <p>If either operand is a string (or convertable to a
          string), the <code>+</code> operator performs string
          concatenation.</p>

          <p>If both operands are numbers (or convertable to numbers),
          the <code>+</code> operator performs numeric addition.</p>

          <div class="example">
            Example Addition Operator
            <pre id="Example_Addition_Operator">
// string concatenation
msg('"1" + "2" == ' + ("1" + "2"));
msg('"1" + 2 == ' + ("1" + 2));
msg('1 + "2" == ' + (1 + "2"));
msg('"a" + "2" == ' + ("a" + "2"));
msg('"a" + 2 == ' + ("a" + 2));
msg('1 + "a" == ' + (1 + "a"));

// numeric addition
// note how the grouping operator () forces the intermediate result
// of (1 + 2) to be calculated as a numeric addition 
msg('1 + 2 == ' + (1 + 2));

// without the grouping operator string concatenation would have 
// been performed
msg('1 + 2 == ' + 1 + 2);
</pre><script type="text/javascript">
//
generate_example('Example_Addition_Operator');
//
</script>
          </div>
        </dd>

        <dt><a name="Subtraction_Operator" id="Subtraction_Operator" title="Operator: - (subtraction)">Subtraction (<code>-</code>)
        Operator</a></dt>

        <dd>
          <p>The subtraction <code>-</code> operator converts its
          operands to number values, then returns the result of
          subtracting the right operand from the left.</p>

          <div class="example">
            <pre id="Example_Subtraction_Operator">
// subtract a number from a number
msg('2 - 1 == ' + (2 - 1));

// note how the grouping operator forces the intermediate result
// of ("2" - "1") to be calculated as numeric subtraction.
msg('"2" - "1" == ' + ("2" - "1"));

// without the grouping operator, the expression attempts 
// to subtract a string value from a string, resulting in NaN
msg('"2" - "1" == ' + "2" - "1");
</pre><script type="text/javascript">
//
generate_example('Example_Subtraction_Operator');
//
</script>
          </div>
        </dd>

        <dt><a name="Bit_Operators" id="Bit_Operators">Bit
        Operators</a></dt>

        <dd>
          <p class="tbw">.</p>
        </dd>

        <dt><a name="Left_Shift_Operator" id="Left_Shift_Operator" title="Operator: &lt;&lt;">Left Shift (<code>&lt;&lt;</code>)
        Operator</a></dt>

        <dd>
          <p>Left Shift <code>&lt;&lt;</code> converts its operands to
          32 bit integer values, then shifts the bits in the left
          operand to the left by the number of bits specified in the
          right operand and filling the new positions with
          <code>0</code>.</p>

          <div class="example">
            Example Left Shift Operator
            <pre id="Example_Left_Shift_Operator">
msg('(1 &lt;&lt; 1) == ' + (1 &lt;&lt; 1));
msg('(-1 &lt;&lt; 1) == ' + (-1 &lt;&lt; 1));
msg('(2.6 &lt;&lt; 2) == ' + (2.6 &lt;&lt; 2));
msg('(Math.PI &lt;&lt; 3) == ' + (Math.PI &lt;&lt; 3));
msg('(NaN &lt;&lt; 1) == ' + (NaN &lt;&lt; 1));
msg('(Infinity &lt;&lt; 1) == ' + (Infinity &lt;&lt; 1));
msg('("a" &lt;&lt; 1) == ' + ("a" &lt;&lt; 1));
</pre><script type="text/javascript">
//
generate_example('Example_Left_Shift_Operator');
//
</script>
          </div>
        </dd>

        <dt><a name="Signed_Right_Shift_Operator" id="Signed_Right_Shift_Operator" title="Operator: &gt;&gt;">Signed
        Right Shift (<code>&gt;&gt;</code>) Operator</a></dt>

        <dd>
          <p>Signed Right Shift <code>&gt;&gt;</code> converts its
          operands to 32 bit integer values, then shifts the bits in
          the left operand to the right by the number of bits specified
          in the right operand and filling the new positions with the
          bit in the left most position.</p>

          <div class="example">
            Example Signed Right Shift Operator
            <pre id="Example_Signed_Right_Shift_Operator">
msg('(1 &gt;&gt; 1) == ' + (1 &gt;&gt; 1));
msg('(-1 &gt;&gt; 1) == ' + (-1 &gt;&gt; 1));
msg('(2.6 &gt;&gt; 2) == ' + (2.6 &gt;&gt; 2));
msg('(Math.PI &gt;&gt; 3) == ' + (Math.PI &gt;&gt; 3));
msg('(NaN &gt;&gt; 1) == ' + (NaN &gt;&gt; 1));
msg('(Infinity &gt;&gt; 1) == ' + (Infinity &gt;&gt; 1));
msg('("a" &gt;&gt; 1) == ' + ("a" &gt;&gt; 1));
</pre><script type="text/javascript">
//
generate_example('Example_Signed_Right_Shift_Operator');
//
</script>
          </div>
        </dd>

        <dt><a name="Unsigned_Right_Shift_Operator" id="Unsigned_Right_Shift_Operator" title="Operator: &gt;&gt;&gt;">Unsigned Right Shift
        (<code>&gt;&gt;&gt;</code>) Operator</a></dt>

        <dd>
          <p>UnSigned Right Shift <code>&gt;&gt;&gt;</code> converts
          its operands to 32 bit integer values, then shifts the bits
          in the left operand to the right by the number of bits
          specified in the right operand and filling the new positions
          with <code>0</code>.</p>

          <div class="example">
            Example Unsigned Right Shift Operator
            <pre id="Example_Unsigned_Right_Shift_Operator">
msg('(1 &gt;&gt;&gt; 1) == ' + (1 &gt;&gt;&gt; 1));
msg('(-1 &gt;&gt;&gt; 1) == ' + (-1 &gt;&gt;&gt; 1));
msg('(2.6 &gt;&gt;&gt; 2) == ' + (2.6 &gt;&gt;&gt; 2));
msg('(Math.PI &gt;&gt;&gt; 3) == ' + (Math.PI &gt;&gt;&gt; 3));
msg('(NaN &gt;&gt;&gt; 1) == ' + (NaN &gt;&gt;&gt; 1));
msg('(Infinity &gt;&gt;&gt; 1) == ' + (Infinity &gt;&gt;&gt; 1));
msg('("a" &gt;&gt;&gt; 1) == ' + ("a" &gt;&gt;&gt; 1));
</pre><script type="text/javascript">
//
generate_example('Example_Unsigned_Right_Shift_Operator');
//
</script>
          </div>
        </dd>

        <dt><a name="Relational_and_Logical_Operators" id="Relational_and_Logical_Operators">Relational and Logical
        Operators</a></dt>

        <dd>
          <p class="tbw">.</p>
        </dd>

        <dt><a name="Less_than_Operator" id="Less_than_Operator" title="Operator: &lt;">Less than (<code>&lt;</code>)
        Operator</a></dt>

        <dd>
          <p>Performs either a numeric or string comparison returning
          <code>true</code> if the left operand is less than the right
          operand and <code>false</code> otherwise. If at least one of
          the operands is a string, then a string comparison is
          performed, otherwise a numeric comparison is performed. If
          during the numeric comparison, one of the operands evaluates
          to <code>NaN</code>, then <code>undefined</code> is returned
          which is equivalent to <code>false</code>.</p>

          <div class="example">
            Example Less Than Operator
            <pre id="Example_Less_Than_Operator">
msg('1 &lt; 2 == ' + (1 &lt; 2));
msg('NaN &lt; 1 == ' + (NaN &lt; 1));
msg('1 &lt; Infinity == ' + (1 &lt; Infinity));
msg('"10" &lt; 2 == ' + ("1" &lt; 2));
msg('1 &lt; "a" == ' + (1 &lt; "a"));
msg('"a" &lt; "b" == ' + ("a" &lt; "b"));
</pre><script type="text/javascript">
//
generate_example('Example_Less_Than_Operator');
//
</script>
          </div>

          <p class="implnote">It appears that step 3 in <a href="ecma-262#a-11.8.5">ECMAScript 11.8.5 The Abstract Relational
          Comparison Algorithm</a> is incorrect, since both Mozilla and
          MSIE appear to use <em>or</em> instead of <em>and</em> when
          deciding to perform string comparison.</p>
        </dd>

        <dt><a name="Greater_than_Operator" id="Greater_than_Operator" title="Operator: &gt;">Greater than (<code>&gt;</code>)
        Operator</a></dt>

        <dd>
          <p>Performs either a numeric or string comparison returning
          <code>true</code> if the left operand is greater than the
          right operand and <code>false</code> otherwise. If at least
          one of the operands is a string, then a string comparison is
          performed, otherwise a numeric comparison is performed.</p>
        </dd>

        <dt><a name="Less_than_or_equal_Operator" id="Less_than_or_equal_Operator" title="Operator: &lt;=">Less than
        or equal (<code>&lt;=</code>) Operator</a></dt>

        <dd>
          <p>Performs either a numeric or string comparison returning
          <code>true</code> if the left operand is less than or equal
          to the right operand and <code>false</code> otherwise. If at
          least one of the operands is a string, then a string
          comparison is performed, otherwise a numeric comparison is
          performed.</p>
        </dd>

        <dt><a name="Greater_than_or_equal_Operator" id="Greater_than_or_equal_Operator" title="Operator: &gt;=">Greater than or equal (<code>&gt;=</code>)
        Operator</a></dt>

        <dd>
          <p>Performs either a numeric or string comparison returning
          <code>true</code> if the left operand is greater than or
          equal to the right operand and <code>false</code> otherwise.
          If at least one of the operands is a string, then a string
          comparison is performed, otherwise a numeric comparison is
          performed.</p>
        </dd>

        <dt><a name="Instanceof_Operator" id="Instanceof_Operator" title="Operator: instanceof">Instanceof
        (<code>instanceof</code>) Operator</a></dt>

        <dd>
          <p>Tests if the left operand is an object instance which has
          the right operand as an <q>ancestor</q> object. In other
          words, tests if the left operand is an object instance which
          has the prototype of the right operand in its prototype
          chain.</p>

          <div class="example">
            Example instanceof Operator
            <pre id="Example_Instanceof_Operator">
// all JavaScript Native Objects are instances of Object
var date = new Date();

msg('date instanceof Object == ' + (date instanceof Object));

// throw a TypeError if the right operand is not an object
try
{
  msg('date instanceof "foo" == ' + (date instanceof "foo"));
  msg('Test failed. Should have thrown TypeError');
}
catch(e)
{
  msg('Right operand of instanceof must be an object ' +  
      e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_Instanceof_Operator');
//
</script>
          </div>

          <div class="implnote">
            <p><code>instanceof</code> is not supported in Mozilla
            JavaScript1.1, JavaScript1.2 but is supported in Mozilla
            JavaScript1.3 and later.</p>
          </div>

          <p class="xxx">Not sure how to test <a href="ecma-262#a-11.8.6">ECMAScript 11.8.6 The instanceof
          operator</a> step 6.</p>
        </dd>

        <dt><a name="In_Operator" id="In_Operator" title="Operator: in">In (<code>in</code>) Operator</a></dt>

        <dd>
          <p>Tests if the left operand (after conversion to a primitive
          string value) is the name of a property in the object named
          in the right operand. The property can be a shared property
          which exists only in the right operands prototype chain.
          Throws a TypeError if the right operand is not an object.</p>

          <div class="example">
            Example <code>in</code> Operator
            <pre id="Example_In_Operator">
// test local properties
var object = { propname: "value" };

// test using primitive string name
msg('"propname" in object == ' + ("propname" in object));

// test using String object
msg('(new String("propname")) in object == ' + 
    ((new String("propname")) in object));

// test TypeError
try
{
  msg('"propname" in "foo" == ' + ("propname" in "foo"));
  msg('Test Failed.');
}
catch(e)
{
  msg('Test Passed. Right operand of in must be an object. ' +  
      e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_In_Operator');
//
</script>
          </div>
        </dd>

        <dt><a name="Equals_Operator" id="Equals_Operator" title="Operator: ==">Equals (<code>==</code>) Operator</a></dt>

        <dd>
          <p>Returns <code>true</code> if its two operands are
          <q>equal</q> as defined below.</p>

          <div class="note">
            <p>The following discussion uses <code>x == y</code> as the
            example equality test expression.</p>

            <ul>
              <li><code>x != y</code> is equivalent to <code>!(x ==
              y)</code></li>

              <li><code>x == y</code> is equivalent to <code>y ==
              x</code> (neglecting side effects of evaluation)</li>

              <li><code>"" + x == "" + y</code> forces string
              comparison</li>

              <li><code>x - 0 == y - 0</code> forces numeric
              comparison</li>

              <li><code>!x == !y</code> forces boolean comparison</li>
            </ul>
          </div>

          <dl>
            <dt><code>undefined == undefined</code></dt>

            <dd>
              return <code>true</code>

              <div class="example">
                <pre id="Example_equality_undefined_undefined">
msg('undefined == undefined ' + (undefined == undefined));
</pre><script type="text/javascript">
//
generate_example('Example_equality_undefined_undefined');
//
</script>
              </div>
            </dd>

            <dt><code>null == null</code></dt>

            <dd>
              return <code>true</code>

              <div class="example">
                <pre id="Example_equality_null_null">
msg('null == null ' + (null == null));
</pre><script type="text/javascript">
//
generate_example('Example_equality_null_null');
//
</script>
              </div>
            </dd>

            <dt><code>null == undefined</code> or <code>undefined ==
            null</code></dt>

            <dd>
              return <code>true</code>

              <div class="example">
                <pre id="Example_equality_null_undefined">
msg('null == undefined ' + (null == undefined));
msg('undefined == null ' + (undefined == null));
</pre><script type="text/javascript">
//
generate_example('Example_equality_null_undefined');
//
</script>
              </div>
            </dd>

            <dt><code>typeof x</code>, <code>typeof y</code> are both
            <code>"string"</code></dt>

            <dd>
              return <code>true</code> if <var>x</var> and <var>y</var>
              consist of the exact same sequence of characters
              otherwise return <code>false</code>.

              <div class="example">
                <pre id="Example_equality_string">
msg('"abc" == "abc" ' + ("abc" == "abc"));
msg('"abc" == "abcd" ' + ("abc" == "abcd"));
msg('"abc == "ABC" ' + ("abc" == "ABC"));
</pre><script type="text/javascript">
//
generate_example('Example_equality_string');
//
</script>
              </div>
            </dd>

            <dt><code>typeof x</code>, <code>typeof y</code> both are
            "number"</dt>

            <dd>
              <ul>
                <li>if <var>x</var> or <var>y</var> is
                <code>NaN</code>, return <code>false</code></li>

                <li>if <var>x</var> is <code>+0</code> and <var>y</var>
                is <code>-0</code> (or vice-versa), return
                <code>true</code></li>

                <li>if <var>x</var> and <var>y</var> is the same
                number, then return <code>true</code> otherwise return
                <code>false</code></li>
              </ul>

              <p class="note">To determine if a number <var>n</var> is
              <code>NaN</code>, use the function
              <code>isNaN(n)</code>.</p>

              <div class="example">
                <pre id="Example_equality_number">
msg('NaN == NaN ' + (NaN == NaN));
msg('NaN == 1 ' + (NaN == 1));
msg('1 == NaN ' + (1 == NaN));
msg('isNaN(NaN) ' + isNaN(NaN));
msg('+0 == -0 ' + (+0 == -0));
msg('-0 == +0 '  + (-0 == +0));
msg('12e5 == 12e5 ' + (12e5 == 12e5));
msg('1 == 2 ' + (1 == 2));
</pre><script type="text/javascript">
//
generate_example('Example_equality_number');
//
</script>
              </div>
            </dd>

            <dt><code>typeof x</code>, <code>typeof y</code> are both
            <code>"boolean"</code></dt>

            <dd>
              return <code>true</code> if <var>x</var> and <var>y</var>
              are either both <code>true</code> or both
              <code>false</code> otherwise return <code>false</code>.

              <div class="example">
                <pre id="Example_equality_boolean">
msg('true == true ' + (true == true));
msg('false == false ' + (false == false));
msg('true == false ' + (true == false));
msg('false == true ' + (false == true));
</pre><script type="text/javascript">
//
generate_example('Example_equality_boolean');
//
</script>
              </div>
            </dd>

            <dt><code>typeof x</code>, <code>typeof y</code> are both
            <code>"object"</code></dt>

            <dd>
              return <code>true</code> if <var>x</var> and <var>y</var>
              refer to the same object. Note that different objects
              with the same value <strong>do not</strong> compare as
              equal thus <code>==</code> is not a <em>transitive</em>
              operator and <code>==</code> does not form an
              <em>equivalence relation</em>.

              <div class="example">
                <pre id="Example_equality_object">
var o1 = new Object();
var o2 = o1;
var o3 = new Object();
msg('o1 == o2 ' + (o1 == o2));
msg('o1 == o3 ' + (o1 == o3));
var s1 = "abc";
var s2 = new String("abc");
var s3 = new String("abc");
msg('s1 == s2 ' + (s1 == s2));
msg('s1 == s3 ' + (s1 == s3));
msg('s2 == s3 ' + (s2 == s3));
</pre><script type="text/javascript">
//
generate_example('Example_equality_object');
//
</script>
              </div>
            </dd>

            <dt>vice-versa" <code>typeof x</code> is
            <code>"number"</code> and <code>typeof y</code> is
            <code>"string"</code> or vice-versa</dt>

            <dd>
              convert the <code>"string"</code> value to a primitive
              number value and return the result of comparing the two
              numbers.

              <div class="example">
                <pre id="Example_equality_number_string">
msg('"1" == 1 ' + ("1" == 1));
msg('2 == "2" ' + (2 == "2"));
</pre><script type="text/javascript">
//
generate_example('Example_equality_number_string');
//
</script>
              </div>
            </dd>

            <dt><code>typeof x</code> is <code>"boolean"</code> and
            <code>typeof y</code> is not <code>"boolean"</code> or vice
            versa</dt>

            <dd>
              convert the <code>"boolean"</code> value to a primitive
              number value and compare the result.

              <div class="example">
                <pre id="Example_equality_boolean_other">
msg('true == 1 ' + (true == 1));
msg('false == 0 ' + (false == 0));
msg('true == NaN ' + (true == NaN));
msg('false == NaN ' + (false == NaN));
msg('true == 10 ' + (true == 10));
msg('false == 10 ' + (false == 10));

msg('true == "1" ' + (true == "1"));
msg('false == "0" ' + (false == "0"));
msg('true == "10" ' + (true == "10"));
msg('false == "10" ' + (false == "10"));

msg('true == null ' + (true == null));
msg('false == null ' + (false == null));
msg('true == undefined ' + (true == undefined));
msg('false == undefined ' + (false == undefined));
msg('true == new Object() ' + (true == new Object()));
msg('false == new Object() ' + (false == new Object()));
</pre><script type="text/javascript">
//
generate_example('Example_equality_boolean_other');
//
</script>
              </div>
            </dd>

            <dt><code>typeof x</code> is either <code>"string"</code>
            or <code>"number"</code> and <code>typeof y</code> is
            <code>"object"</code> or vice-versa</dt>

            <dd>
              convert the <code>"object"</code> value to a primitive
              value and compare the result.

              <div class="example">
                <pre id="Example_equality_number_string_object">
var s1 = "abc";
var s2 = new String("abc");
var n1 = 123;
var n2 = new Number(123);
msg('s1 == n2 ' + (s1 == n2));
msg('n1 == s2 ' + (n1 == s2));
</pre><script type="text/javascript">
//
generate_example('Example_equality_number_string_object');
//
</script>
              </div>
            </dd>
          </dl>

          <div class="implnote">
            <p>Mozilla JavaScript 1.2 only behaves as if strict
            equality === specified</p>

            <div class="example">
              <pre id="Example_Mozilla_JS12_Strict_Equality">
var result = (1 == "1");
msg ('Test ' + (result?'Passed':'Failed') + 
     ': (1 == "1") == ' + result);
</pre><script type="text/javascript">
//
generate_example('Example_Mozilla_JS12_Strict_Equality');
//
</script>
            </div>
          </div>
        </dd>

        <dt><a name="Does_not_equal_Operator" id="Does_not_equal_Operator" title="Operator: !=">Does not equal
        (<code>!=</code>) Operator</a></dt>

        <dd>
          <p>return <code>false</code> if <code>left == right</code> is
          <code>true</code> otherwise return <code>true</code></p>

          <div class="implnote">
            <p>Mozilla JavaScript 1.2 only behaves as if strict
            in-equality !== specified</p>

            <div class="example">
              <pre id="Example_Mozilla_JS12_Strict_InEquality">
var result = (null != undefined);
msg ('Test ' + (result?'Failed':'Passed') + 
     ': (null != undefined) == ' + result);
</pre><script type="text/javascript">
//
generate_example('Example_Mozilla_JS12_Strict_InEquality');
//
</script>
            </div>
          </div>
        </dd>

        <dt><a name="Strict_Equals_Operator" id="Strict_Equals_Operator" title="Operator: ===">Strict Equals
        (<code>===</code>) Operator</a></dt>

        <dd>
          <p>Performs a strict equality comparison on it operands as
          defined below.</p>

          <div class="note">
            <p>The following discussion uses <code>x === y</code> as
            the example equality test expression.</p>
          </div>

          <dl>
            <dt>if <code>typeof x</code> differs from <code>typeof
            y</code></dt>

            <dd>return <code>false</code></dd>

            <dt><code>undefined === undefined</code></dt>

            <dd>
              return <code>true</code>

              <div class="example">
                <pre id="Example_strict_equality_undefined_undefined">
msg('undefined === undefined ' + (undefined === undefined));
</pre><script type="text/javascript">
//
generate_example('Example_strict_equality_undefined_undefined');
//
</script>
              </div>
            </dd>

            <dt><code>null === null</code></dt>

            <dd>
              return <code>true</code>

              <div class="example">
                <pre id="Example_strict_equality_null_null">
msg('null === null ' + (null === null));
</pre><script type="text/javascript">
//
generate_example('Example_strict_equality_null_null');
//
</script>
              </div>
            </dd>

            <dt><code>typeof x</code>, <code>typeof y</code> are
            "number"</dt>

            <dd>
              <ul>
                <li>if <var>x</var> or <var>y</var> is
                <code>NaN</code>, return <code>false</code></li>

                <li>if <var>x</var> is <code>+0</code> and <var>y</var>
                is <code>-0</code> (or vice-versa), return
                <code>true</code></li>

                <li>if <var>x</var> and <var>y</var> is the same
                number, then return <code>true</code> otherwise return
                <code>false</code></li>
              </ul>

              <div class="example">
                <pre id="Example_strict_equality_number">
msg('NaN === NaN ' + (NaN === NaN));
msg('NaN === 1 ' + (NaN === 1));
msg('1 === NaN ' + (1 === NaN));
msg('isNaN(NaN) ' + isNaN(NaN));
msg('+0 === -0 ' + (+0 === -0));
msg('-0 === +0 '  + (-0 === +0));
msg('12e5 === 12e5 ' + (12e5 === 12e5));
msg('1 === 2 ' + (1 === 2));
</pre><script type="text/javascript">
//
generate_example('Example_strict_equality_number');
//
</script>
              </div>
            </dd>

            <dt><code>typeof x</code>, <code>typeof y</code> are both
            <code>"boolean"</code></dt>

            <dd>
              return <code>true</code> if <var>x</var> and <var>y</var>
              are either both <code>true</code> or both
              <code>false</code> otherwise return <code>false</code>.

              <div class="example">
                <pre id="Example_strict_equality_boolean">
msg('true === true ' + (true === true));
msg('false === false ' + (false === false));
msg('true === false ' + (true === false));
msg('false === true ' + (false === true));
</pre><script type="text/javascript">
//
generate_example('Example_strict_equality_boolean');
//
</script>
              </div>
            </dd>
          </dl>
        </dd>

        <dt><a name="Strict_Does_not_equal_Operator" id="Strict_Does_not_equal_Operator" title="Operator: !==">Strict
        Does not equal (<code>!==</code>) Operator</a></dt>

        <dd>
          <p>return <code>false</code> if <code>left === right</code>
          is <code>true</code> otherwise return <code>true</code>.</p>
        </dd>

        <dt><a name="Binary_And_Operator" id="Binary_And_Operator" title="Operator: &amp;">Binary And (<code>&amp;</code>)
        Operator</a></dt>

        <dd>
          <p>Binary And <code>&amp;</code> converts its operands to 32
          bit integers, then performs a bitwise And <code>&amp;</code>
          on the corresponding bits where <code>1 &amp; 1</code> is
          <code>1</code> and <code>0</code> otherwise.</p>

          <div class="example">
            Example Binary And
            <pre id="Example_Binary_And">
msg('1 &amp; 3    == ' + (1 &amp; 3));
msg('1 &amp; 2    == ' + (1 &amp; 2));
msg('0x0f &amp; 0xf0 == ' + (0x0f &amp; 0xf0));
msg('NaN  &amp; 1    == ' + (NaN &amp; 1));
msg('Math.PI &amp; Math.PI == ' + (Math.PI &amp; Math.PI));
</pre><script type="text/javascript">
//
generate_example('Example_Binary_And');
//
</script>
          </div>
        </dd>

        <dt><a name="Binary_XOR_Operator" id="Binary_XOR_Operator" title="Operator: ^">Binary XOR (<code>^</code>)
        Operator</a></dt>

        <dd>
          <p>Binary XOR <code>^</code> converts its operands to 32 bit
          integers, then performs a bitwise XOR <code>^</code> on the
          corresponding bits where <code>1 ^ 1</code> and <code>0 ^
          0</code> is <code>0</code> and <code>1</code> otherwise.</p>

          <div class="example">
            Example Binary XOR
            <pre id="Example_Binary_XOR">
msg('1 ^ 3    == ' + (1 ^ 3));
msg('1 ^ 2    == ' + (1 ^ 2));
msg('0x0f ^ 0xf0 == ' + (0x0f ^ 0xf0));
msg('NaN  ^ 1    == ' + (NaN ^ 1));
msg('Math.PI ^ Math.PI == ' + (Math.PI ^ Math.PI));
</pre><script type="text/javascript">
//
generate_example('Example_Binary_XOR');
//
</script>
          </div>
        </dd>

        <dt><a name="Binary_Or_Operator" id="Binary_Or_Operator" title="Operator: |">Binary Or (<code>|</code>) Operator</a></dt>

        <dd>
          <p>Binary Or <code>|</code> converts its operands to 32 bit
          integers, then performs a bitwise Or <code>|</code> on the
          corresponding bits where <code>0 ^ 0</code> is <code>0</code>
          and <code>1</code> otherwise.</p>

          <div class="example">
            Example Binary Or
            <pre id="Example_Binary_Or">
msg('1 | 3    == ' + (1 | 3));
msg('1 | 2    == ' + (1 | 2));
msg('0x0f | 0xf0 == ' + (0x0f | 0xf0));
msg('NaN  | 1    == ' + (NaN | 1));
msg('Math.PI | Math.PI == ' + (Math.PI | Math.PI));
</pre><script type="text/javascript">
//
generate_example('Example_Binary_Or');
//
</script>
          </div>
        </dd>

        <dt><a name="Logical_And_Operator" id="Logical_And_Operator" title="Operator: &amp;&amp;">Logical And
        (<code>&amp;&amp;</code>) Operator</a></dt>

        <dd>
          <p>returns <code>true</code> if both operands evaluate to
          <code>true</code>. Note that if the left operand evaluates to
          <code>false</code>, the right operand is not evaluated
          (short-circuit evaluation).</p>

          <div class="example">
            <pre id="Example_Logical_And_Operator">
msg('true &amp;&amp; true ' + (true &amp;&amp; true));
msg('true &amp;&amp; false ' + (true &amp;&amp; false));
msg('false &amp;&amp; true ' + (false &amp;&amp; true));

// test short-circuit evaluation
var v = 'before';
msg('v == ' + v);
msg('false &amp;&amp; ((v = "after") == "after") ' +  
    (false &amp;&amp; ((v = "after") == "after")));
msg('v == ' + v);
</pre><script type="text/javascript">
//
generate_example('Example_Logical_And_Operator');
//
</script>
          </div>
        </dd>

        <dt><a name="Logical_Or_Operator" id="Logical_Or_Operator" title="Operator: ||">Logical Or (<code>||</code>)
        Operator</a></dt>

        <dd>
          <p>returns <code>true</code> if either operand evaluate to
          <code>true</code>. Note that if the left operand evaluates to
          <code>true</code>, the right operand is not evaluated
          (short-circuit evaluation).</p>

          <div class="example">
            <pre id="Example_Logical_Or_Operator">
msg('true || true ' + (true || true));
msg('true || false ' + (true || false));
msg('false || true ' + (false || true));

// test short-circuit evaluation
var v = 'before';
msg('v == ' + v);
msg('true || ((v = "after") == "after") ' +  
    (true || ((v = "after") == "after")));
msg('v == ' + v);
</pre><script type="text/javascript">
//
generate_example('Example_Logical_Or_Operator');
//
</script>
          </div>
        </dd>

        <dt><a name="Conditional_Operator" id="Conditional_Operator" title="Operator: ?:">Conditional (<code>?:</code>)
        Operator</a></dt>

        <dd>
          <p>The conditional operator takes three arguments:</p>
          <pre>
condition ? value1 : value2
</pre>

          <p>and returns the value of the expression
          <code>value1</code> if <code>condition</code> evaluates to
          <code>true</code>, otherwise it returns the value of the
          expression <code>value2</code>.</p>

          <p>The precedence of <code>?:</code> is lower than all other
          operators except the assignment, compound assignment and the
          comma operators it is therefore important to properly use the
          grouping operators (<code>()</code>) to ensure the total
          expression is evaluated as intended.</p>

          <div class="example">
            <pre id="Example_Conditional_Operator">
// the conditional operator 
msg(' ( (0 % 2) ? true : false) ' + ( (0 % 2) ? true : false));
msg(' ( (1 % 2) ? true : false) ' + ( (1 % 2) ? true : false));

// the equivalent results using if..else
var value;
if (0 % 2)
{
  value = true;
}
else
{
  value = false;
}
msg('0 % 2 is ' + value);
if (1 % 2)
{
  value = true;
}
else
{
  value = false;
}
msg('1 % 2 is ' + value);
</pre><script type="text/javascript">
//
generate_example('Example_Conditional_Operator');
//
</script>
          </div>
        </dd>

        <dt><a name="Assignment_Operators" id="Assignment_Operators">Assignment Operators</a></dt>

        <dd>
          <p class="tbw">.</p>
        </dd>

        <dt><a name="Simple_Assignment_Operator" id="Simple_Assignment_Operator" title="Operator: =">Simple
        Assignment (<code>=</code>) Operator</a></dt>

        <dd>
          <p>The assignment operator <code>=</code> sets the value of
          its left operand to the value of its right operand. If the
          left operand has not already been declared or created, it is
          created at the time of the assigment. Variable created via an
          assignment without a <code>var</code> declaration do not have
          <em>{DontDelete}</em> and can be deleted via operator
          <code>delete</code>.</p>

          <div class="implnote">
            <p>If the assignment operator is used in a conditional,
            e.g. <code>if (a = b)</code>, Mozilla JavaScript 1.1 -
            JavaScript 1.2 will treat the <code>=</code> as if it were
            <code>==</code>.</p>

            <div class="example">
              <pre id="Example_Mozilla_JS12_Assign_Equals">
var a = 0;
var b = 0;

var result = false;

if (a = b) 
{ 
  result = true; 
}

 msg('(a = b) when a == 0, b ==0 is ' + result);

a = 0;
b = 1;

result = false;

if (a = b) 
{ 
  result = true; 
}

msg('(a = b) when a == 0, b == 1 is ' + result);
msg('afterwards a == ' + a + ', b == ' + b);
</pre><script type="text/javascript">
//
generate_example('Example_Mozilla_JS12_Assign_Equals');
//
</script>
            </div>
          </div>
        </dd>

        <dt><a name="Compound_Assignment_Operators" id="Compound_Assignment_Operators" title="Operator: op=">Compound
        Assignment (<code>op=</code>) Operators</a></dt>

        <dd>
          <p>The compound assignment <code>left op= right</code> is the
          equivalent for the expression</p>
          <pre>
<code>left = left op right</code>
</pre>

          <p>where <var>op</var> is one of <code>*</code>,
          <code>/</code>, <code>%</code>, <code>-</code>,
          <code>&lt;&lt;</code>, <code>&gt;&gt;</code>,
          <code>&gt;&gt;&gt;</code>, <code>&amp;</code>, <code>^</code>
          or <code>|</code>.</p>
        </dd>

        <dt><a name="Comma_Operator" id="Comma_Operator" title="Operator: ,">Comma (<code>,</code>) Operator</a></dt>

        <dd>
          <p>The comma operator <code>,</code> is used to evaluate a
          sequence of expressions, returning the value of the last
          expression as the value of the entire comma expression.</p>

          <p>For example, if the expression is <code>expr1, expr2,
          expr3</code>, <code>expr1</code> is evaluated,
          <code>expr2</code> is evaluated then <code>expr3</code> is
          evaluated and the value of <code>expr3</code> is
          returned.</p>

          <div class="example">
            <pre id="Example_Comma_Operator">
var value = 0;
msg('The value of (value += 1, value += 2, value += 3) is ' +
    (value += 1, value += 2, value += 3));
</pre><script type="text/javascript">
//
generate_example('Example_Comma_Operator');
//
</script>
          </div>
        </dd>
      </dl>
    </dd>

    <dt><a name="JavaScript_Statements" id="JavaScript_Statements">JavaScript Statements</a></dt>

    <dd>
      <ul>
        <li><a href="#Block_Statement">Block Statement</a></li>

        <li><a href="#Var_Statement"><code>var</code>
        Statement</a></li>

        <li><a href="#Const_Statement"><code>const</code>
        Statement</a></li>

        <li><a href="#Empty_Statement">Empty Statement</a></li>

        <li><a href="#Expression_Statement">Expression
        Statement</a></li>

        <li>
          <a href="#Conditional_Statements">Conditional Statements</a>

          <ul>
            <li><a href="#If_Statement"><code>if</code>
            Statement</a></li>

            <li><a href="#Switch_Statement"><code>switch</code>
            Statement</a></li>
          </ul>
        </li>

        <li>
          <a href="#Iteration_Statements">Iteration Statements</a>

          <ul>
            <li><a href="#While_Statement"><code>while</code>
            Statement</a></li>

            <li><a href="#Do_While_Statement"><code>do-while</code>
            Statement</a></li>

            <li><a href="#For_Statement"><code>for</code>
            Statement</a></li>

            <li><a href="#For_In_Statement"><code>for-in</code>
            Statement</a></li>
          </ul>
        </li>

        <li>
          <a href="#Labelled_Statements">Labelled Statements</a>

          <ul>
            <li><a href="#Continue_Statement"><code>continue</code>
            Statement</a></li>

            <li><a href="#Break_Statement"><code>break</code>
            Statement</a></li>
          </ul>
        </li>

        <li>
          <a href="#Exception_Statements">Exception Statements</a>

          <ul>
            <li><a href="#Try_Catch_Finally_Statements"><code>try</code>,
            <code>catch</code> and <code>finally</code>
            Statements</a></li>

            <li><a href="#Throw_Statement"><code>throw</code>
            Statement</a></li>
          </ul>
        </li>
      </ul>

      <dl>
        <dt><a name="Block_Statement" id="Block_Statement" title="Statement: Block">Block Statement</a></dt>

        <dd>
          <p>A <em>Block</em> statement is a set of one or more other
          statements which are surrounded by braces <code>{}</code> in
          order to be treated as a group of statements. Block
          statements can be used anywhere a single statement can be
          used.</p>
          <pre>
{
  statement1
  statement2
  …
}
</pre>

          <p>Block statements are typically used as the bodies of
          <code>for</code>, <code>while</code>, or <code>if</code>
          statements.</p>

          <p>Note that unlike <tt>C</tt> or <tt>Java</tt>, there is no
          <em>block scope</em> in JavaScript. Variables declared inside
          of block statements do not hide variables declared outside of
          the block nor do variables declared inside of block
          statements cease to exist when the block statement is
          exited.</p>

          <div class="example">
            <pre id="Example_Block_Statement">
// declare and initialize a variable outside of the 
// block statement.
var variable = 'outside';
if (true)
{
  // declare the same variable inside of the block
  // statement. This does not hide the outside variable
  // which remains unchanged from the outside value.
  var variable;
  msg('variable inside block == ' + variable);
}
</pre><script type="text/javascript">
//
generate_example('Example_Block_Statement');
//
</script>
          </div>
        </dd>

        <dt><a name="Var_Statement" id="Var_Statement" title="Statement: var">var Statement</a></dt>

        <dd>
          <p>A <code>var</code> statement creates variables in the
          current execution scope. If the <code>var</code> statement
          occurs inside of a function, the declared variables are
          created in function scope with property attribute
          <em>{DontDelete}</em>, otherwise they are created in global
          scope with property attribute attribute
          <em>{DontDelete}</em>. Variables created via the
          <code>eval</code> function are created with empty property
          attributes. See <a href="#Delete_Operator"><code>delete</code> Operator</a> for
          implementation differences in the <code>delete</code>
          operator. Note that the <code>with</code> statement does not
          affect the scope when creating variables.</p>

          <p>The <code>var</code> statement is written as a
          comma-separated list of variable names and optional
          initializers which is terminated by a semi-colon
          (<code>;</code>).</p>
          <pre>
// simple variable declaration of name1, 
// initialized to undefined
var name1; 

// simple variable declaration of name2,
// initialized to 'value2'
var name2 = 'value2';

// declaration of the variables name3, name4, name5
// with the value of name4 initialized to 'value4'
var name3, name4 = 'value4', name5;
</pre>

          <div class="example">
            <p>Example Delete Global Scope Variable</p>
            <pre id="Example_Delete_Var_Global">
var globalVar = 'value';
msg('typeof globalVar == ' + (typeof globalVar));
msg('delete globalVar == ' + (delete globalVar));
msg('typeof globalVar == ' + (typeof globalVar));
</pre><script type="text/javascript">
//
generate_example('Example_Delete_Var_Global');
//
</script>

            <p>Global variables have property attribute {DontDelete}
            which means that they can not be deleted however any such
            attempt should not cause an error</p>

            <div class="implnote">
              <p>Mozilla JavaScript1.1 and JavaScript1.2 will throw an
              error when attempting to delete a global variable.</p>
            </div>
          </div>

          <div class="example">
            <p>Example Delete Function Scope Variable</p>
            <pre id="Example_Delete_Var_Function">
function testFunctionVarDelete()
{
  var functionVar = 'value';
  msg('typeof functionVar == ' + (typeof functionVar));
  msg('delete functionVar == ' + (delete functionVar));
  msg('typeof functionVar == ' + (typeof functionVar));
}

testFunctionVarDelete();
</pre><script type="text/javascript">
//
generate_example('Example_Delete_Var_Function');
//
</script>

            <p>Variables created in function scope have property
            attribute {DontDelete} which means that they can not be
            deleted and any such attempt should not cause an error.
            Note that Mozilla JavaScript1.1 and JavaScript1.2 do not
            throw an error when an attempt to delete a function scope
            variable is made.</p>
          </div>

          <div class="example">
            <p>Example Delete Eval Scope Variable</p>
            <pre id="Example_Delete_Var_Eval">
eval('var evalVar = "value";');
msg('typeof evalVar == ' + (typeof evalVar));
msg('delete evalVar == ' + (delete evalVar));
msg('typeof evalVar == ' + (typeof evalVar))
</pre><script type="text/javascript">
//
generate_example('Example_Delete_Var_Eval');
//
</script>

            <p>Variables created in via <code>eval</code> have empty
            internal attributes which means that they can be
            deleted.</p>

            <div class="implnote">
              <p>Note that Mozilla JavaScript1.1, JavaScript1.2
              successfully delete eval scope variables however returns
              <code>undefined</code> for <code>delete</code> instead of
              boolean.</p>
            </div>
          </div>
        </dd>

        <dt><a name="Const_Statement" id="Const_Statement" title="Statement: const">const Statement</a></dt>

        <dd>
          <div class="implnote">
            <p><strong>Mozilla Only</strong></p>

            <p>A <code>const</code> statement creates variables in the
            current execution scope with property attribute
            <em>{ReadOnly}</em> which means it can not be changed. If
            the <code>const</code> variable is created in global or
            function scope it also has property attribute
            <em>{DontDelete}</em> which means it can not be
            deleted.</p>

            <div class="example">
              <p>Example Modifiy Const</p>
              <pre id="Example_Const">
try
{
  eval('const a = 1;');
  msg('const a == ' + a);
  try
  {
    a = 2;
    msg('a should still be 1, a == ' + a);
  }
  catch(e)
  {
    msg('Error assigning to const var.' +  
      e.name + ': ' + e.message);
  }
}
catch(e)
{
  msg('Error during const declaration.' +  
      e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_Const');
//
</script>

              <p>Note that Mozilla JavaScript1.1 and JavaScript1.2 will
              throw an error if a <code>const</code> is the target of
              an assignment however Mozilla JavaScript1.3 and later
              will not.</p>
            </div>

            <div class="example">
              <p>Example Delete Global Scope Const Variable</p>
              <pre id="Example_Delete_Const_Global">
const globalVar = 'value';
msg('typeof globalVar == ' + (typeof globalVar));
msg('delete globalVar == ' + (delete globalVar));
msg('typeof globalVar == ' + (typeof globalVar));
</pre><script type="text/javascript">
//
generate_example('Example_Delete_Const_Global');
//
</script>

              <p>Global <code>const</code> variables have property
              attributes <em>{ReadOnly}</em> and <em>{DontDelete}</em>
              which means that they can not be changed or deleted
              however any such attempt should not cause an error
              however Mozilla JavaScript1.1 and JavaScript1.2 will
              throw an error.</p>
            </div>

            <div class="example">
              <p>Example Delete Function Scope Const Variable</p>
              <pre id="Example_Delete_Const_Function">
function testFunctionConstDelete()
{
  const functionVar = 'value';
  msg('typeof functionVar == ' + (typeof functionVar));
  msg('delete functionVar == ' + (delete functionVar));
  msg('typeof functionVar == ' + (typeof functionVar));
}

testFunctionConstDelete();
</pre><script type="text/javascript">
//
generate_example('Example_Delete_Const_Function');
//
</script>

              <p>Constant Variables created in function scope have
              property attribute <em>{ReadOnly}</em> and
              <em>{DontDelete}</em> which means that they can not be
              changed or deleted and any such attempt should not cause
              an error. Note that Mozilla JavaScript1.1 and
              JavaScript1.2 do not throw an error when an attempt to
              delete a function scope variable is made.</p>
            </div>

            <div class="example">
              <p>Example Delete Eval Scope Const Variable</p>
              <pre id="Example_Delete_Const_Eval">
eval('const constVar = "value";');
msg('typeof evalVar == ' + (typeof evalVar));
msg('delete evalVar == ' + (delete evalVar));
msg('typeof evalVar == ' + (typeof evalVar));
</pre><script type="text/javascript">
//
generate_example('Example_Delete_Const_Eval');
//
</script>

              <p>Const variables created via <code>eval</code> have
              property attribute <em>{ReadOnly}</em> which means that
              they can not be changed but can be deleted.</p>

              <p>Note that Mozilla JavaScript1.1, JavaScript1.2
              successfully delete eval scope variables however returns
              <code>undefined</code> for <code>delete</code> instead of
              boolean.</p>
            </div>
          </div>
        </dd>

        <dt><a name="Empty_Statement" id="Empty_Statement" title="Statement: Empty">Empty Statement</a></dt>

        <dd>
          <p>The empty statement is written as a single semi-colon
          (<code>;</code>) and is used when a statement is required by
          the syntax but is unnecessary otherwise.</p>
          <pre>
;
</pre>
        </dd>

        <dt><a name="Expression_Statement" id="Expression_Statement" title="Statement: Expression">Expression Statement</a></dt>

        <dd>
          <p>Expression statements are written as:</p>
          <pre>
<em>Expression</em>;
</pre>

          <p>Where <em>Expression</em> can not begin with a brace
          <code>{</code> or <code>function</code>.</p>
        </dd>

        <dt><a name="Conditional_Statements" id="Conditional_Statements">Conditional Statements</a></dt>

        <dd>
          <dl>
            <dt><a name="If_Statement" id="If_Statement" title="Statement: if">The <code>if</code> Statement</a></dt>

            <dd>
              <p>The <code>if</code> Statement is used to conditionally
              execute sections of code. The basic form is:</p>
              <pre>
<code>if (<var>conditional</var>) 
  <var>Statement1</var></code>
</pre>

              <p>The <var>conditional</var> expression is evaluated and
              converted to a boolean value. If the result is
              <code>true</code>, <var>Statement1</var> is executed
              otherwise <var>Statement1</var> is skipped.</p>

              <div class="example">
                <pre id="Example_If_Statement1">
msg('test if true');
if (true)
  msg('this statement will be executed');

msg('test if false');
if (false)
  msg('this statement will not be executed');
</pre><script type="text/javascript">
//
generate_example('Example_If_Statement1');
//
</script>
              </div>

              <p>The other form of the <code>if</code> Statement is</p>
              <pre>
<code>if (<var>conditional</var>) 
  <var>Statement1</var></code> 
else
  <var>Statement2</var>
</pre>

              <p>In this case, if <var>conditional</var> evaluates to
              <code>true</code>, then <var>Statement1</var> is
              executed, otherwise <var>Statement2</var> is
              executed.</p>

              <div class="example">
                <pre id="Example_If_Statement2">
msg('test if true');
if (true)
  msg('this statement will be executed');
else 
  msg('this statement will not be executed');

msg('test if false');
if (false)
  msg('this statement will not be executed');
else 
  msg('this statement will be executed');
</pre><script type="text/javascript">
//
generate_example('Example_If_Statement2');
//
</script>
              </div>

              <p><code>if</code> statements can be combined to create
              multi-level tests as in:</p>
              <pre>
<code>if (<var>conditional1</var>)
  <var>Statement1</var>
else if (<var>conditional2</var>)
  <var>Statement2</var>
else if (<var>conditional3</var>)
  <var>Statement3</var></code>
</pre>

              <p>In cases such where there is a <em>dangling</em>
              else</p>
              <pre>
<code>if (<var>conditional0</var>)
  if (<var>conditional1</var>)
    <var>Statement1</var>
  else
    <var>Statement2</var></code>
</pre>

              <p>The <code>else</code> <em>binds</em> to the closest
              <code>if</code> as in:</p>
              <pre>
<code>if (<var>conditional0</var>)
{
  if (<var>conditional1</var>)
    <var>Statement1</var>
  else
    <var>Statement2</var></code>
}
</pre>

              <p>Braces <code>{}</code> can be used to make it clear
              how a nested <code>if</code> statement should be executed
              and can make the code clearer for human readers as
              well.</p>

              <div class="example">
                <pre id="Example_If_Statement_dangling_else">
msg('without braces');
if (true)
  if (false)
    msg('this statement will not be executed');
  else
    msg('this statement will be executed');

msg('with braces');
if (true)
{
  if (false)
    msg('this statement will not be executed');
  else
    msg('this statement will be executed');
}
</pre><script type="text/javascript">
//
generate_example('Example_If_Statement_dangling_else');
//
</script>
              </div>
            </dd>

            <dt><a name="Switch_Statement" id="Switch_Statement" title="Statement: switch">The <code>switch</code>
            Statement</a></dt>

            <dd>
              <p>The <code>switch</code> statement is used to execute
              one of a set of possible statements depending on the
              value of an expression and has the form:</p>
              <pre>
<code>switch (<var>switchexpression</var>)
{
  case <var>caseexpression1</var>:
    <var>statement1</var>
    break;

  case <var>caseexpression2</var>:
    <var>statement2</var>
    break;

   …

   default:
     <var>defaultstatement</var>
     break;
}</code>
</pre>

              <p><var>switchexpression</var> is evaluated then each
              <code>case</code> expression <var>caseexpression</var> is
              evaluated and compared to the <var>switchexpression</var>
              using strict equality until a match is found. Once a
              matching <var>caseexpression</var> is found, the
              statements following up to the following
              <code>break</code> statement are executed. If the
              <code>break</code> statement is not present, the
              statements following the <code>case</code> statement are
              executed until either a <code>break</code> is encountered
              or the <code>switch</code> statement is completed.</p>

              <p>The above example is equivalent to the following
              nested <code>if</code> statement (note the use of strict
              equality testing):</p>
              <pre>
<code>if (<var>switchexpression</var> === <var>caseexpression1</var>)
{
  <var>statement1</var>
}
else if (<var>switchexpression</var> === <var>caseexpression</var>)
{
  <var>statement2</var>
}
…
else 
{
  <var>defaultstatement</var>
}</code>
</pre>

              <div class="example">
                <pre id="Example_Switch_1">
// illustrate a basic switch with strict equality
switch (2 * 3)
{
  case '6':
    msg('this statement will only be executed ' + 
        'if strict equality is not used');
    break;

  case 6:
    msg('this statement should be executed');
    break;

  default:
    msg('this statement is only executed ' +
        'if no case expression is satified');
    break;
}
</pre><script type="text/javascript">
//
generate_example('Example_Switch_1');
//
</script>
              </div>

              <p>If you do not code a <code>break</code> statement, the
              execution will <em>fall through</em> continuing to
              execute <code>case</code> blocks until a
              <code>break</code> is encountered.</p>

              <div class="example">
                <pre id="Example_Switch_2">
// illustrate a switch with fall through
switch (2 * 3)
{
  case '6':
    msg('this statement will only be executed ' + 
        'if strict equality is not used');
    break;

  case 6:
    msg('this statement should be executed');
    // no break means fall through to the next statement

  default:
    msg('this statement is executed ' +
        'since no break was coded for case 6');
    break;
}
</pre><script type="text/javascript">
//
generate_example('Example_Switch_2');
//
</script>
              </div>

              <p>While the <code>break</code> statement is not strictly
              necessary when the <code>default</code> statement is the
              last block of the <code>switch</code>, it is good
              practice to code it in the event that at some future
              date, a programmer changes the <code>switch</code> by
              adding another <code>case</code> block after the
              <code>default</code> block.</p>
            </dd>
          </dl>
        </dd>

        <dt><a name="Iteration_Statements" id="Iteration_Statements">Iteration Statements</a></dt>

        <dd>
          <p>Iteration statements are used to repeatedly execute a set
          of statements while a <var>condition</var> is true (the
          <code>while</code>, <code>do while</code>, <code>for</code>
          statements) to iterate over the properties of an object
          (<code>for in</code> statement). The special statements
          <code>break</code> and <code>continue</code> along with
          <em>labelled</em> statements allow transfers of control
          similar to that of the <code>goto</code> statement in other
          languages. Note that there is no <code>goto</code> statement
          in JavaScript.</p>

          <dl>
            <dt><a name="While_Statement" id="While_Statement" title="Statement: while">The <code>while</code>
            Statement</a></dt>

            <dd>
              <pre>
<code>while (<var>conditional</var>)
  Statement</code>
</pre>

              <p>The <code>while</code> statement is used to repeatedly
              execute a set of statements while a condition evaluates
              to true.</p>

              <div class="example">
                <pre id="Example_While_Statement">
var i = 0;
while (i &lt; 5)
{
  msg('while: i == ' + i + ', i &lt; 5 == ' + (i &lt; 5));
  ++i;
}
</pre><script type="text/javascript">
//
generate_example('Example_While_Statement');
//
</script>
              </div>
            </dd>

            <dt><a name="Do_While_Statement" id="Do_While_Statement" title="Statement: do while">The <code>do-while</code>
            Statement</a></dt>

            <dd>
              <pre>
<code>do 
  Statement
while (<var>conditional</var>);</code>
</pre>

              <p>The <code>do while</code> statement is used to
              repeatedly execute a set of statements until a condition
              evaluates to false.</p>

              <div class="example">
                <pre id="Example_Do_While_Statement">
var i = 0;
do
{
  msg('while: i == ' + i + ', i &lt; 5 == ' + (i &lt; 5));
  ++i;
} while (i &lt; 5);
</pre><script type="text/javascript">
//
generate_example('Example_Do_While_Statement');
//
</script>
              </div>

              <p>Note that unlike <code>while</code>, the <code>do
              while</code> will execute <var>Statement</var> at least
              once regardless of the value of <var>conditional</var>
              since the test occurs after <var>Statement</var> is
              executed.</p>

              <div class="example">
                <pre id="Example_Do_While_Statement_false">
do
{
  msg('do while is always executed at least once');
} while (false);
</pre><script type="text/javascript">
//
generate_example('Example_Do_While_Statement_false');
//
</script>
              </div>
            </dd>

            <dt><a name="For_Statement" id="For_Statement" title="Statement: for">The <code>for</code> Statement</a></dt>

            <dd>
              <pre>
<code>
for (<var>init</var>; <var>condition</var>; <var>increment</var>)
  <var>Statement</var></code>
</pre>

              <p>The <code>for</code> statement is a convenience
              statement for a commonly used form of <a href="#While_Statement"><code>while</code></a> statement of
              the form:</p>
              <pre>
<code><var>init</var>;
while(<var>condition</var>)
{
  <var>Statement</var>
  <var>increment</var>;
}</code>
</pre>

              <p>and is particularly useful for iterating over the
              elements of an <code>Array</code>.</p>
            </dd>

            <dt><a name="For_In_Statement" id="For_In_Statement" title="Statement: for in">The <code>for-in</code>
            Statement</a></dt>

            <dd>
              <pre>
<code>for (<var>propname</var> in <var>object</var>)
  <var>Statement</var></code>
</pre>

              <p><code>for in</code> is used to iterate over the
              enumerable properties in an object instance. The body of
              the <code>for</code> loop is executed with the variable
              <var>propname</var> set to each of the enumerable
              properties in the object. Properties with property
              attribute <em>{DontEnum}</em> are not discoverable using
              the <code>for in</code> statement.</p>

              <div class="example">
                <pre id="Example_For_In_Statement">
var object = {a: 'a', b: 'b' };
for (var prop in object)
{
  msg('object.[\'' + prop + '\'] == ' + object[prop]);
}
</pre><script type="text/javascript">
//
generate_example('Example_For_In_Statement');
//
</script>
              </div>
            </dd>

            <dt><a name="Labelled_Statements" id="Labelled_Statements">Labelled Statements</a></dt>

            <dd>
              <pre>
<code><var>label</var> : <var>LoopStatement</var></code>
</pre>

              <p><var>label</var> must be an identifier and
              <var>LoopStatement</var> must be one of the
              <code>while</code>, <code>for</code> or
              <code>for-in</code> interation statements. Labelled
              statements are used to mark loops which are the
              destination of <code>continue</code> or
              <code>break</code> statements.</p>
            </dd>

            <dt><a name="Continue_Statement" id="Continue_Statement" title="Statement: continue">The <code>continue</code>
            Statement</a></dt>

            <dd>
              <pre>
<code>continue</code>
</pre>

              <p>or</p>
              <pre>
<code>continue <var>label</var>;</code>
</pre>

              <p>A <code>continue</code> statement is used to restart a
              loop statement either at the beginning of the currently
              executing loop or at the beginning of a loop whose
              location is specified by the labelled statement marked by
              the label <var>label</var>.</p>

              <div class="example">
                <pre id="Example_Continue_Statement_1">
msg('test basic continue');
for (var i = 0; i &lt; 3; i++)
{
  msg('before continue: i == ' + i);
  continue;
  msg('after continue: this statement will not be executed');
}
msg('test labelled continue');
label0: for (var i = 0; i &lt; 3; i++)
{
  msg('loop0: i == ' + i);
  label1: for (var j = 0; j &lt; 3; j++)
  {
    msg('loop1: i == ' + i + ', j == ' + j);
    if (i == j)
    {
      msg('continue from label0');
      continue label0;
    }
    else
    {
      msg('continue from label1');
      continue label1;
    }
  }
}
</pre><script type="text/javascript">
//
generate_example('Example_Continue_Statement_1');
//
</script>
              </div>
            </dd>

            <dt><a name="Break_Statement" id="Break_Statement" title="Statement: break">The <code>break</code>
            Statement</a></dt>

            <dd>
              <pre>
<code>break</code>
</pre>or
              <pre>
<code>break <var>label</var></code>
</pre>

              <p>A <code>break</code> statement is used to terminate
              either the currently executing loop or the loop whose
              location is specified by the labelled statement marked by
              the label <var>label</var>.</p>

              <div class="example">
                <pre id="Example_Break_Statement">
msg('test basic break');
for (var i = 0; i &lt; 3; i++)
{
  msg('before break: i == ' + i);
  break;
  msg('after break: this statement will not be executed');
}
msg('test labelled break');
label0: for (var i = 0; i &lt; 3; i++)
{
  msg('loop0: i == ' + i);
  label1: for (var j = 0; j &lt; 3; j++)
  {
    msg('loop1: i == ' + i + ', j == ' + j);
    if (i == j)
    {
      msg('break from label0');
      break label0;
    }
    else
    {
      msg('break from label1');
      break label1;
    }
  }
}
</pre><script type="text/javascript">
//
generate_example('Example_Break_Statement');
//
</script>
              </div>
            </dd>
          </dl>
        </dd>

        <dt><a name="Exception_Statements" id="Exception_Statements">Exception Statements</a></dt>

        <dd>
          <p>JavaScript provides the ability to handle errors and other
          exceptions through the use of the exception handling
          statements <code>try</code>, <code>catch</code> and
          <code>finally</code>. When an error or other run-time
          exception occurs in JavaScript the interpreter unwinds the
          execution stack looking for a <code>try</code> block which
          contains the code which caused the error. If a
          <code>try</code> block is found, the interpreter transfers
          control of the program to the matching <code>catch</code>
          block of statements passing an <em>exception</em> object
          thereby allowing the program to investigate the error and
          possibly recover. If no containing <code>try</code> statement
          block is found, the program will terminate with an "uncaught
          exception" error.</p>

          <div class="implnote">
            <p>Although <code>try</code>, <code>catch</code>,
            <code>throw</code> were not introduced until after
            ECMAScript 2, Mozilla JavaScript1.1 and JavaScript1.2 still
            support these statements.</p>
          </div>

          <div class="implnote">
            <p>Web browsers such as Mozilla and Internet Explorer also
            provide the ability to handle errors at the top level of a
            program through the use of the <code>window.onerror</code>
            handler which is a user-defined function which takes
            arguments <var>message</var>, <var>line</var> and
            <var>page</var> indicating the error message, the line
            number and file where the error occured.
            <code>window.onerror</code> is available in the earliest
            implementations of JavaScript in Web browsers however its
            inability to recover from errors gracefully limits its
            usefulness to handling errors that have not been caught by
            the techiniques available using
            <code>try</code>/<code>catch</code> error handling.</p>
          </div>
        </dd>

        <dt><a name="Try_Catch_Finally_Statements" id="Try_Catch_Finally_Statements" title="Statement: try, catch, finally">The <code>try</code>,
        <code>catch</code> and <code>finally</code> Statements</a></dt>

        <dd>
          <div class="example">
            <p>Example Try, Catch Reference Error</p>
            <pre id="Example_Try_Catch">
try
{
  // cause reference error
  var a = b;
}
catch(e)
{
  msg('Exception caught: ' +  
      e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_Try_Catch');
//
</script>

            <p>In this example, the <code>try</code> block contains a
            statement <code>var a = b;</code> which attempts to assign
            an undefined variable <var>b</var> to the variable
            <var>a</var>. This will cause a Reference Error in
            JavaScript which would terminate the program if it were not
            contained in a <code>try</code> block. Once the error
            occurs, control is transferred to the <code>catch</code>
            block of statements and the variable <var>e</var> is
            initialized to reference the <code>Error</code> object
            describing the error.</p>

            <div class="implnote">
              <p>Mozilla's implementation of the <code>Error</code>
              object provides a version of the <code>toString()</code>
              method which displays a human readable error message
              containing the type of error which occured and the error
              message as in <code>ReferenceError: b is not
              defined</code> however MSIE simply displays <code>[object
              Error]</code>.</p>

              <p>MSIE's implementation of the <code>Error</code> object
              can be modified to report a human readable error message
              similar to Mozilla's. For example,</p>
              <pre id="Example_MSIE_Error_toString">
// override MSIE's Error.prototype.toString
if (typeof (new Error).number == 'number')
{
  // number is an MSIE only property
  Error.prototype.toString = function () 
  {
    return this.name + ': ' + this.message;
  };
}

try
{
  var a = b;
}
catch(e)
{
  msg(e);
  msg('e instanceof ReferenceError == ' + (e instanceof ReferenceError));
}
</pre><script type="text/javascript">
//
generate_example('Example_MSIE_Error_toString');
//
</script>

              <p>Note the difference between Mozilla and MSIE: Mozilla
              returns a <code>ReferenceError</code> while MSIE returns
              a <code>TypeError</code>.</p>
            </div>

            <p>Note that there is no <code>var</code> declaration of
            the exception variable <var>e</var> in the above example.
            This due to the special scoping rules for
            <code>catch</code> clauses. In JavaScript, the exception
            variable passed to the <code>catch</code> block only exists
            inside of the <code>catch</code> block itself.</p>

            <div class="implnote">
              <p>MSIE creates the exception object in the containing
              scope of the <code>catch</code> block and not as part of
              the <code>catch</code> block's scope.</p>

              <div class="example">
                <pre id="Example_Catch_Var_Scope">
function test()
{
  var e = 'function scope';
  msg('test() before try: e == ' + e);
  try
  {
    var a = b; 
  }
  catch(e)
  {
    msg('test() catch:  e ==  ' +  e);
  }
  msg('test() after catch: e == ' + e);
}

var e = 'global scope';

msg('Before test(): e == ' + e);
test();
msg('After test(): e == ' + e);

</pre><script type="text/javascript">
//
generate_example('Example_Catch_Var_Scope');
//
</script>
              </div>

              <p>As you can see, Mozilla sets the variable <var>e</var>
              to the <code>Error</code> object only inside of the
              <code>catch</code> block while MSIE sets <var>e</var> to
              the <code>Error</code> object even after the
              <code>catch</code> block has finished.</p>
            </div>
          </div>

          <p>The <code>finally</code> block of statements is executed
          after the <code>try</code> or <code>catch</code> blocks
          regardless whether an error occured or not.</p>

          <div class="example">
            <pre id="Example_Try_Catch_Finally">
// no error
try
{
  var a = 1;
}
catch(e)
{
  msg('Exception caught: ' + e);
}
finally
{
  msg('Finally clause');
}
// thrown exception
try
{
  throw 'exception';
}
catch(e)
{
  msg('Exception caught: ' + e);
}
finally
{
  msg('Finally clause');
}
</pre><script type="text/javascript">
//
generate_example('Example_Try_Catch_Finally');
//
</script>
          </div>

          <div class="example implnote">
            <p>Mozilla supports the use of conditionals to select the
            <code>catch</code> clause however Mozilla JavaScript1.1,
            JavaScript1.2 can not use the <code>instanceof</code>
            operator since it is not supported. MSIE does not support
            conditional catch clauses.</p>

            <div class="example">
              <pre id="Example_Try_Conditional_Catch_if">
// Use conditional catch clauses without instanceof
// This example will work in all versions of Mozilla JavaScript
try
{
  throw 'string exception';
}
catch(e if typeof e == 'number')
{
  msg('Number exception ' + e);
}
catch(e if typeof e == 'string')
{
  msg('String exception ' + e);
}
catch(e)
{
  msg('Exception caught: ' + e);
}
finally
{
  msg('Finally clause');
}
</pre><script type="text/javascript">
//
generate_example('Example_Try_Conditional_Catch_if');
//
</script>
            </div>

            <div class="example">
              <pre id="Example_Try_Conditional_Catch_instanceof">
// Use conditional catch clauses with instanceof
// This example will work in all versions of Mozilla JavaScript1.3 and later
try
{
  var a = b;
}
catch(e if e instanceof String)
{
  msg('String exception ' + e);
}
catch(e if e instanceof ReferenceError)
{
  msg('ReferenceError caught: ' + e);
}
finally
{
  msg('Finally clause');
}
</pre><script type="text/javascript">
//
generate_example('Example_Try_Conditional_Catch_instanceof');
//
</script>
            </div>
          </div>
        </dd>

        <dt><a name="Throw_Statement" id="Throw_Statement" title="Statement: throw">The <code>throw</code> Statement</a></dt>

        <dd>
          <pre>
<code>throw <var>exception</var></code>
</pre>

          <p>The <code>throw</code> statement simulates an error
          condition and passes the value of the <var>exception</var>
          expression to the <code>catch</code> clauses as the value of
          the exception variable. The <var>exception</var> value can be
          any object including an instance of an <code>Error</code>
          object created via the <code>new</code> operator.</p>

          <div class="example">
            <pre id="Example_Throw">
try
{
  throw 'thrown exception';
}
catch(e)
{
  msg('Exception caught: ' + e);
}
</pre><script type="text/javascript">
//
generate_example('Example_Throw');
//
</script>
          </div>

          <div class="implnote">
            <p>Mozilla 1.7 and earlier allow an newline after
            <code>throw</code> and before <var>exception</var> in
            violation of the ECMA 262 Standard. See <a href="/2004/11/07/ecma-262#a-12.13">ECMA 262 - The
            <code>throw</code> statement</a>. Mozilla 1.8 (Firefox 1.1)
            will correctly throw an error in this situation.</p>

            <p>MSIE correctly throws an error.</p>

            <div class="example">
              <pre id="Example_throw_newline">
throw
'exception';
</pre><script type="text/javascript">
//
generate_example('Example_throw_newline');
//
</script>
            </div>
          </div>
        </dd>
      </dl>
    </dd>

    <dt><a name="JavaScript_Native_Objects" id="JavaScript_Native_Objects">JavaScript Native Objects</a></dt>

    <dd>
      <ul>
        <li><a href="#Global_Object">The Global Object</a></li>

        <li><a href="#Object_Objects"><code>Object</code>
        Objects</a></li>

        <li><a href="#Function_Objects"><code>Function</code>
        Objects</a></li>

        <li><a href="#Array_Objects"><code>Array</code>
        Objects</a></li>

        <li><a href="#String_Objects"><code>String</code>
        Objects</a></li>

        <li><a href="#Boolean_Objects"><code>Boolean</code>
        Objects</a></li>

        <li><a href="#Number_Objects"><code>Number</code>
        Objects</a></li>

        <li><a href="#Date_Objects"><code>Date</code> Objects</a></li>

        <li><a href="#RegExp_Objects"><code>RegExp</code>
        Objects</a></li>

        <li><a href="#Math_Object"><code>Math</code> Object</a></li>

        <li><a href="#Error_Objects"><code>Error</code>
        Objects</a></li>
      </ul>

      <p>JavaScript provides a number of <em>native</em>
      (<em>built-in</em>) objects which serve as a <q>standard
      library</q>. These <em>native</em> objects are the
      <em>global</em> object and the initial (prior to programs
      creating new properties) properties of the <em>global</em>
      object.</p>

      <p>Native JavaScript objects come in two types:</p>

      <dl>
        <dt>Function type objects</dt>

        <dd>
          <p>Function type objects are those which have <code>typeof
          <var>object</var> == 'function'</code> and can be called as
          functions (<code>object()</code>). Function type objects have
          an internal prototype property which is initially set to the
          value of <code>Function.prototype</code>. This prototype
          property may or may not (depending on the function) be
          available as an accessible property
          <code>prototype</code>.</p>

          <p>Some Function type objects also have the ability to be
          used a <em>constructors</em> which when operated on by the
          <code>new</code> operator return instances of the object.
          Function type objects which can be used as constructors have
          an internal <em>constructor</em> property which may or may
          not be accessible as the <code>constructor</code>
          property.</p>

          <p>Every Function type object has a property
          <code>length</code> which is defined to be
          <em>{ReadOnly}</em>, <em>{DontDelete}</em> and
          <em>{DontEnum}</em>. <code>length</code> is defined to be the
          <em>maximum</em> number of properties for the Function type.
          This implies that the <code>length</code> property of
          Function type objects can not be modified or removed by a
          JavaScript program.</p>

          <div class="implnote">
            <p>MSIE treats the <code>length</code> property of Function
            type objects as the number of non-optional arguments
            instead of the maximum number.</p>
          </div>
        </dd>

        <dt>Object type objects</dt>

        <dd>
          <p>Object type objects are those which have <code>typeof
          <var>object</var> == 'object'</code> and which can not be
          called as functions.</p>

          <p>Object type objects can not be used as
          <em>constructors</em>.</p>
        </dd>
      </dl>

      <p>Every other property of native JavaScript objects are
      specified to be <em>{DontEnum}</em> unless noted otherwise. This
      means that these properties can be removed, or redefined by an
      executing JavaScript program.</p>

      <p>Many of the native JavaScript objects are constructors which
      can be used to create instances of the objects. Some methods (as
      noted below) can be transferred to other objects and reused in
      different contexts. These methods are called <em>generic</em>
      methods. Non-generic methods are tied to their original types and
      will throw a <code>TypeError</code> if used with a different type
      object.</p>

      <div class="note">
        <p>JavaScript Native Object constructor names are written with
        the initial letter capitalized. For example, Object, String and
        Date are all native Object contructors. In the following, any
        native and user-defined constructor names will be written as
        <code>Object</code>, <code>String</code> and <code>Date</code>,
        etc. When referring to <em>instances</em> of these
        constructors, they will be written using the constructor name
        in all lower case as <var>object</var>, <var>string</var> and
        <var>date</var>, etc..</p>

        <p>For example, let <code>Example</code> be a constructor.</p>

        <dl>
          <dt><code>Example</code></dt>

          <dd>the constructor object</dd>

          <dt><code><var>example</var></code></dt>

          <dd>an instance of <code>Example</code>, e.g.
          <code><var>example</var> = new Example()</code>.</dd>

          <dt><code>Example.prototype.sharedProperty</code></dt>

          <dd>some shared property of instances of
          <code>Example</code>, e.g.
          <code><var>example</var>.hasOwnProperty('sharedProperty') ==
          false</code>.</dd>

          <dt><code>Example.localProperty</code></dt>

          <dd>some local property of <code>Example</code>, e.g.
          <code>Example.hasOwnProperty('localProperty') ==
          true</code>.</dd>

          <dt><code><var>example</var>.someProperty</code></dt>

          <dd>some local property of <var>example</var>, e.g.
          <code><var>example</var>.hasOwnProperty('localProperty') ==
          true</code>.</dd>
        </dl>
      </div>

      <dl>
        <dt><a name="Global_Object" id="Global_Object">The Global
        Object</a></dt>

        <dd>
          <p>The <em>Global</em> object is not accessible by name, can
          not be used in function calls or as a constructor. It is used
          as the root of the scope chain when resolving variable
          references. That means that variables created in
          <em>global</em> scope (outside of any function bodies) are
          created as properties of the global object.</p>

          <div class="implnote">
            <p>In Web browsers such as Mozilla and Internet Explorer,
            the global object is the <code>window</code> object.</p>
          </div>

          <dl>
            <dt><a name="Global_NaN" id="Global_NaN"><code>NaN</code></a></dt>

            <dd>
              <p><code>NaN</code> is a special numeric value
              (<code>typeof NaN == 'number'</code>) which respresents
              the <q>Not a Number</q> values in the IEEE Standard for
              binary numbers.</p>

              <p><code>NaN</code> has property attributes
              <em>{DontEnum}</em> and <em>{DontDelete}</em> which means
              it will not appear in <code>for-in</code> loops and can
              not be deleted, but can be changed to another value.</p>

              <div class="example">
                <p>Note that <code>NaN</code> compares as not equal to
                itself as well as any other number. In order to test a
                number for equality with <code>NaN</code> use the
                global <code>isNaN(<var>value</var>)</code> function
                which returns <code>true</code> if <var>value</var> is
                <code>NaN</code>.</p>
                <pre id="Example_Global_NaN">
msg('typeof NaN == ' + typeof NaN);
msg('(NaN == NaN) == ' + (NaN == NaN));
msg('(NaN === NaN) == ' + (NaN === NaN));
msg('isNaN(NaN) == ' + isNaN(NaN));
</pre><script type="text/javascript">
//
generate_example('Example_Global_NaN');
//
</script>
              </div>
            </dd>

            <dt><a name="Global_Infinity" id="Global_Infinity"><code>Infinity</code></a></dt>

            <dd>
              <p><code>Infinity</code> is a special numeric value
              (<code>typeof NaN == 'number'</code>) which represents a
              numeric value which is greater than any other numeric
              value <strong>except <code>NaN</code></strong>.</p>

              <p><code>Infinity</code> has property attributes
              <em>{DontEnum}</em> and <em>{DontDelete}</em> which means
              it will not appear in <code>for-in</code> loops and can
              not be deleted, but can be changed to another value.</p>

              <div class="example">
                <pre id="Example_Global_Infinity">
msg('typeof Infinity == ' + typeof Infinity);

msg('(10000000000000000000 &lt; Infinity) == ' + 
    (10000000000000000000 &lt; Infinity));

msg('(NaN &lt; Infinity) == ' + (NaN &lt; Infinity));
</pre><script type="text/javascript">
//
generate_example('Example_Global_Infinity');
//
</script>
              </div>
            </dd>

            <dt><a name="Global_undefined" id="Global_undefined"><code>undefined</code></a></dt>

            <dd>
              <p><code>undefined</code> is the single value of the type
              <em>Undefined</em> (<code>typeof undefined ==
              'undefined'</code>) and it used to represent
              uninitialized values.</p>

              <p><code>undefined</code> has property attributes
              <em>{DontEnum}</em> and <em>{DontDelete}</em> which means
              it will not appear in <code>for-in</code> loops and can
              not be deleted, but can be changed to another value.</p>
            </dd>

            <dt><a name="Global_eval" id="Global_eval"><code>eval(x)</code></a></dt>

            <dd>
              <p><code>eval(x)</code> is a function property (method)
              of the Global Object which compiles and executes the
              string <var>x</var> as a JavaScript program.</p>

              <p><code>eval</code> has property attributes
              <em>{DontEnum}</em> and <em>{DontDelete}</em> which means
              it will not appear in <code>for-in</code> loops and can
              not be deleted, but can be changed to another value. If
              <var>x</var> contains a syntax error, a
              <code>SyntaxError</code> will be thrown.</p>

              <div class="example">
                <pre id="Example_Global_eval">
// compile an expression to add two numbers
msg('eval(\'1 + 2\') == ' + eval('1 + 2'));

// compile an expression with a syntax error
try
{
  eval('var 0 = 1;');
}
catch(e)
{
  msg('Error ' +  
      e.name + ': ' + e.message + 
      ' is an instance of SyntaxError: ' + 
      (e instanceof SyntaxError));
}
</pre><script type="text/javascript">
//
generate_example('Example_Global_eval');
//
</script>
              </div>

              <div class="implnote">
                <p>Mozilla and MSIE allow <code>eval</code> to be used
                indirectly and to be the object of an assignment. This
                is supported by the ECMA 262 Standard Section 16.
                Errors so long as <code>EvalError</code> is not
                thrown.</p>

                <div class="example">
                  <pre id="Example_Global_EvalError">
// test if implementation throws EvalError when
// eval is used indirectly.
try
{
  var myeval = eval;
  msg('myeval(\'1+1\') == ' + myeval('1+1'));
}
catch(e)
{
  msg('eval can not be used indirectly. ' +  
      e.name + ': ' + e.message);
}

// test if implementation throws EvalError when
// eval is used as a variable.
try
{
  var eval = function (s) { msg('redefined eval: ' + s); };
  msg('eval(\'1+1\') == ' + eval('1+1'));
}
catch(e)
{
  msg('eval can not be reassigned. ' +  
      e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_Global_EvalError');
//
</script>
                </div>
              </div>

              <div class="implnote">
                <p>Mozilla JavaScript 1.2 generates an error "invalid
                label" when attempting to eval("({})").</p>

                <div class="example">
                  <pre id="Example_Mozilla_JS12_eval_Object_Literal">
try
{
  eval( '({})' );
  msg('No error');
}
catch(e)
{
  msg('Exception: ' +  
      e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_Mozilla_JS12_eval_Object_Literal');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="Global_parseInt" id="Global_parseInt"><code>parseInt(string,
            radix)</code></a></dt>

            <dd>
              <p><code>parseInt(<var>string</var>,
              <var>radix</var>)</code> is a function property (method)
              of the Global Object which parses <var>string</var>
              converting it to a numeric integer value using base
              <var>radix</var>. Any leading whitespace in
              <var>string</var> is skipped. If <var>radix</var> is
              <code>undefined</code> or <code>0</code>, then
              <var>radix</var> is assumed to be <code>10</code>. If
              <var>string</var> is not parseable as an integer,
              <code>NaN</code> is returned.</p>

              <p><code>parseInt</code> has property attributes
              <em>{DontEnum}</em> and <em>{DontDelete}</em> which means
              it will not appear in <code>for-in</code> loops and can
              not be deleted, but can be changed to another value.</p>

              <div class="example">
                <pre id="Example_Global_parseInt">
function test(expr)
{
  var value = eval(expr);
  msg('typeof ' + expr + ' == ' + (typeof value) + 
    ', ' + expr + ' == ' + value);
}

test('parseInt("  10")');
test('parseInt("  10", 2)');
test('parseInt("  20x")');
test('parseInt("y20x")')
</pre><script type="text/javascript">
//
generate_example('Example_Global_parseInt');
//
</script>
              </div>
            </dd>

            <dt><a name="Global_parseFloat" id="Global_parseFloat"><code>parseFloat(string)</code></a></dt>

            <dd>
              <p><code>parseFloat(<var>string</var>)</code> is a
              function property (method) of the Global Object which
              parses <var>string</var> converting it to a numeric value
              using base <var>10</var>. Any leading whitespace in
              <var>string</var> is skipped. If <var>string</var> is not
              parseable as an floating point number, <code>NaN</code>
              is returned.</p>

              <p><code>parseFloat</code> has property attributes
              <em>{DontEnum}</em> and <em>{DontDelete}</em> which means
              it will not appear in <code>for-in</code> loops and can
              not be deleted, but can be changed to another value.</p>

              <div class="example">
                <pre id="Example_Global_parseFloat">
function test(expr)
{
  var value = eval(expr);
  msg('typeof ' + expr + ' == ' + (typeof value) + 
    ', ' + expr + ' == ' + value);
}

test('parseFloat("  10")');
test('parseFloat("  10", 2)');
test('parseFloat("  20x")');
test('parseFloat("y20x")')

test('parseFloat("123.456")');
test('parseFloat("123e4")');
</pre><script type="text/javascript">
//
generate_example('Example_Global_parseFloat');
//
</script>
              </div>
            </dd>

            <dt><a name="Global_isNaN" id="Global_isNaN"><code>isNaN(number)</code></a></dt>

            <dd>
              <p><code>isNaN(<var>number</var>)</code> is a function
              property (method) of the Global Object which returns
              <code>true</code> if number is <code>NaN</code> or
              convertable to <code>NaN</code>, <code>false</code>
              otherwise.</p>

              <p><code>isNaN</code> has property attributes
              <em>{DontEnum}</em> and <em>{DontDelete}</em> which means
              it will not appear in <code>for-in</code> loops and can
              not be deleted, but can be changed to another value.</p>

              <div class="example">
                <pre id="Example_Global_isNaN">
msg('isNaN(NaN) == ' + isNaN(NaN));
msg('isNaN("foo") == ' + isNaN("foo"));
</pre><script type="text/javascript">
//
generate_example('Example_Global_isNaN');
//
</script>
              </div>
            </dd>

            <dt><a name="Global_isFinite" id="Global_isFinite"><code>isFinite(number)</code></a></dt>

            <dd>
              <p><code>isFinite(<var>number</var>)</code> is a function
              property (method) of the Global Object which converts
              <var>number</var> to a numeric value then returns
              <code>true</code> if the value is not
              <code>Infinity</code>. <var>number</var> values which are
              <code>NaN</code> or are convertable to <code>NaN</code>
              return <code>false</code>.</p>

              <p><code>isFinite</code> has property attributes
              <em>{DontEnum}</em> and <em>{DontDelete}</em> which means
              it will not appear in <code>for-in</code> loops and can
              not be deleted, but can be changed to another value.</p>

              <div class="example">
                <pre id="Example_Global_isFinite">
msg('isFinite(10) == ' + isFinite(10));
msg('isFinite(Infinity) == ' + isFinite(Infinity));
msg('isFinite("NaN") == ' + isFinite("NaN"));
msg('isFinite("foo") == ' + isFinite("foo"));
</pre><script type="text/javascript">
//
generate_example('Example_Global_isFinite');
//
</script>
              </div>
            </dd>

            <dt><a name="Global_encodeURI" id="Global_encodeURI"><code>encodeURI(uri)</code></a> and
            <a name="Global_decodeURI" id="Global_decodeURI"><code>decodeURI(encodedURI)</code></a></dt>

            <dd>
              <p><code>encodeURI(<var>uri</var>)</code> and
              <code>decodeURI(<var>encodedURI</var>)</code> are
              functions properties (methods) of the Global Object which
              are used encode and decode complete <abbr title="Uniform Resource Identifier">URI</abbr> values by
              mapping special characters to their <em>% escaped</em>
              character equivalents. <code>encodeURI</code> and
              <code>decodeURI</code> have property attributes
              <em>{DontEnum}</em> and <em>{DontDelete}</em> which means
              they will not appear in <code>for-in</code> loops and can
              not be deleted, but can be changed to another value.</p>

              <p>Since the <var>uri</var> value is assumed to be a
              complete URI, the characters <code>;</code>
              <code>/</code> <code>?</code> <code>:</code>
              <code>@</code> <code>&amp;</code> <code>=</code>
              <code>+</code> <code>$</code> <code>,</code>
              <code>-</code> <code>_</code> <code>.</code>
              <code>!</code> <code>~</code> <code>*</code>
              <code>'</code> <code>(</code> <code>)</code> which have
              special meanings in URIs are left unchanged.</p>

              <div class="example">
                <pre id="Example_Global_encodeURI">
function test(URI)
{
  var encoded = encodeURI(URI);
  var decoded = decodeURI(encoded);

  msg('URI == "' + URI + '"');
  msg('encoded == "' + encoded + '"');
  msg('decoded == "' + decoded + '"');
  msg('(URI == encoded) == ' + (URI == encoded));
  msg('&lt;br&gt;');
}

// test space, percent, backquote
test(' %`');

// test unicode characters
test('\u092F\u0942\u0928\u093F\u0915\u094B\u0921');

// test invariant special characters
test(";/?:@&amp;=+$,-_.!~*'()");

// test digits
test('0123456789');

// test latin letters
test('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');

</pre><script type="text/javascript">
//
generate_example('Example_Global_encodeURI');
//
</script>
              </div>
            </dd>

            <dt><a name="Global_encodeURIComponent" id="Global_encodeURIComponent"><code>encodeURIComponent(uriComponent)</code></a>
            and <a name="Global_decodeURIComponent" id="Global_decodeURIComponent"><code>decodeURIComponent(encodedURIComponent)</code></a></dt>

            <dd>
              <p>
              <code>encodeURIComponent(<var>uriComponent</var>)</code>
              and
              <code>decodeURIComponent(<var>encodedURIComponent</var>)</code>
              are functions properties (methods) of the Global Object
              which are used encode and decode partial <abbr title="Uniform Resource Identifier">URI</abbr> values by
              mapping special characters to their <em>% escaped</em>
              character equivalents. <code>encodeURIComponent</code>
              and <code>decodeURIComponent</code> have property
              attributes <em>{DontEnum}</em> and <em>{DontDelete}</em>
              which means they will not appear in <code>for-in</code>
              loops and can not be deleted, but can be changed to
              another value.</p>

              <p>Since the <var>uriComponent</var> value is assumed to
              be a a component of a URI, the characters <code>;</code>
              <code>/</code> <code>?</code> <code>:</code>
              <code>@</code> <code>&amp;</code> <code>=</code>
              <code>+</code> <code>$</code> <code>,</code> which have
              special meanings in URIs <strong>are not left
              unchanged</strong> and are mapped to their <em>%
              escaped</em> equivalents. The special characters
              <code>-</code> <code>_</code> <code>.</code>
              <code>!</code> <code>~</code> <code>*</code>
              <code>'</code> <code>(</code> <code>)</code> are left
              unchanged.</p>

              <div class="example">
                <pre id="Example_Global_encodeURIComponent">
function test(URI)
{
  var encoded = encodeURIComponent(URI);
  var decoded = decodeURIComponent(encoded);

  msg('URI == "' + URI + '"');
  msg('encoded == "' + encoded + '"');
  msg('decoded == "' + decoded + '"');
  msg('(URI == encoded) == ' + (URI == encoded));
  msg('&lt;br&gt;');
}

// test space, percent, backquote
test(' %`');

// test unicode characters
test('\u092F\u0942\u0928\u093F\u0915\u094B\u0921');

// test invariant special characters
test("-_.!~*'()");

// test other special characters
test(";/?:@&amp;=+$,");

// test digits
test('0123456789');

// test latin letters
test('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');
              
</pre><script type="text/javascript">
//
generate_example('Example_Global_encodeURIComponent');
//
</script>
              </div>
            </dd>

            <dt><a href="#Object"><code>Object(…)</code></a></dt>

            <dt><a href="#Function"><code>Function(…)</code></a></dt>

            <dt><a href="#Array"><code>Array(…)</code></a></dt>

            <dt><a href="#String"><code>String(…)</code></a></dt>

            <dt><a href="#Boolean"><code>Boolean(…)</code></a></dt>

            <dt><a href="#Number"><code>Number(…)</code></a></dt>

            <dt><a href="#Date"><code>Date(…)</code></a></dt>

            <dt><a href="#RegExp"><code>RegExp(…)</code></a></dt>

            <dt><a href="#Math"><code>Math</code></a></dt>

            <dt><a href="#Error"><code>Error(…)</code></a></dt>

            <dt><a href="#EvalError"><code>EvalError(…)</code></a></dt>

            <dt><a href="#RangeError"><code>RangeError(…)</code></a></dt>

            <dt><a href="#ReferenceError"><code>ReferenceError(…)</code></a></dt>

            <dt><a href="#SyntaxError"><code>SyntaxError(…)</code></a></dt>

            <dt><a href="#TypeError"><code>TypeError(…)</code></a></dt>

            <dt><a href="#URIError"><code>URIError(…)</code></a></dt>
          </dl>
        </dd>

        <dt><a name="Object_Objects" id="Object_Objects">Object
        Objects</a></dt>

        <dd>
          <p><code>Object</code> Objects can be created using the
          <code>Object(<var>value</var>)</code> constructor or using
          literal Object initializers.</p>

          <div class="example">
            <p>Creating <code>Object</code> Objects</p>
            <pre id="Example_Creating_Object_Objects">
var object;

// create an instance of Object using the constructor
object = new Object();

// create an instance of Object using a literal initializer
object = {};
</pre><script type="text/javascript">
//
generate_example('Example_Creating_Object_Objects');
//
</script>
          </div>

          <p>If <code>Object(<var>value</var>)</code> is called as a
          function, it performs a <a href="#Type_Conversions">conversion</a> of <var>value</var> to
          <code>Object</code>.</p>

          <p><code>Object</code> Objects are special in that serve as
          the <em>base</em> class for all native and user-defined
          JavaScript objects.</p>

          <div class="example">
            <pre id="Example_Object_Objects_base_class">
var types = [Object, Function, Array, String, Boolean, Number,
             Date, RegExp, Error];
for (var i = 0; i &lt; types.length; i++)
{
  msg(types[i] instanceof Object);
}
</pre><script type="text/javascript">
//
generate_example('Example_Object_Objects_base_class');
//
</script>
          </div>

          <p>The fact that all native and user-defined objects inherit
          from <code>Object</code> means that they share
          <code>Object</code>'s methods and if modifications are made
          to <code>Object.prototype</code>, then all native and
          user-defined objects automatically share those
          modifcations.</p>

          <div class="example">
            <p>Example showing how methods are inherited from
            Object</p>
            <pre id="Example_Object_Date_Inherit">
// add fooBar as a method to Object.prototype
Object.prototype.fooBar = function ()
{
  msg('FOOBAR!');
};

var date = new Date();
date.fooBar();
</pre><script type="text/javascript">
//
generate_example('Example_Object_Date_Inherit');
//
</script>
          </div>

          <dl>
            <dt><a name="Object" id="Object"><code>Object([<var>value</var>])</code></a></dt>

            <dd>
              <p>The <code>Object</code> function can be called either
              as a constructor or as a function.</p>

              <p><code>Object</code> has property attribute
              <em>{DontEnum}</em> which means it does not appear in
              <code>for-in</code> loops, can be deleted and can be the
              target of an assignment.</p>

              <div class="implnote">
                <p>Mozilla adds the <em>{DontDelete}</em> property
                attribute which means Mozilla will not delete it.</p>
              </div>

              <div class="example">
                <pre id="Example_Object_property_attributes_dontdelete">
// attempt to delete Object
msg('Before delete: typeof Object == ' + typeof Object);
msg('(delete Object) == ' + (delete Object));
msg('After delete: typeof Object == ' + typeof Object);
</pre><script type="text/javascript">
//
generate_example('Example_Object_property_attributes_dontdelete');
//
</script>
              </div>

              <div class="example">
                <pre id="Example_Object_property_attributes_readonly">
// attempt to assign to Object
Object = 'foo';
msg('After Object = \'foo\': Object == ' + Object);
</pre><script type="text/javascript">
//
generate_example('Example_Object_property_attributes_readonly');
//
</script>
              </div>

              <p>When called as a constructor with no <var>value</var>
              argument it will create an empty instance of
              <code>Object</code> with prototype
              <code>Object.prototype</code>, with its internal
              <em>Class</em> property set to <code>'Object'</code>.
              When called with a <var>value</var> which is not a native
              or user-defined JavaScript Object, the constructor
              returns the <var>value</var> <a href="#Type_Conversions">converted</a> to <code>Object</code>.
              When called with a <var>value</var> which is a native or
              user-defined Object, the constructor returns
              <var>value</var> without creating a new object
              instance.</p>

              <div class="example">
                <pre id="Example_Object_Constructor">
var object1;
var object2;

// create an empty instance of Object
object1 = new Object();
msg('typeof object1 == ' + typeof object1);

// convert primitive values to Objects
object1 = new Object('foo');
msg('typeof object1 == ' + typeof object1);
msg('(object1 == "foo") == ' + (object1 == "foo"));

// call with object value returns the same
// object
object2 = new Object(object1);
msg('(object1 === object2) == ' + (object1 === object2));
</pre><script type="text/javascript">
//
generate_example('Example_Object_Constructor');
//
</script>
              </div>
            </dd>

            <dt><a name="Object.prototype" id="Object.prototype"><code>Object.prototype</code></a></dt>

            <dd>
              <p><code>Object.prototype</code> defines the base
              properties and methods for all native and user-defined
              JavaScript objects. Although
              <code>Object.prototype.toString()</code> returns
              <code>"[object Object]"</code>,
              <code>Object.prototype</code> is <strong>not</strong> an
              <code>Object</code>.
              <code>Object.prototype.prototype</code> is
              <code>undefined</code> which means it does not inherit
              properties or methods from any other object.</p>

              <div class="example">
                <pre id="Example_Object.prototype">
msg('Object.prototype == ' + Object.prototype);
msg('Object.prototype instanceof Object ' + 
    (Object.prototype instanceof Object));
msg('Object.prototype.prototype == ' + Object.prototype.prototype);
</pre><script type="text/javascript">
//
generate_example('Example_Object.prototype');
//
</script>
              </div>

              <p><code>Object.prototype</code> has property attributes
              <em>{DontEnum}</em>, <em>{DontDelete}</em> and
              <em>{ReadOnly}</em> which means it will not appear in
              <code>for-in</code> loops, can not be deleted and can not
              be changed by assignment although its properties
              <em>may</em> be modified.</p>
            </dd>

            <dt><a name="Object.prototype.constructor" id="Object.prototype.constructor"><code>Object.prototype.constructor</code></a></dt>

            <dd>
              <p>contains a reference to the constructor function
              <code>Object</code> used to create the instance.</p>
            </dd>

            <dt><a name="Object.prototype.toString" id="Object.prototype.toString"><code>Object.prototype.toString()</code></a></dt>

            <dd>
              <p>returns a string representing the instance. For
              instances of type Object, <code>toString</code> returns
              '[object Object]' however the actual value can vary
              depending on whether the instance is a native object, a
              user-defined object or a host object.</p>

              <div class="implnote">
                <p>In Mozilla JavaScript1.2, <code>toString()</code>a
                behaves like <code>toSource()</code> below.</p>
              </div>

              <div class="implnote">
                <p>The ECMAScript standard specifies that for native
                JavaScript Objects, <code>toString()</code> should
                return a string of the form '[object <var>Class</var>]'
                where <var>Class</var> is the name of the object's
                constructor however MSIE generates "[object]" for host
                objects. You can get native built-in objects like Date,
                RegExp to report "[object Date]", "[object RegExp]" by
                <var>Native</var>.prototype.getClass =
                Object.prototype.toString; then calling getClass on an
                instance. This does not work for user defined objects
                however.</p>

                <div class="example">
                  <pre id="Example_MSIE_Object_toString">
// define a getClass method based 
// on Object.prototype.toString. Note 
// Native JavaScript objects will inherit this
// method but Host Objects will not.
Object.prototype.getClass = Object.prototype.toString;

// test native objects
var d = new Date();
var s = new String();
msg('d.toString() == ' + d.toString() + 
    ', d.getClass() == ' + d.getClass());
msg('s.toString() == ' + s.toString() + 
    ', s.getClass() == ' + s.getClass());

// test host objects
try
{
  // this will cause an error since the host object
  // window does not inherit from Object
  msg('window.toString() == ' + window.toString() + 
      ', window.getClass() == ' + window.getClass());
}
catch(e)
{
  msg('Error ' +  
      e.name + ': ' + e.message);

  // set the getClass method directly on window
  window.getClass = Object.prototype.toString;
  msg('window.toString() == ' + window.toString() + 
      ', window.getClass() == ' + window.getClass());
}
</pre><script type="text/javascript">
//
generate_example('Example_MSIE_Object_toString');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="Object.prototype.toSource" id="Object.prototype.toSource"><code>Object.prototype.toSource()</code></a></dt>

            <dd>
              <div class="implnote">
                <p>Mozilla only function which returns a string
                representing the Object Initializer. This is overridden
                by child classes of Object to perform specialized
                source output.</p>

                <div class="example">
                  <pre id="Example_Mozilla_Instance_toSource">
var object = {prop1: 'value1', prop2: 'value2'};
try
{
  msg('object.toSource() = ' + object.toSource());
}
catch(e)
{
  msg('Error object.toSource not supported ' +  
      e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_Mozilla_Instance_toSource');
//
</script>
                </div>

                <p>When called on a function, <code>toSource</code>
                returns the source code of the function if it is
                user-defined and a dummy function with '[native code]'
                as the body when the function is native.</p>
                <pre>
function Object() { 
  [native code]
  }
                  
</pre>

                <div class="example">
                  <pre id="Example_Mozilla_Object_toSource">
try
{
  msg('Object.toSource() == ' + Object.toSource());
}
catch(e)
{
  msg('Error toSource not supported ' +  
      e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_Mozilla_Object_toSource');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="Object.prototype.toLocaleString" id="Object.prototype.toLocaleString"><code>Object.prototype.toLocaleString()</code></a></dt>

            <dd>
              <p>returns a localized string representing the
              instance.</p>
            </dd>

            <dt><a name="Object.prototype.valueOf" id="Object.prototype.valueOf"><code>Object.prototype.valueOf()</code></a></dt>

            <dd>
              <p>returns the <code>this</code> value for the
              instance.</p>
            </dd>

            <dt><a name="Object.prototype.hasOwnProperty" id="Object.prototype.hasOwnProperty"><code>Object.prototype.hasOwnProperty(property)</code></a></dt>

            <dd>
              <p>returns <code>true</code> if <code>property</code> is
              a local (unshared) property of the instance.</p>
            </dd>

            <dt><a name="Object.prototype.isPrototypeOf" id="Object.prototype.isPrototypeOf"><code>Object.prototype.isPrototypeOf(object)</code></a></dt>

            <dd>
              <p>returns <code>true</code> if the instance is the
              prototype of <code>object</code>.</p>
            </dd>

            <dt><a name="Object.prototype.isEnumerable" id="Object.prototype.isEnumerable"><code>Object.prototype.isEnumerable(property)</code></a></dt>

            <dd>
              <p>returns <code>true</code> if <code>property</code> is
              enumerated during a <code>for (p in instance)</code>
              loop.</p>

              <div class="implnote">
                <p>Mozilla and MSIE do not support
                <code>isEnumerable</code>.</p>
              </div>
            </dd>

            <dt><a name="Object.prototype.eval" id="Object.prototype.eval"><code>Object.prototype.eval(source)</code></a></dt>

            <dd>
              <p>Evaluates <var>source</var> placing the object
              instance at the front of the scope chain.</p>

              <div class="implnote">
                <p>Object.prototype.eval is supported in Mozilla but
                not MSIE</p>

                <div class="example">
                  <pre id="Example_Object_Instance_Eval">
try
{
  var o = {v: 'object scope' };
  msg('eval v in scope of object == ' + o.eval('v'));
}
catch(e)
{
  msg('Error Object.prototype.eval not supported ' +  
      e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_Object_Instance_Eval');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="Object.name" id="Object.name"><code>Object.name</code></a></dt>

            <dd>
              <div class="implnote">
                <p>Mozilla provides a local property <code>name</code>
                on the <code>Object</code> constructor (as well as
                other native and user-defined constructors) which
                returns a string containing the name of the constructor
                function.</p>

                <div class="example">
                  <pre id="Example_Object.name">
msg('Object.name == ' + Object.name);
</pre><script type="text/javascript">
//
generate_example('Example_Object.name');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="Object.length" id="Object.length"><code>Object.length</code></a></dt>

            <dd>
              <p><code>Object</code> has one optional argument
              <var>value</var>, therefore <code>Object.length</code> is
              <code>1</code>.</p>

              <div class="example">
                <pre id="Example_Object.length">
msg('Object.length == ' + Object.length);
</pre><script type="text/javascript">
//
generate_example('Example_Object.length');
//
</script>
              </div>

              <div class="implnote">
                <p>MSIE returns <code>Object.length == 0</code> since
                it does not report optional arguments.</p>
              </div>
            </dd>

            <dt><a name="object.__proto__" id="object.__proto__"><code><var>object</var>.__proto__</code></a></dt>

            <dd>
              <div class="implnote">
                <p>Mozilla implements a local property
                <code>__proto__</code> in each instance of an object
                which points to its <em>prototype</em> object. This
                allows easy access to an instance's prototype. This
                property is not supported by MSIE.</p>

                <div class="example">
                  <pre id="Example_Mozilla_proto">
var object = new Object();

// Mozilla only
msg('object.__proto__ == ' + 
    object.__proto__);
msg('object.__proto__.toString == ' + 
    object.__proto__.toString);

// cross browser emulation of __proto__
msg('getPrototype(object) == ' + 
     getPrototype(object));
msg('getPrototype(object).toString == ' +
     getPrototype(object).toString);
msg('getPrototype(object) == object.__proto__ == ' +
    (getPrototype(object) == object.__proto__));

function getPrototype(o)
{
  try
  {
    return o.constructor.prototype;
  }
  catch(e)
  {
  }
  return null;
}
  
</pre><script type="text/javascript">
//
generate_example('Example_Mozilla_proto');
//
</script>
                </div>
              </div>
            </dd>
          </dl>

          <div class="example">
            Example Create_Object_Constructor
            <pre id="Example_Create_Objects_Constructor">
// create an object using a Constructor
var object = new Object();

// test the existence of the standard shared properties
msg('object.constructor '    + object.constructor);
msg('object.toString '       + object.toString);
msg('object.toLocaleString ' + object.toLocaleString); 
msg('object.valueOf '        + object.valueOf); 
msg('object.hasOwnProperty ' + object.hasOwnProperty); 
msg('object.isPrototypeOf '  + object.isPrototypeOf);
msg('object.isEnumerable '   + object.isEnumerable);

// add properties to the object
object.property1 = 'value1';
object.property2 = 'value2';

// loop over the properties of the object
// displaying the enumerable property names and values
for (var propname in object)
{
  msg('object\'s property "' + propname + 
      '" is "' + 
      object[propname] + '"');
}

// test if a property exists
if ('property1' in object)
{
  msg('object.property1 exists');
}

// test if a property is local
if ('hasOwnProperty' in object)
{
  msg('object has local property property1 ' + 
      object.hasOwnProperty('property1'));
  msg('object has local property constructor ' +
      object.hasOwnProperty('constructor'));
}

// test if a property is enumerable
if ('isEnumerable' in object)
{
  msg('object.property1 is enumerable ' + 
      object.isEnumerable('property1'));
  msg('object.constructor is enumerable ' + 
      object.isEnumerable('constructor'));
}
</pre><script type="text/javascript">
//
generate_example('Example_Create_Objects_Constructor');
//
</script>
          </div>
        </dd>

        <dt><a name="Function_Objects" id="Function_Objects">Function
        Objects</a></dt>

        <dd>
          <p>All JavaScript functions are instances of the
          <code>Function</code> Object and have <code>typeof
          <var>function</var> == 'function'</code>.
          <code>Function</code> objects can be created using the
          <code>Function</code> constructor, as function definitions,
          or as function expressions.</p>

          <div class="example">
            <p>Creating <code>Function</code> Objects</p>
            <pre id="Example_Create_Function_Objects">
// create a function using function definition
function funcdef(arg1, arg2)
{
  return arg1 + arg2;
}
msg('typeof funcdef == ' + typeof funcdef);

// create a function using a function expression
var funcexpr = function _funcexpr(arg1, arg2) { return arg1 + arg2;};
msg('typeof funcexpr == ' + typeof funcexpr);

// create a function using new Function
var funcnew = new Function("arg1", "arg2", "return arg1 + arg2;");
msg('typeof funcnew == ' + typeof funcnew);

// create a function using Function call
var funccall = Function("arg1", "arg2", "return arg1 + arg2;");
msg('typeof funccall == ' + typeof funccall);
</pre><script type="text/javascript">
//
generate_example('Example_Create_Function_Objects');
//
</script>
          </div>

          <dl>
            <dt><a name="Function" id="Function"><code>Function(<var>arg1</var>, <var>arg2</var>,
            …)</code></a></dt>

            <dd>
              <p>The <code>Function</code> constructor can be called
              equivalently as a constructor <code>new
              Function(…)</code> or as a simple function call
              <code>Function(…)</code>. The return value of
              <code>Function</code> is a reference to a
              <var>function</var> instance which can be called like any
              other function.</p>

              <p><code>Function</code> has property attribute
              <em>{DontEnum}</em> which means it does not appear in
              <code>for-in</code> loops, can be deleted and can be the
              target of an assignment.</p>

              <div class="implnote">
                <p>Mozilla adds the <em>{DontDelete}</em> property
                attribute which means Mozilla will not delete it.</p>
              </div>

              <div class="example">
                <pre id="Example_Function_property_attributes_dontdelete">
// attempt to delete Function
msg('Before delete: typeof Function == ' + typeof Function);
msg('(delete Function) == ' + (delete Function));
msg('After delete: typeof Function == ' + typeof Function);
</pre><script type="text/javascript">
//
generate_example('Example_Function_property_attributes_dontdelete');
//
</script>
              </div>

              <div class="example">
                <pre id="Example_Function_property_attributes_readonly">
// attempt to assign to Function
Function = 'foo';
msg('After Function = \'foo\': Function == ' + Function);
</pre><script type="text/javascript">
//
generate_example('Example_Function_property_attributes_readonly');
//
</script>
              </div>

              <p><code>Function()</code> takes any number of string
              arguments. The last argument is always considered to be a
              string containing the body of the function while the
              other arguments are considered to be the list of argument
              names for the function. Note that the arguments to the
              new function can be written separately as <code>"arg1",
              "arg2", …</code> or as a single string
              <code>"arg1, arg2, …"</code>. For example, the
              following are equivalent:</p>
              <pre>
func = new Function("arg1", "arg2", "return arg1 + arg2;")
func = new Function("arg1, arg2", "return arg1 + arg2;")
function func(arg1, arg2) {return arg1 + arg2;}
</pre>
            </dd>

            <dt><a name="Function.prototype" id="Function.prototype"><code>Function.prototype</code></a></dt>

            <dd>
              <p><code>Function.prototype</code> defines the shared
              properties and methods of all instances of
              <code>Function</code> inherit.
              <code>Function.prototype</code> is an instance of
              <code>Object</code> which means instances of
              <code>Function</code> inherit from
              <code>Object</code>.</p>

              <div class="example">
                <pre id="Example_Function.prototype">
msg('Function.prototype == ' + Function.prototype);
msg('Function.prototype.prototype == ' + Function.prototype.prototype);
</pre><script type="text/javascript">
//
generate_example('Example_Function.prototype');
//
</script>
              </div>

              <p><code>Function.prototype</code> has property
              attributes <em>{DontEnum}</em>, <em>{DontDelete}</em> and
              <em>{ReadOnly}</em> which means it will not appear in
              <code>for-in</code> loops, can not be deleted and can not
              be changed by assignment although its properties
              <em>may</em> be modified.</p>
            </dd>

            <dt><a name="Function.prototype.constructor" id="Function.prototype.constructor"><code>Function.prototype.constructor</code></a></dt>

            <dd>
              <p>returns the <code>Function</code> constructor.</p>
            </dd>

            <dt><a name="Function.prototype.toString" id="Function.prototype.toString"><code>Function.prototype.toString()</code></a></dt>

            <dd>
              <p>Returns a string representing the source code of the
              function instance. For native functions, returns
              <code>'[native code]'</code> for the function body.</p>

              <div class="example">
                <pre id="Example_Function.prototype.toString">
msg('Function.toString() == ' + Function.toString());

function userDefined(arg1, arg2)
{
  return arg1 + arg2;
}

msg('userDefined.toString() == ' + userDefined.toString());

if ('toSource' in userDefined)
{
  msg('userDefined.toSource() == ' + userDefined.toSource());
}
</pre><script type="text/javascript">
//
generate_example('Example_Function.prototype.toString');
//
</script>
              </div>
            </dd>

            <dt><a name="Function.prototype.toSource" id="Function.prototype.toSource"><code>Function.prototype.toSource()</code></a></dt>

            <dd>
              <div class="implnote">
                <p>Mozilla only function which returns the source code
                of the function instance. See <a href="#Function.prototype.toString">Function.prototype.toString</a>.</p>
              </div>
            </dd>

            <dt><a name="Function.prototype.apply" id="Function.prototype.apply"><code>Function.prototype.apply(thisArg,
            argArray)</code></a></dt>

            <dd>
              <p>Calls the function as if it were a method of the
              <var>thisArg</var> instance with arguments
              <code><var>argArray[0]</var>, <var>argArray[1]</var>,
              …</code>. If <var>thisArg</var> is
              <code>undefined</code> or <code>null</code>, the global
              object is passed as the value of <var>thisArg</var>.</p>
            </dd>

            <dt><a name="Function.prototype.call" id="Function.prototype.call"><code>Function.prototype.call(thisArg[,
            arg1 [, arg2, …]])</code></a></dt>

            <dd>
              <p>Calls the function as if it were a method of the
              <var>thisArg</var> instance with arguments
              <code><var>arg1</var>, <var>arg2</var>, …</code>.
              If <var>thisArg</var> is <code>undefined</code> or
              <code>null</code>, the global object is passed as the
              value of <var>thisArg</var>.</p>
            </dd>

            <dt><a name="Function.length" id="Function.length"><code>Function.length</code></a></dt>

            <dd>
              <p>returns <code>1</code></p>

              <div class="example">
                <pre id="Example_Function.length">
msg('Function.length == ' + Function.length);
</pre><script type="text/javascript">
//
generate_example('Example_Function.length');
//
</script>
              </div>
            </dd>

            <dt><a name="function.length" id="function.length"><var>function</var><code>.length</code></a></dt>

            <dd>
              <p>Returns the number of defined arguments for the
              function instance.</p>

              <div class="implnote">
                <p>Mozilla JavaScript1.1, JavaScript1.2 will report
                <code><var>function</var>.length</code> to be the
                actual number of arguments passed to the function
                rather than the defined number of arguments. This is
                not the case for Mozilla JavaScript1.3 or later. See
                <a href="#Example_Function_Call_Context">Example
                Function_Call_Context</a>.</p>
              </div>
            </dd>

            <dt><a name="function.arity" id="function.arity"><var>function</var><code>.arity</code></a></dt>

            <dd>
              <div class="implnote">
                <p>A Mozilla extension
                <var>function</var>.<code>arity</code> returns the same
                value as <code><var>function</var>.length</code>. This
                is not supported by MSIE</p>

                <div class="example">
                  <pre id="Example_Mozilla_Arity">
function f(arg0, arg1)
{
  msg('f.length == ' + f.length + 
      ' arguments.length == ' + arguments.length + 
      ' f.arity  == ' + f.arity);
}

f(1);
</pre><script type="text/javascript">
//
generate_example('Example_Mozilla_Arity');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="function.prototype" id="function.prototype"><var>function</var><code>.prototype</code></a></dt>

            <dd>
              <p>The <code>prototype</code> property of function
              instances is used as the prototype object for objects
              created from using the <var>function</var> as a
              constructor.</p>
            </dd>

            <dt><a name="function.name" id="function.name"><var>function</var><code>.name</code></a></dt>

            <dd>
              <div class="implnote">
                <p>Mozilla implements a property on instances of
                <code>Function</code> which returns the name of the
                function. Anonymous functions created via <code>new
                Function()</code> return <code>'anonymous'</code> while
                Anonymous functions created by <em>function
                expressions</em> return <code>''</code>. Note that
                Mozilla JavaScript1.1, JavaScript1.2 return
                <code>''</code> for both types.</p>

                <p>Mozilla supports the <code>name</code> property of
                <code>constructor</code> objects in
                <code>Function</code> prototypes. This always returns
                <code>'Function'</code>. MSIE does not support this
                property.</p>

                <div class="example">
                  <pre id="Example_Mozilla_Constructor_Name" xml:space="preserve">
function myfunction()
{
}

msg('myfunction.constructor.name ==' + 
    myfunction.constructor.name);
msg('myfunction.name == ' + 
    myfunction.name);

var myfunctionexpr = function myfunction()
{
};

msg('myfunctionexpr.constructor.name ==' + 
    myfunctionexpr.constructor.name);
msg('myfunctionexpr.name == ' + 
    myfunctionexpr.name);

var anonfunction = new Function();

msg('anonfunction.constructor.name ==' + 
    anonfunction.constructor.name);
msg('anonfunction.name == ' + 
    anonfunction.name);

var anonfunctionexpr = function () {};

msg('anonfunctionexpr.constructor.name ==' + 
    anonfunctionexpr.constructor.name);
msg('anonfunctionexpr.name == ' + 
    anonfunctionexpr.name);


                            
</pre><script type="text/javascript">
//
generate_example('Example_Mozilla_Constructor_Name');
//
</script>
                </div>
              </div>
            </dd>
          </dl>
        </dd>

        <dt><a name="Array_Objects" id="Array_Objects">Array
        Objects</a></dt>

        <dd>
          <p><code>Array</code> objects are a special kind of
          JavaScript object which contain ordered lists of items.
          <code>Array</code> indexes are special zero-based integer
          valued properties of the <code>Array</code> object by which
          items can be retrieved using the <a href="#Access_Array_items">member of <code>[]</code></a> operator.
          <code>Array</code> objects have a local property
          <code>length</code> which contains the number of items in the
          array. Unlike arrays in <tt>C</tt>, JavaScript
          <code>Array</code>s, can grow or shrink in size and it is
          impossible to have a <em>buffer overrun</em> using JavaScript
          arrays. If <var>array</var> is an <code>Array</code>, and
          <var>len</var></p>

          <p><code>Array</code>s can be created either using array
          literal initializers of the form: <code>var <var>array</var>
          = [<var>item0</var>, <var>item1</var>, …]</code> or
          through the use of the <code>Array</code> constructor:
          <code>var <var>array</var> = new Array()</code>.</p>

          <div class="implnote">
            <p>Mozilla ignores empty element following trailing comma
            (,) in an array initializer. MSIE treats empty element
            following trailing comma (,) as an undefined element.</p>
            <pre>
a=[,];
a.length == 1 in Mozilla
a.length == 2 in MSIE
</pre>

            <div class="example">
              <pre id="Example_Array_Initializer">
var a = [,];
msg('a.length == ' + a.length);
for (var i = 0; i &lt; a.length; i++)
{
  msg('a[' + i + '] == ' + a[i]);
}
</pre><script type="text/javascript">
//
generate_example('Example_Array_Initializer');
//
</script>
            </div>
          </div>

          <dl>
            <dt><a name="Array" id="Array"><code>Array(<var>length</var>)</code></a></dt>

            <dd>
              <p><code>Array</code> can be called either as a
              constructor (<code>new Array(<var>len</var>)</code>) or
              as a function (<code>Array(<var>len</var>)</code>) to
              create a new instance of an <code>Array</code> with
              <var>len</var> items each initialized to
              <code>undefined</code>.</p>

              <div class="implnote">
                <p>Mozilla JavaScript1.2 <code>new Array(len)</code>
                creates an array with one element consisting of the
                number <code>len</code>. Mozilla JavaScript1.1,
                JavaScript1.3 and later, MSIE will create an array of
                length <code>len</code> with <code>undefined</code>
                elements.</p>

                <div class="example">
                  <pre id="Example_Mozilla_Array_New">
var array = new Array(100);
msg('array.length == ' + array.length);
msg('array[0] == ' + array[0]);
            
</pre><script type="text/javascript">
//
generate_example('Example_Mozilla_Array_New');
//
</script>
                </div>
              </div>

              <p><code>Array</code> has property attribute
              <em>{DontEnum}</em> which means it does not appear in
              <code>for-in</code> loops, can be deleted and can be the
              target of an assignment.</p>

              <div class="implnote">
                <p>Mozilla adds the <em>{DontDelete}</em> property
                attribute which means Mozilla will not delete it.</p>
              </div>

              <div class="example">
                <pre id="Example_Array_property_attributes_dontdelete">
// attempt to delete Array
msg('Before delete: typeof Array == ' + typeof Array);
msg('(delete Array) == ' + (delete Array));
msg('After delete: typeof Array == ' + typeof Array);
</pre><script type="text/javascript">
//
generate_example('Example_Array_property_attributes_dontdelete');
//
</script>
              </div>

              <div class="example">
                <pre id="Example_Array_property_attributes_readonly">
// attempt to assign to Array
Array = 'foo';
msg('After Array = \'foo\': Array == ' + Array);
</pre><script type="text/javascript">
//
generate_example('Example_Array_property_attributes_readonly');
//
</script>
              </div>
            </dd>

            <dt><a name="Array.prototype" id="Array.prototype"><code>Array.prototype</code></a></dt>

            <dd>
              <p><code>Array.prototype</code> has property attributes
              <em>{DontEnum}</em>, <em>{DontDelete}</em> and
              <em>{ReadOnly}</em> which means it will not appear in
              <code>for-in</code> loops, can not be deleted and can not
              be changed by assignment although its properties
              <em>may</em> be modified.</p>
            </dd>

            <dt><a name="Array.prototype.constructor" id="Array.prototype.constructor"><code>Array.prototype.constructor</code></a></dt>

            <dd>
              <p>Returns a reference to the <code>Array</code>
              constructor.</p>
            </dd>

            <dt><a name="Array.prototype.toString" id="Array.prototype.toString"><code>Array.prototype.toString()</code></a></dt>

            <dd>
              <p>Returns a string listing the string values of each
              element separated by <code>,</code> separator. The result
              is identical to the result returned by
              <code>join(',')</code></p>

              <div class="implnote">
                <p>Mozilla JavaScript1.2 will return a string
                representing an array literal initializer for the array
                instance. This is the same as the result of
                <code>toString()</code> with <code>[</code> and
                <code>]</code> surrounding the <code>toString()</code>
                value.</p>
                <pre id="Example_Array.prototype.toString">
var array = [1, 2];

msg('array.toString() == ' + array.toString());
</pre><script type="text/javascript">
//
generate_example('Example_Array.prototype.toString');
//
</script>
              </div>
            </dd>

            <dt><a name="Array.prototype.toSource" id="Array.prototype.toSource"><code>Array.prototype.toSource()</code></a></dt>

            <dd>
              <div class="implnote">
                <p>Mozilla will return a string representing an array
                literal initializer for the array instance. This is the
                same as the result of <code>toString()</code> with
                <code>[</code> and <code>]</code> surrounding the
                <code>toString()</code> value.</p>

                <div class="example">
                  <pre id="Example_Array.prototype.toSource">
var array = [1, 2];

msg('array.toSource() == ' + array.toSource());
</pre><script type="text/javascript">
//
generate_example('Example_Array.prototype.toSource');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="Array.prototype.toLocaleString" id="Array.prototype.toLocaleString"><code>Array.prototype.toLocaleString()</code></a></dt>

            <dd>
              <p>Returns a localized string representing the
              <code>Array</code>.</p>
            </dd>

            <dt><a name="Array.prototype.concat" id="Array.prototype.concat"><code>Array.prototype.concat([item1[,
            item2 [, …]]])</code></a></dt>

            <dd>
              <p>Return a new array instance consisting of the elements
              of array <var>item1</var>, <var>item2</var> in the same
              order.</p>

              <div class="example">
                <pre id="Example_Array.prototype.concat">
var array1 = [1,2];
var array2 = [3,4];
var array3 = [5,6];
var result = array1.concat(array2,array3);

for (var i = 0; i &lt; result.length; i++)
{
  msg('result[' + i + '] == ' + result[i]);
}
</pre><script type="text/javascript">
//
generate_example('Example_Array.prototype.concat');
//
</script>
              </div>
            </dd>

            <dt><a name="Array.prototype.join" id="Array.prototype.join"><code>Array.prototype.join(separator)</code></a></dt>

            <dd>
              <p>Returns a string value consisting of the concatenation
              of the string values of each element separated by the
              <code>separator</code>.</p>

              <div class="implnote">
                <p>MSIE will not default the separator to
                <code>,</code> if the <code>separator</code> value is
                <code>undefined</code> however it will if the
                <code>separator</code> is not specified.</p>

                <div class="example">
                  <pre id="Example_Array.prototype.join">
var array = [1, 2];

msg('array.join() == ' + array.join());
msg('array.join(undefined) == ' + array.join(undefined));
msg('array.join(\'-\') == ' + array.join('-'));
</pre><script type="text/javascript">
//
generate_example('Example_Array.prototype.join');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="Array.prototype.pop" id="Array.prototype.pop"><code>Array.prototype.pop()</code></a></dt>

            <dd>
              <p>Removes the element at the end of the array and
              returns it as the value of the function call. If the
              array is empty, <code>pop()</code> returns
              <code>undefined</code>.</p>

              <div class="example">
                <pre id="Example_Array.prototype.pop">
var stack = ['a', 'b', 'c'];

msg('stack.pop() == ' + stack.pop());
msg('stack.toString() == ' + stack.toString());

msg('stack.pop() == ' + stack.pop());
msg('stack.toString() == ' + stack.toString());

msg('stack.pop() == ' + stack.pop());
msg('stack.toString() == ' + stack.toString());

msg('stack.pop() == ' + stack.pop());
msg('stack.toString() == ' + stack.toString());
</pre><script type="text/javascript">
//
generate_example('Example_Array.prototype.pop');
//
</script>
              </div>
            </dd>

            <dt><a name="Array.prototype.push" id="Array.prototype.push"><code>Array.prototype.push([item1[,
            item2[, …]]])</code></a></dt>

            <dd>
              <p>Inserts the <code>item1</code>, … at the end of
              the array and returns the new length of the array after
              the operation.</p>

              <div class="implnote">
                <p>Mozilla JavaScript1.1, JavaScript1.2 return the
                <em>pushed</em> value rather than the new length of the
                array.</p>
              </div>

              <div class="example">
                <pre id="Example_Array.prototype.push">
var stack = [];

msg('stack.push(\'a\') == ' + stack.push('a'));
msg('stack.toString() == ' + stack.toString());

msg('stack.push(\'b\') == ' + stack.push('b'));
msg('stack.toString() == ' + stack.toString());

msg('stack.push(\'c\') == ' + stack.push('c'));
msg('stack.toString() == ' + stack.toString());
</pre><script type="text/javascript">
//
generate_example('Example_Array.prototype.push');
//
</script>
              </div>
            </dd>

            <dt><a name="Array.prototype.reverse" id="Array.prototype.reverse"><code>Array.prototype.reverse()</code></a></dt>

            <dd>
              <p>Returns a copy of the <code>Array</code> instance with
              the items in reversed order</p>

              <div class="example">
                <pre id="Example_Array.prototype.reverse">
var array = [0, 1, 2, 3, 4];
msg('array.reverse() == ' + array.reverse());
</pre><script type="text/javascript">
//
generate_example('Example_Array.prototype.reverse');
//
</script>
              </div>
            </dd>

            <dt><a name="Array.prototype.shift" id="Array.prototype.shift"><code>Array.prototype.shift()</code></a></dt>

            <dd>
              <p>Removes the element at the <code>0</code><sup>th</sup>
              position in the array moving the remaining elements lower
              in the array and returns it as the value of the function
              call. If the array is empty, <code>shift()</code> returns
              <code>undefined</code>. See
              <code>Array.prototype.pop()</code>.</p>

              <div class="example">
                <pre id="Example_Array.prototype.shift">
var stack = ['a', 'b', 'c'];

msg('stack.shift() == ' + stack.shift());
msg('stack.toString() == ' + stack.toString());

msg('stack.shift() == ' + stack.shift());
msg('stack.toString() == ' + stack.toString());

msg('stack.shift() == ' + stack.shift());
msg('stack.toString() == ' + stack.toString());

msg('stack.shift() == ' + stack.shift());
msg('stack.toString() == ' + stack.toString());
</pre><script type="text/javascript">
//
generate_example('Example_Array.prototype.shift');
//
</script>
              </div>
            </dd>

            <dt><a name="Array.prototype.slice" id="Array.prototype.slice"><code>Array.prototype.slice(start,
            end)</code></a></dt>

            <dd>
              <p>Returns an <code>Array</code> instance consisting of
              the items from the <code>Array</code> <var>array</var>
              from index <var>start</var> up to but not including
              <var>end</var>. If <var>end</var> is not specified or is
              <code>undefined</code>, it is treated as the length of
              the array. If <var>start</var> or <var>end</var> are
              negative, they are treated as
              <code><var>array</var>.length + <var>start</var></code>
              or <code><var>array</var>.length +
              <var>end</var></code></p>

              <div class="example">
                <pre id="Example_Array.prototype.slice">
var array = [0, 1, 2, 3, 4];
var length = array.length;

msg('array == ' + array);
msg('array.length == ' + length);

// return an array without the first item
msg('array.slice(1) == ' + array.slice(1));

// return an array consisting of the second and third items
msg('array.slice(1, 3) == ' + array.slice(1, 3));

// return an array consisting of the last item
msg('array.slice(-1, 5) == ' + array.slice(-1, 5));
msg('array.slice(length - 1, 5) == ' + array.slice(length - 1, 5));

// return an array without the first or last items
msg('array.slice(1, -1) == ' + array.slice(1, -1));
msg('array.slice(1, length - 1) == ' + array.slice(1, length - 1));

// return an array consisting of the third and fourth items
msg('array.slice(-3, -1) == ' + array.slice(-3, -1));
msg('array.slice(length - 3, length - 1) == ' + 
     array.slice(length - 3, length - 1));
</pre><script type="text/javascript">
//
generate_example('Example_Array.prototype.slice');
//
</script>
              </div>
            </dd>

            <dt><a name="Array.prototype.sort" id="Array.prototype.sort"><code>Array.prototype.sort(comparefunc)</code></a></dt>

            <dd>
              <p>Returns an <code>Array</code> instance which has its
              items sorted according to the order defined by the
              comparison function <var>comparefunc</var>.
              <var>comparefunc(left, right)</var> determines the order
              by returning <code>-1</code> if <var>left</var> should
              occur before <var>right</var>, <code>+1</code> if
              <var>left</var> should occur after <var>right</var> or
              <code>0</code> if <var>left</var> and <var>right</var>
              have no preference as to order.</p>

              <p>If <var>comparefunc</var> is not specified or is
              <code>undefined</code>, the default order specified by
              <code>&lt;</code> used.</p>

              <div class="example">
                <pre id="Example_Array.prototype.sort">
// output an array of Things sorted by name

// an object with a name
function Thing(name)
{
  this.name = name;
}

// allow Thing objects to be convertable to string values.
Thing.prototype.toString = function() { return this.name; };

// an array of Things
var array = [
             new Thing('Ralph'),
             new Thing('john'), 
             new Thing('george') 
            ];

function compareThings(left, right)
{
  // do case insenstive sort
  var lname = left.name.toLowerCase();
  var rname = right.name.toLowerCase();

  if (lname &lt; rname)
    return -1;
  if (lname &gt; rname)
    return +1;
  return 0;
}

msg('array.sort(compareThings) == ' + array.sort(compareThings));
</pre><script type="text/javascript">
//
generate_example('Example_Array.prototype.sort');
//
</script>
              </div>
            </dd>

            <dt><a name="Array.prototype.splice" id="Array.prototype.splice"><code>Array.prototype.splice(start,
            deleteCount[, item1 [, item2[, …]]])</code></a></dt>

            <dd>
              <p>Replaces <code>deleteCount</code> elements from the
              array beginning at array index <code>start</code> with
              <code>item1</code> …. Returns the removed elements
              as an array.</p>

              <div class="example">
                <pre id="Example_Mozilla_JS12_Array_Prototype_splice">
var array = [1, 2, 3, 4, 5];
var result = array.splice(0, 1, 'a');
msg('array.splice(0, 1, \'a\') == ' +
    result.toString() + 
    ' array.toString == ' + array.toString());

var array = [1, 2, 3, 4, 5];
result = array.splice(0, 2, 'b', 'c');
msg('array.splice(0, 2, \'b\', \'c\') == ' +
    result.toString() + 
    ' array.toString() == ' + array.toString());
</pre><script type="text/javascript">
//
generate_example('Example_Mozilla_JS12_Array_Prototype_splice');
//
</script>
              </div>

              <div class="implnote">
                <p>Mozilla JavaScript1.2 will return a single removed
                element instead of an array containing the removed
                element.</p>
              </div>
            </dd>

            <dt><a name="Array.prototype.unshift" id="Array.prototype.unshift"><code>Array.prototype.unshift([item1[,
            item2[, …]]])</code></a></dt>

            <dd>
              <p>Inserts the <code>item1</code>, … at the
              <code>0</code><sup>th</sup> … position in the
              array, shifting existing elements higher in the array and
              returns the new length of the array after the operation.
              See <code>Array.prototype.push()</code>.</p>

              <div class="implnote">
                <p>MSIE does not return the new length of the array,
                instead returning <code>undefined</code>.</p>
              </div>

              <div class="example">
                <pre id="Example_Array.prototype.unshift">
var stack = [];

msg('stack.unshift(\'a\') == ' + stack.unshift('a'));
msg('stack.toString() == ' + stack.toString());

msg('stack.unshift(\'b\') == ' + stack.unshift('b'));
msg('stack.toString() == ' + stack.toString());

msg('stack.unshift(\'c\') == ' + stack.unshift('c'));
msg('stack.toString() == ' + stack.toString());
</pre><script type="text/javascript">
//
generate_example('Example_Array.prototype.unshift')
//
</script>
              </div>
            </dd>
          </dl>
        </dd>

        <dt><a name="array.length" id="array.length"><code><var>array</var>.length</code></a></dt>

        <dd>
          <p>Returns the length (number of items) in the array.
          <code>length</code> has property attributes
          <em>{DontEnum}</em> and <em>{DontDelete}</em> which means it
          can not be enumerated in a <code>for-in</code> loop, or
          deleted by can be the target of an assignment. If the new
          value of <code>length</code> is less than the existing length
          of the array, the items past the new end of the array are
          deleted. If the new value of <code>length</code> is greater
          than the existing length of the array, the length of the
          array is increased and the new items are initialized to
          <code>undefined</code>.</p>

          <div class="example">
            <pre id="Example.array.length">
var array = [0, 1, 2, 3, 4];
msg('array == ' + array);

// truncate array to length 2
array.length = 2;
msg('array == ' + array);

// increase array to length 6
array.length = 6;
msg('array == ' + array); 
</pre><script type="text/javascript">
//
generate_example('Example.array.length');
//
</script>
          </div>
        </dd>

        <dt><a name="String_Objects" id="String_Objects">String
        Objects</a></dt>

        <dd>
          <dl>
            <dt><a name="String" id="String"><code>String</code></a></dt>

            <dd>
              <p><code>String</code> has property attribute
              <em>{DontEnum}</em> which means it does not appear in
              <code>for-in</code> loops, can be deleted and can be the
              target of an assignment.</p>

              <div class="implnote">
                <p>Mozilla adds the <em>{DontDelete}</em> property
                attribute which means Mozilla will not delete it.</p>
              </div>

              <div class="example">
                <pre id="Example_String_property_attributes_dontdelete">
// attempt to delete String
msg('Before delete: typeof String == ' + typeof String);
msg('(delete String) == ' + (delete String));
msg('After delete: typeof String == ' + typeof String);
</pre><script type="text/javascript">
//
generate_example('Example_String_property_attributes_dontdelete');
//
</script>
              </div>

              <div class="example">
                <pre id="Example_String_property_attributes_readonly">
// attempt to assign to String
String = 'foo';
msg('After String = \'foo\': String == ' + String);
</pre><script type="text/javascript">
//
generate_example('Example_String_property_attributes_readonly');
//
</script>
              </div>
            </dd>

            <dt><a name="String.prototype" id="String.prototype"><code>String.prototype</code></a></dt>

            <dd>
              <p><code>String.prototype</code> has property attributes
              <em>{DontEnum}</em>, <em>{DontDelete}</em> and
              <em>{ReadOnly}</em> which means it will not appear in
              <code>for-in</code> loops, can not be deleted and can not
              be changed by assignment although its properties
              <em>may</em> be modified.</p>
            </dd>

            <dt><a name="String.prototype.constructor" id="String.prototype.constructor"><code>String.prototype.constructor</code></a></dt>

            <dd>
              <p>Return a reference to the <code>String</code>
              constructor.</p>
            </dd>

            <dt><a name="String.prototype.toString" id="String.prototype.toString"><code>String.prototype.toString()</code></a></dt>

            <dd>
              <p>Returns the <code>String</code> converted to a string
              primitive value. (Same as
              <code>String.prototype.valueOf</code>)</p>

              <div class="example">
                <pre id="Example_String.prototype.toString">
msg('typeof (new String("foo")).toString() == ' + 
     typeof (new String("foo")).toString());
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.toString');
//
</script>
              </div>
            </dd>

            <dt><a name="String.prototype.valueOf" id="String.prototype.valueOf"><code>String.prototype.valueOf()</code></a></dt>

            <dd>
              <p>Return the <code>String</code> converted to a string
              primitive value. (Same as
              <code>String.prototype.toString</code>)</p>

              <div class="example">
                <pre id="Example_String.prototype.valueOf">
msg('typeof (new String("foo")).valueOf() == ' + 
     typeof (new String("foo")).valueOf());
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.valueOf');
//
</script>
              </div>
            </dd>

            <dt><a name="String.prototype.charAt" id="String.prototype.charAt"><code>String.prototype.charAt(pos)</code></a></dt>

            <dd>
              <p>Returns the character at index <code>pos</code> from
              the string.</p>

              <div class="example">
                <pre id="Example_Mozilla_String_Prototype_charAt">
var string = 'abcdefg';

msg('string.charAt(5) == ' + string.charAt(5));
</pre><script type="text/javascript">
//
generate_example('Example_Mozilla_String_Prototype_charAt');
//
</script>
              </div>

              <div class="implnote">
                Mozilla supports the alternate <code>[]</code> member
                of syntax to return characters from a string.
                <pre id="Example_Mozilla_String_Member_of">
var string = 'abcdefg';

msg('string[5] == ' + string[5]);
</pre><script type="text/javascript">
//
generate_example('Example_Mozilla_String_Member_of');
//
</script>
              </div>
            </dd>

            <dt><a name="String.prototype.charCodeAt" id="String.prototype.charCodeAt"><code>String.prototype.charCodeAt(pos)</code></a></dt>

            <dd>
              <p>Returns a 16-bit number representing the Unicode code
              point value of the character at position <var>pos</var>
              in the string.</p>
            </dd>

            <dt><a name="String.prototype.concat" id="String.prototype.concat"><code>String.prototype.concat([string1[,
            string2[, …]]])</code></a></dt>

            <dd>
              <p>Converts its arguments to primitive string values,
              then returns a primitive string value consisting of the
              the characters from each of the arguments
              <var>string1</var>, <var>string2</var>, … in the
              same order.</p>

              <p class="note"><code>String.prototype.concat</code> and
              operator <code>+</code> are equivalent on string
              operands.</p>

              <div class="example">
                <p>Example Concat a primitive string, instance of
                String Object and an instance of Array Object</p>
                <pre id="Example_String.prototype.concat">
var s1 = '123';
var s2 = new String('456');
var s3 = ['789'];
var result = s1.concat(s2, s3);

msg('result = s1.concat(s2, s3)');
msg('result == ' + result);
msg('typeof result == ' + typeof result);
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.concat');
//
</script>
              </div>

              <div class="example">
                <p>Example Concat a primitive string, instance of
                String Object and an instance of Array Object using the
                string <code>+</code> operator.</p>
                <pre id="Example_String.prototype.concat_plus">
var s1 = '123';
var s2 = new String('456');
var s3 = ['789'];
var result = s1.concat(s2, s3);

msg('result = s1 + s2 + s3');
msg('result == ' + result);
msg('typeof result == ' + typeof result);
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.concat_plus');
//
</script>
              </div>
            </dd>

            <dt><a name="String.prototype.indexOf" id="String.prototype.indexOf"><code>String.prototype.indexOf(searchString,
            position)</code></a></dt>

            <dd>
              <p>Converts the <code>this</code> value and the
              <var>searchString</var> argument to primitive string
              values and <var>position</var> to a number value, then
              searches the <code>this</code> string value beginning at
              <var>position</var>, returning the position in the string
              where <var>searchString</var> appears or <code>-1</code>
              if it is not found. If <var>position</var> is
              <code>undefined</code>, searching begins at position
              <code>0</code>.</p>

              <div class="example">
                <pre id="Example_String.prototype.indexOf">
// get the first occurrence of 'Bar'
var string = 'FooBarfoobarFooBarBaz';
var result = string.indexOf('Bar');

msg("string = 'FooBarfoobarFooBarBaz'");
msg("result = string.indexOf('Bar');");
msg('result  == ' + result);

// get the next occurrence of 'Bar'
result = string.indexOf('Bar', result + 'Bar'.length);
msg("result = string.indexOf('Bar', result + 'Bar'.length');");
msg('result  == ' + result);
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.indexOf');
//
</script>
              </div>
            </dd>

            <dt><a name="String.prototype.lastIndexOf" id="String.prototype.lastIndexOf"><code>String.prototype.lastIndexOf(searchString,
            position)</code></a></dt>

            <dd>
              <p>Converts the <code>this</code> value and the
              <var>searchString</var> argument to primitive string
              values and <var>position</var> to a number value, then
              searches the <code>this</code> string value
              <em>backwards</em> beginning at <var>position</var>,
              returning the position in the string where
              <var>searchString</var> appears or <code>-1</code> if it
              is not found. If <var>position</var> is
              <code>undefined</code>, searching begins at the last
              position in the string.</p>

              <div class="example">
                <pre id="Example_String.prototype.lastIndexOf">
// get the last occurrence of 'Bar'
var string = 'FooBarfoobarFooBarBaz';
var result = string.lastIndexOf('Bar');

msg("string = 'FooBarfoobarFooBarBaz'");
msg("result = string.lastIndexOf('Bar');");
msg('result  == ' + result);

// get the next to last occurrence of 'Bar'
result = string.lastIndexOf('Bar', result - 1);
msg("result = string.lastIndexOf('Bar', result - 1);");
msg('result  == ' + result);
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.lastIndexOf');
//
</script>
              </div>
            </dd>

            <dt><a name="String.prototype.localeCompare" id="String.prototype.localeCompare"><code>String.prototype.localeCompare(that)</code></a></dt>

            <dd>
              <p>Converts the <code>this</code> value and the
              <var>that</var> argument to primitive string values, then
              returns a number representing how <code>this</code>
              compares to <var>that</var> in the current
              <em>locale</em>:</p>

              <dl>
                <dt><code>-1</code></dt>

                <dd><code>this</code> compares less than
                <var>that</var></dd>

                <dt><code>+1</code></dt>

                <dd><code>this</code> compares greater than
                <var>that</var></dd>

                <dt><code>0</code></dt>

                <dd><code>this</code> and <var>that</var> compare as
                equal</dd>
              </dl>
            </dd>

            <dt><a name="String.prototype.match" id="String.prototype.match"><code>String.prototype.match(regexp)</code></a></dt>

            <dd>
              <p>Converts <code>this</code> to a primitive string
              value, and if <var>regexp</var> is not an instance of
              <code>RegExp</code> converts it to a regular expression
              via <code>new RegExp(<var>regexp</var>)</code>, then
              returns an array containing the <em>matches</em>. The
              actual result array depends upon whether the regular
              expression is <em>global</em> or not.</p>

              <p>If <var>regexp</var> is a non global regular
              expression, then the result array is the same as returned
              by <a href="#RegExp.prototype.exec"><code>RegExp.prototype.exec</code></a></p>.

              <div class="example">
                <p>In this example using a non global regular
                expression, <code>match</code> will return an array
                instance whose first element is the substring which was
                matched (<code>'aa'</code> in this case) and whose
                second element contains the part of the string which
                matched the <em>capturing parentheses</em>
                (<code>'aa'</code>) in this case).</p>
                <pre id="Example_String.prototype.match_nonglobal">
var string = 'aabbbccccdddd';
var regexp = /(a*)/;
var result = string.match(regexp);
msg('result == ' + result);
msg('result.length == ' + result.length);

// compare to the result of calling RegExp.prototype.exec
msg('regexp.exec(string) == ' + regexp.exec(string));
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.match_nonglobal');
//
</script>
              </div>

              <p>If <var>regexp</var> is a global regular expression
              (has the <code>g</code> flag), then
              <code><var>regexp</var>.lastIndex</code> is set to
              <code>0</code>, then <code>RegExp.prototype.exec</code>
              is repeatedly called until there are no more matches each
              time updating <code><var>regexp</var>.lastIndex</code>.
              The result array is constructed from the matched
              substrings of each of the <code>exec</code> calls. If any
              of the calls to <code>exec</code> match the empty string
              <code>''</code>, then <code>lastIndex</code> is
              incremented to start the next search at the next
              character in the string.</p>
	      
	      <p>XXX: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=225094">Compatibility issues described in Bug 225094"</a>
	      </p>

              <div class="example">
                <p>In this example using a global regular expression,
                match will return an array whose first element is the
                substring which was first matched (<code>'aa'</code> in
                this case). The remainder of the result array contains
                the subsequent matches where <code>(a*)</code> was
                matched to the empty string at each position.</p>
                <pre id="Example_String.prototype.match_global">
var string = 'aabbbccccdddd';
var regexp = /(a*)/g;
var result = string.match(regexp);
msg('test String.prototype.match');
msg('result == ' + result);
msg('result.length == ' + result.length);

// compare to the result of repeatedly calling
//  RegExp.prototype.exec on the regular expression
regexp.lastIndex = 0;
result = [];
var temp;
while (regexp.lastIndex &lt;= string.length)
{
  temp = regexp.exec(string);
  result[result.length] = temp[0];
 if (!temp[0])
  {
    regexp.lastIndex++;
  }
}
msg('test repeated calls to RegExp.prototype.exec');
msg('result == ' + result);
msg('result.length == ' + result.length);
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.match_global');
//
</script>
              </div>
            </dd>

            <dt><a name="String.prototype.replace" id="String.prototype.replace"><code>String.prototype.replace(searchValue,
            replaceValue)</code></a></dt>

            <dd>
              <p>In its simplest form, <code>replace</code> replaces
              the first occurence of the string
              <code>searchValue</code> with the string
              <code>replaceValue</code>.</p>

              <div class="example">
                <pre id="Example_String.prototype.replace_string">
var string = 'The situation is all fubar which is fundamental.';
var result = string.replace('fu', 'foo');
msg('result == ' + result);
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.replace_string');
//
</script>
              </div>


<div class="implnote">
<p>
Mozilla JavaScript 1.1, 1.2, 1.3, 1.4 will attempt to convert the first
argument to <code>String.prototype.replace</code> to a regular expression. 
If the first argument is a string which does not contain a valid regular
expression, an error will be thrown.
</p>
<p>
In Mozilla JavaScript 1.5, if the first argument is a string, no conversion
is attempted and no error is thrown.
</p>
<p>
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=280546">bug 280546</a>
</p>
<pre id="Example_String.prototype.replace_string_js12">
try
{
  msg("f?oo".replace('?oo','ee'));
}
catch(e)
{
  msg(e.name + ': ' + e.message);
}
</pre>
<script type="text/javascript">
generate_example('Example_String.prototype.replace_string_js12');
</script>
</div>

              <p>When <code>searchValue</code> is a regular expression,
              replaces the match in the string by
              <code>replaceValue</code>. If the regular expression has
              its <em>global</em> property set, <code>replace</code>
              will replace all matches.</p>

              <p>The following special strings can be used in the
              <code>replaceValue</code> string which will be replaced
              as follows:</p>

              <table summary="replace special characters">
                <thead>
                  <tr>
                    <th>Characters</th>

                    <th>Result</th>
                  </tr>
                </thead>

                <tbody>
                  <tr>
                    <td>$$</td>

                    <td>$</td>
                  </tr>

                  <tr>
                    <td>$&amp;</td>

                    <td>the matched substring</td>
                  </tr>

                  <tr>
                    <td>$`</td>

                    <td>the portion of string preceding the match</td>
                  </tr>

                  <tr>
                    <td>$'</td>

                    <td>the portion of the string following the
                    match</td>
                  </tr>

                  <tr>
                    <td>$n</td>

                    <td>the <em>n<sup>th</sup></em> element from the
                    capture array where n is a single digit 1-9.</td>
                  </tr>

                  <tr>
                    <td>$$</td>

                    <td>the <em>nn<sup>th</sup></em> element from the
                    capture array where nn is a 2 digit number
                    01-99</td>
                  </tr>
                </tbody>
              </table>

              <div class="example">
                <pre id="Example_String.prototype.replace_regexp">
var string = 'The situation is all fubar which is fundamental.';
var result = string.replace(/fu/g, 'foo');
msg('result == ' + result);

result = string.replace(/fu/g, "(match=$&amp;, prefix=$`, suffix=$')");
msg('result == ' + result);
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.replace_regexp');
//
</script>
              </div>

              <p>When <code>searchValue</code> is a string and
              <code>replaceValue</code> is a function, then for each
              match of <code>searchValue</code>, the function is called
              with the first argument containing the matched string,
              the second argument containing the offset of the match in
              the string followed by the value of the string
              itself.</p>

              <div class="example">
                <pre id="Example_String.prototype.replace_string_function">

var string = 'The situation is all fubar which is fundamental.';
var result = string.replace('fu', myreplace);
msg('result == ' + result);

function myreplace(string)
{
  msg('myreplace: arguments.length == ' + arguments.length);
  for (var i = 0; i &lt; arguments.length; i++) 
  {
    msg('arguments[' + i + '] == ' + arguments[i]);
  }  
  return ' myreplace-foo-myreplace ';
}
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.replace_string_function');
//
</script>
              </div>
              <p>When <code>searchValue</code> is a regular expression
              and <code>replaceValue</code> is a function, then for
              each match of <code>searchValue</code>, the function is
              called with the first argument containing the matched
              string, and the remaining arguments are the elements of
              the <em>match</em> array, followed by the offset in the
              string where the match occured, and the final argument is
              the value of the string itself.</p>

              <div class="example">
                <pre id="Example_String.prototype.replace_regexp_function">

var string = 'The situation is all fubar which is fundamental.';
var result = string.replace(/((f)(u))/g, myreplace);
msg('result == ' + result);

function myreplace(string)
{
  msg('myreplace: arguments.length == ' + arguments.length);
  for (var i = 0; i &lt; arguments.length; i++) 
  {
    msg('arguments[' + i + '] == ' + arguments[i]);
  }  
  return ' myreplace-foo-myreplace ';
}
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.replace_regexp_function');
//
</script>
              </div>
            </dd>

            <dt><a name="String.prototype.search" id="String.prototype.search"><code>String.prototype.search(regexp)</code></a></dt>

            <dd>
              <p>Converts the <code>this</code> value to a primitive
              string and if <var>regexp</var> is not an instance of
              <code>RegExp</code>, converts it to a regular expression
              via <code>new RegExp(<var>regexp</var>)</code>, then
              returns the position in the <code>this</code> value which
              first matches <var>regexp</var> or <code>-1</code> is no
              match is found.</p>

              <div class="example">
                <pre id="Example_String.prototype.search">
// search 'FooBar' for a letter
var string = 'FooBar';
var regexp = /[a-zA-Z]/;
var result = string.search(regexp);
msg('A letter occurs in ' + string + ' at position ' + result);

// search 'FooBar' for a number
regexp = /[0-9]/;
result = string.search(regexp);
msg('A number occurs in ' + string + ' at position ' + result);
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.search');
//
</script>
              </div>
            </dd>

            <dt><a name="String.prototype.slice" id="String.prototype.slice"><code>String.prototype.slice(start,end)</code></a></dt>

            <dd>
              <p>Converts the <code>this</code> value to a primitive
              string and the arguments <var>start</var>, <var>end</var>
              to integers, then returns a string value consisting of
              the characters in the <code>this</code> value from
              position <var>start</var> up to but not including
              position <var>end</var>. If <var>end</var> is
              <code>undefined</code>, then <var>end</var> is treated as
              the length of the <code>this</code> string.</p>

              <p>If <var>start</var> or <var>end</var> are less than
              zero, they are treated as <code>this.length +
              <var>start</var></code> and <code>this.length +
              <var>end</var></code> respectively.</p>

              <div class="example">
                <pre id="Example_String.prototype.slice">
var string = '01234';
var length = string.length;

msg('string == ' + string);
msg('string.length == ' + length);

// return an string without the first item
msg('string.slice(1) == ' + string.slice(1));

// return an string consisting of the second and third items
msg('string.slice(1, 3) == ' + string.slice(1, 3));

// return an string consisting of the last item
msg('string.slice(-1, 5) == ' + string.slice(-1, 5));
msg('string.slice(length - 1, 5) == ' + string.slice(length - 1, 5));

// return an string without the first or last items
msg('string.slice(1, -1) == ' + string.slice(1, -1));
msg('string.slice(1, length - 1) == ' + string.slice(1, length - 1));

// return an string consisting of the third and fourth items
msg('string.slice(-3, -1) == ' + string.slice(-3, -1));
msg('string.slice(length - 3, length - 1) == ' + 
     string.slice(length - 3, length - 1));
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.slice');
//
</script>
              </div>
            </dd>

            <dt><a name="String.prototype.split" id="String.prototype.split"><code>String.prototype.split(separator,limit)</code></a></dt>

            <dd>
              <p>Returns an array of length at most <code>limit</code>
              consisting of elements containing the substrings of the
              <code>this</code> input string which were separated by
              <code>separator</code>. <code>separator</code> can be
              either a string or regular expression. Note that an empty
              string <code>""</code> can be returned as the prefix of
              the <code>separator</code> at the beginning of the
              <code>this</code> input string or as a suffix of the
              <code>separator</code> at the end of the
              <code>this</code> input string.</p>

              <p>If <code>separator</code> is an empty string, an empty
              regular expression or a regular expression matching an
              empty string, the returned array consists of an element
              for each character in the <code>this</code> input
              string.</p>

              <div class="example">
                <pre id="Example_String.prototype.split_empty_sep">
// empty string as separator
msg('"ab".split("") == ' + "ab".split(""));

// empty regular expression as separator
msg('"ab".split(/(?:/)) == ' + "ab".split(/(?:)/));
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.split_empty_sep');
//
</script>
              </div>

              <div class="implnote">
                <p>Mozilla JavaScript1.2 emulates Perl4 when the
                separator is a single space it will skip leading
                whitespace and splits on whitespace instead of on each
                space character.</p>

                <div class="example">
                  <pre id="Example_Mozilla_JS12_Perl4">
var string = "   123   456   ";
msg('string.split(" ").join() == ' + 
    string.split(" ").join());
</pre><script type="text/javascript">
//
generate_example('Example_Mozilla_JS12_Perl4');
//
</script>
                </div>
              </div>

              <p>If <code>separator</code> is a regular expression,
              only the first match is considered.</p>

              <p>For example, <code>"ab".split(/a*/)</code> uses a
              greedy match for a maximum length match for zero or more
              <code>a</code> characters, therefore the first match
              consists of the <code>a</code> which results in the empty
              string <code>""</code> as its prefix and the
              <code>b</code> as the remainder of the string. Thus the
              return value would be <code>["","b"]</code> The empty
              string result is not rejected even though another
              possible match could have been the leading empty string
              matching zero <code>a</code> characters.</p>

              <p>By contrast <code>"ab".split(/a*?/)</code> uses a
              non-greedy match for the minimum length match for zero or
              more characters, therefore the first match consists of
              the empty string <code>""</code> at the beginning of the
              string. The second match is the zero length string
              separating the <code>a</code> and <code>b</code>
              characters resulting in a return value of
              <code>["a","b"]</code>.</p>

              <div class="example">
                <pre id="Example_String.prototype.split_first">
msg('"ab".split(/a*/) == ' + "ab".split(/a*/));

msg('"ab".split(/a*?/) == ' + "ab".split(/a*?/));
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.split_first');
//
</script>
              </div>

              <p>If the <code>this</code> input string is empty, and
              the <code>separator</code> matches the empty string, then
              there are no substrings and the result is the empty
              array.</p>

              <p>If the <code>this</code> input string is empty and the
              <code>separator</code> does not match the empty string,
              then the result is an array of one element consisting of
              the empty string.</p>

              <div class="example">
                <pre id="Example_String.prototype.split_empty_input">
msg('"".split(""/).length == ' + "".split("").length);

msg('"".split(/a/).length == ' + "".split(/a/).length);
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.split_empty_input');
//
</script>
              </div>

              <p>If <code>separator</code> is a reqular expression
              containing <em>capturing parentheses</em>, then the
              results of the capturing parentheses (including
              <code>undefined</code> are spliced into the resulting
              array.</p>

              <div class="example">
                <pre id="Example_String.prototype.split_regexp_capture">

var string = "A&lt;B&gt;bold&lt;/B&gt;and&lt;CODE&gt;coded&lt;/CODE&gt;";
var regexp = /&lt;(\/)?([^&lt;&gt;]+)&gt;/;
var result = string.split(regexp);

for (var i = 0; i &lt; result.length; i++)
{
  msg('typeof result[' + i + '] == ' + typeof result[i] + ', ' +
      'result[' + i + '] == ' + result[i]); 
}
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.split_regexp_capture');
//
</script>

                <div class="implnote">
                  <p>Note that neither Mozilla nor MSIE reproduce the
                  output listed in the ECMA 262 3<sup>rd</sup> edition.
                  Mozilla outputs empty strings instead of
                  <code>undefined</code> and MSIE fails to output the
                  elements of the capturing array, instead ignoring the
                  capturing parentheses altogether.</p>

                  <dl>
                    <dt>ECMA 262 3<sup>rd</sup></dt>

                    <dd>
                      <pre>
["A",  undefined, "B",    "bold",  "/", "B", 
"and", undefined, "CODE", "coded", "/", "CODE", 
""]
</pre>
                    </dd>

                    <dt>Mozilla</dt>

                    <dd>
                      <pre>
["A",  "",        "B",    "bold",  "/", "B",
"and", "",        "CODE", "coded", "/", "CODE", 
""]
</pre>
                    </dd>

                    <dt>MSIE</dt>

                    <dd>
                      <pre>
["A", "bold", "and", "coded"]
</pre>
                    </dd>
                  </dl>

                  <div class="example">
                    <p>Trying the previous example with non-capturing
                    parentheses shows that MSIE definitely ignores
                    capturing parentheses in <code>split</code> regular
                    expressions. Note that Mozilla has one extra empty
                    string element at the end of the array.</p>
                    <pre id="Example_String.prototype.split_regexp_nocapture">

var string = "A&lt;B&gt;bold&lt;/B&gt;and&lt;CODE&gt;coded&lt;/CODE&gt;";
var regexp = /&lt;(?:\/)?(?:[^&lt;&gt;]+)&gt;/;
var result = string.split(regexp);

for (var i = 0; i &lt; result.length; i++)
{
  msg('typeof result[' + i + '] == ' + typeof result[i] + ', ' +
      'result[' + i + '] == ' + result[i]); 
}
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.split_regexp_nocapture');
//
</script>
                  </div>
                </div>
              </div>

              <p>Finally, if <code>separator</code> is
              <code>undefined</code>, the result is an array with one
              element consisting of the <code>this</code> string
              value.</p>

              <div class="example">
                <pre id="Example_String.prototype.split_undefined">
var string = "regular expressions are foonderbar";

// separator is not passed to split
var result = string.split();

for (var i = 0; i &lt; result.length; i++)
{
  msg('typeof result[' + i + '] == ' + typeof result[i] + ', ' +
      'result[' + i + '] == ' + result[i]); 
}

// separator is specified to be undefined
var result = string.split(undefined);

for (var i = 0; i &lt; result.length; i++)
{
  msg('typeof result[' + i + '] == ' + typeof result[i] + ', ' +
      'result[' + i + '] == ' + result[i]); 
}
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.split_undefined');
//
</script>
              </div>
            </dd>

            <dt><a name="String.prototype.substring" id="String.prototype.substring"><code>String.prototype.substring(start,
            end)</code></a></dt>

            <dd>
              <p>Returns a string value (not Object) consisting of the
              characters in the <code>this</code> string value from
              index position <code>start</code> up to but not including
              <code>end</code>. If <code>end</code> is not specified or
              is <code>undefined</code>, <code>end</code> is treated as
              the <code>length</code> of the string value.</p>

              <p>If <code>start &gt; end</code>, they are swapped.</p>

              <p>If <code>start</code> is greater than or equal to the
              <code>this</code> string <code>length</code>, the null
              string is returned.</p>

              <div class="implnote">
                <p>Mozilla JavaScript1.2, will not swap the arguments
                <code>start</code>, <code>end</code> if <code>start
                &gt; end</code> however Mozilla JavaScript1.3 and later
                will.</p>
              </div>

              <div class="example">
                <pre id="Example_String.prototype.substring">
var string = "abcdef";
msg('string.substring(1,2) == ' + string.substring(1,2));
msg('string.substring(1)   == ' + string.substring(1));
msg('string.substring(2,1) == ' + string.substring(2,1));
msg('string.substring(200) == ' + string.substring(200));
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.substring');
//
</script>
              </div>
            </dd>

            <dt><a name="String.prototype.substr" id="String.prototype.substr"><code>String.prototype.substr(start,
            length)</code></a></dt>

            <dd>
              <p class="implnote">Not standard but available in Mozilla
              and MSIE.</p>

              <p>Returns a string value (not Object) of length
              <code>length</code> consisting of the characters in the
              <code>this</code> string value from index position
              <code>start</code>. If <code>start + length &gt;
              this.toString().length</code>, or if <code>length</code>
              is not specified the remainder of the <code>this</code>
              string is returned.</p>

              <p>If <code>start</code> is greater than or equal to the
              <code>this</code> string <code>length</code>, the null
              string is returned.</p>

              <div class="example">
                <pre id="Example_String.prototype.substr">
var string = "abcdef";
msg('string.substr(1,2) == ' + string.substr(1,2));
msg('string.substr(1)   == ' + string.substr(1));
msg('string.substr(2,1) == ' + string.substr(2,1));
msg('string.substr(200) == ' + string.substr(200));
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.substr');
//
</script>
              </div>
            </dd>

            <dt><a name="String.prototype.toLowerCase" id="String.prototype.toLowerCase"><code>String.prototype.toLowerCase()</code></a></dt>

            <dd>
              <p>Returns a string value consisting of the original
              <code>this</code> string value with all upper case
              characters converted to lower case.</p>

              <div class="example">
                <pre id="Example_String.prototype.toLowerCase">
var s = 'This is a String.';
msg('s.toLowerCase() == ' + s.toLowerCase());
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.toLowerCase');
//
</script>
              </div>
            </dd>

            <dt><a name="String.prototype.toLocaleLowerCase" id="String.prototype.toLocaleLowerCase"><code>String.prototype.toLocaleLowerCase()</code></a></dt>

            <dd>
              <p>Returns a string value consisting of the original
              <code>this</code> string value with all upper case upper
              characters converted to lowercase using a <em>locale</em>
              specific mapping of upper to lower case characters.</p>

              <div class="example">
                <pre id="Example_String.prototype.toLocaleLowerCase">
var s = 'This is a String.';
msg('s.toLocaleLowerCase() == ' + s.toLocaleLowerCase());
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.toLocaleLowerCase');
//
</script>
              </div>
            </dd>

            <dt><a name="String.prototype.toUpperCase" id="String.prototype.toUpperCase"><code>String.prototype.toUpperCase()</code></a></dt>

            <dd>
              <p>Returns a string value consisting of the original
              <code>this</code> string value with all lower case
              characters converted to upper case.</p>

              <div class="example">
                <pre id="Example_String.prototype.toUpperCase">
var s = 'This is a String.';
msg('s.toUpperCase() == ' + s.toUpperCase());
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.toUpperCase');
//
</script>
              </div>
            </dd>

            <dt><a name="String.prototype.toLocaleUpperCase" id="String.prototype.toLocaleUpperCase"><code>String.prototype.toLocaleUpperCase()</code></a></dt>

            <dd>
              <p>Returns a string value consisting of the original
              <code>this</code> string value with all lower case
              characters converted to upper case using a
              <em>locale</em> specific mapping of upper to lower case
              characters.</p>

              <div class="example">
                <pre id="Example_String.prototype.toLocaleUpperCase">
var s = 'This is a String.';
msg('s.toLocaleUpperCase() == ' + s.toLocaleUpperCase());
</pre><script type="text/javascript">
//
generate_example('Example_String.prototype.toLocaleUpperCase');
//
</script>
              </div>
            </dd>

            <dt><a name="String.fromCharCode" id="String.fromCharCode"><code>String.fromCharCode([char0[,
            char1[, …]]])</code></a></dt>

            <dd>
              <p>Converts its arguments to 16-bit integers, then
              returns a string which consists of the characters with
              those values as their Unicode code point values.</p>

              <div class="example">
                <pre id="Example_String.fromCharCode">
var result = '';
for (var charCode = 32; charCode &lt; 256; charCode++)
{
  result += String.fromCharCode(charCode);
}
msg('result == ' + result);
</pre><script type="text/javascript">
//
generate_example('Example_String.fromCharCode');
//
</script>
              </div>
            </dd>

            <dt><a name="string.length" id="string.length"><code><var>string</var>.length</code></a></dt>

            <dd>
              <p><code>length</code> is a local property of
              <code>String</code> instances which returns the number of
              characters in the string.
              <code><var>string.length</var></code> has property
              attributes <em>{DontEnum}</em>, <em>{DontDelete}</em> and
              <em>{ReadOnly}</em>.</p>

              <div class="example">
                <pre id="Example_string.length_property_attributes_dontdelete">
// attempt to delete string.length
var string = '01234';
msg('Before delete: typeof string.length == ' + typeof string.length);
msg('(delete string.length) == ' + (delete string.length));
msg('After delete: typeof string.length == ' + typeof string.length);
</pre><script type="text/javascript">
//
generate_example('Example_string.length_property_attributes_dontdelete');
//
</script>
              </div>

              <div class="example">
                <pre id="Example_string.length_property_attributes_readonly">
// attempt to assign to string.length
var string = '01234';
string.length = 2;
msg('After string.length = 2: string.length == ' + string.length);
</pre><script type="text/javascript">
//
generate_example('Example_string.length_property_attributes_readonly');
//
</script>
              </div>
            </dd>
          </dl>
        </dd>

        <dt><a name="Boolean_Objects" id="Boolean_Objects">Boolean
        Objects</a></dt>

        <dd>
          <p><code>Boolean</code> objects are objects which represent
          boolean (true and false) values but <a href="#Type_Conversions"><strong>are not the same</strong></a> as
          the primitive values <code>true</code> and
          <code>false</code>. The fact that any instance of
          <code>Boolean</code> evaluates to <code>true</code> when used
          in conditional expressions, means that care must be taken
          when using instances of <code>Boolean</code> in conditional
          expressions.</p>

          <dl>
            <dt><a name="Boolean" id="Boolean"><code>Boolean(<var>value</var>)</code></a></dt>

            <dd>
              <p>When called as a constructor (<code>new
              Boolean(<var>value</var>)</code> creates an instance of a
              Boolean object with value <var>value</var>. When called
              as a function, <code>Boolean(<var>value</var>)</code>
              <a href="#Type_Conversion">converts</a> <var>value</var>
              to a Boolean Object.</p>

              <p><code>Boolean</code> has property attribute
              <em>{DontEnum}</em> which means it does not appear in
              <code>for-in</code> loops, can be deleted and can be the
              target of an assignment.</p>

              <div class="implnote">
                <p>Mozilla adds the <em>{DontDelete}</em> property
                attribute which means Mozilla will not delete it.</p>
              </div>

              <div class="example">
                <pre id="Example_Boolean_property_attributes_dontdelete">
// attempt to delete Boolean
msg('Before delete: typeof Boolean == ' + typeof Boolean);
msg('(delete Boolean) == ' + (delete Boolean));
msg('After delete: typeof Boolean == ' + typeof Boolean);
</pre><script type="text/javascript">
//
generate_example('Example_Boolean_property_attributes_dontdelete');
//
</script>
              </div>

              <div class="example">
                <pre id="Example_Boolean_property_attributes_readonly">
// attempt to assign to Boolean
Boolean = 'foo';
msg('After Boolean = \'foo\': Boolean == ' + Boolean);
</pre><script type="text/javascript">
//
generate_example('Example_Boolean_property_attributes_readonly');
//
</script>
              </div>
            </dd>

            <dt><a name="Boolean.prototype" id="Boolean.prototype"><code>Boolean.prototype</code></a></dt>

            <dd>
              <p><code>Boolean.prototype</code> has property attributes
              <em>{DontEnum}</em>, <em>{DontDelete}</em> and
              <em>{ReadOnly}</em> which means it will not appear in
              <code>for-in</code> loops, can not be deleted and can not
              be changed by assignment although its properties
              <em>may</em> be modified.</p>
            </dd>

            <dt><a name="Boolean.protototype.constructor" id="Boolean.protototype.constructor"><code>Boolean.protototype.constructor</code></a></dt>

            <dd>
              <p>Returns a references to the <code>Boolean</code>
              constructor.</p>
            </dd>

            <dt><a name="Boolean.protototype.toString" id="Boolean.protototype.toString"><code>Boolean.protototype.toString()</code></a></dt>

            <dd>
              <p>Returns the value of the <code>Boolean</code> object
              converted to a string.</p>

              <div class="example">
                <pre id="Example_Boolean.prototype.toString">
msg('typeof (new Boolean(true)).toString() == ' + 
     typeof (new Boolean(true)).toString());

msg('(new Boolean(true)).toString() == ' + 
      (new Boolean(true)).toString());

msg('typeof (new Boolean(false)).toString() == ' + 
     typeof (new Boolean(false)));

msg('(new Boolean(false)).toString() == ' + 
      (new Boolean(false)).toString());
</pre><script type="text/javascript">
//
generate_example('Example_Boolean.prototype.toString');
//
</script>
              </div>
            </dd>

            <dt><a name="Boolean.protototype.valueOf" id="Boolean.protototype.valueOf"><code>Boolean.protototype.valueOf()</code></a></dt>

            <dd>
              <p>Returns the primitive boolean value of the
              <code>Boolean</code> instance.</p>

              <div class="example">
                <pre id="Example_Boolean.prototype.valueOf">
msg('typeof (new Boolean(false)).valueOf() == ' + 
     typeof (new Boolean(false)).valueOf());

msg('(new Boolean(true)).valueOf() == ' + 
      (new Boolean(true)).valueOf());

msg('typeof (new Boolean(false)).valueOf() == ' + 
     typeof (new Boolean(false)).valueOf());

msg('(new Boolean(false)).valueOf() == ' + 
     (new Boolean(false)).valueOf());
</pre><script type="text/javascript">
//
generate_example('Example_Boolean.prototype.valueOf');
//
</script>
              </div>
            </dd>
          </dl>
        </dd>

        <dt><a name="Number_Objects" id="Number_Objects">Number
        Objects</a></dt>

        <dd>
          <dl>
            <dt><a name="Number" id="Number"><code>Number(<var>value</var>)</code></a></dt>

            <dd>
              <p>When called as a constructor (<code>new
              Number(<var>value</var>))</code> creates an instance of a
              Number object with value <var>value</var>. When called as
              a function, <code>Number(<var>value</var>)</code>
              <a href="#Type_Conversion">converts</a> <var>value</var>
              to a Number Object.</p>

              <p><code>Number</code> has property attribute
              <em>{DontEnum}</em> which means it does not appear in
              <code>for-in</code> loops, can be deleted and can be the
              target of an assignment.</p>

              <div class="implnote">
                <p>Mozilla adds the <em>{DontDelete}</em> property
                attribute which means Mozilla will not delete it.</p>
              </div>

              <div class="example">
                <pre id="Example_Number_property_attributes_dontdelete">
// attempt to delete Number
msg('Before delete: typeof Number == ' + typeof Number);
msg('(delete Number) == ' + (delete Number));
msg('After delete: typeof Number == ' + typeof Number);
</pre><script type="text/javascript">
//
generate_example('Example_Number_property_attributes_dontdelete');
//
</script>
              </div>

              <div class="example">
                <pre id="Example_Number_property_attributes_readonly">
// attempt to assign to Number
Number = 'foo';
msg('After Number = \'foo\': Number == ' + Number);
</pre><script type="text/javascript">
//
generate_example('Example_Number_property_attributes_readonly');
//
</script>
              </div>
            </dd>

            <dt><a name="Number.prototype" id="Number.prototype"><code>Number.prototype</code></a></dt>

            <dd>
              <p><code>Number.prototype</code> has property attributes
              <em>{DontEnum}</em>, <em>{DontDelete}</em> and
              <em>{ReadOnly}</em> which means it will not appear in
              <code>for-in</code> loops, can not be deleted and can not
              be changed by assignment although its properties
              <em>may</em> be modified.</p>
            </dd>

            <dt><a name="Number.prototype.constructor" id="Number.prototype.constructor"><code>Number.prototype.constructor</code></a></dt>

            <dd>
              <p>Returns a reference to the <code>Number</code>
              constructor.</p>
            </dd>

            <dt><a name="Number.prototype.toString" id="Number.prototype.toString"><code>Number.prototype.toString(radix)</code></a></dt>

            <dd>
              <p>Returns a string value representing the value of the
              <code>Number</code> object in base <var>radix</var>. If
              <var>radix</var> is either <code>10</code> or
              <code>undefined</code>, the result is the number in base
              10 notation. Otherwise, if <code>radix</code> is a number
              from <code>2</code> to <code>36</code>, the resulting
              string is an implementation dependent representation of
              the number in base <var>radix</var>.</p>

              <div class="example">
                <pre id="Example_Number.prototype.toString">
var theanswer = 42;
msg('theanswer.toString() == ' + theanswer.toString());
msg('theanswer.toString(2) == ' + theanswer.toString(2));
msg('theanswer.toString(8) == ' + theanswer.toString(8));
msg('theanswer.toString(16) == ' + theanswer.toString(16));
msg('theanswer.toString(36) == ' + theanswer.toString(36));

// try an invalid radix
try
{
  msg('theanswer.toString(100) == ' + theanswer.toString(100));
}
catch(e)
{
  msg('Invalid Radix Error: ' + e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_Number.prototype.toString');
//
</script>

                <div class="implnote">
                  <p>When an invalid <var>radix</var> value is used,
                  Mozilla will throw a generic <code>Error</code>
                  object with message <tt>illegal radix
                  <var>value</var></tt> while MSIE will throw a
                  <code>TypeError</code> object with message
                  <tt>Invalid procedure call or argument</tt>.</p>
                </div>
              </div>
            </dd>

            <dt><a name="Number.prototype.toLocaleString" id="Number.prototype.toLocaleString"><code>Number.prototype.toLocaleString()</code></a></dt>

            <dd>
              <p>Returns a <em>locale</em> specific string
              representation of the number value in base 10.</p>
            </dd>

            <dt><a name="Number.prototype.valueOf" id="Number.prototype.valueOf"><code>Number.prototype.valueOf()</code></a></dt>

            <dd>
              <p>Returns the <code>this</code> value for the
              <code>Number</code> instance converted to a primitive
              number value.</p>

              <div class="example">
                <pre id="Example_Number.prototype.valueOf">
var number = new Number(42);
msg('typeof (new Number(42)).valueOf() == ' + 
     typeof (new Number(42)).valueOf());
msg('(new Number(42)).valueOf() == ' + 
     (new Number(42)).valueOf());
</pre><script type="text/javascript">
//
generate_example('Example_Number.prototype.valueOf');
//
</script>
              </div>
            </dd>

            <dt><a name="Number.prototype.toFixed" id="Number.prototype.toFixed"><code>Number.prototype.toFixed(fractionDigits)</code></a></dt>

            <dd>
              <p>Returns a string value representing the number value
              with <var>fractionDigits</var> places after the decimal
              point. If <var>fractionDigits</var> is
              <code>undefined</code>, then <code>0</code> is used.</p>

              <div class="implnote">
                <p>Mozilla does not throw a <code>RangeError</code> if
                <var>fractionDigits</var> is greater than
                <code>20</code> or less than <code>0</code>. MSIE
                throws a <code>RangeError</code> in both cases.
                Mozilla's behavior is allowed under <a href="ecma-262#a-15.7.4.5">ECMAScript 15.7.4.5
                Number.prototype.toFixed(fractionDigits)</a>.</p>
              </div>

              <div class="example">
                <pre id="Example_Number.prototype.toFixed">
var number = 123.456;
msg('number.toFixed(2) == ' + number.toFixed(2));

// check for RangeError for fractionDigits &gt; 20
try
{
  msg('number.toFixed(21) == ' + number.toFixed(21));
  msg('Test failed. Should have thrown a RangeError.');
}
catch(e)
{
  msg('Expected Exception thrown. ' +  
      e.name + ': ' + e.message);
  try
  {
    msg('Exception is a RangeError: ' + (e instanceof RangeError));
  }
  catch(e2)
  {
    msg('Error using instanceof ' +  
      e2.name + ': ' + e2.message);
  }
}

// check for RangeError for fractionDigits &lt; 0
try
{
  msg('number.toFixed(-1) == ' + number.toFixed(-1));
  msg('Test failed. Should have thrown a RangeError.');
}
catch(e)
{
  msg('Expected Exception thrown. ' +  
      e.name + ': ' + e.message);
  try
  {
    msg('Exception is a RangeError: ' + (e instanceof RangeError));
  }
  catch(e2)
  {
    msg('Error using instanceof ' +  
      e2.name + ': ' + e2.message);
  }
}
</pre><script type="text/javascript">
//
generate_example('Example_Number.prototype.toFixed');
//
</script>
              </div>
            </dd>

            <dt><a name="Number.prototype.toExponentional" id="Number.prototype.toExponentional"><code>Number.prototype.toExponentional(fractionDigits)</code></a></dt>

            <dd>
              <p>Returns a string value representing the number value
              in exponential form with one digit before the decimal
              point and with <var>fractionDigits</var> places after the
              decimal point. If <var>fractionDigits</var> is
              <code>undefined</code>, then as many digits after the
              decimal as are required to specify the number uniquely
              are used.</p>

              <div class="implnote">
                <p>Mozilla does not throw a <code>RangeError</code> if
                <var>fractionDigits</var> is greater than
                <code>20</code> but does if it is less than
                <code>0</code>. MSIE throws a <code>RangeError</code>
                in both cases. Mozilla's behavior is allowed under
                <a href="ecma-262#a-15.7.4.5">ECMAScript 15.7.4.6
                Number.prototype.toFixed(fractionDigits)</a>.</p>
              </div>

              <div class="example">
                <pre id="Example_Number.prototype.toExponential">
var number = 123.456;
msg('number.toExponential(2) == ' + number.toExponential(2));

// check for RangeError for fractionDigits &gt; 20
try
{
  msg('number.toExponential(21) == ' + number.toExponential(21));
  msg('Test failed. Should have thrown a RangeError.');
}
catch(e)
{
  msg('Expected Exception thrown. ' +  
      e.name + ': ' + e.message);
  try
  {
    msg('Exception is a RangeError: ' + (e instanceof RangeError));
  }
  catch(e2)
  {
    msg('Error using instanceof ' +  
      e2.name + ': ' + e2.message);
  }
}

// check for RangeError for fractionDigits &lt; 0
try
{
  msg('number.toExponential(-1) == ' + number.toExponential(-1));
  msg('Test failed. Should have thrown a RangeError.');
}
catch(e)
{
  msg('Expected Exception thrown. ' +  
      e.name + ': ' + e.message);
  try
  {
    msg('Exception is a RangeError: ' + (e instanceof RangeError));
  }
  catch(e2)
  {
    msg('Error using instanceof ' +  
      e2.name + ': ' + e2.message);
  }
}
</pre><script type="text/javascript">
//
generate_example('Example_Number.prototype.toExponential');
//
</script>
              </div>
            </dd>

            <dt><a name="Number.prototype.toPrecision" id="Number.prototype.toPrecision"><code>Number.prototype.toPrecision(precision)</code></a></dt>

            <dd>
              <p>Returns a string value representing the number value
              using <var>precision</var> number of significant digits.
              If <var>precision</var> is <code>undefined</code>,
              <code>Number.prototype.toString()</code> is used to
              return the string value.</p>

              <div class="implnote">
                <p>Mozilla does not throw a <code>RangeError</code> if
                <var>fractionDigits</var> is greater than
                <code>21</code> but does if it is than <code>1</code>.
                MSIE throws a <code>RangeError</code> in both cases.
                Mozilla's behavior is allowed under <a href="ecma-262#a-15.7.4.5">ECMAScript 15.7.4.7
                Number.prototype.toPrecision(fractionDigits)</a>.</p>
              </div>

              <div class="example">
                <pre id="Example_Number.prototype.toPrecision">
var number = 123.456;
msg('number.toPrecision(2) == ' + number.toPrecision(2));

// check for RangeError for fractionDigits &gt; 21
try
{
  msg('number.toPrecision(22) == ' + number.toPrecision(22));
  msg('Test failed. Should have thrown a RangeError.');
}
catch(e)
{
  msg('Expected Exception thrown. ' +  
      e.name + ': ' + e.message);
  try
  {
    msg('Exception is a RangeError: ' + (e instanceof RangeError));
  }
  catch(e2)
  {
    msg('Error using instanceof ' +  
      e2.name + ': ' + e2.message);
  }
}

// check for RangeError for fractionDigits &lt; 1
try
{
  msg('number.toPrecision(0) == ' + number.toPrecision(0));
  msg('Test failed. Should have thrown a RangeError.');
}
catch(e)
{
  msg('Expected Exception thrown. ' +  
      e.name + ': ' + e.message);
  try
  {
    msg('Exception is a RangeError: ' + (e instanceof RangeError));
  }
  catch(e2)
  {
    msg('Error using instanceof ' +  
      e2.name + ': ' + e2.message);
  }
}
</pre><script type="text/javascript">
//
generate_example('Example_Number.prototype.toPrecision');
//
</script>
              </div>
            </dd>

            <dt><a name="Number.MAX_VALUE" id="Number.MAX_VALUE"><code>Number.MAX_VALUE</code></a></dt>

            <dd>
              <p>Returns the maximum value of a number representable in
              JavaScript.</p>

              <div class="example">
                <pre id="Example_Number.MAX_VALUE">
msg('Number.MAX_VALUE == ' + Number.MAX_VALUE);
</pre><script type="text/javascript">
//
generate_example('Example_Number.MAX_VALUE');
//
</script>
              </div>
            </dd>

            <dt><a name="Number.MIN_VALUE" id="Number.MIN_VALUE"><code>Number.MIN_VALUE</code></a></dt>

            <dd>
              <p>Returns the minimum value of a number representable in
              JavaScript.</p>

              <div class="example">
                <pre id="Example_Number.MIN_VALUE">
msg('Number.MIN_VALUE == ' + Number.MIN_VALUE);
</pre><script type="text/javascript">
//
generate_example('Example_Number.MIN_VALUE');
//
</script>
              </div>
            </dd>

            <dt><a name="Number.NaN" id="Number.NaN"><code>Number.NaN</code></a></dt>

            <dd>
              <p>Returns the same value as the global property
              <code>NaN</code>.</p>
            </dd>

            <dt><a name="Number.NEGATIVE_INFINITY" id="Number.NEGATIVE_INFINITY"><code>Number.NEGATIVE_INFINITY</code></a></dt>

            <dd>
              <p>Returns -Infinity</p>

              <div class="example">
                <pre id="Example_Number.NEGATIVE_INFINITY">
msg('Number.NEGATIVE_INFINITY == ' + Number.NEGATIVE_INFINITY);
</pre><script type="text/javascript">
//
generate_example('Example_Number.NEGATIVE_INFINITY');
//
</script>
              </div>
            </dd>

            <dt><a name="Number.POSITIVE_INFINITY" id="Number.POSITIVE_INFINITY"><code>Number.POSITIVE_INFINITY</code></a></dt>

            <dd>
              <p>Returns +Infinity</p>

              <div class="example">
                <pre id="Example_Number.POSITIVE_INFINITY">
msg('Number.POSITIVE_INFINITY == ' + Number.POSITIVE_INFINITY);
</pre><script type="text/javascript">
//
generate_example('Example_Number.POSITIVE_INFINITY');
//
</script>
              </div>
            </dd>
          </dl>
        </dd>

        <dt><a name="Math_Object" id="Math_Object">The Math
        Object</a></dt>

        <dd>
          <p>The <code>Math</code> object which, unlike the other
          JavaScript objects, is a static object which can not be used
          as a constructor or as a function. It is used to contain a
          number of numeric constants which otherwise would require
          computation as well as a number of functions which perform
          common mathematics operations. All of the numeric constants
          have property attributes <em>{DontEnum}</em>,
          <em>{DontDelete}</em> and <em>{ReadOnly}</em>.</p>

          <dl>
            <dt><a name="Math.E" id="Math.E"><code>Math.E</code></a></dt>

            <dd>
              <p>The value for the number <em>e</em> which is the base
              of the natural logarithms.</p>

              <div class="example">
                <pre id="Example_Math.E">
msg('Math.E == ' + Math.E);
msg('Math.log(Math.E) == 1 ' + (Math.log(Math.E) == 1))
msg('Math.E == Math.exp(1) ' + (Math.E == Math.exp(1)));
</pre><script type="text/javascript">
//
generate_example('Example_Math.E');
//
</script>
              </div>
            </dd>

            <dt><a name="Math.LN10" id="Math.LN10"><code>Math.LN10</code></a></dt>

            <dd>
              <p>The value for the natural logarithm of
              <em>10</em>.</p>

              <div class="example">
                <pre id="Example_Math.LN10">
msg('Math.LN10 == ' + Math.LN10);
msg('1/Math.LOG10E == ' + 1/Math.LOG10E);
msg('Math.LN10 == 1/Math.LOG10E ' + (Math.LN10 == 1/Math.LOG10E));
</pre><script type="text/javascript">
//
generate_example('Example_Math.LN10');
//
</script>
              </div>
            </dd>

            <dt><a name="Math.LN2" id="Math.LN2"><code>Math.LN2</code></a></dt>

            <dd>
              <p>The value for the natural logarithm of <em>2</em>.</p>

              <div class="example">
                <pre id="Example_Math.LN2">
msg('Math.LN2 == ' + Math.LN2);
msg('Math.exp(Math.LN2) == ' + Math.exp(Math.LN2));
msg('Math.exp(Math.LN2) == 2 ' + (Math.exp(Math.LN2) == 2));
</pre><script type="text/javascript">
//
generate_example('Example_Math.LN2');
//
</script>
              </div>
            </dd>

            <dt><a name="Math.LOG2E" id="Math.LOG2E"><code>Math.LOG2E</code></a></dt>

            <dd>
              <p>The value for the base 2 logarithm of <em>e</em>.</p>

              <div class="example">
                <pre id="Example_Math.LOG2E">
msg('Math.LOG2E == ' + Math.LOG2E);
msg('1/Math.LN2 == ' + 1/Math.LN2);
msg('Math.LOG2E == 1/Math.LN2 ' + (Math.LOG2E == 1/Math.LN2));
</pre><script type="text/javascript">
//
generate_example('Example_Math.LOG2E');
//
</script>
              </div>
            </dd>

            <dt><a name="Math.LOG10E" id="Math.LOG10E"><code>Math.LOG10E</code></a></dt>

            <dd>
              <p>The value for the base 10 logarithm of <em>e</em>.</p>

              <div class="example">
                <pre id="Example_Math.LOG10E">
msg('Math.LOG10E == ' + Math.LOG10E);
msg('1/Math.LN10 == ' + 1/Math.LN10);
msg('Math.LOG10E == 1/Math.LN10 ' + (Math.LOG10E == 1/Math.LN10));
</pre><script type="text/javascript">
//
generate_example('Example_Math.LOG10E');
//
</script>
              </div>
            </dd>

            <dt><a name="Math.PI" id="Math.PI"><code>Math.PI</code></a></dt>

            <dd>
              <p>The value for Π.</p>

              <div class="example">
                <pre id="Example_Math.PI">
msg('Math.PI == ' + Math.PI);
</pre><script type="text/javascript">
//
generate_example('Example_Math.PI');
//
</script>
              </div>
            </dd>

            <dt><a name="Math.SQRT1_2" id="Math.SQRT1_2"><code>Math.SQRT1_2</code></a></dt>

            <dd>
              <p>The value for the square root of ½.</p>

              <div class="example">
                <pre id="Example_Math.SQRT1_2">
msg('Math.SQRT1_2 == ' + Math.SQRT1_2);
msg('1/Math.SQRT2 == ' + 1/Math.SQRT2);
msg('Math.SQRT1_2 == 1/Math.SQRT2 ' + (Math.SQRT1_2 == 1/Math.SQRT2));
</pre><script type="text/javascript">
//
generate_example('Example_Math.SQRT1_2');
//
</script>
              </div>
            </dd>

            <dt><a name="Math.SQRT2" id="Math.SQRT2"><code>Math.SQRT2</code></a></dt>

            <dd>
              <p>The value for the square root of <code>2</code>.</p>

              <div class="example">
                <pre id="Example_Math.SQRT2">
msg('Math.SQRT2 == ' + Math.SQRT2);
msg('Math.SQRT2 * Math.SQRT2 == ' + (Math.SQRT2 * Math.SQRT2));
msg('Math.SQRT2 * Math.SQRT2 == 2 ' + (Math.SQRT2 * Math.SQRT2 == 2));
</pre><script type="text/javascript">
//
generate_example('Example_Math.SQRT2');
//
</script>
              </div>
            </dd>

            <dt><a name="Math.abs" id="Math.abs"><code>Math.abs(x)</code></a></dt>

            <dd>
              <p>Returns the absolute value of <var>x</var>.</p>

              <div class="example">
                <pre id="Example_Math.abs">
msg('Math.abs(-1) == ' + Math.abs(-1));
</pre><script type="text/javascript">
//
generate_example('Example_Math.abs');
//
</script>
              </div>
            </dd>

            <dt><a name="Math.acos" id="Math.acos"><code>Math.acos(x)</code></a></dt>

            <dd>
              <p>Returns the arc cosine (cos<sup>-1</sup>) of
              <var>x</var></p>

              <div class="example">
                <pre id="Example_Math.acos">
msg('Math.acos(Math.cos(Math.PI))) == ' + Math.acos(Math.cos(Math.PI)));
</pre><script type="text/javascript">
//
generate_example('Example_Math.acos');
//
</script>
              </div>
            </dd>

            <dt><a name="Math.asin" id="Math.asin"><code>Math.asin(x)</code></a></dt>

            <dd>
              <p>Returns the arc sine (sin<sup>-1</sup>) of
              <var>x</var></p>

              <div class="example">
                <pre id="Example_Math.asin">
msg('Math.asin(Math.sin(Math.PI))) == ' + Math.asin(Math.sin(Math.PI)));
</pre><script type="text/javascript">
//
generate_example('Example_Math.asin');
//
</script>
              </div>
            </dd>

            <dt><a name="Math.atan" id="Math.atan"><code>Math.atan(x)</code></a></dt>

            <dd>
              <p>Returns the arc tangent (tan<sup>-1</sup>) of
              <var>x</var></p>

              <div class="example">
                <pre id="Example_Math.atan">
msg('Math.atan(Math.tan(Math.PI/2))) == ' + Math.atan(Math.tan(Math.PI/2)));
</pre><script type="text/javascript">
//
generate_example('Example_Math.atan');
//
</script>
              </div>
            </dd>

            <dt><a name="Math.atan2" id="Math.atan2"><code>Math.atan2(y,x)</code></a></dt>

            <dd>
              <p>Returns the arc tangent (tan<sup>-1</sup>) of the
              ratio of <code><var>y</var>/<var>x</var></code> with the
              return value in the property quadrant.</p>

              <div class="example">
                <pre id="Example_Math.atan2">
msg('Math.atan2(1,-1) == ' + Math.atan2(1,-1));
</pre><script type="text/javascript">
//
generate_example('Example_Math.atan2');
//
</script>
              </div>
            </dd>

            <dt><a name="Math.ceil" id="Math.ceil"><code>Math.ceil(x)</code></a></dt>

            <dd>
              <p>Returns the smallest integer value less than or equal
              to <var>x</var>.</p>

              <div class="example">
                <pre id="Example_Math.ceil">
msg('Math.ceil(NaN) == ' + Math.ceil(NaN));
msg('Math.ceil(+0) == '  + Math.ceil(+0));
msg('Math.ceil(-0) == '  + Math.ceil(-0));
msg('Math.ceil(+Infinity) == ' + Math.ceil(+Infinity));
msg('Math.ceil(-Infinity) == ' + Math.ceil(-Infinity));
msg('Math.ceil(-0.5) == ' + Math.ceil(-0.5));
msg('Math.ceil(1.6) == ' + Math.ceil(1.6));

msg('-Math.floor(-1.6) == ' + (-Math.floor(-1.6)));
</pre><script type="text/javascript">
//
generate_example('Example_Math.ceil');
//
</script>
              </div>
            </dd>

            <dt><a name="Math.cos" id="Math.cos"><code>Math.cos(x)</code></a></dt>

            <dd>
              <p>Converts <var>x</var> to a numeric value in radians
              and returns the cosine of <var>x</var>.</p>

              <div class="example">
                <pre id="Example_Math.cos">
msg('Math.cos(Math.PI) == ' + Math.cos(Math.PI));
</pre><script type="text/javascript">
//
generate_example('Example_Math.cos');
//
</script>
              </div>
            </dd>

            <dt><a name="Math.exp" id="Math.exp"><code>Math.exp(x)</code></a></dt>

            <dd>
              <p>Converts <var>x</var> to a numeric value, then returns
              the result of raising <var>e</var> to the
              <var>x</var><sup>th</sup> power
              (<var>e</var><sup>x</sup>).</p>
            </dd>

            <dt><a name="Math.floor" id="Math.floor"><code>Math.floor(x)</code></a></dt>

            <dd>
              <p>Returns the largest integer value less than or equal
              to the numeric value of <var>x</var>.</p>

              <div class="example">
                <pre id="Example_Math.floor">
msg('Math.floor(NaN) == ' + Math.floor(NaN));
msg('Math.floor(+0) == '  + Math.floor(+0));
msg('Math.floor(-0) == '  + Math.floor(-0));
msg('Math.floor(+Infinity) == ' + Math.floor(+Infinity));
msg('Math.floor(-Infinity) == ' + Math.floor(-Infinity));
msg('Math.floor(-0.5) == ' + Math.floor(-0.5));
msg('Math.floor(1.6) == ' + Math.floor(1.6));

msg('-Math.floor(-1.6) == ' + (-Math. ceil(-1.6)));
</pre><script type="text/javascript">
//
generate_example('Example_Math.floor');
//
</script>
              </div>
            </dd>

            <dt><a name="Math.log" id="Math.log"><code>Math.log(x)</code></a></dt>

            <dd>
              <p>Converts <var>x</var> to a numeric value, then returns
              the natural logarithm of <var>x</var>.</p>
            </dd>

            <dt><a name="Math.max" id="Math.max"><code>Math.max([value1
            [, value2 [, …]]])</code></a></dt>

            <dd>
              <p>Converts each argument <var>value1</var>,
              <var>value2</var>, … to a numeric value, then
              returns the maximum value.</p>
            </dd>

            <dt><a name="Math.min" id="Math.min"><code>Math.min([value1
            [, value2 [, …]]])</code></a></dt>

            <dd>Converts each argument <var>value1</var>,
            <var>value2</var>, … to a numeric value, then
            returns the minimum value.</dd>

            <dt><a name="Math.pow" id="Math.pow"><code>Math.pow(x,y)</code></a></dt>

            <dd>
              <p>Converts <var>x</var> and <var>y</var> to numeric
              values, then returns the value raising <var>x</var> to
              the <var>y</var><sup>th</sup> power
              (<var>y<sup>x</sup></var>).</p>
            </dd>

            <dt><a name="Math.random" id="Math.random"><code>Math.random()</code></a></dt>

            <dd>
              <p>Returns a random number between <code>0</code> and
              <code>1</code>.</p>
            </dd>

            <dt><a name="Math.round" id="Math.round"><code>Math.round(x)</code></a></dt>

            <dd>
              <p>Converts <var>x</var> to a numeric value and returns
              the result of rounding <var>x</var> to the nearest
              integer.</p>
            </dd>

            <dt><a name="Math.sin" id="Math.sin"><code>Math.sin(x)</code></a></dt>

            <dd>
              <p>Converts <var>x</var> to a numeric value in radians
              and returns the sine of <var>x</var>.</p>
            </dd>

            <dt><a name="Math.sqrt" id="Math.sqrt"><code>Math.sqrt(x)</code></a></dt>

            <dd>
              <p>Converts <var>x</var> to a numeric value and returns
              the square root of <var>x</var>.</p>
            </dd>

            <dt><a name="Math.tan" id="Math.tan"><code>Math.tan(x)</code></a></dt>

            <dd>
              <p>Converts <var>x</var> to a numeric value in radians
              and returns the tangent of <var>x</var>.</p>
            </dd>
          </dl>
        </dd>

        <dt><a name="Date_Objects" id="Date_Objects">Date
        Objects</a></dt>

        <dd>
          <p>Instances of the <code>Date</code> Object represent time
          values to within a millisecond for dates <code>100,000</code>
          days before or after January 1, 1970. Time <code>0</code> is
          defined to be January 1, 1970 UTC. This works out to be from
          April 20, -271821 through September 13, 275760 which should
          be enough for most purposes.</p>

          <dl>
            <dt><a name="Date_constructor" id="Date_constructor"><code>Date(…)</code></a></dt>

            <dd>
              <p>The <code>Date</code> constructor creates a new
              instance of a <code>Date</code> Object when called in a
              <code>new</code> expression but returns a string when
              used as a function call when it returns the same value a
              <code>(new Date()).toString()</code>.</p>

              <p><code>Date</code> has two forms: <a href="#Date_value"><code>Date(<var>value</var>)</code></a> and
              <a href="#Date_year_month"><code>Date(<var>year</var>,
              <var>month</var>, …)</code></a>.</p>

              <p><code>Date</code> has property attribute
              <em>{DontEnum}</em> which means it does not appear in
              <code>for-in</code> loops, can be deleted and can be the
              target of an assignment.</p>

              <div class="implnote">
                <p>Mozilla adds the <em>{DontDelete}</em> property
                attribute which means Mozilla will not delete it.</p>
              </div>

              <div class="example">
                <pre id="Example_Date_property_attributes_dontdelete">
// attempt to delete Date
msg('Before delete: typeof Date == ' + typeof Date);
msg('(delete Date) == ' + (delete Date));
msg('After delete: typeof Date == ' + typeof Date);
</pre><script type="text/javascript">
//
generate_example('Example_Date_property_attributes_dontdelete');
//
</script>
              </div>

              <div class="example">
                <pre id="Example_Date_property_attributes_readonly">
// attempt to assign to Date
Date = 'foo';
msg('After Date = \'foo\': Date == ' + Date);
</pre><script type="text/javascript">
//
generate_example('Example_Date_property_attributes_readonly');
//
</script>
              </div>
            </dd>

            <dt><a name="Date_value" id="Date_value"><code>Date(<var>value</var>)</code></a></dt>

            <dd>
              <p><code>Date(<var>value</var>)</code> creates a new
              instance of <code>Date</code> by <a href="#Date.parse">parsing</a> <var>value</var> as a date
              string in IETF format or as the number of milliseconds
              since January 1, 1970.</p>

              <div class="example">
                <p>Example Date Ranges using
                <code>Date(<var>milliseconds</var> )</code></p>
                <pre id="Example_Date_Range">
var msDay = 86400000; // milliseconds per day
var maxRange = 100000000 * msDay;

var datemin = new Date(-maxRange);
var date0 = new Date(0);
var datemax = new Date(maxRange);

msg('datemin == ' + datemin.toUTCString());
msg('date0 == ' + date0.toUTCString());
msg('datemax == ' + datemax.toUTCString());

try
{
  // try a longer range
  var date = new Date(maxRange + 1);
  msg('date == ' + date.toUTCString());
}
catch(e)
{
  msg(e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_Date_Range');
//
</script>

                <div class="implnote">
                  <p>Note that Mozilla will report <code>'Invalid
                  Date'</code> for dates out of range while MSIE will
                  report <code>'NaN'</code>.</p>
                </div>
              </div>

              <p>The IETF date format is defined in <a href="http://www.faqs.org/rfcs/rfc822.html">RFC 822</a>,
              Section 5. JavaScript is more lenient in the date strings
              it will accept in that some of the required values in RFC
              822 can be omitted in JavaScript and other values can be
              written in abbreviated form or in full. In general
              JavaScript date strings look like:</p>
              <pre>
<var>[dayofweek] dayofmonth month year [time [timezone][offset]]</var>
</pre>

              <p>where commas (<code>,</code>) in between the values
              will be ignored and <var>[optional]</var> indicates
              <var>optional</var> can be omitted.</p>

              <p><var>dayofweek</var> is the name of the day of the
              week such as <code>Monday</code> or <code>Mon</code>;
              <var>dayofmonth</var> is a number representing the day of
              the month ranging from <code>1</code> to the number of
              days in the month, <var>month</var> is the name of the
              month such as <code>January</code> or <code>Jan</code>;
              <var>year</var> is a number representing the year;
              <var>time</var> is of the form hh:mm or hh:mm:ss (where
              hh, mm and ss are two digit numbers representing the
              hours, minutes and seconds); and <var>timezone</var> is
              optionally one of UTC, GMT, EST, EDT, CST, CDT, MST, MDT,
              PST, PDT; and <var>offset</var> is a positive or negative
              4 digit number representing the difference in time
              between the local time and that given in the
              <var>timezone</var>.</p>

              <p>JavaScript will convert some invalid dates with an
              incorrect <var>dayofmonth</var> value by shifting the
              date into the next month.</p>

              <div class="example">
                <pre id="Example_Date_value">
function test(datestring)
{
  msg('new Date("' + datestring + '") == ' + 
      new Date(datestring));
}

// create Date using date string
var datestring;

msg('Valid Dates');

test("Jan 12 2005 11:57 PM EST");
test("January 12 2005");
test("01/12/2005");
test("Wed January 12, 2005");
test("12, Jan, 2005, 11:57, PM, EST");
test("Wed Jan 12 2005 23:57:00 GMT-0500 (Eastern Standard Time)");

msg('Invalid dates');

test("01 2005");
test("01 12 2005");
test("Feb 31, 2005");
test("Jan 12, 2005 13:30 AM");
</pre><script type="text/javascript">
//
generate_example('Example_Date_value');
//
</script>
              </div>

              <div class="implnote">
                <p>Note that both Mozilla and MSIE will flag "01 12
                2005" as an invalid date and that both will convert
                "Feb 31, 2005" to "Mar 3, 2005", but they disagree when
                a 24 hour time is used with an AM or PM indicator.
                Mozilla flags a 24 hour time with AM or PM as an
                invalid date while MSIE ignores the AM/PM
                indicator.</p>

                <p>Care must be taken to generate only valid date
                strings in order for your code to be interoperable
                between browsers.</p>
              </div>
            </dd>

            <dt><a name="Date_function" id="Date_year_month"><code>Date([<var>year</var>[,
            <var>month</var>[, <var>date</var>[, <var>hours</var>[,
            <var>minutes</var>[, <var>seconds</var>[,
            <var>ms</var>]]]]]]])</code> (Function Call)</a></dt>

            <dd>
              <p>All arguments are optional and are ignored. The result
              of calling the <code>Date</code> constructor is always
              the same as <code>(new Date()).toString()</code>
              regardless of the arguments passed.</p>

              <div class="example">
                <p>Calling <code>Date</code> as a function should
                always return the current date as a string.</p>
                <pre id="Example_Date_function">
msg('Date(1970, 01, 01) == ' + Date(1970, 01, 01));
</pre><script type="text/javascript">
//
generate_example('Example_Date_function');
//
</script>
              </div>
            </dd>

            <dt><a name="Date_new" id="Date_new"><code>Date(<var>year</var>, <var>month</var>[,
            <var>day</var>[, <var>hours</var>[, <var>minutes</var>[,
            <var>seconds</var>[, <var>ms</var>]]]]])</code>
            (Constructor Call)</a></dt>

            <dd>
              <p>Constructs an instance of <code>Date</code>
              corresponding to the date specified in the arguments.
              Each argument is first converted to a
              <code>Number</code>. If the value is greater than the
              allowed value (e.g. if <var>month</var> is greater than
              11, <var>hour</var> is greater than 23, etc.) then the
              excess is <em>carried</em> into the previous value and
              the value is treated as modulo the maximum value. For
              example if <var>month</var> is greater than
              <code>11</code>, <code>year</code> is treated as
              <code><var>year</var> + floor(<var>month</var>/12)</code>
              and <var>month</var> as <code><var>month</var> %
              12</code>.</p>

              <dl>
                <dt><var>year</var></dt>

                <dd>If year is in the range <code>0</code> to
                <code>99</code>, it is treated as <code><var>year</var>
                + 99</code> otherwise is it treated as the full year of
                the date.</dd>

                <dt><var>month</var></dt>

                <dd>The number of the month from <code>0</code>
                (January) to <code>11</code> (December).</dd>

                <dt><var>day</var></dt>

                <dd>The number of the day in the month from
                <code>1</code> to the number of days in the month</dd>

                <dt><var>hours</var></dt>

                <dd>The number of hours from <code>0</code> to
                <code>23</code>.</dd>

                <dt><var>minutes</var></dt>

                <dd>The number of minutes from <code>0</code> to
                <code>59</code>.</dd>

                <dt><var>seconds</var></dt>

                <dd>The number of seconds from <code>0</code> to
                <code>59</code>.</dd>

                <dt><var>ms</var></dt>

                <dd>The number of milliseconds from <code>0</code> to
                <code>999</code>.</dd>
              </dl>

              <div class="example">
                <pre id="Example_Date_new">
msg(' two digit year');
msg('new Date(0, 0) == ' + new Date(0, 0));

msg('year, month')
msg('new Date(2000, 11) == ' + 
    new Date(2000, 11));

msg('year, month with carry');
msg('new Date(2000, 12) == ' + 
     new Date(2000, 12));

msg('year, month, day');
msg('new Date(2000, 11, 7) == ' + 
    (new Date(2000, 11, 7)));

msg('year, month, day with carry');
msg('new Date(2000, 11, 32) == ' + 
    (new Date(2000, 11, 32)));

msg('year, month, day, hours');
msg('new Date(2000, 11, 7, 23) == ' + 
    (new Date(2000, 11, 7, 23)));

msg('year, month, day, hours with carry');
msg('new Date(2000, 11, 7, 24) == ' + 
    (new Date(2000, 11, 7, 24)));

msg('year, month, day, hours, seconds');
msg('new Date(2000, 11, 7, 23, 59) == ' + 
    (new Date(2000, 11, 7, 23, 59)));

msg('year, month, day, hours, seconds with carry');
msg('new Date(2000, 11, 7, 23, 60) == ' + 
    (new Date(2000, 11, 7, 23, 60)));

msg('year, month, day, hours, seconds, ms');
msg('new Date(2000, 11, 7, 23, 59) == ' + 
    (new Date(2000, 11, 7, 23, 59, 999)));

msg('year, month, day, hours, seconds, ms with carry');
msg('new Date(2000, 11, 7, 23, 59, 1000) == ' + 
    (new Date(2000, 11, 7, 23, 59, 1000)));

</pre><script type="text/javascript">
//
generate_example('Example_Date_new');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype" id="Date.prototype"><code>Date.prototype</code></a></dt>

            <dd>
              <p><code>Date.prototype</code> has property attributes
              <em>{DontEnum}</em>, <em>{DontDelete}</em> and
              <em>{ReadOnly}</em> which means it will not appear in
              <code>for-in</code> loops, can not be deleted and can not
              be changed by assignment although its properties
              <em>may</em> be modified.</p>
            </dd>

            <dt><a name="Date.prototype.constructor" id="Date.prototype.constructor"><code>Date.prototype.constructor</code></a></dt>

            <dd>
              <p>Returns a reference to the <code>Date</code>
              constructor.</p>
            </dd>

            <dt><a name="Date.prototype.toString" id="Date.prototype.toString"><code>Date.prototype.toString()</code></a></dt>

            <dd>
              <p>Returns a string representing the date, time
              value.</p>

              <div class="implnote">
                <p>Mozilla and MSIE differ in how date/time format
                string.</p>

                <div>
                  Mozilla
                  <pre>
Thu Jul 04 1776 12:30:00 GMT-0500 (Eastern Standard Time)
</pre>
                </div>

                <div>
                  MSIE
                  <pre>
Thu Jul 4 12:30:00 EDT 1776
</pre>
                </div>
              </div>

              <div class="example">
                <pre id="Example_Date.prototype.toString">
var date = new Date('7/4/1776 12:30 PM');
msg('date.toString() == ' + date.toString());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.toString');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.toDateString" id="Date.prototype.toDateString"><code>Date.prototype.toDateString()</code></a></dt>

            <dd>
              <p>Returns a string representing only the date.</p>

              <p>Mozilla and MSIE agreed on Date string format.</p>

              <div class="example">
                <pre id="Example_Date.prototype.toDateString">
var date = new Date('7/4/1776 12:30 PM');
msg('date.toString() == ' + date.toDateString());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.toDateString');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.toTimeString" id="Date.prototype.toTimeString"><code>Date.prototype.toTimeString()</code></a></dt>

            <dd>
              <p>Returns a string representing only the time.</p>

              <div class="implnote">
                <p>Mozilla and MSIE disagree on Time String format.</p>

                <div>
                  Mozilla
                  <pre>
12:30:00 GMT-0500 (Eastern Standard Time)
</pre>
                </div>

                <div>
                  MSIE
                  <pre>
12:30:00 EDT
</pre>
                </div>
              </div>

              <div class="example">
                <pre id="Example_Date.prototype.toTimeString">
var date = new Date('7/4/1776 12:30 PM');
msg('date.toString() == ' + date.toTimeString());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.toTimeString');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.toLocaleString" id="Date.prototype.toLocaleString"><code>Date.prototype.toLocaleString()</code></a></dt>

            <dd>
              <p>Returns a string representing a locale specific
              version of the date and time.</p>
            </dd>

            <dt><a name="Date.prototype.toLocaleDateString" id="Date.prototype.toLocaleDateString"><code>Date.prototype.toLocaleDateString()</code></a></dt>

            <dd>
              <p>Returns a string representing a locale specific
              version of the date.</p>
            </dd>

            <dt><a name="Date.prototype.toLocaleTimeString" id="Date.prototype.toLocaleTimeString"><code>Date.prototype.toLocaleTimeString()</code></a></dt>

            <dd>
              <p>Returns a string representing a locale specific
              version of the time.</p>
            </dd>

            <dt><a name="Date.prototype.valueOf" id="Date.prototype.valueOf"><code>Date.prototype.valueOf()</code></a></dt>

            <dd>
              <p>Returns a number representing the internal time value
              of the date.</p>

              <div class="implnote">
                <code>Date.prototype.valueOf()</code> - MSIE returns
                <code>0</code> instead of <code>NaN</code>

                <div class="example">
                  <pre id="Example_Date.prototype.valueOf">
// call the prototyped valueOf() directly
msg('Date.prototype.valueOf() == ' + Date.prototype.valueOf());

// call valueOf on a real date instance
var date = new Date();
msg('date == ' + date);
msg('date.valueOf() == ' + date.valueOf());
msg('new Date(date.valueOf()) == ' + (new Date(date.valueOf())));
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.valueOf');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="Date.prototype.getTime" id="Date.prototype.getTime"><code>Date.prototype.getTime()</code></a></dt>

            <dd>
              <p>Return the time value. Identical to
              <code>Date.prototype.valueOf</code>.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getTime">
var date = new Date(2000, 12, 7, 11, 30, 45);
msg('date.getTime() == ' + date.getTime());
msg('date.valueOf() == ' + date.valueOf());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getTime');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.getYear" id="Date.prototype.getYear"><code>Date.prototype.getYear()</code></a></dt>

            <dd>
              <p>Returns a number value representing the number of
              years <em>after</em> <code>1900</code>.</p>

              <div class="implnote">
                <p>Deprecated in ECMA 262 1<sup>st</sup>. Mozilla
                JavaScript1.2 and MSIE treat <code>getYear</code> as if
                it were <code>getFullYear</code>.</p>

                <div class="example">
                  <pre id="Example_Date.prototype.getYear">
var date = new Date('12/22/2004');
msg('date.getYear() == ' + date.getYear());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getYear');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="Date.prototype.getFullYear" id="Date.prototype.getFullYear"><code>Date.prototype.getFullYear()</code></a></dt>

            <dd>
              <p>Returns a number value representing the number of
              years in the date value when considered in the local time
              zone.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getFullYear">
var date = new Date('12/22/2004');
msg('date.getFullYear() == ' + date.getFullYear());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getFullYear');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.getUTCFullYear" id="Date.prototype.getUTCFullYear"><code>Date.prototype.getUTCFullYear()</code></a></dt>

            <dd>
              <p>Returns a number value representing the number of
              years in the date value when considered in the UTC time
              zone.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getUTCFullYear">
var date = new Date('12/31/2004 11:59 PM');
msg('date.getUTCFullYear() == ' + date.getUTCFullYear());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getUTCFullYear');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.getMonth" id="Date.prototype.getMonth"><code>Date.prototype.getMonth()</code></a></dt>

            <dd>
              <p>Returns the month number in the local time zone.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getMonth">
var date = new Date(2000, 11, 31, 23, 59);
msg('date.getMonth() == ' + date.getMonth());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getMonth');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.getUTCMonth" id="Date.prototype.getUTCMonth"><code>Date.prototype.getUTCMonth()</code></a></dt>

            <dd>
              <p>Returns the month number in the UTC time zone.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getUTCMonth">
var date = new Date(2000, 11, 31, 23, 59);
msg('date.getUTCMonth() == ' + date.getUTCMonth());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getUTCMonth');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.getDate" id="Date.prototype.getDate"><code>Date.prototype.getDate()</code></a></dt>

            <dd>
              <p>Returns the day of the month in the local time
              zone.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getDate">
var date = new Date(2000, 12, 7, 23, 59);
msg('date.getDate() == ' + date.getDate());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getDate');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.getUTCDate" id="Date.prototype.getUTCDate"><code>Date.prototype.getUTCDate()</code></a></dt>

            <dd>
              <p>Returns the day of the month in the UTC time zone.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getUTCDate">
var date = new Date(2000, 12, 7, 23, 59);
msg('date.getUTCDate() == ' + date.getUTCDate());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getUTCDate');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.getDay" id="Date.prototype.getDay"><code>Date.prototype.getDay()</code></a></dt>

            <dd>
              <p>Returns the day of the week in the local time
              zone.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getDay">
var date = new Date(2000, 12, 7, 23, 59);
msg('date.getDay() == ' + date.getDay());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getDay');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.getUTCDay" id="Date.prototype.getUTCDay"><code>Date.prototype.getUTCDay()</code></a></dt>

            <dd>
              <p>Returns the day of the week in the UTC time zone.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getUTCDay">
var date = new Date(2000, 12, 7, 23, 59);
msg('date.getUTCDay() == ' + date.getUTCDay());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getUTCDay');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.getHours" id="Date.prototype.getHours"><code>Date.prototype.getHours()</code></a></dt>

            <dd>
              <p>Returns the hour of the day in the local time
              zone.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getHours">
var date = new Date(2000, 12, 7, 23, 59);
msg('date.getHours() == ' + date.getHours());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getHours');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.getUTCHours" id="Date.prototype.getUTCHours"><code>Date.prototype.getUTCHours()</code></a></dt>

            <dd>
              <p>Returns the hour of the day in the UTC time zone.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getUTCHours">
var date = new Date(2000, 12, 7, 23, 59);
msg('date.getUTCHours() == ' + date.getUTCHours());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getUTCHours');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.getMinutes" id="Date.prototype.getMinutes"><code>Date.prototype.getMinutes()</code></a></dt>

            <dd>
              <p>Returns the minutes of the hour in the local time
              zone.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getMinutes">
var date = new Date(2000, 12, 7, 23, 59);
msg('date.getMinutes() == ' + date.getMinutes());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getMinutes');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.getUTCMinutes" id="Date.prototype.getUTCMinutes"><code>Date.prototype.getUTCMinutes()</code></a></dt>

            <dd>
              <p>Returns the minutes of the hour in the UTC time
              zone.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getUTCMinutes">
var date = new Date(2000, 12, 7, 23, 59);
msg('date.getUTCMinutes() == ' + date.getUTCMinutes());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getUTCMinutes');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.getSeconds" id="Date.prototype.getSeconds"><code>Date.prototype.getSeconds()</code></a></dt>

            <dd>
              <p>Returns the seconds of the minute in the local time
              zone.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getSeconds">
var date = new Date(2000, 12, 7, 23, 59, 59);
msg('date.getSeconds() == ' + date.getSeconds());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getSeconds');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.getUTCSeconds" id="Date.prototype.getUTCSeconds"><code>Date.prototype.getUTCSeconds()</code></a></dt>

            <dd>
              <p>Returns the seconds of the minute in the UTC time
              zone.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getUTCSeconds">
var date = new Date(2000, 12, 7, 23, 59, 59);
msg('date.getUTCSeconds() == ' + date.getUTCSeconds());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getUTCSeconds');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.getMilliseconds" id="Date.prototype.getMilliseconds"><code>Date.prototype.getMilliseconds()</code></a></dt>

            <dd>
              <p>Returns the milliseconds of the second in the local
              time zone.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getMilliseconds">
var date = new Date(2000, 12, 7, 23, 59, 59, 999);
msg('date.getMilliseconds() == ' + date.getMilliseconds());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getMilliseconds');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.getUTCMilliseconds" id="Date.prototype.getUTCMilliseconds"><code>Date.prototype.getUTCMilliseconds()</code></a></dt>

            <dd>
              <p>Returns the milliseconds of the second in the UTC time
              zone.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getUTCMilliseconds">
var date = new Date(2000, 12, 7, 23, 59, 59, 999);
msg('date.getUTCMilliseconds() == ' + date.getUTCMilliseconds());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getUTCMilliseconds');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.getTimezoneOffset" id="Date.prototype.getTimezoneOffset"><code>Date.prototype.getTimezoneOffset()</code></a></dt>

            <dd>
              <p>Return the difference between the local time zone and
              the UTC time zone in minutes.</p>

              <div class="example">
                <pre id="Example_Date.prototype.getTimezoneOffset">
var date = new Date();
msg('date.getTimezoneOffset() == ' + date.getTimezoneOffset());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.getTimezoneOffset');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.setTime" id="Date.prototype.setTime"><code>Date.prototype.setTime(time)</code></a></dt>

            <dd>
              <p>Sets the date value to the number of milliseconds in
              <var>time</var>.</p>

              <div class="example">
                <pre id="Example_Date.prototype.setTime">
var date0 = new Date(0);
var datenow = new Date();

msg('date0 == ' + date0);
msg('datenow == ' + datenow);

date0.setTime(datenow.getTime());

msg('date0 == ' + date0);
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.setTime');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.setYear" id="Date.prototype.setYear"><code>Date.prototype.setYear(year)</code></a></dt>

            <dd>
              <p>Sets the year value of the date to <var>year</var>. If
              <var>year</var> is <code>0</code> to <code>99</code>, it
              is treated as if <code><var>year</var> + 1900</code> were
              specified.</p>

              <div class="implnote">
                Deprecated. Use <code>setFullYear</code> instead.
              </div>

              <div class="example">
                <pre id="Example_Date.prototype.setYear">
var date = new Date('12/22/2004');
msg('date.toDateString() == ' + date);

msg('date.setYear(2003) == ' + 
    date.setYear(2003) + ', ' + 
    date);

msg('date.setYear(20) == ' + 
    date.setYear(20) + ', ' + 
    date);
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.setYear');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.setFullYear" id="Date.prototype.setFullYear"><code>Date.prototype.setFullYear(year[,
            month[, day]])</code></a></dt>

            <dd>
              <p>Set the year value to corresponding to local time zone
              values of <var>year</var>, <var>month</var> and
              <var>day</var> with no conversion if <var>year</var> is
              <code>0</code> to <code>99</code>. If <var>month</var> is
              not specified, the value of
              <code><var>date</var>.getMonth()</code> is used instead.
              If <var>day</var> is not specified,
              <code><var>date</var>.getDate()</code> is used
              instead.</p>

              <div class="example">
                <pre id="Example_Date.prototype.setFullYear">
var date = new Date('12/22/2004 23:59:59');
msg('date.toDateString() == ' + date);

msg('date.getMonth() == ' + date.getMonth());
msg('date.getDate() == ' + date.getDate());

msg('date.setFullYear(2003) == ' + 
    date.setFullYear(2003) + ', ' + 
    date);
msg('date.setFullYear(2002, 1) == ' + 
    date.setFullYear(2002, 1) + ', ' +
    date);
msg('date.setFullYear(2001, 1, 1) == ' + 
    date.setFullYear(2001, 1, 1) + ', ' + 
    date);
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.setFullYear');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.setUTCFullYear" id="Date.prototype.setUTCFullYear"><code>Date.prototype.setUTCFullYear(year[,
            month[, date]])</code></a></dt>

            <dd>
              <p>Set the year value to corresponding to local time zone
              values of <var>year</var>, <var>month</var> and
              <var>day</var> with no conversion if <var>year</var> is
              <code>0</code> to <code>99</code>. If <var>month</var> is
              not specified, the value of
              <code><var>date</var>.getUTCMonth()</code> is used
              instead. If <var>day</var> is not specified,
              <code><var>date</var>.getUTCDate()</code> is used
              instead.</p>

              <div class="example">
                <pre id="Example_Date.prototype.setUTCFullYear">
var date = new Date('12/31/2004 23:59:59');
msg('date.toDateString() == ' + date);

msg('date.getUTCMonth() == ' + date.getUTCMonth());
msg('date.getUTCDate() == ' + date.getUTCDate());

msg('date.setUTCFullYear(2003) == ' + 
    date.setUTCFullYear(2003) + ', ' + 
    date);

msg('date.setUTCFullYear(2002, 1) == ' + 
    date.setUTCFullYear(2002, 1) + ', ' +
    date);

msg('date.setUTCFullYear(2001, 1, 1) == ' + 
    date.setUTCFullYear(2001, 1, 1) + ', ' + 
    date);
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.setUTCFullYear');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.setMonth" id="Date.prototype.setMonth"><code>Date.prototype.setMonth(month[,
            day])</code></a></dt>

            <dd>
              <p>Sets the month and day values of the date using the
              local time zone.</p>
            </dd>

            <dt><a name="Date.prototype.setUTCMonth" id="Date.prototype.setUTCMonth"><code>Date.prototype.setUTCMonth(month[,
            day])</code></a></dt>

            <dd>
              <p>Sets the month and day values of the date using the
              UTC time zone.</p>
            </dd>

            <dt><a name="Date.prototype.setDate" id="Date.prototype.setDate"><code>Date.prototype.setDate(day)</code></a></dt>

            <dd>
              <p>Sets the day value of the date using the local time
              zone.</p>
            </dd>

            <dt><a name="Date.prototype.setUTCDate" id="Date.prototype.setUTCDate"><code>Date.prototype.setUTCDate(date)</code></a></dt>

            <dd>
              <p>Sets the day value of the date using the UTC time
              zone.</p>
            </dd>

            <dt><a name="Date.prototype.setHours" id="Date.prototype.setHours"><code>Date.prototype.setHours(hour[,
            min[, sec[, ms]]])</code></a></dt>

            <dd>
              <p>Sets the hour and optionally minute, second and
              millisecond of the date using the local time zone.</p>
            </dd>

            <dt><a name="Date.prototype.setUTCHours" id="Date.prototype.setUTCHours"><code>Date.prototype.setUTCHours(hour[,
            min[, sec[, ms]]])</code></a></dt>

            <dd>
              <p>Set the hour and optionally minute, second and
              millisecond of the date using the UTC time zone.</p>
            </dd>

            <dt><a name="Date.prototype.setMinutes" id="Date.prototype.setMinutes"><code>Date.prototype.setMinutes(min[,
            sec[, ms]])</code></a></dt>

            <dd>
              <p>Sets the minutes and optionally the seconds and
              milliseconds of the date using the local time zone.</p>
            </dd>

            <dt><a name="Date.prototype.setUTCMinutes" id="Date.prototype.setUTCMinutes"><code>Date.prototype.setUTCMinutes(min[,
            sec[, ms]])</code></a></dt>

            <dd>
              <p>Sets the minutes and optionally the seconds and
              milliseconds of the date using the UTC time zone.</p>
            </dd>

            <dt><a name="Date.prototype.setSeconds" id="Date.prototype.setSeconds"><code>Date.prototype.setSeconds(sec[,
            ms])</code></a></dt>

            <dd>
              <p>Sets the seconds and optionally milliseconds of the
              date using the local time zone.</p>
            </dd>

            <dt><a name="Date.prototype.setUTCSeconds" id="Date.prototype.setUTCSeconds"><code>Date.prototype.setUTCSeconds(sec[,
            ms])</code></a></dt>

            <dd>
              <p>Sets the seconds and optionally milliseconds of the
              date using the UTC time zone.</p>
            </dd>

            <dt><a name="Date.prototype.setMilliseconds" id="Date.prototype.setMilliseconds"><code>Date.prototype.setMilliseconds(ms)</code></a></dt>

            <dd>
              <p>Sets the milliseconds of the date using the local time
              zone.</p>
            </dd>

            <dt><a name="Date.prototype.setUTCMilliseconds" id="Date.prototype.setUTCMilliseconds"><code>Date.prototype.setUTCMilliseconds(ms)</code></a></dt>

            <dd>
              <p>Sets the milliseconds of the date using the UTC time
              zone.</p>
            </dd>

            <dt><a name="Date.prototype.toGMTString" id="Date.prototype.toGMTString"><code>Date.prototype.toGMTString()</code></a></dt>

            <dd>
              <div class="implnote">
                <p>Deprecated. Mozilla and MSIE disagree on Date string
                format and the effects of old dates on daylight savings
                time.</p>

                <table summary="Comparison of toUTCString output">
                  <thead>
                    <tr>
                      <th>Date</th>

                      <th>Mozilla toUTCString</th>

                      <th>MSIE toUTCString</th>

                      <th>Note</th>
                    </tr>
                  </thead>

                  <tbody>
                    <tr>
                      <td>7/4/1776 12:30 PM</td>

                      <td>Thu, 04 Jul 1776 17:30:00 GMT</td>

                      <td>Thu, 4 Jul 1776 16:30:00 UTC</td>

                      <td>Mozilla uses GMT while MSIE uses UTC. MSIE
                      problem with Daylight Savings Time in old
                      dates</td>
                    </tr>

                    <tr>
                      <td>7/4/2004 12:30 PM</td>

                      <td>Sun, 04 Jul 2004 16:30:00 GMT</td>

                      <td>Sun, 4 Jul 2004 16:30:00 UTC</td>

                      <td>GMT vs UTC but otherwise the same.</td>
                    </tr>

                    <tr>
                      <td>12/25/2004 12:30 PM</td>

                      <td>Sat, 25 Dec 2004 17:30:00 GMT</td>

                      <td>Sat, 25 Dec 2004 17:30:00 UTC</td>

                      <td>ditto</td>
                    </tr>
                  </tbody>
                </table>
              </div>

              <div class="example">
                <pre id="Example_Date.prototype.toGMTString">
var date = new Date('7/4/1776 12:30 PM');
msg('date.toGMTString() == ' + date.toGMTString());

date = new Date('7/4/2004 12:30 PM');
msg('date.toGMTString() == ' + date.toGMTString());

date = new Date('12/25/2004 12:30 PM');
msg('date.toGMTString() == ' + date.toGMTString());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.toGMTString');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.toUTCString" id="Date.prototype.toUTCString"><code>Date.prototype.toUTCString()</code></a></dt>

            <dd>
              <div class="implnote">
                <p>Mozilla and MSIE disagree on Date string format and
                the effects of old dates on daylight savings time.</p>

                <table summary="Comparison of toUTCString output">
                  <thead>
                    <tr>
                      <th>Date</th>

                      <th>Mozilla toUTCString</th>

                      <th>MSIE toUTCString</th>

                      <th>Note</th>
                    </tr>
                  </thead>

                  <tbody>
                    <tr>
                      <td>7/4/1776 12:30 PM</td>

                      <td>Thu, 04 Jul 1776 17:30:00 GMT</td>

                      <td>Thu, 4 Jul 1776 16:30:00 UTC</td>

                      <td>Mozilla uses GMT while MSIE uses UTC. MSIE
                      problem with Daylight Savings Time in old
                      dates</td>
                    </tr>

                    <tr>
                      <td>7/4/2004 12:30 PM</td>

                      <td>Sun, 04 Jul 2004 16:30:00 GMT</td>

                      <td>Sun, 4 Jul 2004 16:30:00 UTC</td>

                      <td>GMT vs UTC but otherwise the same.</td>
                    </tr>

                    <tr>
                      <td>12/25/2004 12:30 PM</td>

                      <td>Sat, 25 Dec 2004 17:30:00 GMT</td>

                      <td>Sat, 25 Dec 2004 17:30:00 UTC</td>

                      <td>ditto</td>
                    </tr>
                  </tbody>
                </table>
              </div>

              <div class="example">
                <pre id="Example_Date.prototype.toUTCString">
var date = new Date('7/4/1776 12:30 PM');
msg('date.toUTCString() == ' + date.toUTCString());

date = new Date('7/4/2004 12:30 PM');
msg('date.toUTCString() == ' + date.toUTCString());

date = new Date('12/25/2004 12:30 PM');
msg('date.toUTCString() == ' + date.toUTCString());
</pre><script type="text/javascript">
//
generate_example('Example_Date.prototype.toUTCString');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.parse" id="Date.parse"><code>Date.parse(string)</code></a></dt>

            <dd>
              <p>Parses <var>string</var> and returns the corresponding
              time value in milliseconds. See <a href="#Date_value"><code>Date(<var>value</var>)</code></a> for
              more details on the format of the date string.</p>

              <div class="implnote">
                <p>Mozilla will accept invalid dates with the incorrect
                number of days in a month or months in a year however
                will return <code>NaN</code> in cases where the time
                value is inconsistent, for example when the time
                implies PM but the string contains AM.</p>

                <p>MSIE will accept invalid dates with the incorrect
                number of days in a month or months in a year or the
                time value is inconsistent with the AM/PM values.</p>
                <pre id="Example_Date_parse">
var s = '7/4/1776 12:30 PM';
var date = Date.parse(s);
msg('Date.parse(s) == ' + date + ', ' + 
    (isNaN(date)?'-':new Date(date)));

s = '1/1/1999 13:30 AM';
date = Date.parse(s);
msg('Date.parse(s) == ' + date + ', ' + 
    (isNaN(date)?'-':new Date(date)));

s = '2/29/2001';
date = Date.parse(s);
msg('Date.parse(s) == ' + date + ', ' + 
    (isNaN(date)?'-':new Date(date)));

s = '13/29/2001';
date = Date.parse(s);
msg('Date.parse(s) == ' + date + ', ' + 
    (isNaN(date)?'-':new Date(date)));
</pre><script type="text/javascript">
//
generate_example('Example_Date_parse');
//
</script>
              </div>
            </dd>

            <dt><a name="Date.prototype.UTC" id="Date.prototype.UTC"><code>Date.prototype.UTC(year, month[,
            day[, hours[, minutes[, seconds[, ms]]]]])</code></a></dt>

            <dd>
              <p>Returns a time value in milliseconds corresponding to
              the arguments. Unlike <a href="#Date_function">Date()</a>
              called as a function, the return value is not an instance
              of <code>Date</code> and the arguments use the UTC time
              zone.</p>
            </dd>
          </dl>
        </dd>

        <dt><a name="RegExp_Objects" id="RegExp_Objects">RegExp
        Objects</a></dt>

        <dd>
          <p><a href="http://en.wikipedia.org/wiki/Regular_expression">Regular
          Expressions</a> are a means of describing and processing
          patterns in text using a special pattern language called a
          regular expression language. In JavaScript, regular
          expressions are used to describe patterns in string values.
          If you have ever performed a directory listing using wild
          cards (<kbd>dir *.txt</kbd>) you have used a kind of regular
          expression. The actual language used to express the patterns
          depends upon the program. In JavaScript, regular expressions
          are patterned after those found in the Perl programming
          language.</p>

          <p>Regular Expressions can be created either using the
          <a href="#RegExp"><code>RegExp</code></a> constructor or by
          using regular expression literal expressions. A regular
          expression literal has the form
          <code>/<var>pattern</var>/<var>flags</var></code> where
          <var>pattern</var> is some sequence of characters and
          <var>flags</var> are a possibly empty combination of
          <code>g</code>, <code>i</code> or <code>m</code>. Without the
          flags, the regular expression will only find the first
          matching occurence in a string, will be case-sensitive and
          will not consider newline characters as special. If the
          global flag (<code>g</code>) is used, then the regular
          expression will find all matching occurences in the string.
          If the case-insensitive flag (<code>i</code>) is used, the
          regular expression will ignore case when performing matches.
          If the multiline flag (<code>m</code>) is used, the pattern
          <code>^</code> will match the beginning of any embedded line
          and <code>$</code> will match the end of any embedded
          line.</p>

          <p>Some examples of regular expression patterns are:</p>

          <dl>
            <dt><code>/foo/</code></dt>

            <dd>search for the first occurence of
            <code>foo</code>.</dd>

            <dt><code>/foo/g</code></dt>

            <dd>search for all occurences of <code>foo</code>.</dd>

            <dt><code>/foo/i</code></dt>

            <dd>search for the first occurence of <code>foo</code>
            ignoring the case of the letters.</dd>

            <dt><code>/foo$/m</code></dt>

            <dd>search for the first occurence of <code>foo</code>
            which is followed by a newline character or the end of the
            string.</dd>
          </dl>

          <dl>
            <dt><a name="Regular_Expression_Patterns" id="RegExp_matching_characters">Regular Expression
            Patterns</a></dt>

            <dd>
              <dl>
                <dt><a name="RegExp_Pattern_escape" title="Regular Expression Pattern: \" id="RegExp_Pattern_escape"><code>\</code></a></dt>

                <dd>
                  <p>The <em>backslash</em> character <code>\</code> is
                  used to <em>escape</em> characters by either removing
                  any special meaning they might otherwise have or to
                  change their meaning. For example, the letter
                  <code>v</code> can be used to represent the
                  <em>vertical tab</em> character by escaping it as
                  <code>\v</code>. Other characters which have special
                  meanings in a regular expression, such as
                  <code>$</code> which represents the end of a string,
                  can be escaped <code>\$</code> so that they lose
                  their special meaning and simply represent
                  themselves; in this case the dollar sign.</p>

                  <p>If you wish to match the literal <code>\</code>
                  character, you must escape it as <code>\\</code>.</p>
                </dd>
              </dl>

              <dl>
                <dt><a name="Boundary_Patterns" id="Boundary_Patterns" title="Regular Expression Patterns: Boundaries">Regular
                Expression Boundary Patterns</a></dt>

                <dd>
                  <p>Boundary patterns are special patterns which do
                  not match any actual text in a string, but instead
                  match a location. Note that boundary matches have
                  zero size.</p>

                  <dl>
                    <dt><a name="RegExp_Pattern_begin" title="Regular Expression Pattern: ^" id="RegExp_Pattern_begin"><code>^</code></a></dt>

                    <dd>
                      <p><code>^</code> is used to match the
                      <em>boundary</em> at the beginning of the string
                      which is being searched. If the
                      <em>multiline</em> flag is set, <code>^</code>
                      also matches the <em>boundary</em> after the
                      newline <code>\n</code> character in a string. If
                      you wish to match the literal character
                      <code>^</code> in a string, you must code it as
                      <code>\^</code> in the pattern.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_begin">
var string = 'this is one line\nThis is another Line';

/*
Without the multiline flag, ^ will only match the beginning of the input
*/

msg('/^this/.test(string) == ' + /^this/.test(string));
msg('/^This/.test(string) == ' + /^This/.test(string));

/*
With the multiline flag, ^ will match the beginning of any line
*/

msg('/^this/m.test(string) == ' + /^this/m.test(string));
msg('/^This/m.test(string) == ' + /^This/m.test(string));

</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_begin');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_end" title="Regular Expression Pattern: $" id="RegExp_Pattern_end"><code>$</code></a></dt>

                    <dd>
                      <p><code>$</code> is used to match the
                      <em>boundary</em> at the end of the string which
                      is being searched. If the <em>multiline</em> flag
                      is set, <code>$</code> also matches the
                      <em>boundary</em> before the newline character
                      <code>\n</code> in a string. If you wish to match
                      the literal character <code>$</code> in a string,
                      you must code it as <code>\$</code> in the
                      pattern.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_end">
var string = 'this is one line\nThis is another Line';

/*
Without the multiline flag, $ will only match the end of the input
*/

msg('/line$/.test(string) == ' + /line$/.test(string));
msg('/Line$/.test(string) == ' + /Line$/.test(string));

/*
With the multiline flag, $ will match the end of any line
*/

msg('/line$/m.test(string) == ' + /line$/m.test(string));
msg('/Line$/m.test(string) == ' + /Line$/m.test(string));

</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_end');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_word_boundary" title="Regular Expression Pattern: \b" id="RegExp_Pattern_word_boundary"><code>\b</code></a></dt>

                    <dd>
                      <p><code>\b</code> matches the boundary between
                      words where a word is defined as an identifier.
                      Note that boundaries have zero size.</p>

                      <p><code>\b</code> can be confusing since in
                      regular expression patterns it represents a word
                      boundary however in string values it represents
                      the backspace character.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_word_boundary">
var string = 'abc.def + 123';
var regexp = /\b/g; // match any boundary between words

msg('regexp.test(string) == ' + regexp.test(string));

msg('regexp.lastIndex == ' + regexp.lastIndex + ', ' +
    'RegExp.leftContext == ' + RegExp.leftContext + ', ' + 
    'RegExp.rightContext == ' + RegExp.rightContext);

msg('regexp.test(string) == ' + regexp.test(string));

msg('regexp.lastIndex == ' + regexp.lastIndex + ', ' +
    'RegExp.leftContext == ' + RegExp.leftContext + ', ' + 
    'RegExp.rightContext == ' + RegExp.rightContext);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_word_boundary');
//
</script>

                        <div class="implnote">
                          <p>Note that Mozilla returns the location of
                          the match in the <var>regexp</var>.lastIndex
                          for zero-width matches using <code>\b</code>
                          but that MSIE will return the location
                          following the match.</p>
                        </div>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_nonword_boundary" title="Regular Expression Pattern: \B" id="RegExp_Pattern_nonword_boundary"><code>\B</code></a></dt>

                    <dd>
                      <p><code>\B</code> matches a non-word boundary,
                      that is an artificial boundary inside of a
                      word.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_nonword_boundary">
var string = 'abc_def_123';
var regexp = /\B/g; // match a non-word boundary

msg('regexp.test(string) == ' + regexp.test(string));

msg('regexp.lastIndex == ' + regexp.lastIndex + ', ' +
    'RegExp.leftContext == ' + RegExp.leftContext + ', ' + 
    'RegExp.rightContext == ' + RegExp.rightContext);

msg('regexp.test(string) == ' + regexp.test(string));

msg('regexp.lastIndex == ' + regexp.lastIndex + ', ' +
    'RegExp.leftContext == ' + RegExp.leftContext + ', ' + 
    'RegExp.rightContext == ' + RegExp.rightContext);
</pre><!-- note that MSIE thinks RegExp_Patterns_slashB and
RegExp_Patterns_slashb are the same id. So in MSIE, id is not case
sensitive?
-->
                        <script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_nonword_boundary');
//
</script>

                        <div class="implnote">
                          <p>Note that Mozilla returns the location of
                          the match in the <var>regexp</var>.lastIndex
                          for zero-width matches using <code>\B</code>
                          but that MSIE will return the location
                          following the match.</p>
                        </div>
                      </div>
                    </dd>
                  </dl>
                </dd>

                <dt><a name="Character_Patterns" id="Character_Patterns">Regular Expression Character
                Patterns</a></dt>

                <dd>
                  <p>Character patterns are used to match specific
                  characters as well as classes of characters.</p>

                  <p>The characters <code>\</code> <code>^</code>
                  <code>$</code> <code>*</code> <code>+</code>
                  <code>?</code> <code>.</code> <code>(</code>
                  <code>)</code> <code>|</code> <code>{</code>
                  <code>}</code> <code>[</code> <code>]</code> have
                  special meanings in regular expression patterns. If
                  you wish to match a literal occurence of a special
                  character you must escape it using <code>\</code>.
                  Other characters can be written in a pattern
                  normally.</p>

                  <dl>
                    <dt><a name="RegExp_Pattern_any" title="Regular Expression Pattern: ." id="RegExp_Pattern_any"><code>.</code></a></dt>

                    <dd>
                      <p><code>.</code> matches any character except
                      the newline character.</p>
                    </dd>

                    <dt><a name="RegExp_Pattern_character_class" title="Regular Expression Pattern: [X-Y]" id="RegExp_Pattern_character_class"><code>[<var>class</var>]</code></a></dt>

                    <dd>
                      <p><code>[<var>class</var>]</code> describes a
                      <em>character class</em>. <var>class</var> is
                      composed of one or more pairs of characters
                      separated by the <code>-</code> and represent the
                      set of characters bounded by the pair. For
                      example, <code>[a-z]</code> represents the set of
                      characters
                      <code>abcdefhijklmnopqrstuvwxyz</code>.</p>

                      <p>The <code>^</code> character has a different
                      meaning inside of a character class. When
                      <code>^</code> occurs immediately following the
                      opening <code>[</code> of a character class, it
                      means that the class consists of all characters
                      which do not match the class. For example,
                      <code>[^a-z]</code> represents the set of
                      characters which are not lower case latin
                      letters. If <code>^</code> is not the first
                      character in a character class, it acts simply as
                      the character <code>^</code>.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_character_class">
var string = "abc^def";
var regexp;

regexp = /[a-z]+/;

msg('regexp.exec(string) == ' + regexp.exec(string));

regexp = /[^a-z]+/;

msg('regexp.exec(string) == ' + regexp.exec(string));

regexp = /[^^]+/;

msg('regexp.exec(string) == ' + regexp.exec(string));
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_character_class');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_backspace" title="Regular Expression Pattern: [\b]" id="RegExp_Pattern_backspace"><code>[\b]</code></a></dt>

                    <dd>
                      <p><code>[\b]</code> matches the backspace
                      character. Since <code>\b</code> is defined to
                      match the boundary between words, it can not be
                      used to match the back space character
                      <code>\b</code> in strings. Instead, a
                      <em>hack</em> is used by writing the backspace
                      character as a <em>character class</em> using
                      <code>[]</code>.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_backspace">
var string = 'this has a backspace character: \b';
var regexp = /[\b]/;

msg('regexp.test(string) == ' + regexp.test(string));
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_backspace');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_control_character" title="Regular Expression Pattern: \cC" id="RegExp_Pattern_control_character"><code>\c<var>C</var></code></a></dt>

                    <dd>
                      <p><code>\c<var>C</var></code> matches the
                      control character <em>control</em>
                      <var>C</var>.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_control_char">
var string = '\x01\x02\x03\x04\x05';
var regexp = /\cA/g;

msg('regexp.test(string) == ' + regexp.test(string));

msg('regexp.lastIndex == ' + regexp.lastIndex + ', ' +
    'RegExp.leftContext == ' + RegExp.leftContext + ', ' + 
    'RegExp.rightContext == ' + RegExp.rightContext);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_control_char');
//
</script>

                        <div class="implnote">
                          <p>Mozilla fails to match a control character
                          while MSIE succeeds.</p>
                        </div>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_digit" title="Regular Expresion Pattern: \d" id="RegExp_Pattern_digit"><code>\d</code></a></dt>

                    <dd>
                      <p>Matches a digit 0, 1, 2, 3, 4, 5, 6, 7, 8 or
                      9</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_digit">
var string = 'abc123def';
var regexp = /\d/g;

msg('regexp.test(string) == ' + regexp.test(string));

msg('regexp.lastIndex == ' + regexp.lastIndex + ', ' +
    'RegExp.leftContext == ' + RegExp.leftContext + ', ' + 
    'RegExp.rightContext == ' + RegExp.rightContext);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_digit');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_non_digit" title="Regular Expression Pattern: \D" id="RegExp_Pattern_non_digit"><code>\D</code></a></dt>

                    <dd>
                      <p>Matches a non-digit.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_nondigit">
var string = 'abc123def';
var regexp = /\D/g;

msg('regexp.test(string) == ' + regexp.test(string));

msg('regexp.lastIndex == ' + regexp.lastIndex + ', ' +
    'RegExp.leftContext == ' + RegExp.leftContext + ', ' + 
    'RegExp.rightContext == ' + RegExp.rightContext);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_nondigit');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_formfeed" title="Regular Expression Pattern: \f" id="RegExp_Pattern_formfeed"><code>\f</code></a></dt>

                    <dd>
                      <p>Matches a form feed character.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_formfeed">
var string = 'abc\fdef';
var regexp = /\f/g;

msg('regexp.test(string) == ' + regexp.test(string));

msg('regexp.lastIndex == ' + regexp.lastIndex + ', ' +
    'RegExp.leftContext == ' + RegExp.leftContext + ', ' + 
    'RegExp.rightContext == ' + RegExp.rightContext);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_formfeed');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_newline" title="Regular Expression Pattern: \n" id="RegExp_Pattern_newline"><code>\n</code></a></dt>

                    <dd>
                      <p>Matches a newline character.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_newline">
var string = 'abc\ndef';
var regexp = /\n/g;

msg('regexp.test(string) == ' + regexp.test(string));

msg('regexp.lastIndex == ' + regexp.lastIndex + ', ' +
    'RegExp.leftContext == ' + RegExp.leftContext + ', ' + 
    'RegExp.rightContext == ' + RegExp.rightContext);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_newline');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_carriage_return" title="Regular Expression Pattern: \r" id="RegExp_Pattern_carriage_return"><code>\r</code></a></dt>

                    <dd>
                      <p>Matches a carriage return character.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_carriagereturn">
var string = 'abc\rdef';
var regexp = /\r/g;

msg('regexp.test(string) == ' + regexp.test(string));

msg('regexp.lastIndex == ' + regexp.lastIndex + ', ' +
    'RegExp.leftContext == ' + RegExp.leftContext + ', ' + 
    'RegExp.rightContext == ' + RegExp.rightContext);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_carriagereturn');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_whitespace" title="Regular Expression Pattern: \s" id="RegExp_Pattern_whitespace"><code>\s</code></a></dt>

                    <dd>
                      <p>Matches a <em>whitespace</em> character. In
                      JavaScript, whitespace characters are the space,
                      tab, form feed, vertical form feed, newline,
                      carriage return, and \u00A0, \u2028 and
                      \u2029.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_whitespace">
var whitespacechars = [' ',  '\t', '\f', 
                       String.fromCharCode(11), 
                       '\n', '\r', 
                       '\u00A0', '\u2028', '\u2029'];
var whitespacenames = [' ',  '\\t', '\\f', '\\v', '\\n', '\\r', 
                       '\\u00A0', '\\u2028', '\\u2029'];

var regexp = /\s/;

for (var i = 0; i &lt; whitespacechars.length; i++)
{
  var string = whitespacechars[i];
  var name = whitespacenames[i];

  msg('/\\s/.test("' + name + '") == ' + regexp.test(string));

  msg('regexp.lastIndex == ' + regexp.lastIndex + ', ' +
      'RegExp.leftContext == ' + RegExp.leftContext + ', ' + 
      'RegExp.rightContext == ' + RegExp.rightContext);
}
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_whitespace');
//
</script>
                      </div>

                      <div class="implnote">
                        <p>Note MSIE does not recognize <code>\v</code>
                        as the vertical form feed character in strings
                        however does recognize it in regular expression
                        patterns. MSIE does not recognize no break
                        space \u00A0, or the unicode line separator
                        \u2028 or the unicode paragraph separator
                        \u2029 as whitespace characters.</p>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_non_whitespace" title="Regular Expression Pattern: \S" id="RegExp_Pattern_non_whitespace"><code>\S</code></a></dt>

                    <dd>
                      <p>Matches any non-whitespace character.</p>

                      <div class="implnote">
                        <p>MSIE will incorrectly match no break space
                        \u00A0, or the unicode line separator \u2028 or
                        the unicode paragraph separator \u2029 as
                        non-whitespace characters.</p>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_tab" title="Regular Expression Pattern: \t" id="RegExp_Pattern_tab"><code>\t</code></a></dt>

                    <dd>
                      <p>Matches a tab.</p>
                    </dd>

                    <dt><a name="RegExp_Pattern_vertical_tab" title="Regular Expression Pattern: \v" id="RegExp_Pattern_vertical_tab"><code>\v</code></a></dt>

                    <dd>
                      <p>Matches the vertical tab character.</p>

                      <div class="implnote">
                        <p>MSIE does support <code>\v</code> in regular
                        expression patterns but does not support
                        <code>\v</code> in string literals. You must
                        code <code>\v</code> in strings as
                        <code>String.fromCharCode(11)</code> in
                        MSIE.</p>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_word" title="Regular Expression Pattern: \w" id="RegExp_Pattern_word"><code>\w</code></a></dt>

                    <dd>
                      <p>Matches any <em>word</em> character consisting
                      of a letter, number, underscore or digit.</p>
                    </dd>

                    <dt><a name="RegExp_Pattern_non_word" title="Regular Expression Pattern: \W" id="RegExp_Pattern_non_word"><code>\W</code></a></dt>

                    <dd>
                      <p>Matches any non-word character.</p>
                    </dd>

                    <dt><a name="RegExp_Pattern_null" title="Regular Expression Pattern: \0" id="RegExp_Pattern_null"><code>\0</code></a></dt>

                    <dd>
                      <p>Matches the <code>NUL</code> character.</p>
                    </dd>

                    <dt><a name="RegExp_Pattern_hex" title="Regular Expression Pattern: \xHH" id="RegExp_Pattern_hex"><code>\x<var>HH</var></code></a></dt>

                    <dd>
                      <p>Matches the character whose hexadecimal
                      character code is <code>0x<var>HH</var></code>.
                      where <var>H</var> is a hexadecimal digit.</p>
                    </dd>

                    <dt><a name="RegExp_Pattern_unicode" title="Regular Expression Pattern: \uHHHH" id="RegExp_Pattern_unicode"><code>\u<var>HHHH</var></code></a></dt>

                    <dd>
                      <p>Matches the character whose unicode character
                      code is <code>\u<var>HHHH</var></code>. where
                      <var>H</var> is a hexadecimal digit.</p>
                    </dd>
                  </dl>
                </dd>

                <dt><a name="Quantifying_Patterns" id="Quantifying_Patterns">Regular Expression Quantifying
                Patterns</a></dt>

                <dd>
                  <dl>
                    <dt><a name="RegExp_Pattern_zero_more" title="Regular Expression Pattern: X*" id="RegExp_Pattern_zero_more"><code><var>X</var>*</code></a></dt>

                    <dd>
                      <p>Matches zero or more occurences of the regular
                      expression <var>X</var>. <code>*</code> is the
                      same as <code>{0,}</code>. <code>*</code> by
                      itself is <em>greedy</em> which means it will
                      match as many characters in the input as
                      possible. If modified via the <code>?</code>, it
                      becomes <em>non-greedy</em> meaning it will match
                      as few characters as possible.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_star">
var regexp;
var string = 'aabbbcccdddd';

// match zero or more a characters greedily
// which will match the leading aa
regexp = /a*/;
msg('regexp.test(string) == ' + regexp.test(string));
msg('RegExp.lastMatch == ' + RegExp.lastMatch);

// match zero or more a characters non-greedily
// which will match the empty string before the leading aa
regexp = /a*?/;
msg('regexp.test(string) == ' + regexp.test(string));
msg('RegExp.lastMatch == ' + RegExp.lastMatch);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_star');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_one_more" title="Regular Expression Pattern: X+" id="RegExp_Pattern_one_more"><code><var>X</var>+</code></a></dt>

                    <dd>
                      <p>Matches one or more occurences of the regular
                      expression <var>X</var>. <code>+</code> is the
                      same as <code>{1,}</code>. <code>+</code> by
                      itself is <em>greedy</em> which means it will
                      match as many characters in the input as
                      possible. If modified via the <code>?</code>, it
                      becomes <em>non-greedy</em> meaning it will match
                      as few characters as possible.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_plus">
var regexp;
var string = 'aabbbcccdddd';

// match one or more a characters greedily
// which will match the leading aa
regexp = /a+/;
msg('regexp.test(string) == ' + regexp.test(string));
msg('RegExp.lastMatch == ' + RegExp.lastMatch);

// match one or more a characters non-greedily
// which will match the leading a
regexp = /a+?/;
msg('regexp.test(string) == ' + regexp.test(string));
msg('RegExp.lastMatch == ' + RegExp.lastMatch);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_plus');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_zero_one" title="Regular Expression Pattern: X?" id="RegExp_Pattern_zero_one"><code><var>X</var>?</code></a></dt>

                    <dd>
                      <p>Matches zero or one occurences of the regular
                      expression <var>X</var>. <code>?</code> is the
                      same as <code>{0,1}</code>. <code>?</code>
                      modifies a <em>greedy</em> quantifier into a
                      non-greedy one. characters as possible.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_question">
var regexp;
var string = 'aabbbcccdddd';

// match zero or one a characters greedily
// which will match the leading a
regexp = /a?/;
msg('regexp.test(string) == ' + regexp.test(string));
msg('RegExp.lastMatch == ' + RegExp.lastMatch);

// match zero or one a characters non-greedily
// which will match the leading empty string
regexp = /a??/;
msg('regexp.test(string) == ' + regexp.test(string));
msg('RegExp.lastMatch == ' + RegExp.lastMatch);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_question');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_N" title="Regular Expression Pattern {N}" id="RegExp_Pattern_N"><code>{<var>N</var>}</code></a></dt>

                    <dd>
                      <p>Matches exactly <var>N</var> occurences of the
                      previous item.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_N">
var regexp;
var string = 'aabbbcccdddd';

// match exactly 2 characters 
// which will match the aa
regexp = /a{2,}/;
msg('regexp.test(string) == ' + regexp.test(string));
msg('RegExp.lastMatch == ' + RegExp.lastMatch);

// match exactly two characters non-greedily
// which will match the same as the greedy expression
regexp = /a{2,}?/;
msg('regexp.test(string) == ' + regexp.test(string));
msg('RegExp.lastMatch == ' + RegExp.lastMatch);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_N');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RexExp_Pattern_one_more" title="Regular Expression Pattern: {N,}" id="RexExp_Pattern_one_more"><code>{<var>N</var>,}</code></a></dt>

                    <dd>
                      <p>Matches at least <var>N</var> occurences of
                      the previous items. <code>{N,}</code> by itself
                      is <em>greedy</em> which means it will match as
                      many characters in the input as possible. If
                      modified via the <code>?</code>, it becomes
                      <em>non-greedy</em> meaning it will match as few
                      characters as possible.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_N_more">
var regexp;
var string = 'aabbbcccdddd';

// match one or more a characters greedily
// which will match the leading a
regexp = /a{1,}/;
msg('regexp.test(string) == ' + regexp.test(string));
msg('RegExp.lastMatch == ' + RegExp.lastMatch);

// match one or more a characters non-greedily
// which will match the leading a
regexp = /a{1,}?/;
msg('regexp.test(string) == ' + regexp.test(string));
msg('RegExp.lastMatch == ' + RegExp.lastMatch);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_N_more');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_N_M" title="Regular Expression Pattern: {N,M}" id="RegExp_Pattern_N_M"><code>{<var>N</var>,
                    <var>M</var>}</code></a></dt>

                    <dd>
                      <p>Matches from <var>N</var> to <var>M</var>
                      occurences of the previous item.
                      <code>{<var>N</var>,<var>M</var>}</code> by
                      itself is <em>greedy</em> which means it will
                      match as many characters in the input as
                      possible. If modified via the <code>?</code>, it
                      becomes <em>non-greedy</em> meaning it will match
                      as few characters as possible.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_N_M">
var regexp;
var string = 'aabbbcccdddd';

// match 2 to 3 b characters greedily
// which will match the leading all three b characters
regexp = /b{2,3}/;
msg('regexp.test(string) == ' + regexp.test(string));
msg('RegExp.lastMatch == ' + RegExp.lastMatch);

// match 2 to 3 b characters non-greedily
// which will match the first two b characters
regexp = /b{2,3}?/;
msg('regexp.test(string) == ' + regexp.test(string));
msg('RegExp.lastMatch == ' + RegExp.lastMatch);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_N_M');
//
</script>
                      </div>
                    </dd>
                  </dl>
                </dd>

                <dt><a name="Logical_Patterns" id="Logical_Patterns">Regular Expression Logical
                Patterns</a></dt>

                <dd>
                  <dl>
                    <dt><a name="RegExp_Pattern_and" title="Regular Expression Pattern: XY" id="RegExp_Pattern_and"><code><var>X</var><var>Y</var></code></a></dt>

                    <dd>
                      <p><code><var>X</var><var>Y</var></code> matches
                      regular expression <var>X</var> followed by the
                      match for regular expression <var>Y</var>.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_and">
var regexp = /XY/;

msg('regexp.exec("XY") == ' + regexp.exec("XY"));
msg('regexp.exec("XZ") == ' + regexp.exec("XZ"));
msg('regexp.exec("ZY") == ' + regexp.exec("ZY"));
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_and');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_or" title="Regular Expression Pattern: X|Y" id="RegExp_Pattern_or"><code><var>X</var>|<var>Y</var></code></a></dt>

                    <dd>
                      <p><code><var>X</var>|<var>Y</var></code> matches
                      regular expression <var>X</var> or regular
                      expression <var>Y</var>.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_or">
var regexp = /X|Y/;

msg('regexp.exec("XY") == ' + regexp.exec("XY"));
msg('regexp.exec("XZ") == ' + regexp.exec("XZ"));
msg('regexp.exec("ZY") == ' + regexp.exec("ZY"));
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_or');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_lookahead" title="Regular Expression Pattern: X(?=Y)" id="RegExp_Pattern_lookahead"><code><var>X</var>(?=
                    <var>Y</var>)</code></a></dt>

                    <dd>
                      <p><code><var>X</var>(?=<var>Y</var>)</code>
                      matches regular expression <var>X</var> if it is
                      followed by a match for regular expression
                      <var>Y</var>. This is called a <em>lookahead</em>
                      pattern.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_lookahead">
var regexp = /X(?=Y)/;

msg('regexp.exec("XY") == ' + regexp.exec("XY"));
msg('regexp.exec("XZ") == ' + regexp.exec("XZ"));
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_lookahead');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_not_lookahead" title="Regular Expression Pattern: X(?!Y)" id="RegExp_Pattern_not_lookahead"><code><var>X</var>(?!
                    <var>Y</var>)</code></a></dt>

                    <dd>
                      <p><code><var>X</var>(?!<var>Y</var>)</code>
                      matches regular expression <var>X</var> if it is
                      <strong>not</strong> followed by a match for
                      regular expression <var>Y</var>. This is called a
                      negative <em>lookahead</em> pattern.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_negative_lookahead">
var regexp = /X(?!Y)/;

msg('regexp.exec("XY") == ' + regexp.exec("XY"));
msg('regexp.exec("XZ") == ' + regexp.exec("XZ"));
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_negative_lookahead');
//
</script>
                      </div>
                    </dd>
                  </dl>
                </dd>

                <dt><a name="Grouping_Patterns" id="Grouping_Patterns">Regular Expression Grouping
                Patterns</a></dt>

                <dd>
                  <dl>
                    <dt><a name="RegExp_Pattern_capturing" title="Regular Expression Pattern: (X)" id="RegExp_Pattern_capturing"><code>(<var>X</var>)</code></a></dt>

                    <dd>
                      <p><code>(<var>X</var>)</code> matches the same
                      pattern as the regular expression <var>X</var>
                      alone but introduces the concept of <em>capturing
                      parentheses</em>. Matching pairs of parentheses
                      <code>()</code> are used in regular expressions
                      to group parts of a regular expression into a
                      single unit which can treated as a single
                      pattern. Parentheses <em>capture</em> the matches
                      into a <em>captures</em> array which can be used
                      to retrieve sub matches. If no matches are found,
                      the <em>captures</em> array is <code>null</code>.
                      See <a href="#Regular_Expressions_Capturing_array">Capture
                      Arrays</a>.</p>
                    </dd>

                    <dt><a name="RegExp_Pattern_non_capturing" title="Regular Expression Pattern: (?:X)" id="RegExp_Pattern_non_capturing"><code>(?:<var>X</var>)</code></a></dt>

                    <dd>
                      <p><code>(?:<var>X</var>)</code> matches the same
                      pattern as regular expression <var>X</var> but
                      does not create an entry in the captures array.
                      These non-capturing parentheses are useful when
                      it is necessary to group items together in the
                      regular expression but you do not wish to record
                      the submatch in the capturing array.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_noncapturing">
// modify Array.prototype.toString to 
// wrap strings in quotes and to show undefined values
Array.prototype.toString = function()
{
  var s = '';
  for (var i = 0; i &lt; this.length; i++)
  {
    if (s)
    {
      s += ',';
    }
    switch (typeof this[i])
    {
      case 'string':
        s += "'" + this[i] + "'";
        break;
      case 'undefined':
        s += 'undefined';
        break;
      default:
        s += this[i];
        break;
    }
  }
  return s;
}

var regexp = /((?:a)|(?:ab))((?:c)|(?:bc))/;

msg('regexp.exec("abc") == ' + regexp.exec("abc"));
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_noncapturing');
//
</script>
                      </div>
                    </dd>

                    <dt><a name="RegExp_Pattern_backreference" title="Regular Expression Pattern: \N" id="RegExp_Pattern_backreference"><code>\<var>N</var></code></a></dt>

                    <dd>
                      <p>When <var>N</var> is a positive integer,
                      <code>\<var>N</var></code> is a <em>back
                      reference</em> to the <var>N</var><sup>th</sup>
                      matching capturing parentheses match.</p>

                      <p>Back references are particularly useful for
                      matching pairs of strings such as the start and
                      end tags of markup.</p>

                      <div class="example">
                        <pre id="Example_RegExp_Patterns_backreference">
var string = '&lt;tag&gt;content&lt;/tag&gt;'
var regexp = /&lt;(\w+)&gt;(.*)&lt;\/\1&gt;/;

msg('regexp.test(string) == ' + regexp.test(string));
msg('tag name == ' + RegExp.$1 + ', contents == ' + RegExp.$2);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_backreference');
//
</script>
                      </div>
                    </dd>
                  </dl>
                </dd>
              </dl>
            </dd>
          </dl>

          <dl>
            <dt><a name="RegExp" id="RegExp"><code>RegExp(<var>pattern</var>[,
            <var>flags</var>])</code></a></dt>

            <dd>
              <p>If the <code>RegExp(<var>pattern</var>)</code>
              constructor is called (without the <var>flags</var>
              argument), and <var>pattern</var> is an instance of
              <code>RegExp</code>, then it returns the instance
              unchanged. Otherwise, the function call creates a new
              instance of <code>RegExp</code> and returns the
              result.</p>

              <p>When creating an instance of a <code>RegExp</code>
              using the <code>new</code> operator</p>
              <pre>
<code><var>regexp</var> = new RegExp(<var>pattern</var>, <var>flags</var>)</code>
</pre>

              <ul>
                <li>If <var>pattern</var> is a <code>RegExp</code> and
                <var>flags</var> is defined, then a
                <code>TypeError</code> will be thrown.</li>

                <li>If <var>pattern</var> is <code>undefined</code>,
                <var>pattern</var> is treated as the empty string
                otherwise <var>pattern</var> is converted to a
                string.</li>

                <li>If <var>flags</var> is <code>undefined</code>,
                <var>flags</var> is treated as the empty string
                otherwise <var>flags</var> is converted to a
                string.</li>
              </ul>

              <p>If <var>pattern</var> is not a string representing a
              regular expression, or if <var>flags</var> contains
              characters other than <code>g m i</code> or if
              <var>flags</var> has repeated characters, a
              <code>SyntaxError</code> is thrown.</p>

              <p><code><var>regexp</var>.global</code> is set to
              <code>true</code> if <var>flags</var> contains
              <code>g</code> otherwise <code>false</code>.</p>

              <p><code><var>regexp</var>.ignoreCase</code> is set to
              <code>true</code> if <var>flags</var> contains
              <code>i</code> otherwise <code>false</code>.</p>

              <p><code><var>regexp</var>.global</code> is set to
              <code>true</code> if <var>flags</var> contains
              <code>g</code> otherwise <code>false</code>.</p>

              <p><code>RegExp</code> has property attribute
              <em>{DontEnum}</em> which means it does not appear in
              <code>for-in</code> loops, can be deleted and can be the
              target of an assignment.</p>

              <div class="implnote">
                <p>Mozilla adds the <em>{DontDelete}</em> property
                attribute which means Mozilla will not delete it.</p>
              </div>

              <div class="example">
                <pre id="Example_RegExp_property_attributes_dontdelete">
// attempt to delete RegExp
msg('Before delete: typeof RegExp == ' + typeof RegExp);
msg('(delete RegExp) == ' + (delete RegExp));
msg('After delete: typeof RegExp == ' + typeof RegExp);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_property_attributes_dontdelete');
//
</script>
              </div>

              <div class="example">
                <pre id="Example_RegExp_property_attributes_readonly">
// attempt to assign to RegExp
RegExp = 'foo';
msg('After RegExp = \'foo\': RegExp == ' + RegExp);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_property_attributes_readonly');
//
</script>
              </div>
            </dd>

            <dt><a name="RegExp.prototype" id="RegExp.prototype"><code>RegExp.prototype</code></a></dt>

            <dd>
              <p><code>RegExp.prototype</code> has property attributes
              <em>{DontEnum}</em>, <em>{DontDelete}</em> and
              <em>{ReadOnly}</em> which means it will not appear in
              <code>for-in</code> loops, can not be deleted and can not
              be changed by assignment although its properties
              <em>may</em> be modified.</p>
            </dd>

            <dt><a name="RegExp.prototype.constructor" id="RegExp.prototype.constructor"><code>RegExp.prototype.constructor</code></a></dt>

            <dd>
              <p>Returns a reference to the <code>RegExp</code>
              constructor.</p>
            </dd>

            <dt><a name="RegExp.prototype.exec" id="RegExp.prototype.exec"><code>RegExp.prototype.exec(string)</code></a></dt>

            <dd>
              <p>Performs a regular expression match on the
              <var>string</var> argument returning a capturing array
              containing the results of the match or <code>null</code>
              if there was no match.</p>

              <div class="example">
                <pre id="Example_RegExp.prototype.exec">
var regexp;
var string = 'abc';
var result;

msg('exec returns null when no match is found');
regexp = /nomatch/;
result = regexp.exec(string);
msg('result == ' + result);

msg('exec returns a captures array when matches are found');
regexp = /abc/;
result = regexp.exec(string);
msg('result == ' + result);
msg('result instanceof Array: ' + (result instanceof Array));
msg('result.length == ' + result.length);

msg('exec returns submatches in the captures array ' +
    'when capturing parentheses appear in the ' + 
    'regular expression');
regexp = /(a)/;
result = regexp.exec(string);
msg('result == ' + result);
msg('result instanceof Array: ' + (result instanceof Array));
msg('result.length == ' + result.length);

</pre><script type="text/javascript">
//
generate_example('Example_RegExp.prototype.exec');
//
</script>
              </div>

              <p><strong><a name="Regular_Expressions_Capturing_array" title="Regular Expressions: Capture Arrays" id="Regular_Expressions_Capturing_array">Capture
              Arrays</a></strong></p>

              <p>Consider the following regular expression:</p>
              <pre>
<code>/((a)|(ab))((c)|(bc))/</code>
</pre>

              <p>The matches are placed into the captures array
              according to the position of the left parenthesis
              containing the sub patterns. To illustrate this example,
              let <var>captures</var> represent the captures array
              returned from a call to
              <code>RegExp.prototype.exec()</code> and number the
              capturing left parentheses in the regular expression from
              the left starting at <code>1</code> as follows:</p>
              <pre>
<code>/(1 (2 a)|(3 ab)) (4 (5 c)|(6 bc))/</code>
</pre>

              <ol start="0">
                <li>The <code><var>captures</var>[0]</code> item will
                contain the substring which matched the entire
                pattern.</li>

                <li>The <code><var>captures</var>[1]</code> item will
                contain the characters matching the capturing
                parenthesis labelled <code>1</code>. It will contain
                the leading characters matching either <code>a</code>
                or <code>ab</code> or <code>undefined</code> if there
                was no match.</li>

                <li>The <code><var>captures</var>[2]</code> item will
                contain the characters matching the capturing
                parenthesis labelled <code>2</code>. It will contain
                the leading characters matching <code>a</code> or
                <code>undefined</code> if there was no match.</li>

                <li>The <code><var>captures</var>[3]</code> item will
                contain the characters matching the capturing
                parenthesis labelled <code>3</code>. It will contain
                the leading characters matching <code>ab</code> or
                <code>undefined</code> if there was no match.</li>

                <li>The <code><var>captures[4]</var></code> item will
                contain the characters matching the capturing
                parenthesis labelled <code>4</code>. It will contain
                the characters matching either <code>c</code> or
                <code>bc</code> which follow the characters which
                matched parenthesis <code>1</code> or
                <code>undefined</code> if there is no match.</li>

                <li>The <code><var>captures</var>[5]</code> item will
                contain the characters matching the capturing
                parenthesis labelled <code>5</code>. It will contain
                the <code>c</code> which follows the characters which
                matched parenthesis <code>1</code> or
                <code>undefined</code> if there is no match.</li>

                <li>The <code><var>captures</var>[6]</code> item will
                contain the characters matching the capturing
                parenthesis labelled <code>6</code>. It will contain
                the characters matching <code>bc</code> which follows
                the characters which matched parenthesis <code>1</code>
                or <code>undefined</code> if there is no match.</li>
              </ol>

              <div class="example">
                <pre id="Example_RegExp_Patterns_capturing">
// modify Array.prototype.toString to 
// wrap strings in quotes and to show undefined values
Array.prototype.toString = function()
{
  var s = '';
  for (var i = 0; i &lt; this.length; i++)
  {
    if (s)
    {
      s += ',';
    }
    switch (typeof this[i])
    {
      case 'string':
        s += "'" + this[i] + "'";
        break;
      case 'undefined':
        s += 'undefined';
        break;
      default:
        s += this[i];
        break;
    }
  }
  return '[' + s + ']';
}

var regexp = /((a)|(ab))((c)|(bc))/;

msg('regexp.exec("abc") == ' + regexp.exec("abc"));
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Patterns_capturing');
//
</script>

                <div class="implnote">
                  <pre>
Mozilla: ['abc','a','a',undefined,'bc',undefined,'bc']
</pre>
                  <pre>
MSIE:    ['abc','a','a','',       'bc','',       'bc']
</pre>

                  <p>Note that Mozilla correctly returns
                  <code>undefined</code> for capturing parentheses
                  which were not matched, however MSIE incorrectly
                  returns the empty string <code>''</code> instead.</p>
                </div>
              </div>

              <div class="implnote">
                MSIE only

                <p>MSIE adds a property <code>lastIndex</code> to the
                captures array.
                <code><var>captures</var>.lastIndex</code> returns the
                next position in the string following the match.</p>

                <div class="example">
                  <pre id="Example_RegExp_Pattern_capturing_lastIndex">
var regexp = /a/;
var string = 'dcba';
var result = regexp.exec(string);
msg('result.lastIndex == ' + result.lastIndex);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_Pattern_capturing_lastIndex');
//
</script>
                </div>
              </div>

              <div class="example">
                <p>The <a href="ecma-262">ECMAScript Standard</a>
                provides a number of illustrative examples which can
                help in understanding how regular expressions work and
                how capture arrays are populated.</p>
                <pre id="Example_RegExp.prototype.exec_ecma262">
/*
 * examples from the ecma 262 3rd edition 
 */
// modify Array.prototype.toString to 
// wrap strings in quotes and to show undefined values
Array.prototype.toString = function()
{
  var s = '';
  for (var i = 0; i &lt; this.length; i++)
  {
    if (s)
    {
      s += ',';
    }
    switch (typeof this[i])
    {
      case 'string':
        s += "'" + this[i] + "'";
        break;
      case 'undefined':
        s += 'undefined';
        break;
      default:
        s += this[i];
        break;
    }
  }
  return '[' + s + ']';
}

function test(regexp, string, expected)
{
  var result = regexp.exec(string);

  msg(
  'Test ' + ((result.toString() == expected) ? 
              'Passed' : 
              'Failed') + ' : ' +
   regexp + '.exec("' + string + '")'
   );  

  msg('e == ' + expected);
  msg('r == ' + result);
  msg('&lt;br&gt;');

}

msg('ECMA 262 3rd Section 15.10.2.3 Disjunction&lt;br&gt;');

test(/a|ab/, 
     'abc', 
     ['a']); 

// MSIE returns empty strings instead of undefined
test(/((a)|(ab))((c)|(bc))/, 
     'abc', 
     ['abc', 'a', 'a', undefined, 'bc', undefined, 'bc']);

msg('ECMA 262 3rd Section 15.10.2.5 Term&lt;br&gt;');

test(/a[a-z]{2,4}/, 
     'abcdefghi', 
     ['abcde']);

test(/a[a-z]{2,4}?/,
     'abcdefghi',
     ['abc']);

test(/(aa|aabaac|ba|b|c)*/,
     'aabaac',
     ['aaba', 'ba']);

// MSIE fails Step 4 of Repeat Matcher 
// to clear the Atom's captures each time Atom is repeated.
test(/(z)((a+)?(b+)?(c))*/,
     'zaacbbbcac',
     ['zaacbbbcac', 'z', 'ac', 'a', undefined, 'c']);

// MSIE returns empty strings instead of undefined
test(/(a*)*/,
     'b',
     ['', undefined]);

test(/(a*)b\1+/,
     'baaaac',
     ['b', '']);

msg('ECMA 262 3rd Section 15.10.2.8 Atom&lt;br&gt;');

test(/(?=(a+))/,
    'baaabac',
    ['', 'aaa']);

test(/(?=(a+))a*b\1/,
     'baaabac',
     ['aba', 'a']);

test(/(.*?)a(?!(a+)b\2c)\2(.*)/,
     'baaabaac',
     ['baaabaac', 'ba', undefined, 'abaac']);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp.prototype.exec_ecma262');
//
</script>

                <div class="implnote">
                  MSIE differences

                  <p>MSIE fails to record <code>undefined</code> in the
                  capturing array and instead uses the empty string
                  <code>''</code>.</p>

                  <p>MSIE fails
                  <code>(z)((a+)?(b+)?(c))*/.exec("zaacbbbcac")</code>
                  since it appears to not follow the ECMA 262 standard
                  and does not clear the captures array of an atom each
                  time it is repeated.</p>
                </div>
              </div>
            </dd>

            <dt><a name="RegExp.prototype.test" id="RegExp.prototype.test"><code>RegExp.prototype.test(string)</code></a></dt>

            <dd>
              <p>Performs a regular expression match on the
              <var>string</var> argument returning <code>true</code> if
              a match was found or <code>false</code> if none
              found.</p>

              <div class="example">
                <pre id="Example_RegExp.prototype.test">
msg('/foo/.test("This is foo bar!") == ' + 
     /foo/.test("This is foo bar!"));
</pre><script type="text/javascript">
//
generate_example('Example_RegExp.prototype.test');
//
</script>
              </div>
            </dd>

            <dt><a name="RegExp.prototype.toString" id="RegExp.prototype.toString"><code>RegExp.prototype.toString()</code></a></dt>

            <dd>
              <p>Returns a string representing the source of the
              regular expression.</p>

              <div class="example">
                <pre id="Example_RegExp.prototype.toString">
var regexp;

// test empty regular expression
regexp = new RegExp();
msg('regexp.toString() == ' + regexp.toString());

// test a regular expression with flags
regexp = new RegExp('foo', 'mig');
msg('regexp.toString() == ' + regexp.toString());
</pre><script type="text/javascript">
//
generate_example('Example_RegExp.prototype.toString');
//
</script>

                <div class="implnote">
                  regexp.toString() and empty regular expressions

                  <p>Mozilla correctly returns <code>/(?:)/</code> for
                  an empty regular expression.</p>

                  <p>MSIE incorrectly returns <code>//</code> for an
                  empty regular expression which is problem since
                  <code>//</code> begins a JavaScript line comment.</p>
                </div>

                <div class="implnote">
                  regexp.toString() and flags

                  <p>Note that for regular expresison
                  <code>/foo/mig</code>, Mozilla returns
                  <code>/foo/gim</code> with the flags in
                  <code>gim</code> order while MSIE returns
                  <code>/foo/igm</code> with the flags in
                  <code>igm</code> order.</p>
                </div>
              </div>
            </dd>

            <dt><a name="RegExp.index" id="RegExp.index"><code>RegExp.index</code></a></dt>

            <dd>
              <div class="implnote">
                MSIE only

                <p>read only property that returns index in string of
                last match.</p>

                <div class="example">
                  <pre id="Example_RegExp_index">
msg('typeof RegExp.index == ' + typeof RegExp.index);
msg('RegExp.index == ' + RegExp.index);

msg('"foobar".match(/bar/) == ' + "foobar".match(/bar/));
msg('RegExp.index == ' + RegExp.index);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_index');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="RegExp.input" id="RegExp.input"><code>RegExp.input,
            RegExp.$_</code></a></dt>

            <dd>
              <div class="implnote">
                Non-Standard, but supported by Mozilla and MSIE

                <p><code>RegExp.input</code> is a non-standard property
                of the <code>RegExp</code> constructor. <code>$_</code>
                is a synonym for <code>input</code>.</p>

                <p>Mozilla and MSIE both will set the value of
                <code>RegExp.input</code> to the string value last
                searched by a regular expression.</p>

                <p>Mozilla also allows <code>RegExp.input</code> to be
                be set, so that any call to the <code>exec()</code> or
                <code>test()</code> methods of a regular expression
                instance will use the input value as the string to be
                searched if there is no argument specified. MSIE does
                not support this extension.</p>

                <div class="example">
                  <pre id="Example_RegExp_input">
msg('check the initial type and value of RegExp.input');
msg('typeof RegExp.input == ' + typeof RegExp.input);
msg('RegExp.input == ' + RegExp.input);
msg('RegExp.$_ == ' + RegExp.$_);

msg('perform a search on a string and check RegExp.input');
msg('"foobar".match(/bar/) == ' + "foobar".match(/bar/));
msg('RegExp.input == ' + RegExp.input);
msg('RegExp.$_ == ' + RegExp.$_);

msg('attempt to set RegExp.input then perform a search using');
msg('instance.exec(). This works in Mozilla, but not MSIE');
msg('RegExp.input = "barfoo" ' + (RegExp.input = "barfoo"));
msg('/bar/.exec() == ' + /bar/.exec());
msg('RegExp.input == ' + RegExp.input);
msg('RegExp.$_ == ' + RegExp.$_);

msg('cross browser/standard approach. works in Mozilla and MSIE');
msg('/bar/.exec("barfoo") == ' + /bar/.exec("barfoo"));
msg('RegExp.input == ' + RegExp.input);
msg('RegExp.$_ == ' + RegExp.$_);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_input');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="RegExp.lastIndex" id="RegExp.lastIndex"><code>RegExp.lastIndex</code></a></dt>

            <dd>
              <div class="implnote">
                MSIE only

                <p><code><var>RegExp</var>.lastIndex</code> returns the
                next position in the string following the match or
                <code>-1</code> if there is no match, <code>-1</code>
                if <code>lastIndex</code> exceeds the length of the
                string.</p>

                <div class="example">
                  <pre id="Example_RegExp_lastIndex">
var s;   // search string
var r;   // search regular expression

msg('check the initial type and value of RegExp.lastIndex');
msg('typeof RegExp.lastIndex == ' + typeof RegExp.lastIndex);
msg('RegExp.lastIndex == ' + RegExp.lastIndex);

msg('set search string: s = ' + (s = "foobarfoobar"));

msg('set RegExp.lastIndex = ' + (RegExp.lastIndex = 8));
msg('perform a non global search on a string and check RegExp.lastIndex');
msg('for non global searches lastIndex should be ignored');
msg('set regular expression: r = ' + (r = /bar/));
msg('r.exec(s) == ' + r.exec(s));
msg('RegExp.lastIndex == ' + RegExp.lastIndex);

msg('repeat a non global search on a string and check RegExp.lastIndex');
msg('r.exec(s) == ' + r.exec(s));
msg('RegExp.lastIndex == ' + RegExp.lastIndex);

msg('perform a global search on a string and check RegExp.lastIndex');
msg('set regular expression: r = ' + (r = /bar/g));
msg('r.exec(s) == ' + r.exec(s));
msg('RegExp.lastIndex == ' + RegExp.lastIndex);
msg('repeat a non global search on a string and check RegExp.lastIndex');
msg('r.exec(s) == ' + r.exec(s));
msg('RegExp.lastIndex == ' + RegExp.lastIndex);

msg('attempt to set RegExp.lastIndex then perform a search');
msg('MSIE treats RegExp.lastIndex as readonly');
msg('RegExp.lastIndex = ' + (RegExp.lastIndex = 2));
msg('r.exec(s) == ' + r.exec(s));
msg('RegExp.lastIndex == ' + RegExp.lastIndex);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_lastIndex');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="RegExp.lastMatch" id="RegExp.lastMatch"><code>RegExp.lastMatch,
            RegExp['$&amp;']</code></a></dt>

            <dd>
              <div class="implnote">
                Non standard, but supported by Mozilla and MSIE.

                <p>Returns the last match made by a regular
                expression.</p>

                <div class="example">
                  <pre id="Example_RegExp_lastMatch">
var string = "this is a test.";
var regularexpression = /\w+/;
regularexpression.test(string);
msg('RegExp.lastMatch == ' + RegExp.lastMatch + 
    ', RegExp[\'$&amp;\'] == ' + RegExp['$&amp;']);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_lastMatch');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="RegExp.lastParen" id="RegExp.lastParen"><code>RegExp.lastParen,
            RegExp['$+']</code></a></dt>

            <dd>
              <div class="implnote">
                Non standard, but supported by Mozilla and MSIE.

                <p>Returns the last item in the capturing array, if
                any.</p>

                <div class="example">
                  <pre id="Example_RegExp_lastParen">
var string = "this is a test.";
var regexp = /(\w+) (\w+)/;
var result = regexp.exec(string);
msg('RegExp.lastMatch    == ' + RegExp.lastMatch + '&lt;br&gt;' + 
    'RegExp.lastParen == ' + RegExp.lastParen + '&lt;br&gt;' +
    'RegExp[\'$+\'] == ' + RegExp['$+']  + '&lt;br&gt;' +
    'result[result.length - 1] == ' + result[result.length -1]);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_lastParen');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="RegExp.leftContext" id="RegExp.leftContext"><code>RegExp.leftContext,
            RegExp.$`</code></a></dt>

            <dd>
              <div class="implnote">
                Non standard, but supported by Mozilla and MSIE.

                <p>Returns the leading portion of the string before the
                match.</p>

                <div class="example">
                  <pre id="Example_RegExp_leftContext">
var string = "this is a test.";
var regularexpression = / is (\w+) (\w+)/;
regularexpression.test(string);
msg('RegExp.lastMatch    == ' + RegExp.lastMatch + ', ' + 
    'RegExp.leftContext == ' + RegExp.leftContext + ', ' + 
    'RegExp[\'$`\'] == ' + RegExp['$`']);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_leftContext');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="RegExp.rightContext" id="RegExp.rightContext"><code>RegExp.rightContext,
            RegExp.$'</code></a></dt>

            <dd>
              <div class="implnote">
                Non standard, but supported by Mozilla and MSIE.

                <p>Returns the trailing portion of the string after the
                match.</p>

                <div class="example">
                  <pre id="Example_RegExp_rightContext">
var string = "this is a test.";
var regularexpression = /(\w+)/;
regularexpression.test(string);
msg('RegExp.lastMatch    == ' + RegExp.lastMatch + ', ' + 
    'RegExp.rightContext == ' + RegExp.rightContext +  ', ' + 
    'RegExp[\'$\'\'] == ' + RegExp['$\'']);
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_rightContext');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="RegExp.dollar" id="RegExp.dollar1"><code>RegExp.$1 -
            RegExp.$9</code></a></dt>

            <dd>
              <div class="implnote">
                Non standard, but supported by Mozilla and MSIE.

                <p><code>RegExp.<var>$N</var></code> where <var>N</var>
                is a digit from <code>1</code> to <code>9</code>
                returns the corresponding item from the captures
                array.</p>

                <div class="example">
                  <pre id="Example_RegExp_dollar">
var string = "this is a test.";
var regexp = /((\w+) (\w+) (\w+) (\w+)(.*))/;
var result = regexp.exec(string);

msg('RegExp.lastMatch    == ' + RegExp.lastMatch);
for (var i = 1; i &lt; result.length; i++)
{
  msg('RegExp[\'$' + i + '\'] == ' + RegExp['$' + i] +
      '; ' + 
      'result[' + i + '] == ' + result[i]);
}
</pre><script type="text/javascript">
//
generate_example('Example_RegExp_dollar');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="regexp.source" id="regexp.source"><code><var>regexp</var>.source</code></a></dt>

            <dd>
              <p>Returns a string representing the source of the
              regular expression (without the bounding <code>/</code>.
              This is the same value as would have been passed to
              <code>RegExp(<var>pattern</var>)</code> during
              construction.</p>

              <div class="example">
                <pre id="Example_regexp_source">
var regexp;
var string = "this is a Test.";

msg('test regexp.toSource() for an empty regular expression');

regexp = new RegExp();
msg('regexp.source  == ' + regexp.source);

msg('test /([A-Z]\w+)/');

regexp = /([A-Z]\w+)/;
msg('regexp.source  == ' + regexp.source);

msg('test if regexp.source is readonly');

try
{
  regexp.source = '/(\w+)/';
  msg('Test regexp.source is readonly ' + 
      (regexp.source  ==  '([A-Z]\\w+)' ? 'passed.' : 'failed.'));
}
catch(e)
{
  msg('regexp.source should be readonly ' + 
      'but not cause an error. ' +  
      e.name + ': ' + e.message );
}
</pre><script type="text/javascript">
//
generate_example('Example_regexp_source');
//
</script>
              </div>
            </dd>

            <dt><a name="regexp.global" id="regexp.global"><code><var>regexp</var>.global</code></a></dt>

            <dd>
              <p>Read only property which returns <code>true</code> if
              the regular expression has the global <code>g</code> flag
              is set.</p>

              <div class="example">
                <pre id="Example_regexp_global">
var regexp;
var string = "this is a Test.";

msg('test /(\w+ )*/');

regexp = /(\w+ )*/;
msg('regexp.global  == ' + regexp.global);
msg('string.match(regexp) == ' + string.match(regexp));

msg('test /(\w+ )*/g');

regexp = /(\w+ )*/g;
msg('regexp.global  == ' + regexp.global);
msg('string.match(regexp) == ' + string.match(regexp));

msg('test if regexp.source is readonly');

try
{
  regexp.global = false;
  msg('Test regexp.global is readonly ' + 
      (regexp.global == true  ? 'passed.' : 'failed.'));
}
catch(e)
{
  msg('regexp.global should be readonly ' + 
      'but not cause an error. ' +  
      e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_regexp_global');
//
</script>
              </div>
            </dd>

            <dt><a name="regexp.ignoreCase" id="regexp.ignoreCase"><code><var>regexp</var>.ignoreCase</code></a></dt>

            <dd>
              <p>Read only property which returns <code>true</code> if
              the reqular expression has the ignore case <code>i</code>
              flag set.</p>

              <div class="example">
                <pre id="Example_regexp_ignoreCase">
var regexp;
var string = "this is a Test.";

msg('test /test/');

regexp = /test/;
msg('regexp.ignoreCase  == ' + regexp.ignoreCase);
msg('string.match(regexp) == ' + string.match(regexp));

msg('test /test/i');

regexp = /test/i;
msg('regexp.ignoreCase  == ' + regexp.ignoreCase);
msg('string.match(regexp) == ' + string.match(regexp));

msg('test if regexp.ignoreCase is readonly');

try
{
  regexp.ignoreCase = false;
  msg('Test regexp.ignoreCase is readonly ' + 
      (regexp.ignoreCase == true  ? 'passed.' : 'failed.'));
}
catch(e)
{
  msg('regexp.ignoreCase should be readonly ' + 
      'but not cause an error. ' +  
      e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_regexp_ignoreCase');
//
</script>
              </div>
            </dd>

            <dt><a name="regexp.multiline" id="regexp.multiline"><code><var>regexp</var>.multiline</code></a></dt>

            <dd>
              <p>Read only property which returns <code>true</code> if
              the multiline <code>m</code> flag is set.</p>

              <div class="example">
                <pre id="Example_regexp_multiline">
var string = "this is a test.\r\nThis is another test.";

msg('test $ without multiline');
var regexp = /a test.$/;
msg('regexp.multiline  == ' + regexp.multiline);
msg('string.match(regexp) == ' + string.match(regexp));

msg('test $ with multiline');

regexp = /a test.$/m;
msg('regexp.multiline  == ' + regexp.multiline);
msg('string.match(regexp) == ' + string.match(regexp));

msg('test if regexp.multiline is readonly');

try
{
  regexp.multiline = false;
  msg('Test regexp.multline is readonly ' + 
      (regexp.multiline == true  ? 'passed.' : 'failed.'));
}
catch(e)
{
  msg('regexp.multiline should be readonly ' + 
      'but not cause an error. ' +  
      e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_regexp_multiline');
//
</script>
              </div>
            </dd>

            <dt><a name="regexp.lastIndex" id="regexp.lastIndex"><code><var>regexp</var>.lastIndex</code></a></dt>

            <dd>
              <p>If the global flag is set on the regular expression
              <var>regexp</var>,
              <code><var>regexp</var>.lastIndex</code> is used to
              report and set the position in the string where the next
              match will begin. If the regular expression does not have
              the global flag set, then <code>lastIndex</code> should
              have no effect on matches.</p>

              <div class="example">
                <pre id="Example_regexp.lastIndex">
var s;   // search string
var r;   // search regular expression

msg('create a regular expression without a global flag');
msg('set search string: s = ' + (s = "foobarfoobar"));
msg('set regular expression: r = ' + (r = /bar/));
msg('&lt;br&gt;');

msg('check the initial type and value of r.lastIndex');
msg('typeof r.lastIndex == ' + typeof r.lastIndex);
msg('r.lastIndex == ' + r.lastIndex);
msg('&lt;br&gt;');

msg('perform a non global search on a string and check r.lastIndex');
msg('r.exec(s) == ' + r.exec(s));
msg('r.lastIndex == ' + r.lastIndex);
msg('&lt;br&gt;');

msg('repeat a non global search on a string and check RegExp.lastIndex');
msg('for non global searches lastIndex should be ignored');
msg('r.exec(s) == ' + r.exec(s));
msg('r.lastIndex == ' + r.lastIndex);
msg('&lt;br&gt;');

msg('attempt to set lastIndex on a non-global');
msg('regular expression then perform a search.');
msg('r.lastIndex = ' + (r.lastIndex = 2));
msg('r.exec(s) == ' + r.exec(s));
msg('r.lastIndex == ' + r.lastIndex);
msg('&lt;br&gt;');

msg('create a regular expression with a global flag');
msg('set regular expression: r = ' + (r = /bar/g));
msg('r.lastIndex == ' + r.lastIndex);
msg('&lt;br&gt;');

msg('perform a global search on a string and check RegExp.lastIndex');
msg('r.exec(s) == ' + r.exec(s));
msg('r.lastIndex == ' + r.lastIndex);
msg('&lt;br&gt;');

msg('repeat a non global search on a string and check r.lastIndex');
msg('r.exec(s) == ' + r.exec(s));
msg('r.lastIndex == ' + r.lastIndex);
msg('&lt;br&gt;');

msg('attempt to set r.lastIndex then perform a search');
msg('r.lastIndex = ' + (r.lastIndex = 2));
msg('r.exec(s) == ' + r.exec(s));
msg('r.lastIndex == ' + r.lastIndex);
</pre><script type="text/javascript">
//
generate_example('Example_regexp.lastIndex');
//
</script>

                <div class="implnote">
                  MSIE differs from the ECMAScript Standard and Mozilla
                  on non global regular expressions.

                  <p>MSIE allows
                  <code><var>regexp</var>.lastIndex</code> to be used
                  in non global regular expressions. MSIE will return
                  the position in the string following the match for a
                  non global regular expression, but on repeated
                  searches will begin searching at the beginning of the
                  string rather than at the position contained in
                  <code>lastIndex</code>. MSIE also allows
                  <code>lastIndex</code> to be set in non global
                  regular expressions.</p>
                </div>
              </div>
            </dd>
          </dl>
        </dd>

        <dt><a name="Error_Objects" id="Error_Objects">Error
        Objects</a></dt>

        <dd>
          <p>Whenever a runtime error occurs, an <code>Error</code>
          object is <q>thrown</q> which describes the error condition.
          <code>Error</code> serves as the base class for the other
          native Error objects: <code>EvalError</code>,
          <code>RangeError</code>, <code>ReferenceError</code>,
          <code>SyntaxError</code> and <code>TypeError</code>.
          <code>Error</code> and its child Objects can serve as the
          base class for user-defined error classes as well.</p>

          <dl>
            <dt><a name="Error" id="Error"><code>Error(<var>message</var>)</code></a></dt>

            <dd>
              <p>The <code>Error</code> constructor creates new
              instances of the <code>Error</code> Object when called as
              a part of a <code>new</code> expression or when called as
              a function.</p>

              <div class="example">
                <pre id="Example_Error">
var error = new Error('this is an error message');

msg('error.name == ' + error.name);
msg('error.message == ' + error.message);
</pre><script type="text/javascript">
//
generate_example('Example_Error');
//
</script>
              </div>

              <p><code>Error</code> has property attribute
              <em>{DontEnum}</em> which means it does not appear in
              <code>for-in</code> loops, can be deleted and can be the
              target of an assignment.</p>

              <div class="implnote">
                <p>Mozilla adds the <em>{DontDelete}</em> property
                attribute which means Mozilla will not delete it.</p>
              </div>

              <div class="example">
                <pre id="Example_Error_property_attributes_dontdelete">
// attempt to delete Error
msg('Before delete: typeof Error == ' + typeof Error);
msg('(delete Error) == ' + (delete Error));
msg('After delete: typeof Error == ' + typeof Error);
</pre><script type="text/javascript">
//
generate_example('Example_Error_property_attributes_dontdelete');
//
</script>
              </div>

              <div class="example">
                <pre id="Example_Error_property_attributes_readonly">
// attempt to assign to Error
Error = 'foo';
msg('After Error = \'foo\': Error == ' + Error);
</pre><script type="text/javascript">
//
generate_example('Example_Error_property_attributes_readonly');
//
</script>
              </div>
            </dd>

            <dt><a name="Error.prototype" id="Error.prototype"><code>Error.prototype</code></a></dt>

            <dd>
              <p><code>Error.prototype</code> has property attributes
              <em>{DontEnum}</em>, <em>{DontDelete}</em> and
              <em>{ReadOnly}</em> which means it will not appear in
              <code>for-in</code> loops, can not be deleted and can not
              be changed by assignment although its properties
              <em>may</em> be modified.</p>
            </dd>

            <dt><a name="Error.prototype.constructor" id="Error.prototype.constructor"><code>Error.prototype.constructor</code></a></dt>

            <dd>
              <p>Returns a reference to the <code>Error</code>
              constructor.</p>
            </dd>

            <dt><a name="Error.prototype.name" id="Error.prototype.name"><code>Error.prototype.name</code></a></dt>

            <dd>
              <p><code>Error.prototype.name</code> is initially set to
              <code>'Error'</code> however can be overwritten in
              instances.</p>

              <div class="example">
                <pre id="Example_Error.prototype.name">
msg('Error.prototype.name == ' + Error.prototype.name);

// create an Error instance
var error = new Error('foo');
msg('error.name == ' + error.name);

// attempt to change name
error.name = 'MyError';
msg('error.name == ' + error.name);
</pre><script type="text/javascript">
//
generate_example('Example_Error.prototype.name');
//
</script>
              </div>
            </dd>

            <dt><a name="Error.prototype.message" id="Error.prototype.message"><code>Error.prototype.message</code></a></dt>

            <dd>
              <p><code>Error.prototype.message</code> is initially set
              to the null string but in instances is initialized to the
              <var>message</var> argument passed in the constructor
              however it can be overwritten in instances.</p>

              <div class="example">
                <pre id="Example_Error.prototype.message">
msg('Error.prototype.message == ' + Error.prototype.message);

// create an Error instance
var error = new Error('foo');
msg('error.message == ' + error.message);

// attempt to change message
error.message = 'bar!';
msg('error.message == ' + error.message);
</pre><script type="text/javascript">
//
generate_example('Example_Error.prototype.message');
//
</script>
              </div>
            </dd>

            <dt><a name="Error.prototype.toString" id="Error.prototype.toString"><code>Error.prototype.toString()</code></a></dt>

            <dd>
              <p><code>Error.prototype.toString</code> returns a string
              representation of an <code>Error</code> instance.</p>

              <div class="implnote">
                <p>Mozilla's version of
                <code>Error.prototype.toString</code> will return a
                string consisting of the <var>error</var>
                <code>name</code>, a colon and space <code>:</code>
                following the <var>error</var>
                <code>message</code>.</p>

                <p>MSIE's version of
                <code>Error.prototype.toString</code> will return the
                default value <code>'[object Error]'</code> which is
                much less use however it can be overridden to produce
                the same result as Mozilla.</p>

                <div class="example">
                  <pre id="Example_Error.prototype.toString">
// default Error.prototype.toString
var error = new Error('this is an error');
msg('error == ' + error);

// override MSIE's Error.prototype.toString
// override MSIE's Error.prototype.toString
if (typeof (new Error).number == 'number')
{
  // number is an MSIE only property
  Error.prototype.toString = function () 
  {
    return this.name + ': ' + this.message;
  };
}

msg('error == ' + error);
</pre><script type="text/javascript">
//
generate_example('Example_Error.prototype.toString');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="error.stack" id="error.toString"><code><var>error</var>.stack</code></a></dt>

            <dt><a name="error.lineNumber" id="error.lineNumber"><code><var>error</var>.lineNumber</code></a></dt>

            <dd>
              <div class="implnote">
                Mozilla Only

                <p>Mozilla provides additional properties on
                <code>Error</code> objects:</p>

                <dl>
                  <dt><code>stack</code></dt>

                  <dd>
                    contains an <em>encoded</em> description of the
                    function call stack where the error was initially
                    thrown. <code>stack</code> contains a line (string
                    terminated via a newline <code>\n</code>) for each
                    stack frame encoded as:
                    <pre>
<var>function(argumentvalues)@pageurl:linenumber\n</var>
</pre>

                    <p>The stack frame beginning at the global scope
                    will have an empty
                    <var>function(argumentvalues</var>).</p>
                  </dd>

                  <dt>lineNumber</dt>

                  <dd>contains the line number where the error
                  occured.</dd>
                </dl>

                <div class="example">
                  <pre id="Example_error.Mozilla">
/*
 * Illustrate the use of additional error properties in Mozilla
 * f1() calls f2('foo') which throws a runtime error.
 * 
 * this example parses the stack obtaining the names, 
 * arguments, and line numbers of the functions on the
 * stack when the error occured.
 */

function f1()
{
  f2('foo');
}

function f2(v)
{
  try
  {
    // cause a reference error
    v = b;
  }
  catch(e)
  {
    msg('name: ' + e.name);
    msg('message: ' + e.message);
    msg('lineNumber: ' + e.lineNumber);

    msg('stack:&lt;br&gt;' + e.stack + '&lt;br&gt;');
    var lines = e.stack.split('\n');
    var regexpstack = /((\w+)\((.*)\))?@(.*):(\d+)/;

    for (var i = 0; i &lt; lines.length; i++)
    {
      if (lines[i])
      {
        msg('');
        msg('frame ' + i + ' == ' + lines[i]);
        var capture = regexpstack.exec(lines[i]);
        if (capture)
        {
          msg('function call == ' + capture[1]);
          msg('function name == ' + capture[2]);
          msg('function args == ' + capture[3]);
          msg('function url  == ' + capture[4]);
          msg('function line == ' + capture[5]);
        }
      }
    }
  }
}

f1();
</pre><script type="text/javascript">
//
generate_example('Example_error.Mozilla');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="EvalError" id="EvalError"><code>EvalError</code></a></dt>

            <dd>
              <div class="implnote">
                <p>Mozilla and MSIE do not throw <code>EvalError</code>
                for indirect uses of <code>eval</code> or assignments
                to <code>eval</code> which is allowed by <a href="ecma-262#a-16">ECMAScript 16. Errors</a>.</p>
              </div>
            </dd>

            <dt><a name="RangeError" id="RangeError"><code>RangeError</code></a></dt>

            <dd>
              <p>Thrown by <a href="#Number.prototype.toFixed"><code>Number.prototype.toFixed(fractionDigits)</code></a>,
              <a href="#Number.prototype.toExponentional"><code>Number.prototype.toExponentional(fractionDigits)</code></a>
              and <a href="#Number.prototype.toPrecision"><code>Number.prototype.toPrecision(fractionDigits)</code></a>.
              Supported by both Mozilla and MSIE however Mozilla
              extends the valid range of <var>fractionDigits</var>.</p>
            </dd>

            <dt><a name="ReferenceError" id="ReferenceError"><code>ReferenceError</code></a></dt>

            <dd>
              <div class="implnote">
                <p>MSIE fails to detect e instanceof ReferenceError
                when a reference error occurs even though it defines
                ReferenceError as a function.</p>

                <div class="example">
                  <pre id="Example_MSIE_ReferenceError">
try
{
  var a = b;
}
catch(e)
{
  msg('Exception is ' + 
      ((e instanceof ReferenceError) ? '' : 'not ') + 
      ' an instance of  ReferenceError ' +  
      e.name + ': ' + e.message );
}
</pre><script type="text/javascript">
//
generate_example('Example_MSIE_ReferenceError');
//
</script>
                </div>
              </div>
            </dd>

            <dt><a name="SyntaxError" id="SyntaxError"><code>SyntaxError</code></a></dt>

            <dd>
              <p>A <code>SyntaxError</code> occurs when an error occurs
              parsing the source of a JavaScript program.</p>

              <div class="implnote">
                <p>When a syntax error occurs outside of an
                <code>eval</code> context, MSIE throws the error before
                running and can not capture it via a window.onerror
                error handler,. Mozilla can capture the error via
                window.onerror but not via a try catch block.</p>

                <div class="example">
                  <pre id="Example_SyntaxError">
try
{
  // cause a SyntaxError
  var a * b = c;
}
catch(e)
{
  msg('Exception is ' + 
      ((e instanceof SyntaxError) ? '' : 'not ') + 
      ' an instance of  SyntaxError ' +  
      e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_SyntaxError');
//
</script>
                </div>
              </div>

              <div class="example">
                <p>Both Mozilla and MSIE will throw SyntaxError when
                <code>eval</code> is called with invalid syntax.</p>
                <pre id="Example_SyntaxError_eval">
try
{
  eval('var a * b = c;');
}
catch(e)
{
  msg('Exception is ' + 
      ((e instanceof SyntaxError) ? '' : 'not ') + 
      ' an instance of  SyntaxError ' + 
      e.name + ': ' + e.message
      );
}
</pre><script type="text/javascript">
//
generate_example('Example_SyntaxError_eval');
//
</script>
              </div>
            </dd>

            <dt><a name="TypeError" id="TypeError"><code>TypeError</code></a></dt>

            <dd>
              <p>A <code>TypeError</code> is thrown when the type of an
              operand is incompatible with the operation.</p>

              <div class="example">
                <pre id="Example_TypeError">
try
{
  // Math does not have a constructor
  // so this will fail. 
  // According to 8.6.2 Internal Properties and Methods,
  // this should throw a TypeError
  var math = new Math(); 
}
catch(e)
{
  msg('Exception is ' + 
      ((e instanceof TypeError) ? '' : 'not ') + 
      ' an instance of  TypeError ' + 
      e.name + ': ' + e.message
      );
}
</pre><script type="text/javascript">
//
generate_example('Example_TypeError');
//
</script>
              </div>
            </dd>

            <dt><a name="URIError" id="URIError"><code>URIError</code></a></dt>

            <dd>
              <p>A <code>URIError</code> is thrown when one of the
              global URI functions <code>decodeURI</code>,
              <code>encodeURI</code>, <code>decodeURIComponent</code>
              or <code>encodeURIComponent</code> encounters an
              error.</p>

              <div class="example">
                <pre id="Example_URIError">
// invalid character for URI functions
var invalidchar = String.fromCharCode(0xDC00 + 1)
try
{
  msg('encodeURIComponent(invalidchar) == ' + 
       encodeURIComponent(invalidchar));
}
catch(e)
{
  msg('Exception: ' + e.name + ': ' + e.message);
}
</pre><script type="text/javascript">
//
generate_example('Example_URIError');
//
</script>
              </div>
            </dd>
          </dl>
        </dd>
      </dl>
    </dd>
  </dl>

  <h2><a name="Links" id="Links">Links</a></h2>

  <ul>
    <li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=240317">Bugzilla
    240317</a></li>

    <li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=255895">Bugzilla
    255895</a></li>

    <li><a href="http://www.mozilla.org/js/language/es4/index.html">ECMAScript
    Language Specification 4<sup>th</sup> Editition (Proposed)</a></li>

    <li><a href="http://www.ecma-international.org/publications/standards/Ecma-357.htm">
    ECMAScript for XML (E4X) Specification</a></li>

    <li><a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">
    ECMAScript Language Specification ECMA-262 3rd Edition</a></li>

    <li><a href="ecma-262">ECMAScript Language Specification ECMA-262
    3rd Edition (Unofficial HTML version)</a></li>

    <li><a href="http://www.w3.org/TR/html401/appendix/notes.html#notes-invalid-docs">
    HTML 4.01 - Notes on invalid documents</a></li>

    <li><a href="http://www.w3.org/TR/html401/struct/global.html#edef-BODY">HTML
    body tag</a></li>

    <li><a href="http://www.w3.org/TR/html401/struct/global.html#edef-HEAD">HTML
    head tag</a></li>

    <li><a href="http://www.w3.org/TR/html401/interact/scripts.html#edef-SCRIPT">HTML
    script tag</a></li>

    <li><a href="http://www.microsoft.com/windows/WinHistoryIE.mspx">Internet
    Explorer History</a></li>

    <li><a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/script56/html/js56jsoriJScript.asp">
    Internet Explorer JavaScript References</a></li>

    <li><a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/script56/html/js56jslrffeatureinformation.asp">
    Internet Explorer JScript Features</a></li>

    <li><a href="/2004/11/18/js-test-results/view.html">JavaScript Test
    Results</a></li>

    <li><a href="/2004/10/03/javascript-test-suite">JavaScript Test
    Suite</a></li>

    <li><a href="http://www.mozilla.org/js/">mozilla.org</a></li>

    <li><a href="http://www.mozilla.org/js/">mozilla.org's JavaScript
    Project</a></li>

    <li><a href="http://www.mozilla.org/js/tests/library.html">mozilla.org's
    JavaScript Test Library</a></li>

    <li><a href="http://www.mozilla.org/js/language/js20/index.html">mozilla.org's
    JavaScript 2.0</a></li>

    <li><a href="http://devedge.netscape.com/">Netscape
    DevEdge</a></li>

    <li><a href="http://en.wikipedia.org/wiki/Regular_expression">Regular
    Expressions</a></li>

    <li><a href="http://www.faqs.org/rfcs/rfc822.html">RFC 822</a></li>

    <li><a href="http://en.wikipedia.org/wiki/Rodney_Dangerfield">Rodney
    Dangerfield</a></li>
  </ul>
<h2><a name="Index" id="Index">Index</a></h2><ul><li><a href="#About_JavaScript">About
      JavaScript</a></li><li><a href="#About">About this Article</a></li><li><a href="#Access_Array_items">Access Array items</a></li><li><a href="#Access_Object_Properties">Access Object
            Properties</a></li><li><a href="#Array_Objects">Array
        Objects</a></li><li><a href="#Array">Array(length)</a></li><li><a href="#array.length">array.length</a></li><li><a href="#Array.prototype">Array.prototype</a></li><li><a href="#Array.prototype.concat">Array.prototype.concat([item1[,
            item2 [, …]]])</a></li><li><a href="#Array.prototype.constructor">Array.prototype.constructor</a></li><li><a href="#Array.prototype.join">Array.prototype.join(separator)</a></li><li><a href="#Array.prototype.pop">Array.prototype.pop()</a></li><li><a href="#Array.prototype.push">Array.prototype.push([item1[,
            item2[, …]]])</a></li><li><a href="#Array.prototype.reverse">Array.prototype.reverse()</a></li><li><a href="#Array.prototype.shift">Array.prototype.shift()</a></li><li><a href="#Array.prototype.slice">Array.prototype.slice(start,
            end)</a></li><li><a href="#Array.prototype.sort">Array.prototype.sort(comparefunc)</a></li><li><a href="#Array.prototype.splice">Array.prototype.splice(start,
            deleteCount[, item1 [, item2[, …]]])</a></li><li><a href="#Array.prototype.toLocaleString">Array.prototype.toLocaleString()</a></li><li><a href="#Array.prototype.toSource">Array.prototype.toSource()</a></li><li><a href="#Array.prototype.toString">Array.prototype.toString()</a></li><li><a href="#Array.prototype.unshift">Array.prototype.unshift([item1[,
            item2[, …]]])</a></li><li><a href="#Assignment_Operators">Assignment Operators</a></li><li><a href="#Bit_Operators">Bit
        Operators</a></li><li><a href="#Boolean_Objects">Boolean
        Objects</a></li><li><a href="#Boolean">Boolean(value)</a></li><li><a href="#Boolean.protototype.constructor">Boolean.protototype.constructor</a></li><li><a href="#Boolean.protototype.toString">Boolean.protototype.toString()</a></li><li><a href="#Boolean.protototype.valueOf">Boolean.protototype.valueOf()</a></li><li><a href="#Boolean.prototype">Boolean.prototype</a></li><li><a href="#Conditional_Statements">Conditional Statements</a></li><li><a href="#Date_Objects">Date
        Objects</a></li><li><a href="#Date_value">Date(value)</a></li><li><a href="#Date_new">Date(year, month[,
            day[, hours[, minutes[,
            seconds[, ms]]]]])
            (Constructor Call)</a></li><li><a href="#Date_function">Date([year[,
            month[, date[, hours[,
            minutes[, seconds[,
            ms]]]]]]]) (Function Call)</a></li><li><a href="#Date_constructor">Date(…)</a></li><li><a href="#Date.parse">Date.parse(string)</a></li><li><a href="#Date.prototype">Date.prototype</a></li><li><a href="#Date.prototype.constructor">Date.prototype.constructor</a></li><li><a href="#Date.prototype.getDate">Date.prototype.getDate()</a></li><li><a href="#Date.prototype.getDay">Date.prototype.getDay()</a></li><li><a href="#Date.prototype.getFullYear">Date.prototype.getFullYear()</a></li><li><a href="#Date.prototype.getHours">Date.prototype.getHours()</a></li><li><a href="#Date.prototype.getMilliseconds">Date.prototype.getMilliseconds()</a></li><li><a href="#Date.prototype.getMinutes">Date.prototype.getMinutes()</a></li><li><a href="#Date.prototype.getMonth">Date.prototype.getMonth()</a></li><li><a href="#Date.prototype.getSeconds">Date.prototype.getSeconds()</a></li><li><a href="#Date.prototype.getTime">Date.prototype.getTime()</a></li><li><a href="#Date.prototype.getTimezoneOffset">Date.prototype.getTimezoneOffset()</a></li><li><a href="#Date.prototype.getUTCDate">Date.prototype.getUTCDate()</a></li><li><a href="#Date.prototype.getUTCDay">Date.prototype.getUTCDay()</a></li><li><a href="#Date.prototype.getUTCFullYear">Date.prototype.getUTCFullYear()</a></li><li><a href="#Date.prototype.getUTCHours">Date.prototype.getUTCHours()</a></li><li><a href="#Date.prototype.getUTCMilliseconds">Date.prototype.getUTCMilliseconds()</a></li><li><a href="#Date.prototype.getUTCMinutes">Date.prototype.getUTCMinutes()</a></li><li><a href="#Date.prototype.getUTCMonth">Date.prototype.getUTCMonth()</a></li><li><a href="#Date.prototype.getUTCSeconds">Date.prototype.getUTCSeconds()</a></li><li><a href="#Date.prototype.getYear">Date.prototype.getYear()</a></li><li><a href="#Date.prototype.setDate">Date.prototype.setDate(day)</a></li><li><a href="#Date.prototype.setFullYear">Date.prototype.setFullYear(year[,
            month[, day]])</a></li><li><a href="#Date.prototype.setHours">Date.prototype.setHours(hour[,
            min[, sec[, ms]]])</a></li><li><a href="#Date.prototype.setMilliseconds">Date.prototype.setMilliseconds(ms)</a></li><li><a href="#Date.prototype.setMinutes">Date.prototype.setMinutes(min[,
            sec[, ms]])</a></li><li><a href="#Date.prototype.setMonth">Date.prototype.setMonth(month[,
            day])</a></li><li><a href="#Date.prototype.setSeconds">Date.prototype.setSeconds(sec[,
            ms])</a></li><li><a href="#Date.prototype.setTime">Date.prototype.setTime(time)</a></li><li><a href="#Date.prototype.setUTCDate">Date.prototype.setUTCDate(date)</a></li><li><a href="#Date.prototype.setUTCFullYear">Date.prototype.setUTCFullYear(year[,
            month[, date]])</a></li><li><a href="#Date.prototype.setUTCHours">Date.prototype.setUTCHours(hour[,
            min[, sec[, ms]]])</a></li><li><a href="#Date.prototype.setUTCMilliseconds">Date.prototype.setUTCMilliseconds(ms)</a></li><li><a href="#Date.prototype.setUTCMinutes">Date.prototype.setUTCMinutes(min[,
            sec[, ms]])</a></li><li><a href="#Date.prototype.setUTCMonth">Date.prototype.setUTCMonth(month[,
            day])</a></li><li><a href="#Date.prototype.setUTCSeconds">Date.prototype.setUTCSeconds(sec[,
            ms])</a></li><li><a href="#Date.prototype.setYear">Date.prototype.setYear(year)</a></li><li><a href="#Date.prototype.toDateString">Date.prototype.toDateString()</a></li><li><a href="#Date.prototype.toGMTString">Date.prototype.toGMTString()</a></li><li><a href="#Date.prototype.toLocaleDateString">Date.prototype.toLocaleDateString()</a></li><li><a href="#Date.prototype.toLocaleString">Date.prototype.toLocaleString()</a></li><li><a href="#Date.prototype.toLocaleTimeString">Date.prototype.toLocaleTimeString()</a></li><li><a href="#Date.prototype.toString">Date.prototype.toString()</a></li><li><a href="#Date.prototype.toTimeString">Date.prototype.toTimeString()</a></li><li><a href="#Date.prototype.toUTCString">Date.prototype.toUTCString()</a></li><li><a href="#Date.prototype.UTC">Date.prototype.UTC(year, month[,
            day[, hours[, minutes[, seconds[, ms]]]]])</a></li><li><a href="#Date.prototype.valueOf">Date.prototype.valueOf()</a></li><li><a href="#Global_decodeURI">decodeURI(encodedURI)</a></li><li><a href="#Global_decodeURIComponent">decodeURIComponent(encodedURIComponent)</a></li><li><a href="#Global_encodeURI">encodeURI(uri)</a></li><li><a href="#Global_encodeURIComponent">encodeURIComponent(uriComponent)</a></li><li><a href="#Error_Objects">Error
        Objects</a></li><li><a href="#Error">Error(message)</a></li><li><a href="#error.lineNumber">error.lineNumber</a></li><li><a href="#Error.prototype">Error.prototype</a></li><li><a href="#Error.prototype.constructor">Error.prototype.constructor</a></li><li><a href="#Error.prototype.message">Error.prototype.message</a></li><li><a href="#Error.prototype.name">Error.prototype.name</a></li><li><a href="#Error.prototype.toString">Error.prototype.toString()</a></li><li><a href="#error.stack">error.stack</a></li><li><a href="#Global_eval">eval(x)</a></li><li><a href="#EvalError">EvalError</a></li><li><a href="#Example_JavaScript_Programs">Example JavaScript
      Programs</a></li><li><a href="#Exception_Statements">Exception Statements</a></li><li><a href="#Execution_Contexts">Execution
    Contexts</a></li><li><a href="#Function_Expressions">Function Expressions</a></li><li><a href="#Function_Objects">Function
        Objects</a></li><li><a href="#Function">Function(arg1, arg2,
            …)</a></li><li><a href="#function.arity">function.arity</a></li><li><a href="#Function.length">Function.length</a></li><li><a href="#function.length">function.length</a></li><li><a href="#function.name">function.name</a></li><li><a href="#Function.prototype">Function.prototype</a></li><li><a href="#function.prototype">function.prototype</a></li><li><a href="#Function.prototype.apply">Function.prototype.apply(thisArg,
            argArray)</a></li><li><a href="#Function.prototype.call">Function.prototype.call(thisArg[,
            arg1 [, arg2, …]])</a></li><li><a href="#Function.prototype.constructor">Function.prototype.constructor</a></li><li><a href="#Function.prototype.toSource">Function.prototype.toSource()</a></li><li><a href="#Function.prototype.toString">Function.prototype.toString()</a></li><li><a href="#Parentheses_Operator">Grouping (())
        Operator</a></li><li><a href="#Identifiers">Identifiers</a></li><li><a href="#Including_JavaScript">Including JavaScript programs in Web
      Pages</a></li><li><a href="#Global_Infinity">Infinity</a></li><li><a href="#Interpreted_Programming_Languages">Interpreted Programming
      Languages</a></li><li><a href="#Introduction_to_Objects">Introduction to Objects</a></li><li><a href="#Global_isFinite">isFinite(number)</a></li><li><a href="#Global_isNaN">isNaN(number)</a></li><li><a href="#Iteration_Statements">Iteration Statements</a></li><li><a href="#JavaScript_Data_Types">JavaScript Data Types</a></li><li><a href="#Expressions">JavaScript
    Expressions</a></li><li><a href="#JavaScript_Implementations">JavaScript Implementations</a></li><li><a href="#JavaScript_Native_Objects">JavaScript Native Objects</a></li><li><a href="#JavaScript_Statements">JavaScript Statements</a></li><li><a href="#Labelled_Statements">Labelled Statements</a></li><li><a href="#Links">Links</a></li><li><a href="#Math.abs">Math.abs(x)</a></li><li><a href="#Math.acos">Math.acos(x)</a></li><li><a href="#Math.asin">Math.asin(x)</a></li><li><a href="#Math.atan">Math.atan(x)</a></li><li><a href="#Math.atan2">Math.atan2(y,x)</a></li><li><a href="#Math.ceil">Math.ceil(x)</a></li><li><a href="#Math.cos">Math.cos(x)</a></li><li><a href="#Math.E">Math.E</a></li><li><a href="#Math.exp">Math.exp(x)</a></li><li><a href="#Math.floor">Math.floor(x)</a></li><li><a href="#Math.LN10">Math.LN10</a></li><li><a href="#Math.LN2">Math.LN2</a></li><li><a href="#Math.log">Math.log(x)</a></li><li><a href="#Math.LOG10E">Math.LOG10E</a></li><li><a href="#Math.LOG2E">Math.LOG2E</a></li><li><a href="#Math.max">Math.max([value1
            [, value2 [, …]]])</a></li><li><a href="#Math.min">Math.min([value1
            [, value2 [, …]]])</a></li><li><a href="#Math.PI">Math.PI</a></li><li><a href="#Math.pow">Math.pow(x,y)</a></li><li><a href="#Math.random">Math.random()</a></li><li><a href="#Math.round">Math.round(x)</a></li><li><a href="#Math.sin">Math.sin(x)</a></li><li><a href="#Math.sqrt">Math.sqrt(x)</a></li><li><a href="#Math.SQRT1_2">Math.SQRT1_2</a></li><li><a href="#Math.SQRT2">Math.SQRT2</a></li><li><a href="#Math.tan">Math.tan(x)</a></li><li><a href="#Member_of_DOT_Operator">Member of (.)
        Operator</a></li><li><a href="#Member_of_Operators">Member of Operators</a></li><li><a href="#Global_NaN">NaN</a></li><li><a href="#Number_Objects">Number
        Objects</a></li><li><a href="#Number">Number(value)</a></li><li><a href="#Number.MAX_VALUE">Number.MAX_VALUE</a></li><li><a href="#Number.MIN_VALUE">Number.MIN_VALUE</a></li><li><a href="#Number.NaN">Number.NaN</a></li><li><a href="#Number.NEGATIVE_INFINITY">Number.NEGATIVE_INFINITY</a></li><li><a href="#Number.POSITIVE_INFINITY">Number.POSITIVE_INFINITY</a></li><li><a href="#Number.prototype">Number.prototype</a></li><li><a href="#Number.prototype.constructor">Number.prototype.constructor</a></li><li><a href="#Number.prototype.toExponentional">Number.prototype.toExponentional(fractionDigits)</a></li><li><a href="#Number.prototype.toFixed">Number.prototype.toFixed(fractionDigits)</a></li><li><a href="#Number.prototype.toLocaleString">Number.prototype.toLocaleString()</a></li><li><a href="#Number.prototype.toPrecision">Number.prototype.toPrecision(precision)</a></li><li><a href="#Number.prototype.toString">Number.prototype.toString(radix)</a></li><li><a href="#Number.prototype.valueOf">Number.prototype.valueOf()</a></li><li><a href="#Object_Objects">Object
        Objects</a></li><li><a href="#Object">Object([value])</a></li><li><a href="#Object.length">Object.length</a></li><li><a href="#Object.name">Object.name</a></li><li><a href="#Object.prototype">Object.prototype</a></li><li><a href="#Object.prototype.constructor">Object.prototype.constructor</a></li><li><a href="#Object.prototype.eval">Object.prototype.eval(source)</a></li><li><a href="#Object.prototype.hasOwnProperty">Object.prototype.hasOwnProperty(property)</a></li><li><a href="#Object.prototype.isEnumerable">Object.prototype.isEnumerable(property)</a></li><li><a href="#Object.prototype.isPrototypeOf">Object.prototype.isPrototypeOf(object)</a></li><li><a href="#Object.prototype.toLocaleString">Object.prototype.toLocaleString()</a></li><li><a href="#Object.prototype.toSource">Object.prototype.toSource()</a></li><li><a href="#Object.prototype.toString">Object.prototype.toString()</a></li><li><a href="#Object.prototype.valueOf">Object.prototype.valueOf()</a></li><li><a href="#object.__proto__">object.__proto__</a></li><li><a href="#Operator_Precedence">Operator Precedence and
          Associativity</a></li><li><a href="#Strict_Does_not_equal_Operator">Operator: !==</a></li><li><a href="#Does_not_equal_Operator">Operator: !=</a></li><li><a href="#Unary_Logical_Not_Operator">Operator: !</a></li><li><a href="#Modulus_Operator">Operator: %</a></li><li><a href="#Logical_And_Operator">Operator: &amp;&amp;</a></li><li><a href="#Binary_And_Operator">Operator: &amp;</a></li><li><a href="#Multiplication_Operator">Operator: *</a></li><li><a href="#Addition_Operator">Operator: + (addition)</a></li><li><a href="#Unary_Plus_Operator">Operator: + (unary)</a></li><li><a href="#Increment_Operator">Operator: ++</a></li><li><a href="#Comma_Operator">Operator: ,</a></li><li><a href="#Subtraction_Operator">Operator: - (subtraction)</a></li><li><a href="#Unary_Minus_Operator">Operator: - (unary)</a></li><li><a href="#Decrement_Operator">Operator: --</a></li><li><a href="#Division_Operator">Operator: /</a></li><li><a href="#Left_Shift_Operator">Operator: &lt;&lt;</a></li><li><a href="#Less_than_or_equal_Operator">Operator: &lt;=</a></li><li><a href="#Less_than_Operator">Operator: &lt;</a></li><li><a href="#Strict_Equals_Operator">Operator: ===</a></li><li><a href="#Equals_Operator">Operator: ==</a></li><li><a href="#Simple_Assignment_Operator">Operator: =</a></li><li><a href="#Greater_than_or_equal_Operator">Operator: &gt;=</a></li><li><a href="#Unsigned_Right_Shift_Operator">Operator: &gt;&gt;&gt;</a></li><li><a href="#Signed_Right_Shift_Operator">Operator: &gt;&gt;</a></li><li><a href="#Greater_than_Operator">Operator: &gt;</a></li><li><a href="#Conditional_Operator">Operator: ?:</a></li><li><a href="#Delete_Operator">Operator: delete</a></li><li><a href="#In_Operator">Operator: in</a></li><li><a href="#Instanceof_Operator">Operator: instanceof</a></li><li><a href="#new_Operator">Operator: new</a></li><li><a href="#Compound_Assignment_Operators">Operator: op=</a></li><li><a href="#Typeof_Operator">Operator: typeof</a></li><li><a href="#Void_Operator">Operator: void</a></li><li><a href="#Member_of_Brackets_Operator">Operator: []</a></li><li><a href="#Binary_XOR_Operator">Operator: ^</a></li><li><a href="#Binary_Or_Operator">Operator: |</a></li><li><a href="#Logical_Or_Operator">Operator: ||</a></li><li><a href="#Unary_Complement_Operator">Operator: ~</a></li><li><a href="#Operators">Operators</a></li><li><a href="#Global_parseFloat">parseFloat(string)</a></li><li><a href="#Global_parseInt">parseInt(string,
            radix)</a></li><li><a href="#Part_I">Part I - Introduction to
    JavaScript</a></li><li><a href="#Part_II">Part II - JavaScript
    (Pseudo) Reference</a></li><li><a href="#RangeError">RangeError</a></li><li><a href="#ReferenceError">ReferenceError</a></li><li><a href="#RegExp_Objects">RegExp
        Objects</a></li><li><a href="#RegExp">RegExp(pattern[,
            flags])</a></li><li><a href="#RegExp.dollar">RegExp.$1 -
            RegExp.$9</a></li><li><a href="#regexp.global">regexp.global</a></li><li><a href="#regexp.ignoreCase">regexp.ignoreCase</a></li><li><a href="#RegExp.index">RegExp.index</a></li><li><a href="#RegExp.input">RegExp.input,
            RegExp.$_</a></li><li><a href="#RegExp.lastIndex">RegExp.lastIndex</a></li><li><a href="#regexp.lastIndex">regexp.lastIndex</a></li><li><a href="#RegExp.lastMatch">RegExp.lastMatch,
            RegExp['$&amp;']</a></li><li><a href="#RegExp.lastParen">RegExp.lastParen,
            RegExp['$+']</a></li><li><a href="#RegExp.leftContext">RegExp.leftContext,
            RegExp.$`</a></li><li><a href="#regexp.multiline">regexp.multiline</a></li><li><a href="#RegExp.prototype">RegExp.prototype</a></li><li><a href="#RegExp.prototype.constructor">RegExp.prototype.constructor</a></li><li><a href="#RegExp.prototype.exec">RegExp.prototype.exec(string)</a></li><li><a href="#RegExp.prototype.test">RegExp.prototype.test(string)</a></li><li><a href="#RegExp.prototype.toString">RegExp.prototype.toString()</a></li><li><a href="#RegExp.rightContext">RegExp.rightContext,
            RegExp.$'</a></li><li><a href="#regexp.source">regexp.source</a></li><li><a href="#RegExp_Pattern_digit">Regular Expresion Pattern: \d</a></li><li><a href="#Character_Patterns">Regular Expression Character
                Patterns</a></li><li><a href="#Grouping_Patterns">Regular Expression Grouping
                Patterns</a></li><li><a href="#Logical_Patterns">Regular Expression Logical
                Patterns</a></li><li><a href="#RegExp_Pattern_N">Regular Expression Pattern {N}</a></li><li><a href="#RegExp_Pattern_end">Regular Expression Pattern: $</a></li><li><a href="#RegExp_Pattern_non_capturing">Regular Expression Pattern: (?:X)</a></li><li><a href="#RegExp_Pattern_capturing">Regular Expression Pattern: (X)</a></li><li><a href="#RegExp_Pattern_any">Regular Expression Pattern: .</a></li><li><a href="#RegExp_Pattern_not_lookahead">Regular Expression Pattern: X(?!Y)</a></li><li><a href="#RegExp_Pattern_lookahead">Regular Expression Pattern: X(?=Y)</a></li><li><a href="#RegExp_Pattern_zero_more">Regular Expression Pattern: X*</a></li><li><a href="#RegExp_Pattern_one_more">Regular Expression Pattern: X+</a></li><li><a href="#RegExp_Pattern_zero_one">Regular Expression Pattern: X?</a></li><li><a href="#RegExp_Pattern_and">Regular Expression Pattern: XY</a></li><li><a href="#RegExp_Pattern_or">Regular Expression Pattern: X|Y</a></li><li><a href="#RegExp_Pattern_character_class">Regular Expression Pattern: [X-Y]</a></li><li><a href="#RegExp_Pattern_backspace">Regular Expression Pattern: [\b]</a></li><li><a href="#RegExp_Pattern_null">Regular Expression Pattern: \0</a></li><li><a href="#RegExp_Pattern_word_boundary">Regular Expression Pattern: \b</a></li><li><a href="#RegExp_Pattern_nonword_boundary">Regular Expression Pattern: \B</a></li><li><a href="#RegExp_Pattern_control_character">Regular Expression Pattern: \cC</a></li><li><a href="#RegExp_Pattern_non_digit">Regular Expression Pattern: \D</a></li><li><a href="#RegExp_Pattern_formfeed">Regular Expression Pattern: \f</a></li><li><a href="#RegExp_Pattern_newline">Regular Expression Pattern: \n</a></li><li><a href="#RegExp_Pattern_backreference">Regular Expression Pattern: \N</a></li><li><a href="#RegExp_Pattern_carriage_return">Regular Expression Pattern: \r</a></li><li><a href="#RegExp_Pattern_whitespace">Regular Expression Pattern: \s</a></li><li><a href="#RegExp_Pattern_non_whitespace">Regular Expression Pattern: \S</a></li><li><a href="#RegExp_Pattern_tab">Regular Expression Pattern: \t</a></li><li><a href="#RegExp_Pattern_unicode">Regular Expression Pattern: \uHHHH</a></li><li><a href="#RegExp_Pattern_vertical_tab">Regular Expression Pattern: \v</a></li><li><a href="#RegExp_Pattern_word">Regular Expression Pattern: \w</a></li><li><a href="#RegExp_Pattern_non_word">Regular Expression Pattern: \W</a></li><li><a href="#RegExp_Pattern_hex">Regular Expression Pattern: \xHH</a></li><li><a href="#RegExp_Pattern_escape">Regular Expression Pattern: \</a></li><li><a href="#RegExp_Pattern_begin">Regular Expression Pattern: ^</a></li><li><a href="#RegExp_Pattern_N_M">Regular Expression Pattern: {N,M}</a></li><li><a href="#RexExp_Pattern_one_more">Regular Expression Pattern: {N,}</a></li><li><a href="#Regular_Expression_Patterns">Regular Expression
            Patterns</a></li><li><a href="#Boundary_Patterns">Regular Expression Patterns: Boundaries</a></li><li><a href="#Quantifying_Patterns">Regular Expression Quantifying
                Patterns</a></li><li><a href="#Regular_Expressions_Capturing_array">Regular Expressions: Capture Arrays</a></li><li><a href="#Relational_and_Logical_Operators">Relational and Logical
        Operators</a></li><li><a href="#Reserved_Words">Reserved
        Words</a></li><li><a href="#Block_Statement">Statement: Block</a></li><li><a href="#Break_Statement">Statement: break</a></li><li><a href="#Const_Statement">Statement: const</a></li><li><a href="#Continue_Statement">Statement: continue</a></li><li><a href="#Do_While_Statement">Statement: do while</a></li><li><a href="#Empty_Statement">Statement: Empty</a></li><li><a href="#Expression_Statement">Statement: Expression</a></li><li><a href="#For_In_Statement">Statement: for in</a></li><li><a href="#For_Statement">Statement: for</a></li><li><a href="#If_Statement">Statement: if</a></li><li><a href="#Switch_Statement">Statement: switch</a></li><li><a href="#Throw_Statement">Statement: throw</a></li><li><a href="#Try_Catch_Finally_Statements">Statement: try, catch, finally</a></li><li><a href="#Var_Statement">Statement: var</a></li><li><a href="#While_Statement">Statement: while</a></li><li><a href="#String">String</a></li><li><a href="#String_Objects">String
        Objects</a></li><li><a href="#String.fromCharCode">String.fromCharCode([char0[,
            char1[, …]]])</a></li><li><a href="#string.length">string.length</a></li><li><a href="#String.prototype">String.prototype</a></li><li><a href="#String.prototype.charAt">String.prototype.charAt(pos)</a></li><li><a href="#String.prototype.charCodeAt">String.prototype.charCodeAt(pos)</a></li><li><a href="#String.prototype.concat">String.prototype.concat([string1[,
            string2[, …]]])</a></li><li><a href="#String.prototype.constructor">String.prototype.constructor</a></li><li><a href="#String.prototype.indexOf">String.prototype.indexOf(searchString,
            position)</a></li><li><a href="#String.prototype.lastIndexOf">String.prototype.lastIndexOf(searchString,
            position)</a></li><li><a href="#String.prototype.localeCompare">String.prototype.localeCompare(that)</a></li><li><a href="#String.prototype.match">String.prototype.match(regexp)</a></li><li><a href="#String.prototype.replace">String.prototype.replace(searchValue,
            replaceValue)</a></li><li><a href="#String.prototype.search">String.prototype.search(regexp)</a></li><li><a href="#String.prototype.slice">String.prototype.slice(start,end)</a></li><li><a href="#String.prototype.split">String.prototype.split(separator,limit)</a></li><li><a href="#String.prototype.substr">String.prototype.substr(start,
            length)</a></li><li><a href="#String.prototype.substring">String.prototype.substring(start,
            end)</a></li><li><a href="#String.prototype.toLocaleLowerCase">String.prototype.toLocaleLowerCase()</a></li><li><a href="#String.prototype.toLocaleUpperCase">String.prototype.toLocaleUpperCase()</a></li><li><a href="#String.prototype.toLowerCase">String.prototype.toLowerCase()</a></li><li><a href="#String.prototype.toString">String.prototype.toString()</a></li><li><a href="#String.prototype.toUpperCase">String.prototype.toUpperCase()</a></li><li><a href="#String.prototype.valueOf">String.prototype.valueOf()</a></li><li><a href="#SyntaxError">SyntaxError</a></li><li><a href="#Global_Object">The Global
        Object</a></li><li><a href="#Math_Object">The Math
        Object</a></li><li><a href="#Type_Conversions">Type
    Conversions</a></li><li><a href="#TypeError">TypeError</a></li><li><a href="#Unary_Operators">Unary
        Operators</a></li><li><a href="#Global_undefined">undefined</a></li><li><a href="#URIError">URIError</a></li></ul><div class="metabottom"><div>Copyright © 2004 by Bob Clary</div></div><hr /><table class="metabottom" border="0" cellpadding="0" cellspacing="0" summary="Navigation Links" width="100%"><tr><td width="30%"><a href="/2004/09/26/boot-camp">First</a></td><td width="30%">
	       
	      <a href="/2004/09/26/boot-camp-content-type">Prev</a>
	       
	      </td><td width="30%">
	       
	      </td></tr></table><table class="metabottom" border="0" cellpadding="0" cellspacing="0" summary="Navigation Links" width="100%"><tr><td width="50%"><a href="/home" title="What's new on bclary.com">Home</a> |
	    <a href="/index" title="Site index">Index</a> | 
	    <a href="../" title="Move up one directory level">Up</a> | 
	    <a href="#banner" title="Go to the top of the page">Top</a></td><td width="50%"><a href="/2004/feedback" title="Send email to Bob">Feedback</a></td></tr></table></body>
</html>
