<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">


<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
<title>Metaclass programming in Python</title>
<meta http-equiv="PICS-Label" content='(PICS-1.1 "http://www.icra.org/ratingsv02.html" l gen true r (cz 1 lz 1 nz 1 oz 1 vz 1) "http://www.rsac.org/ratingsv01.html" l gen true r (n 0 s 0 v 0 l 0) "http://www.classify.org/safesurf/" l gen true r (SS~~000 1))'/>
<link rel="schema.DC" href="http://purl.org/DC/elements/1.0/"/>
<link rel="SHORTCUT ICON" href="http://www.ibm.com/favicon.ico"/>
<meta name="Owner" content="developerWorks Content/Raleigh/IBM"/>
<meta name="DC.Language" scheme="rfc1766" content="en"/>
<meta name="IBM.Country" content="ZZ"/>
<meta name="Security" content="Public"/>
<meta name="IBM.SpecialPurpose" content="SP001"/>
<meta name="IBM.PageAttributes" content="sid=1003"/>
<meta name="Source" content="v16 Template Generator"/>
<meta name="Robots" content="index,follow"/>
<meta name="Abstract" content="Most readers are already familiar with the concepts of object-oriented programming: inheritance, encapsulation, polymorphism. But the creation of objects of a given class, with certain parents, is usually thought of as a 'just so' operation. It turns out that a number of new programming constructs become either easier, or possible at all, when you can customize the process of object creation. Metaclasses enable certain types of 'aspect-oriented programming,' for example, you can enhance classes with features like tracing capabilities, object persistence, exception logging, and more."/>
<meta name="Description" content="Most readers are already familiar with the concepts of object-oriented programming: inheritance, encapsulation, polymorphism. But the creation of objects of a given class, with certain parents, is usually thought of as a 'just so' operation. It turns out that a number of new programming constructs become either easier, or possible at all, when you can customize the process of object creation. Metaclasses enable certain types of 'aspect-oriented programming,' for example, you can enhance classes with features like tracing capabilities, object persistence, exception logging, and more."/>
<meta name="Keywords" content="David Mertz Michele Simionato python metaclasses object-oriented oop creating objects aspect-oriented programming asp persistence logging ibm developerworks linux zone, tttlca"/>
<meta name="DC.Date" scheme="iso8601" content="2003-02-26"/>
<meta name="DC.Type" scheme="IBM_ContentClassTaxonomy" content="CT316"/>
<meta name="DC.Subject" scheme="IBM_SubjectTaxonomy" content="SWGC0"/>
<meta scheme="IBM_WTMCategory" name="IBM.WTMCategory" content="SOFDCLNXZZ" />
<meta name="DC.Rights" content="© Copyright IBM Corporation 2003"/>
<meta name="IBM.Effective" scheme="W3CDTF" content="2003-02-26"/>
<meta name="title" content="Metaclass programming in Python"/>

<!-- HEADER_SCRIPTS_AND_CSS_INCLUDE -->
<link href="//dw1.s81c.com/common/v16/css/all.css" media="all" rel="stylesheet" title="www" type="text/css"/>
<link href="//dw1.s81c.com/common/v16/css/screen.css" media="screen,projection" rel="stylesheet" title="www" type="text/css"/>
<link href="//dw1.s81c.com/common/v16/css/screen-uas.css" media="screen,projection" rel="stylesheet" title="www" type="text/css"/>
<link href="//dw1.s81c.com/common/v16/css/zz/en/screen-fonts.css" media="screen,projection" rel="stylesheet" title="www" type="text/css"/>
<link href="//dw1.s81c.com/common/v16/css/handheld.css" media="handheld" rel="stylesheet" title="www" type="text/css"/>
<link href="//dw1.s81c.com/common/v16/css/print.css" media="print" rel="stylesheet" title="www" type="text/css"/>
<link href="//dw1.s81c.com/common/v16/css/overlay.css" media="screen,projection" rel="stylesheet" title="www" type="text/css"/>

<!-- dW-specific CSS -->
<link href="//dw1.s81c.com/developerworks/css/dw-screen.css" media="screen,projection" rel="stylesheet" title="www" type="text/css"/>
<link href="//dw1.s81c.com/developerworks/css/dw-screen-comments-ratings-signin.css" media="screen,projection" rel="stylesheet" title="www" type="text/css"/>
<link href="//dw1.s81c.com/developerworks/js/jquery/cluetip98/jquery.cluetip.css" media="screen,projection" rel="stylesheet"  title="www" type="text/css" />

<script src="//dw1.s81c.com/common/js/ibmcommon.js" type="text/javascript">//</script>
<script src="//dw1.s81c.com/common/js/dynamicnav.js" type="text/javascript">//</script>

<!-- dW functional JS -->
<script language="JavaScript" src="//dw1.s81c.com/developerworks/js/urltactic.js" type="text/javascript"></script>
<!-- Rating_START -->
<script language="JavaScript" src="//dw1.s81c.com/developerworks/js/artrating/showrating.js" type="text/javascript"></script>
<style type="text/css">
.metavalue {
  display: none;
}
</style>
<!-- Rating_END --><!-- RESERVED_HEADER_INCLUDE -->
<script language="javascript" src="//dw1.s81c.com/developerworks/js/ajax1.js" type="text/javascript"></script>
<script language="javascript" src="//dw1.s81c.com/developerworks/js/search_counter-maverick.js" type="text/javascript"></script>
<script language="javascript" src="//dw1.s81c.com/developerworks/js/request_referer_capture-maverick.js" type="text/javascript"></script>
<script language="JavaScript" type="text/javascript">
 <!--
 setDefaultQuery('');
 //-->
</script>
<script language="JavaScript" type="text/javascript">
 <!--
 function openNewWindow(url,tar,arg){window.open(url,tar,arg);}
 //-->
</script>
<!-- Include file support -->
<script language="JavaScript" type="text/javascript">
(function($) {
	jQuery.extend({
		getInc: function(u,d){
			if(u==null)return;
			jQuery.ajax({
	    		type: "GET",
			url: u,
			dataType: "text",
	        	success: function(t) {
				jQuery(d).html(t);
				ibmCommon.initShowHide(jQuery(d).children()[0]);			
			},
			async: true
			});
		}
	});
})(jQuery);
</script>
</head>

<body id="ibm-com">
<div id="ibm-top" class="ibm-landing-page">

<!-- MASTHEAD_BEGIN -->
<div class="ibm-access"><a href="#ibm-content">Skip to main content</a></div>
<div id="ibm-masthead">
<div id="ibm-logo"><a href="http://www.ibm.com/"><img height="50" src="//dw1.s81c.com/i/v16/t/ibm-logo.gif" width="110" alt="IBM®" /></a></div>
<ul id="ibm-geo"><li id="ibm-country" class="ibm-first">Country/region</li><li id="ibm-change-country">[ <a href="http://www.ibm.com/developerworks/country/">select</a> ]</li></ul>
  <form id="ibm-search-form" action="//www.ibm.com/developerworks/search/searchResults.jsp" method="get" name="form1"><input type="hidden" name="searchType" value="1"/><input type="hidden" name="searchSite" value="dW"/><p>
<span id="ibm-search-scope">
<label for="sn"><img src="//dw1.s81c.com/i/c.gif" width="1" height="1" alt="Search in:"/></label>
<select name="searchScope" id="sn">
<option value="dW" selected="selected">All of dW</option>
<option value="dW">-----------------</option>
<option value="aixunix">&nbsp;AIX and UNIX</option>
<option value="db2">&nbsp;Information Mgmt</option>
<option value="lotus">&nbsp;Lotus</option>
<option value="rdd">&nbsp;Rational</option>
<option value="tivoli">&nbsp;Tivoli</option>  
<option value="WSDD">&nbsp;WebSphere</option>
<option value="dW">-----------------</option> 
<option value="javaZ">&nbsp;Java technology</option> 
<option value="linuxZ">&nbsp;Linux</option> 
<option value="opensrcZ">&nbsp;Open source</option>
<option value="webservZ">&nbsp;SOA/Web services</option>
<option value="webarchZ">&nbsp;Web development</option>  
<option value="xmlZ">&nbsp;XML</option>
<option value="dW">-----------------</option>
<option value="forums">&nbsp;dW forums</option> 
<option value="dW">-----------------</option>
<option value="aI">University</option>
<option value="dW">-----------------</option>
<option value="aW">alphaWorks</option>
<option value="dW">-----------------</option>
<option value="all">All of IBM</option>
</select>
</span>

<label for="q"><img alt="Search for:" height="1" width="1" src="//dw1.s81c.com/i/c.gif" /></label><input type="text" name="query" maxlength="100" id="q"/><input type="submit" id="ibm-search" class="ibm-btn-search" name="Search" value="Search" /></p></form>
<div id="ibm-site-name">
<!-- IBM site name container -->
</div>
<div id="ibm-universal-nav">
<ul><li id="ibm-unav-home" class="ibm-first"><a href="http://www.ibm.com/">Home</a></li><li id="ibm-unav-solutions"><a href="http://www.ibm.com/solutions/">Solutions</a></li><li id="ibm-unav-services"><a href="http://www.ibm.com/technologyservices/">Services</a></li><li id="ibm-unav-products"><a href="http://www.ibm.com/products/">Products</a></li><li id="ibm-unav-support"><a href="http://www.ibm.com/support/">Support &amp; downloads</a></li><li id="ibm-unav-myibm"><a href="http://www.ibm.com/account/">My IBM</a></li></ul>
</div>
</div>
<!-- MASTHEAD_END -->

<div id="ibm-pcon">

<!-- CONTENT_BEGIN -->
<div id="ibm-content">

<!-- Navigation_Trail_BEGIN -->
<!-- &nbsp; -->
        <div id="ibm-content-head"><ul id="ibm-navigation-trail"><li class="ibm-first"><a href="http://www.ibm.com/developerworks/">developerWorks</a></li><li><a href="http://www.ibm.com/developerworks/linux/">Linux</a></li><li><a href="http://www.ibm.com/developerworks/views/linux/library.jsp">Technical library</a></li></ul></div>
<!-- Navigation_Trail_END -->

<!-- dW_Summary Area_START -->
<div id="dw-summary-article">

<div class="dw-content-head">
<h1>Metaclass programming in Python</h1><p><em>Pushing object-oriented programming to the next level</em></p>
</div>

<div class="ibm-container-body ibm-two-column">

<div class="ibm-column ibm-first">
<div class="author"><a class="dwauthor" rel="#authortip1" href="#author1">David Mertz</a> (<a href="mailto:mertz@gnosis.cx?subject=Metaclass programming in Python">mertz@gnosis.cx</a>), Developer, Gnosis Software, Inc.</div><div id="authortip1" class="dwauthor-onload-state ibm-no-print">
			David Mertz thought his brain would melt when he wrote about continuations or semi-coroutines, but he put the gooey mess back in his skull cavity and moved on to metaclasses.  David
    may be reached at <a href="mailto:mertz@gnosis.cx">mertz@gnosis.cx</a>; his life pored over at <a href="http://gnosis.cx/dW/">his personal Web page</a>.  Suggestions and recommendations on this, past, or future 
    columns are welcome.  Learn about his forthcoming book, <a href="http://gnosis.cx/TPiP/">
                    <i>Text
    Processing in Python</i>
                </a>.
		</div><div class="author"><a class="dwauthor" rel="#authortip2" href="#author2">Michele Simionato</a> (<a href="mailto:mis6+@pitt.edu?subject=Metaclass programming in Python">mis6+@pitt.edu</a>), Physicist, University of Pittsburgh</div><div id="authortip2" class="dwauthor-onload-state ibm-no-print"><div class="position"><img src="http://www-106.ibm.com/developerworks/i/p-simionato.jpg" width="64" height="80" alt="Michele Simionato" /></div>			Michele Simionato is a plain, ordinary, theoretical physicist
    who was driven to Python by a quantum fluctuation that could
    well have passed without consequences had he not met David
    Mertz.  He will let his readers judge the final outcome.
  </div>
<p></p>
<p><b>Summary:</b>&nbsp; Most readers are already familiar with the concepts of
      object-oriented programming: inheritance, encapsulation, polymorphism. But the
        <i>creation</i> of objects of a given class, with certain parents, is usually
      thought of as a "just so" operation. It turns out that a number of new programming
      constructs become either easier, or possible at all, when you can customize the
      process of object creation. Metaclasses enable certain types of "aspect-oriented
      programming," for example, you can enhance classes with features like tracing
      capabilities, object persistence, exception logging, and more.</p>

<div id="dw-tag-content" class="ibm-no-print"></div><div id="dw-moretags-access" class="ibm-access"></div>
<p class="ibm-no-print"><div id="dw-tag-this" class="ibm-no-print"><a class="ibm-external-link" onclick="jQuery.launchTagThisWindow(); return false;" href="#">Tag this!</a></div><div id="interestShow" class="ibm-no-print"></div></p>
</div>

<div class="ibm-column ibm-second">
<p class="leading"><b>Date:</b>&nbsp; 26 Feb  2003
<br /><b>Level: </b>&nbsp;Introductory

<br /><b>Also available in:&nbsp;</b>


&nbsp;<a href="http://www.ibm.com/developerworks/ru/library/l-pymeta/">Russian</a> 
&nbsp;<a href="http://www.ibm.com/developerworks/jp/linux/library/l-pymeta/">Japanese</a> 



<br />
<br /><b>Activity:</b>&nbsp; 54551 views
<br /><b>Comments:</b> &nbsp; <span id="nCmts"><img alt="" src="//dw1.s81c.com/developerworks/i/circle-preloader.gif" height="12" width="50" /><img alt="" src="//dw1.s81c.com/i/c.gif" height="14" width="1" /></span>
<!-- Rating_Area_Begin -->
<div id="art-rating-summary"></div>
<!-- Rating_Area_End -->
</p>
</div>

</div>
</div>
<!-- dW_Summary_Area_END -->

<!-- CONTENT_BODY -->
<div id="ibm-content-body">

<!-- MAIN_COLUMN_BEGIN -->
<div id="ibm-content-main">

<!-- Related_Searches_Area -->
<!-- Related_Searches_Area_Begin -->
<script type="text/javascript" language="javascript">
	     capture_referrer();
</script>

<div id="dw-related-searches-article" style="display:none">
<div class="ibm-container ibm-alternate-two">
<div class="ibm-container-body">

<!--  START : HTML FOR ARTICLE SEARCH -->
  <div id="article_results" style="display:block"></div>
<!--  END : HTML FOR ARTICLE SEARCH -->

</div>
</div>
</div>
<!-- Related_Searches_Area_End -->
<!-- MAIN_COLUMN_CONTAINER_BEGIN -->
<div class="ibm-container">

<!-- MAIN_COLUMN_CONTENT_BEGIN -->
<p><a name="h1"><span class="atitle">Review of object-oriented programming</span></a></p>

            <p> Let's start with a 30-second review of just what OOP is. In an object-oriented
        programming language, you can define <i>classes</i>, whose purpose is to bundle
        together related data and behaviors. These classes can inherit some or all of
        their qualities from their <i>parents</i>, but they can also define attributes
        (data) or methods (behaviors) of their own. At the end of the process, classes
        generally act as templates for the creation of <i>instances</i> (at times also
        called simply <i>objects</i>). Different instances of the same class will
        typically have different data, but it will come in the same shape -- for example,
        the <code>Employee</code> objects <code>bob</code> and
        <code>jane</code> both have a <code>.salary</code> and
        a <code>.room_number</code>, but not the same room and salary as
        each other. </p>
            <div class="ibm-container ibm-alt-header dw-container-sidebar"><h2>More in this series</h2><div class="ibm-container-body">
                
                <ul>
                    <li> "<a href="http://www.ibm.com/developerworks/linux/library/l-pymeta2" onmouseover="linkQueryAppend(this)">Metaclass programming in Python, Part 2</a>"
        goes into more detail on the subtleties of Python metaclasses.<br />
                        <br />
                    </li>
                    <li> "<a href="http://www.ibm.com/developerworks/linux/library/l-pymeta3.html" onmouseover="linkQueryAppend(this)">Metaclass programming in Python, Part 3</a>"
        recommends avoiding overly clever custom metaclasses.<br />
                        <br />
                    </li>
                    <li>Read <a href="http://www.ibm.com/developerworks/views/linux/libraryview.jsp?topic_by=All+topics+and+related+products&amp;sort_order=desc&amp;lcl_sort_order=desc&amp;search_by=charming+python%3A&amp;search_flag=true&amp;type_by=All+Types&amp;show_abstract=true&amp;start_no=1&amp;sort_by=Date&amp;end_no=100&amp;show_all=false" onmouseover="linkQueryAppend(this)">more
articles by David and Michele.</a>
                    </li>
                </ul>
            </div></div>

            <p> Some OOP languages, including Python, allow for objects to be
        <i>introspective</i> (also called <i>reflective</i>). That is, an introspective
        object is able to describe itself: What class does the instance belong to? What
        ancestors does that class have? What methods and attributes are available to the
        object? Introspection lets a function or method that handles objects make
        decisions based on what kind of object it is passed. Even without introspection,
        functions frequently branch based on instance data -- for example, the route to
        <code>jane.room_number</code> differs from that to
        <code>bob.room_number</code> because they are in different rooms.
        With introspection, you can also safely calculate the bonus
        <code>jane</code> gets, while skipping the calculation for
        <code>bob</code>, for example, because
        <code>jane</code> has a <code>.profit_share</code>
        attribute, or because <code>bob</code> is an instance of the
        subclass <code>Hourly(Employee)</code>. </p>
            <div class="ibm-alternate-rule"><hr/></div><p class="ibm-ind-link ibm-back-to-top"><a href="#ibm-pcon" class="ibm-anchor-up-link">Back to top</a></p><p><a name="h2"><span class="atitle">A metaprogramming rejoinder</span></a></p>
            <p> The basic OOP system sketched above is quite powerful. But there is one element
        brushed over in the description: in Python (and other languages), classes are
        themselves objects that can be passed around and introspected. Since objects, as
        stated, are produced using classes as templates, what acts as a template for
        producing classes? The answer, of course, is <i>metaclasses</i>. </p>

            <p> Python has always had metaclasses. But the machinery involved in metaclasses
        became much better exposed with Python 2.2. Specifically, with version 2.2, Python
        stopped being a language with just one special (mostly hidden) metaclass that
        created every class object. Now programmers can subclass the aboriginal metaclass
        <code>type</code> and even dynamically generate classes with varying
        metaclasses. Of course, just because you <i>can</i> manipulate metaclasses in
        Python 2.2, that does not explain why you might want to. </p>
            <p> Moreover, you do not need to use custom metaclasses to manipulate the production
        of classes. A slightly less brain-melting concept is a <i>class factory</i>: An
        ordinary function can return a class that was dynamically created within the
        function body. In traditional Python syntax, you can write: </p>
            <table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
Python 1.5.2 (#0, Jun 27 1999, 11:23:01) [...]
Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam
&gt;&gt;&gt; def class_with_method(func):
...     class klass: pass
...     setattr(klass, func.__name__, func)
...     return klass
...
&gt;&gt;&gt; def say_foo(self): print 'foo'
...
&gt;&gt;&gt; Foo = class_with_method(say_foo)
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo.say_foo()
foo
</pre></td></tr></table><br />
            <p> The factory function <code>class_with_method()</code> dynamically
        creates and returns a class that contains the method/function passed into the
        factory. The class itself is manipulated within the function body before being
        returned. The <code>new</code> module provides a more concise
        spelling, but without the same options for custom code within the body of the
        class factory, for example: </p>
            <table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
&gt;&gt;&gt; from new import classobj
&gt;&gt;&gt; Foo2 = classobj('Foo2',(Foo,),{'bar':lambda self:'bar'})
&gt;&gt;&gt; Foo2().bar()
'bar'
&gt;&gt;&gt; Foo2().say_foo()
foo
</pre></td></tr></table><br />
            <p> In all these cases, the behaviors of the class (<code>Foo</code>,
        <code>Foo2</code>) are not directly written as code, but are instead
        created by calling functions at runtime, with dynamic arguments. And it should be
        emphasized that it is not merely the <i>instances</i> that are so dynamically
        created, but the <i>classes</i> themselves. </p>
            <div class="ibm-alternate-rule"><hr/></div><p class="ibm-ind-link ibm-back-to-top"><a href="#ibm-pcon" class="ibm-anchor-up-link">Back to top</a></p><p><a name="h3"><span class="atitle">Metaclasses: a solution looking for a
        problem?</span></a></p>
            <blockquote> Metaclasses are deeper magic than 99% of users should ever worry about.
        If you wonder whether you need them, you don't (the people who actually need them
        know with certainty that they need them, and don't need an explanation about why).
        -- Python Guru Tim Peters </blockquote>

            <p> Methods (of classes), like plain functions, can return objects. So in that sense
        it is obvious that class factories can be classes just as easily as they can be
        functions. In particular, Python 2.2+ provides a special class called
        <code>type</code> that is just such a class factory. Of course,
        readers will recognize <code>type()</code> as a less ambitious
        built-in function of older Python versions -- fortunately, the behaviors of the
        old <code>type()</code> function are maintained by the
        <code>type</code> class (in other words,
        <code>type(obj)</code> returns the type/class of the object
        <code>obj</code>). The new <code>type</code> class
        works as a class factory in just the same way that the function
        <code>new.classobj</code> long has: </p>
            <table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
&gt;&gt;&gt; X = type('X',(),{'foo':lambda self:'foo'})
&gt;&gt;&gt; X, X().foo()
(&lt;class '__main__.X'&gt;, 'foo')
</pre></td></tr></table><br />
            <p> But since <code>type</code> is now a (meta)class, you are free to
        subclass it: </p>
            <table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
&gt;&gt;&gt; class ChattyType(type):
...     def __new__(cls, name, bases, dct):
...         print "Allocating memory for class", name
...         return type.__new__(cls, name, bases, dct)
...     def __init__(cls, name, bases, dct):
...         print "Init'ing (configuring) class", name
...         super(ChattyType, cls).__init__(name, bases, dct)
...
&gt;&gt;&gt; X = ChattyType('X',(),{'foo':lambda self:'foo'})
Allocating memory for class X
Init'ing (configuring) class X
&gt;&gt;&gt; X, X().foo()
(&lt;class '__main__.X'&gt;, 'foo')
</pre></td></tr></table><br />
            <p> The magic methods <code>.__new__()</code> and
        <code>.__init__()</code> are special, but in conceptually the same
        way they are for any other class. The <code>.__init__()</code>
        method lets you configure the created object; the
        <code>.__new__()</code> method lets you customize its allocation.
        The latter, of course, is not widely used, but exists for every Python 2.2
        new-style class (usually inherited but not overridden). </p>
            <p> There is one feature of <code>type</code> descendents to be
        careful about; it catches everyone who first plays with metaclasses. The first
        argument to methods is conventionally called <code>cls</code> rather
        than <code>self</code>, because the methods operate on the
          <i>produced</i> class, not the metaclass. Actually, there is nothing special
        about this; all methods attach to their instances, and the instance of a metaclass
        is a class. A non-special name makes this more obvious: </p>
            <table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
&gt;&gt;&gt; class Printable(type):
...     def whoami(cls): print "I am a", cls.__name__
...
&gt;&gt;&gt; Foo = Printable('Foo',(),{})
&gt;&gt;&gt; Foo.whoami()
I am a Foo
&gt;&gt;&gt; Printable.whoami()
Traceback (most recent call last):
TypeError:  unbound method whoami() [...]
</pre></td></tr></table><br />

            <p> All this surprisingly non-remarkable machinery comes with some syntax sugar that
        both makes working with metaclasses easier, and confuses new users. There are
        several elements to the extra syntax. The resolution order of these new variations
        is tricky though. Classes can inherit metaclasses from their ancestors -- notice
        that this is <b>not</b> the same thing as <i>having</i> metaclasses as ancestors
        (another common confusion). For old-style classes, defining a global
        <code>_metaclass_</code> variable can force a custom metaclass to be
        used. But most of the time, and the safest approach, is to set a
        <code>_metaclass_</code> class attribute for a class that wants to
        be created via a custom metaclass. You must set the variable in the class
        definition itself since the metaclass is not used <i>if</i> the attribute is set
        later (after the class object has already been created). For example: </p>
            <table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
&gt;&gt;&gt; class Bar:
...     __metaclass__ = Printable
...     def foomethod(self): print 'foo'
...
&gt;&gt;&gt; Bar.whoami()
I am a Bar
&gt;&gt;&gt; Bar().foomethod()
foo
</pre></td></tr></table><br />
            <div class="ibm-alternate-rule"><hr/></div><p class="ibm-ind-link ibm-back-to-top"><a href="#ibm-pcon" class="ibm-anchor-up-link">Back to top</a></p><p><a name="h4"><span class="atitle">Solving problems with magic</span></a></p>
            <p> So far, we have seen the basics of metaclasses. But putting metaclasses to work
        is more subtle. The challenge with utilizing metaclasses is that in typical OOP
        design, classes do not really <i>do</i> much. The inheritance structure of classes
        is useful to encapsulate and package data and methods, but it is typically
        instances that one works with in the concrete. </p>
            <p> There are two general categories of programming tasks where we think metaclasses
        are genuinely valuable. </p>
            <p> The first, and probably more common category is where you do not know at design
        time <i>exactly</i> what a class needs to do. Obviously, you will have some idea
        about it, but some particular detail might depend on information that is not
        available until later. "Later" itself can be of two sorts: (a) When a library
        module is used by an application; (b) At runtime when some situation exists. This
        category is close to what is often called "Aspect-Oriented Programming" (AOP).
        We'll show what we think is an elegant example: </p>
            <table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
% cat dump.py
#!/usr/bin/python
import sys
if len(sys.argv) &gt; 2:
    module, metaklass  = sys.argv[1:3]
    m = __import__(module, globals(), locals(), [metaklass])
    __metaclass__ = getattr(m, metaklass)

class Data:
    def __init__(self):
        self.num = 38
        self.lst = ['a','b','c']
        self.str = 'spam'
    dumps   = lambda self: `self`
    __str__ = lambda self: self.dumps()

data = Data()
print data

% dump.py
&lt;__main__.Data instance at 1686a0&gt;
</pre></td></tr></table><br />

            <p> As you would expect, this application prints out a rather generic description of
        the <code>data</code> object (a conventional instance object). But
        if <i>runtime</i> arguments are passed to the application, we can get a rather
        different result: </p>
            <table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
% dump.py gnosis.magic MetaXMLPickler
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE PyObject SYSTEM "PyObjects.dtd"&gt;
&lt;PyObject module="__main__" class="Data" id="720748"&gt;
&lt;attr name="lst" type="list" id="980012" &gt;
  &lt;item type="string" value="a" /&gt;
  &lt;item type="string" value="b" /&gt;
  &lt;item type="string" value="c" /&gt;
&lt;/attr&gt;
&lt;attr name="num" type="numeric" value="38" /&gt;
&lt;attr name="str" type="string" value="spam" /&gt;
&lt;/PyObject&gt;
</pre></td></tr></table><br />

            <p> The particular example uses the serialization style of
        <code>gnosis.xml.pickle</code>, but the most current
        <code>gnosis.magic</code> package also contains metaclass
        serializers <code>MetaYamlDump</code>,
        <code>MetaPyPickler</code>, and
        <code>MetaPrettyPrint</code>. Moreover, a user of the
        <code>dump.py</code> "application" can impose the use of any
        "MetaPickler" desired, from any Python package that defines one. Writing an
        appropriate metaclass for this purpose will look something like: </p>
            <table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
class MetaPickler(type):
    "Metaclass for gnosis.xml.pickle serialization"
    def __init__(cls, name, bases, dict):
        from gnosis.xml.pickle import dumps
        super(MetaPickler, cls).__init__(name, bases, dict)
        setattr(cls, 'dumps', dumps)
</pre></td></tr></table><br />
            <p> The remarkable achievement of this arrangement is that the application
        programmer need have no knowledge about what serialization will be used -- nor
        even whether serialization or some other cross-sectional capability will be added
          <b>at the command-line</b>. </p>

            <p> Perhaps the most common use of metaclasses is similar to that of MetaPicklers:
        adding, deleting, renaming, or substituting methods for those defined in the
        produced class. In our example, a "native" <code>Data.dump()</code>
        method is replaced by a different one from outside the application, at the time
        the class <code>Data</code> is created (and therefore in every
        subsequent instance). </p>
            <div class="ibm-alternate-rule"><hr/></div><p class="ibm-ind-link ibm-back-to-top"><a href="#ibm-pcon" class="ibm-anchor-up-link">Back to top</a></p><p><a name="h5"><span class="atitle">More ways to solve problems with magic</span></a></p>

            <p> There is a programming niche where classes are often more important than
        instances. For example, <i>declarative mini-languages</i> are Python libraries
        whose program logic is expressed directly in class declarations. David examines
        them in his article
        "<a href="http://www.ibm.com/developerworks/library/l-cpdec.html">Create declarative mini-languages</a>".
        In such cases, using metaclasses to affect the process of class creation can be
        quite powerful.</p>
            <p> One class-based declarative framework is
        <code>gnosis.xml.validity</code>. Under this framework, you declare
        a number of "validity classes" that express a set of constraints about valid XML
        documents. These declarations are very close to those contained in DTDs. For
        example, a "dissertation" document can be configured with the code: </p>
            <table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
from gnosis.xml.validity import *
class figure(EMPTY):      pass
class _mixedpara(Or):     _disjoins = (PCDATA, figure)
class paragraph(Some):    _type = _mixedpara
class title(PCDATA):      pass
class _paras(Some):       _type = paragraph
class chapter(Seq):       _order = (title, _paras)
class dissertation(Some): _type = chapter</pre></td></tr></table><br />
            <p> If you try to instantiate the <code>dissertation</code> class
        without the right component subelements, a descriptive exception is raised;
        likewise for each of the subelements. The proper subelements will be generated
        from simpler arguments when there is only one unambiguous way of "lifting" the
        arguments to the correct types. </p>
            <p> Even though validity classes are often (informally) based on a pre-existing DTD,
        instances of these classes print themselves as unadorned XML document fragments,
        for example: </p>
            <table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
&gt;&gt;&gt; from simple_diss import *
&gt;&gt;&gt; ch = LiftSeq(chapter, ('It Starts','When it began'))
&gt;&gt;&gt; print ch
&lt;chapter&gt;&lt;title&gt;It Starts&lt;/title&gt;
&lt;paragraph&gt;When it began&lt;/paragraph&gt;
&lt;/chapter&gt;
</pre></td></tr></table><br />
            <p> By using a metaclass to create the validity classes, we can generate a DTD out
        of the class declarations themselves (and add an extra method to the classes while
        we do it): </p>
            <table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
&gt;&gt;&gt; from gnosis.magic import DTDGenerator, \
...                          import_with_metaclass, \
...                          from_import
&gt;&gt;&gt; d = import_with_metaclass('simple_diss',DTDGenerator)
&gt;&gt;&gt; from_import(d,'**')
&gt;&gt;&gt; ch = LiftSeq(chapter, ('It Starts','When it began'))
&gt;&gt;&gt; print ch.with_internal_subset()
&lt;?xml version='1.0'?&gt;
&lt;!DOCTYPE chapter [
&lt;!ELEMENT figure EMPTY&gt;
&lt;!ELEMENT dissertation (chapter)+&gt;
&lt;!ELEMENT chapter (title,paragraph+)&gt;
&lt;!ELEMENT title (#PCDATA)&gt;
&lt;!ELEMENT paragraph ((#PCDATA|figure))+&gt;
]&gt;
&lt;chapter&gt;&lt;title&gt;It Starts&lt;/title&gt;
&lt;paragraph&gt;When it began&lt;/paragraph&gt;
&lt;/chapter&gt;
</pre></td></tr></table><br />
            <p> The package <code>gnosis.xml.validity</code> knows nothing about
        DTDs and internal subsets. Those concepts and capabilities are introduced entirely
        by the metaclass <code>DTDGenerator</code>, without <i>any</i>
        change made to either <code>gnosis.xml.validity</code> or
        <code>simple_diss.py</code>. <code>DTDGenerator</code>
        does not substitute its own <code>.__str__()</code> method into
        classes it produces -- you can still print the unadorned XML fragment -- but it a
        metaclass could easily modify such magic methods. </p>
            <div class="ibm-alternate-rule"><hr/></div><p class="ibm-ind-link ibm-back-to-top"><a href="#ibm-pcon" class="ibm-anchor-up-link">Back to top</a></p><p><a name="h6"><span class="atitle">Meta conveniences</span></a></p>
            <p> The package <code>gnosis.magic</code> contains several utilities
        for working with metaclasses, as well as some sample metaclasses you can use in
        aspect-oriented programming. The most important of these utilities is
        <code>import_with_metaclass()</code>. This function, utilized in the
        above example, lets you import a third-party module, but create all the module
        classes using a custom metaclass rather than <code>type</code>.
        Whatever new capability you might want to impose on that third-party module can be
        defined in a metaclass that you create (or get from somewhere else altogether).
        <code>gnosis.magic</code> contains some pluggable serialization
        metaclasses; some other package might contain tracing capabilities, or object
        persistence, or exception logging, or something else. </p>
            <p> The <code>import_with_metclass()</code> function illustrates
        several qualities of metaclass programming: </p>
            <table width="100%" cellpadding="0" cellspacing="0" border="0"><tr><td class="code-outline"><pre class="displaycode">
				
def import_with_metaclass(modname, metaklass):
    "Module importer substituting custom metaclass"
    class Meta(object): __metaclass__ = metaklass
    dct = {'__module__':modname}
    mod = __import__(modname)
    for key, val in mod.__dict__.items():
        if inspect.isclass(val):
            setattr(mod, key, type(key,(val,Meta),dct))
    return mod
</pre></td></tr></table><br />

            <p> One notable style in this function is that an ordinary class
        <code>Meta</code> is produced using the specified metaclass. But
        once <code>Meta</code> is added as an ancestor, its descendent is
        also produced using the custom metaclass. In principle, a class like
        <code>Meta</code> could carry with it <i>both</i> a metaclass
        producer <i>and</i> a set of inheritable methods -- the two aspects of its bequest
        are orthogonal. </p>
        <!-- CMA ID: 11287 --> <!-- Site ID: 1 --><!--XSLT stylesheet used to transform this file: dw-document-html-6.0.xsl-->
<br />
<p><a name="resources"><span class="atitle">Resources</span></a></p>
            <ul><li> A useful book on metaclasses is <i>Putting Metaclasses to Work</i> by Ira R.
          Forman and Scott Danforth (Addison-Wesley; 1999).<br />
                    <br />
                <br /><br /></li><li> For metaclasses in Python specifically, Guido van Rossum's essay,
          "<a href="http://www.python.org/2.2/descrintro.html">Unifying types and classes in Python 2.2</a>"
          is useful as well.<br />
                    <br />
                <br /><br /></li><li>Also by David on <i>developerWorks</i>, read: <ul>
                        <li>"<a href="http://www.ibm.com/developerworks/library/l-pyint.html">Guide to Python introspection</a>" </li>
                        <li>"<a href="http://www.ibm.com/developerworks/library/l-cpdec.html">Create declarative mini-languages</a>"</li>
                        <li>"<a href="http://www.ibm.com/developerworks/xml/library/x-matters20.html">XML Matters: Enforcing validity with the gnosis.xml.validity library</a>"</li>
                    </ul>
                    <br />
                <br /><br /></li><li> Don't know Tim Peters? You should! Begin with
          <a href="http://c2.com/cgi/wiki?TimPeters">Tim's wiki page</a> and end with
          reading news:comp.lang.python more regularly.<br />
                    <br />
                <br /><br /></li><li> New to AOP? You may find this
          "<a href="http://www.cs.ust.hk/~scc/comp610e/assignment/reading04.pdf">Introduction
to Aspect-Oriented Programming</a>"
          (PDF) by Ken Wing Kuen Lee of the Hong Kong University of Science and Technology
          interesting.<br />
                    <br />
                <br /><br /></li><li> Gregor Kiczales and his team at Xerox PARC coined the term
          <a href="http://www2.parc.com/csl/members/gregor/">aspect-oriented
programming</a>
          in the 1990s and championed it as a way to allow software programmers to spend
          more time writing code and less time correcting it. <br />
                    <br />
                <br /><br /></li><li>"<a href="http://www.ccs.neu.edu/home/lieber/connection-to-aop.html">Connections
between Demeter/Adaptive Programming and Aspect-Oriented Programming
(AOP)</a>"
          by Karl J. Lieberherr also describes AOP.<br />
                    <br />
                <br /><br /></li><li> You'll also find
          <a href="http://www.research.ibm.com/sop/">subject-oriented programming</a>
          interesting. As described by the folks at IBM Research, it's essentially the
          same thing as aspect-oriented programming.<br />
                    <br />
                <br /><br /></li><li>Find and
          <a href="http://gnosis.cx/download/gnosis/">download the Gnosis utils</a>,
          mentioned several times in this article, at David's site.<br />
                    <br />
                <br /><br /></li><li>Find more
          <a href="http://www.ibm.com/developerworks/linux/">resources for Linux developers</a>
          in the <i>developerWorks</i> Linux zone.<br /><br /></li></ul>
<p><a name="author"><span class="atitle">About the authors</span></a></p><div class="ibm-container ibm-portrait-module ibm-alternate-two"><div class="ibm-container-body"><p><a name="author1"></a>
			David Mertz thought his brain would melt when he wrote about continuations or semi-coroutines, but he put the gooey mess back in his skull cavity and moved on to metaclasses.  David
    may be reached at <a href="mailto:mertz@gnosis.cx">mertz@gnosis.cx</a>; his life pored over at <a href="http://gnosis.cx/dW/">his personal Web page</a>.  Suggestions and recommendations on this, past, or future 
    columns are welcome.  Learn about his forthcoming book, <a href="http://gnosis.cx/TPiP/">
                    <i>Text
    Processing in Python</i>
                </a>.
		</p></div><div class="ibm-container-body"><img src="http://www-106.ibm.com/developerworks/i/p-simionato.jpg" width="64" height="80" alt="Michele Simionato" /><p><a name="author2"></a>			Michele Simionato is a plain, ordinary, theoretical physicist
    who was driven to Python by a quantum fluctuation that could
    well have passed without consequences had he not met David
    Mertz.  He will let his readers judge the final outcome.
  </p></div></div>
<!-- MAIN_COLUMN_CONTENT_END -->

<!-- OVERLAYS_START -->
<!-- Report_Abuse_Start -->
<div class="ibm-common-overlay ibm-no-print" id="reportabuseoverlay">
   <div class="ibm-head"><p><a class="ibm-common-overlay-close" href="#">Close [x]</a></p></div>
   <div class="ibm-body">
      <div class="ibm-main">
         <a class="ibm-access" name="reportabuseoverlay">Report abuse help</a>   
         <div class="ibm-title"><h1>Report abuse</h1></div>
         <div class="ibm-container ibm-alternate">
            <p><strong>Thank you.</strong>  This entry has been flagged for moderator attention.</p>
            <div class="ibm-overlay-rule"><hr /></div>
            <div class="ibm-buttons-row">
               <input type="button" onclick="ibmCommon.Overlays.hide('reportabuseoverlay');return false;" class="ibm-btn-cancel-sec dw-btn-cancel-sec" name="ibm-cancel" value="Close" />
            </div>
         </div>
      </div> 
   </div>
<div class="ibm-footer"></div>
</div>
<!-- Report_Abuse_Error_Start -->
<div class="ibm-common-overlay ibm-no-print" id="reportabuseoverlayerror">
   <div class="ibm-head"><p><a class="ibm-common-overlay-close" href="#">Close [x]</a></p></div>
   <div class="ibm-body">
      <div class="ibm-main">
         <a class="ibm-access" name="reportabuseoverlayerror">Report abuse help</a>   
         <div class="ibm-title"><h1>Report abuse</h1></div>
         <div class="ibm-container ibm-alternate">
            <p class="ibm-ind-error"><strong>Report abuse submission failed.  Please try again later.</strong></p>
            <div class="ibm-overlay-rule"><hr /></div>
            <div class="ibm-buttons-row">
               <input type="button" onclick="ibmCommon.Overlays.hide('reportabuseoverlayerror');return false;" class="ibm-btn-cancel-sec dw-btn-cancel-sec" name="ibm-cancel" value="Close" />
            </div>
         </div>
      </div> 
   </div>
<div class="ibm-footer"></div>
</div>
<!-- Sign in OVERLAY STARTS HERE --> 
<div id="fdiv"></div>
<div class="ibm-common-overlay" id="signin_overlay">
<div class="ibm-head">
<p><a class="ibm-common-overlay-close" href="#" onclick="clearForm();">Close [x]</a></p>
</div>
<div class="ibm-body">
<div class="ibm-main">
<div class="ibm-title ibm-subtitle">
<h1>developerWorks: Sign in</h1>
<div id="ibm-overlay-error-signin" class="no-display"></div>
</div>

<div class="ibm-container ibm-alternate ibm-buttons-last">
<div class="ibm-container-body">
<p class="ibm-overlay-intro">If you do not have an IBM ID and password, <a href="#" onclick="(function () {window.location='/developerworks/dwwi/DWAuthRouter?m=reg&amp;d='+encodeURIComponent(location.href);})();">register here</a>.</p>
<form class="ibm-column-form" id="sFormId" action="" method="post" name="sForm" onsubmit="return false;">
<p><label for="ibmid">IBM ID:</label><span><input name="ibm-id" id="ibmid" size="25" value="" class="required" type="text" onkeypress="handleEP(event,this.form);" /><br /><a class="ibm-forward-link" href="/developerworks/dwwi/jsp/WSHelp.jsp?lang=en_US">Forgot your IBM ID?</a></span>   
</p> 
<p><label for="password">Password:</label><span><input name="password" id="password" size="25" value="" class="required" type="password" onkeypress="handleEP(event,this.form);" /><br /><a class="ibm-forward-link" href="#" onclick="(function () {window.location='https://www.ibm.com/account/profile?page=forgot&amp;lang=en_US&amp;appname=ibm&amp;required=null&amp;d='+encodeURIComponent(getAuthUrl())+'%3Fm%3Dloginpage%26lang%3Den_US%26d%3D'+encodeURIComponent(location.href);})();">Forgot your password?</a><br /><a class="ibm-forward-link" href="#" onclick="(function () {window.location='https://www.ibm.com/account/profile?page=chpw&amp;lang=en_US&amp;appname=ibm&amp;required=null&amp;d='+encodeURIComponent(location.href);})();">Change your password?</a></span></p> 
<p class="no-bottom-padding"> 
   <label for="AfterSignIn">After sign in:</label> 
   <span>

      <select name="SignInAction" id="AfterSignIn">
          <option value="">Stay on the current page</option>
          <option value="/developerworks/mydeveloperworks/profiles/html/myProfileView.do">Go to My developerWorks profile</option>
          <option value="/developerworks/mydeveloperworks/homepage/">Go to My developerWorks homepage</option>
      </select>
   </span>
</p>
<div class="ibm-overlay-rule"><hr /></div>
<p>By clicking <strong>Submit</strong>, you agree to the developerWorks <a href="/developerworks/mydeveloperworks/terms?lang=en">terms of use</a>.</p>
<div class="ibm-buttons-row">
   <p><input class="ibm-btn-arrow-pri" name="ibm-submit" value="Submit" onclick="signin();return false;" type="button" /><span class="ibm-sep">&nbsp;</span>
<input value="Cancel" type="button" name="ibm-cancel" class="ibm-btn-cancel-sec" onclick="clearForm();ibmCommon.Overlays.hide('signin_overlay');return false;"/></p>
</div>
</form>
<div class="ibm-overlay-rule"><hr /></div>
<p>The first time you sign into developerWorks, a My developerWorks profile is created for you. This profile includes the first name, last name, and display name contained in the profile you created when you registered with My developerWorks. Selected information in your My developerWorks profile is displayed to the public, but you may edit the information at any time. Your first name, last name (unless you choose to hide them), and display name will accompany the content that you post. </p>
<div class="dw-overlay-legal"><p>All information submitted is secure.</p></div>
</div>
</div>
</div>
</div>
<div class="ibm-footer"></div>
</div>
<!-- Sign in OVERLAY ENDS HERE --> 
 

<!-- Display name OVERLAY STARTS HERE --> 
<div class="ibm-common-overlay" id="displayname_overlay">
<div class="ibm-head">
<p><a class="ibm-common-overlay-close" href="#" onclick="clearForm();">Close [x]</a></p>
</div>
<div class="ibm-body">
<div class="ibm-main">
<div class="ibm-title ibm-subtitle">
<h1>Choose your display name</h1>
<div id="ibm-overlay-error-dname" class="no-display"></div>
</div>
<div class="ibm-container ibm-alternate ibm-buttons-last">
<div class="ibm-container-body">
<p class="ibm-overlay-intro">The first time you sign in to developerWorks a profile is created for you, so you need to choose a display name.  Your display name accompanies the content you post on developerWorks.</p>

<form id="dFormId" method="post" action="" name="dForm" onsubmit="return false;" class="ibm-column-form">
<p><label for="displayname">Display name:</label><span><input name="displayname" id="displayname" size="25" value="" type="text" onkeypress="handleEP(event,this.form);" /></span><span class="ibm-form-note">(Must be between 3 &ndash; 31 characters.)</span>
</p>
<p><strong>Note:</strong>  Please choose a display name between 3-31 characters. Your display name must be unique in the developerWorks community and should not be your email for privacy reasons.</p>
<div class="ibm-overlay-rule"><hr />
</div>
<p>By clicking Submit, you agree to the developerWorks <a href="/developerworks/mydeveloperworks/terms?lang=en">terms of use</a>.</p>
<div class="ibm-buttons-row">
   <p><input class="ibm-btn-arrow-pri" name="ibm-submit" value="Submit" onclick="signin();return false;" type="button" /><span class="ibm-sep">&nbsp;</span>
<input value="Cancel" type="button" name="ibm-cancel" class="ibm-btn-cancel-sec" onclick="clearForm();ibmCommon.Overlays.hide('displayname_overlay');return false;" /></p>
</div>
</form>
<div class="ibm-overlay-rule"><hr /></div>
<div class="dw-overlay-legal"><p>All information submitted is secure.</p></div>
</div>
</div>
</div>
</div>
<div class="ibm-footer"></div>
</div>
<!-- Display name OVERLAY ENDS HERE -->
<!-- OVERLAYS_END -->

<!-- RATINGS START -->
<p class="ibm-no-print"><span class="atitle"><a name="iratings">Rate this article</a></span></p>
<input id="art-rating" name="ratinga" type="hidden" value="0"/><div id="art-rating-module"></div>
<script language="JavaScript" type="text/javascript">
// <![CDATA[
   // widget div id and article id as args
   window.artRating.init('art-rating-module','art-rating-summary');
// ]]>
</script>
<!-- RATINGS END -->

<!-- INLINE_COMMENTS_START -->
<p class="ibm-no-print"><span class="atitle"><a name="icomments">Comments</a></span></p>
<script language="JavaScript" src="//dw1.s81c.com/developerworks/js/showcomments.js" type="text/javascript">//</script>
<div id="threadShow"></div>
<script language="JavaScript" type="text/javascript">
// <![CDATA[
 jQuery('threadShow').showComments('95%',5,'nCmts','icomments');
// ]]>
</script>
<!-- INLINE_COMMENTS_END -->

<p class="ibm-ind-link ibm-back-to-top"><a class="ibm-anchor-up-link" href="#ibm-pcon">Back to top</a></p>
<p><a href="http://www.ibm.com/developerworks/ibm/trademarks/">Trademarks</a> &nbsp;|&nbsp; <a href="https://www.ibm.com/developerworks/mydeveloperworks/terms/">My developerWorks terms and conditions</a></p>

<!-- Overlays -->
<!-- Zone/Leaf_Interest_Overlay_Start -->
<div class="ibm-common-overlay ibm-no-print" id="dwmyinterestadd">
<div class="ibm-head"><p><a class="ibm-common-overlay-close" href="#close">Close [x]</a></p></div>
<div class="ibm-body">
<div class="ibm-main">
<a class="ibm-access" name="dwmyinterestaddhelp">Help: Update or add to My dW interests</a>   
<div class="ibm-title"><h1>What's this?</h1></div>
<div class="ibm-container ibm-alternate">
<p>This little timesaver lets you update your My developerWorks profile with just one click!  The general subject of this content (AIX and UNIX, Information Management, Lotus, Rational, Tivoli, WebSphere, Java, Linux, Open source, SOA and Web services, Web development, or XML) will be added to the interests section of your profile, if it's not there already.  You only need to be logged in to My developerWorks.</p>
<p>And what's the point of adding your interests to your profile?  That's how you find other users with the same interests as yours, and see what they're reading and contributing to the community.  Your interests also help us recommend relevant developerWorks content to you.</p>
<p><a href="https://www.ibm.com/developerworks/mydeveloperworks/profiles/home.do?lang=en">View your My developerWorks profile</a></p>
<p class="ibm-access"><a href="#interestShow">Return from help</a></p>
</div> 
</div>
</div>
<div class="ibm-footer"></div>
</div>

<div class="ibm-common-overlay ibm-no-print" id="dwmyinterestremove">
<div class="ibm-head"><p><a class="ibm-common-overlay-close" href="#close">Close [x]</a></p></div>
<div class="ibm-body">
<div class="ibm-main">
<a class="ibm-access" name="dwmyinterestremovehelp">Help: Remove from My dW interests</a> 
<div class="ibm-title"><h1>What's this?</h1></div>
<div class="ibm-container ibm-alternate">
<p>Removing this interest does not alter your profile, but rather removes this piece of content from a list of all content for which you've indicated interest.  In a future enhancement to My developerWorks, you'll be able to see a record of that content.</p>
<p><a href="https://www.ibm.com/developerworks/mydeveloperworks/profiles/home.do?lang=en">View your My developerWorks profile</a></p>
<p class="ibm-access"><a href="#interestShow">Return from help</a></p>
</div> 
</div>
</div>
<div class="ibm-footer"></div>
</div>
<!-- Zone/Leaf_Interest_Overlay_End --></div>
<!-- MAIN_COLUMN_CONTAINER_END -->

<!-- Rating_Meta_BEGIN -->
<!--Rating_Meta_BEGIN--><div class="metavalue">static.content.url=http://www.ibm.com/developerworks/js/artrating/</div><div class="metavalue">SITE_ID=1</div><div class="metavalue">Zone=Linux</div><div class="metavalue">ArticleID=11287</div><div class="metavalue">ArticleTitle=Metaclass programming in Python</div><div class="metavalue">publish-date=02262003</div><div class="metavalue">author1-email=mertz@gnosis.cx</div><div class="metavalue">author1-email-cc=</div><div class="metavalue">author2-email=mis6+@pitt.edu</div><div class="metavalue">author2-email-cc=</div><script language="javascript" type="text/javascript">document.write('<div class="metavalue">url='+location.href.replace('<', '%3C')+'</div>');</script><!--Rating_Meta_END-->
<!-- Rating_Meta_END -->

</div>
<!-- MAIN_COLUMN_END-->

<!-- RIGHT_COLUMN_BEGIN -->
<div id="ibm-content-sidebar">
<div id="ibm-social-tools-sidebar" class="ibm-share-this"></div>

<!-- RIGHT_COLUMN_CONTENT_BEGIN --> 
<div class="ibm-container"><h2>Table of contents</h2><div class="ibm-container-body"><img alt="" height="1" width="1" src="//www.ibm.com/i/c.gif"/><ul class="ibm-bullet-list"><li><a class="ibm-feature-link" href="#h1">Review of object-oriented programming</a></li><li><a class="ibm-feature-link" href="#h2">A metaprogramming rejoinder</a></li><li><a class="ibm-feature-link" href="#h3">Metaclasses: a solution looking for a
        problem?</a></li><li><a class="ibm-feature-link" href="#h4">Solving problems with magic</a></li><li><a class="ibm-feature-link" href="#h5">More ways to solve problems with magic</a></li><li><a class="ibm-feature-link" href="#h6">Meta conveniences</a></li><li><a class="ibm-feature-link" href="#resources">Resources</a></li><li><a class="ibm-feature-link" href="#author">About the authors</a></li><li><a class="ibm-feature-link" href="#icomments">Comments</a></li></ul></div></div>
<!--XSLT stylesheet used to transform this content: s-danube.xsl--><div class="ibm-container"><h2>Local resources</h2><div class="ibm-container-body"><img src="//www.ibm.com/developerworks/i/spot-danube.jpg" alt="" border="0" height="58" width="188"/><ul class="ibm-bullet-list"><li><a href="http://www.ibm.com/partnerworld/iic/austin.html?S_TACT=105AGY81&amp;S_CMP=danube_us_na" class="ibm-feature-link">IBM Innovation Center - Austin, TX</a></li><li><a href="http://www.ibm.com/partnerworld/iic/chicago.htm?S_TACT=105AGY81&amp;S_CMP=danube_us_na" class="ibm-feature-link">IBM Innovation Center - Chicago, IL</a></li><li><a href="http://www.ibm.com/partnerworld/iic/dallas.html?S_TACT=105AGY81&amp;S_CMP=danube_us_na" class="ibm-feature-link">IBM Innovation Center - Dallas, TX</a></li><li><a href="http://www.ibm.com/partnerworld/iic/sanmateo.htm?S_TACT=105AGY81&amp;S_CMP=danube_us_na" class="ibm-feature-link">IBM Innovation Center - San Mateo, CA</a></li><li><a href="http://www.ibm.com/partnerworld/iic/waltham.htm?S_TACT=105AGY81&amp;S_CMP=danube_us_na" class="ibm-feature-link">IBM Innovation Center - Waltham, MA</a></li><li><a href="http://www.ibm.com/developerworks/views/global/techbriefing.jsp?end_no=100&amp;lcl_sort_order=desc&amp;sort_order=asc&amp;expand=North+America+(by+state%2Fprovince)&amp;show_all=false&amp;start_no=1&amp;geo_by=All+Geographies&amp;sort_by=Date&amp;search_by=&amp;topic_by=All+Topics&amp;show_abstract=true?S_TACT=105AGY81&amp;S_CMP=danube_us_na" class="ibm-feature-link">Technical Briefings in North America</a></li></ul></div></div>
<!--XSLT stylesheet used to transform this content: s-community.xsl--><div class="ibm-container"><h2>My developerWorks community</h2><div class="ibm-container-body"><p>Interact, share, and communicate with developers worldwide.</p><div class="ibm-rule"><hr/></div><ul class="ibm-bullet-list"><li><a href="https://www.ibm.com/developerworks/mydeveloperworks/homepage/web/getuserpref?ca=dma-" class="ibm-feature-link">My Home</a></li><li><a href="https://www.ibm.com/developerworks/mydeveloperworks/profiles/home.do?lang=en&amp;ca=dma-" class="ibm-feature-link">Profiles</a></li><li><a href="https://www.ibm.com/developerworks/mydeveloperworks/groups/service/html/allcommunities?ca=dma-" class="ibm-feature-link">Groups</a></li><li><a href="https://www.ibm.com/developerworks/mydeveloperworks/blogs/?ca=dma-" class="ibm-feature-link">Blogs</a></li><li><a href="https://www.ibm.com/developerworks/mydeveloperworks/bookmarks/?ca=dma-" class="ibm-feature-link">Bookmarks</a></li><li><a href="https://www.ibm.com/developerworks/mydeveloperworks/activities/service/html/mainpage?ca=dma-" class="ibm-feature-link">Activities</a></li><li><a href="http://www.ibm.com/developerworks/mydeveloperworks/files?ca=dma-" class="ibm-feature-link">Files</a></li><li><a href="http://www.ibm.com/developerworks/mydeveloperworks/wikis?ca=dma-" class="ibm-feature-link">Wikis</a></li><li><a href="http://www.ibm.com/developerworks/forums/?ca=dma-" class="ibm-feature-link">Forums</a></li><li><a href="http://www.ibm.com/developerworks/podcast/?ca=dma-" class="ibm-feature-link">Podcasts</a></li></ul><div class="ibm-rule"><hr/></div><p class="ibm-ind-link"><a href="https://www.ibm.com/developerworks/mydeveloperworks/?ca=dma-" class="ibm-forward-link">My developerWorks overview</a></p></div></div>
<!-- Tagging_Start -->
<div id="dw-tag-cloud-container" class="ibm-container dw-hidetag"><h2>Tags</h2>
<div id="dw-tag-help"><a class="dwauthor" rel="#tagtip" id="dwtagtip"><img alt="Help" height="16" width="16" align="top" src="//dw1.s81c.com/developerworks/i/help_icon.gif"/></a></div>
<div id="tagtip" class="dwauthor-onload-state ibm-no-print">Use the <strong>search field</strong> to find all types of content in My developerWorks with that tag.<p>Use the <strong>slider bar</strong> to see more or fewer tags.</p><p>For articles in technology zones (such as Java technology, Linux, Open source, XML), <strong>Popular tags</strong> shows the top tags 
for <em>all technology zones</em>.  For articles in product zones (such as Info Mgmt, Rational, WebSphere), <strong>Popular tags</strong> shows the top tags for <em>just that product zone</em>.</p><p>For articles in technology zones (such as Java technology, Linux, Open source, XML), <strong>My tags</strong> shows your tags for <em>all technology zones</em>.  For articles in product zones (such as Info Mgmt, Rational, WebSphere), <strong>My tags</strong> shows your tags for <em>just that product zone</em>.</p></div>
<div class="ibm-access">Use the search field to find all types of content in My developerWorks with that tag.  <em>Popular tags</em> shows the top tags for this particular content zone (for example, Java technology, Linux, WebSphere).  <em>My tags</em> shows your tags for this particular content zone (for example, Java technology, Linux, WebSphere).</div>
<div class="ibm-container-body">
<div class="dw-tag-search"><form action="//www.ibm.com/developerworks/mydeveloperworks/bookmarks/html?lang=en" method="get" id="actualtagform" onsubmit="popupform(this, 'join')">
<p><label for="tagfield"><strong>Search all tags</strong></label><input id="tagfield" name="tag" type="text" maxlength="20" size="17" />&nbsp;<input src="//dw1.s81c.com/i/v16/buttons/short-btn.gif" type="image" class="ibm-btn-view" alt="submit search" title="submit search" value="Search" /></p></form></div>
<div class="ibm-rule"><hr/></div>
<div id="dw-tag-select">
<div id="dw-tag-select-popular"><p><strong>Popular article tags</strong>&nbsp;|&nbsp;<br /><a id="a-my" href="javascript:;">My article tags</a><a href="#dw-tag-access" class="ibm-access">Skip to tags list</a></p></div>
<div id="dw-tag-select-my" class="dw-hidetag"><p><a id="a-popular" href="javascript:;">Popular article tags</a>&nbsp;|&nbsp;<br /><strong>My article tags</strong></p><a href="#dw-tag-access" class="ibm-access">Skip to tags list</a></div>
<div id="dw-tag-cloud"></div>  
</div>   
</div>
</div>
<!-- Tagging_End -->
<!-- Dig_Deeper -->
<div class="ibm-container"><h2>Dig deeper into Linux on developerWorks</h2><div class="ibm-container-body"><ul class="ibm-link-list"><li class="ibm-first"><a href="http://www.ibm.com/developerworks/linux/" class="ibm-forward-link">Overview</a></li><li><a href="http://www.ibm.com/developerworks/linux/newto/" class="ibm-forward-link">New to Linux</a></li><li><a href="http://www.ibm.com/developerworks/views/linux/downloads.jsp" class="ibm-forward-link">Downloads and products</a></li><li><a href="http://www.ibm.com/developerworks/views/linux/projects.jsp" class="ibm-forward-link">Open source projects</a></li><li><a href="http://www.ibm.com/developerworks/views/linux/library.jsp" class="ibm-forward-link">Technical library (articles, tutorials, training, and more)</a></li><li><a href="http://www.ibm.com/developerworks/forums/dw_lforums.jsp" class="ibm-forward-link">Forums</a></li><li><a href="http://www.ibm.com/developerworks/views/linux/events.jsp" class="ibm-forward-link">Events</a></li><li><a href="http://www.ibm.com/developerworks/newsletter/" class="ibm-forward-link">Newsletter</a></li></ul></div></div>
<!-- High_Visibility_Offer -->
<!--XSLT stylesheet used to transform this content: s-highvisibilityoffer.xsl--><div class="ibm-container"><h2>Stay ahead of the latest cloud trends</h2><div class="ibm-container-body"><img width="188" height="70" border="0" alt="Stay ahead of the latest cloud trends" src="//www.ibm.com/developerworks/i/hivis-w-cloudzone.jpg"/><p class="ibm-ind-link"><a href="https://www.ibm.com/developerworks/cloud/index.html?ca=dti-cloudzone" class="ibm-forward-link">Cloud Computing resources from developerWorks</a></p></div></div>
<!-- Special_Offers -->
<div class="ibm-container"><h2>Special offers</h2><div class="ibm-container-body"><p class="dw-special-offers"><a href="https://www-304.ibm.com/partnerworld/wps/servlet/ContentHandler/2011_beacon_awards_developerworks.html?ca=dti-dwbeacon"><img src="//www.ibm.com/developerworks/i/tile_v16_beacon2010.gif" width="158" height="50" border="0" alt="Partner Award Most Innovative use of dW" /></a></p><p class="dw-special-offers"><a href="http://www.ibm.com/developerworks/downloads/?ca=dti-rdownload#rational"><img src="//www.ibm.com/developerworks/i/tile_v16_r-download.gif" width="158" height="50" border="0" alt="Download and evaluate Rational software" /></a></p><p class="dw-special-offers"><a href="http://www.ibm.com/developerworks/views/linux/libraryview.jsp?type_by=Tutorials&amp;ca=dti-linuxtutorial"><img src="//www.ibm.com/developerworks/i/tile_v16_learnfast-l.gif" width="158" height="50" border="0" alt="Learn fast with free IBM Linux tutorials" /></a></p><div class="ibm-rule"><hr/></div><p class="ibm-ind-link"><a class="ibm-forward-link" href="http://www.ibm.com/developerworks/downloads/?ca=dti-tilemoreoffers">Trial software offers</a></p></div></div>
<!-- RIGHT_COLUMN_CONTENT_END -->

</div>
<!-- RIGHT_COLUMN_END -->

<!-- CONTENT_BODY_END -->
</div>

</div>
<!-- CONTENT_END -->

 <!-- END_IBM-PCON -->
</div>

<!-- FOOTER_BEGIN -->
<div id="ibm-page-tools">
<!-- IBM page tools container -->
</div>
<div id="ibm-footer">
<ul>
<li class="ibm-first"><a href="http://www.ibm.com/ibm/">About IBM</a></li>
<li><a href="http://www.ibm.com/privacy/">Privacy</a></li>
<li><a href="http://www.ibm.com/contact/">Contact</a></li>
<li><a href="http://www.ibm.com/legal/">Terms of use</a></li>
</ul>
</div>
<!-- FOOTER_END -->

 <!-- END_IBM-TOP -->
</div>
 
 <!-- SCRIPTS_INCLUDE_BEGIN -->
<!-- JQuery start -->
<script type="text/javascript" language="JavaScript" src="//dw1.s81c.com/developerworks/js/jquery/cluetip98/jquery.dimensions-1.2.js"></script>
<script type="text/javascript" language="JavaScript" src="//dw1.s81c.com/developerworks/js/jquery/cluetip98/jquery.hoverIntent.minified.js"></script>
<script type="text/javascript" language="JavaScript" src="//dw1.s81c.com/developerworks/js/jquery/cluetip98/jquery.cluetip.js"></script>
<script type="text/javascript" language="JavaScript" src="//dw1.s81c.com/developerworks/js/jquery/tagging/ui.core-1.7.1.js"></script>
<script type="text/javascript" language="JavaScript" src="//dw1.s81c.com/developerworks/js/jquery/tagging/ui.slider-1.7.1.js"></script>
<script type="text/javascript" language="JavaScript" src="//dw1.s81c.com/developerworks/js/jquery/tagging/dwjquerytags.js"></script>
<script type="text/javascript" language="JavaScript" src="//dw1.s81c.com/developerworks/js/si/flash-detect.js"></script>
<script type="text/javascript" language="JavaScript" src="//dw1.s81c.com/developerworks/js/si/dwsi.js"></script>
<script type="text/javascript" language="JavaScript">
	jQuery.noConflict();     
	// Put all your code in your document ready area
	jQuery(document).ready(function(jQuery) {
	// Do jQuery stuff using jQuery 
	jQuery('a.dwauthor').cluetip({
		local: true,
		showTitle: false,
		positionBy: 'bottomTop',
		sticky: true,	
		mouseOutClose: true,
		closeText: '<img src="//dw1.s81c.com/developerworks/js/jquery/cluetip98/i/x.gif" alt="Close" />',
		arrows: false,
		dropShadow: true,
		cluetipClass: 'dwbasic'
		});

		//tagging
		login="false";
		userid="";
		whichTags = "init";
		pCont = "";
		mCont = "";
		signInMCont = "";
		accessCont = "";
		pValue = 0;
		mValue = 0;

		rBHash = null;
		rBHash = new Object();
		rBHash['viperLang'] = 'en';
		rBHash['urlLang'] = 'en';
		rBHash['tagThisWinTitle'] = 'Tagit';
		rBHash['pTags1'] = 'Popular tags';
		rBHash['pTags2'] = 'End of Popular tags';
		rBHash['mTags1'] = 'My tags';
		rBHash['mTags2'] = 'End of My tags';
		rBHash['alt1'] = 'Loading Content';
		rBHash['noATags'] = 'No active tags';
		rBHash['signIn1'] = 'Please ';
		rBHash['signIn2'] = 'sign in';
		rBHash['signIn3'] = ' to access';
		rBHash['signIn4'] = 'My Tags';
		rBHash['signIn5'] = 'To access My Tags, please ';
		rBHash['signIn6'] = 'sign in';
		rBHash['signIn7'] = 'Read Popular tags';

		zoneHash = new Object();
		zoneHash['aix'] = 'AIX and UNIX zone';
		zoneHash['data'] = 'Information Management zone';
		zoneHash['lotus'] = 'Lotus zone';
		zoneHash['rational'] = 'Rational zone';
		zoneHash['tivoli'] = 'Tivoli zone';
		zoneHash['websphere'] = 'WebSphere zone';
		zoneHash['architecture'] = 'Technical library';
		zoneHash['autonomic'] = 'Technical library';
		zoneHash['java'] = 'Technical library';
		zoneHash['cloud'] = 'Technical library';
		zoneHash['industry'] = 'Technical library';
		zoneHash['library'] = 'Technical library';
		zoneHash['linux'] = 'Technical library';
		zoneHash['opensource'] = 'Technical library';
		zoneHash['power'] = 'Technical library';
		zoneHash['webservices'] = 'Technical library';
		zoneHash['web'] = 'Technical library';
		zoneHash['xml'] = 'Technical library';
		zoneHash['wireless'] = 'Technical library';
		jQuery.checkRB();
		jQuery.getPopularTags("/developerworks/dwtags/dwjquerytabtags?lang=" + rBHash['viperLang'] + "&base=" + jQuery.getNormalizedZoneUrl(location.href));
		jQuery.getUserTags();
		if(jQuery.isTutorial(location.href) == "true") {
			jQuery.getTagsForContent("/developerworks/tagging/UseCaseServlet?lang=" + rBHash['viperLang'] + "&format=maverick&cType=tutorials&use_case=geturltags&action=gettags&url=" + jQuery.normalizeUrl(location.href));
		}
		else {
			jQuery.getTagsForContent("/developerworks/tagging/UseCaseServlet?lang=" + rBHash['viperLang'] + "&format=maverick&cType=articles&use_case=geturltags&action=gettags&url=" + jQuery.normalizeUrl(location.href));

		}
		
		// si
		initSI();
	});
 </script>
 <!-- JQuery end -->
 <!-- Overlay js -->
<script language="JavaScript" src="//dw1.s81c.com/common/js/overlay.js" type="text/javascript"></script>
<!-- My dW Interest article -->
<script language="JavaScript" src="//dw1.s81c.com/developerworks/js/showinterest.js" type="text/javascript">//</script>
<script language="JavaScript" type="text/javascript">
        // <![CDATA[
			var contentId = '';
			var contentAreas = '';
			var caArr = [];
			contentId = '11287';
			contentAreas = 'linux';
			if(contentAreas != ''){caArr = contentAreas.split(',');}
			var loginLink = 'https://www.ibm.com/developerworks/dwwi/DWAuthRouter?m=loginpage&d=' + encodeURIComponent(window.location);jQuery('interestShow').showInterest(contentId,'dw-article',{'int_tops':[14,16,46],'int_prods':[], 'int_prod_fam':[],'int_cont_area':caArr},
'<div id="dw-interest-anon"><a id="intAnonBtn" class="ibm-external-link" href="">Update My dW interests</a> (<a class="dw-interest" href="' + loginLink + '">Log in</a> | <a class="dw-interest" href="#overlay" onclick="ibmCommon.Overlays.show(\'dwmyinterestadd\', this);return false;">What\'s this?</a>) <a class="ibm-access" href="#dwmyinterestaddhelp">Skip to help for Update My dW interests</a></div>',
'<div id="dw-interest-add"><a id="intSelectBtn" class="ibm-external-link" href="">Add to My dW interests</a> (<a class="dw-interest" href="#overlay" onclick="ibmCommon.Overlays.show(\'dwmyinterestadd\', this);return false;">What\'s this?</a>) <a class="ibm-access" href="#dwmyinterestaddhelp">Skip to help for Add to My dW interests</a></div>',
'<div id="dw-interest-remove">Added to My dW interests (<a class="dw-interest" href="https://www.ibm.com/developerworks/mydeveloperworks/profiles/html/myProfileView.do?lang=en">Edit</a>)</div>'
);
// ]]>
</script><!-- BEGIN: Use this section to set page specific variables for the Unica Page Tag -->
<script language="JavaScript">var NTPT_PGEXTRA="ibmSkillLevel=1&ibmAdoptPhase=-&ibmRole=-";</script>
<!--END --><!-- SCRIPTS_INCLUDE_END -->

<div id="ibm-metrics">
<script src="//dw1.s81c.com/common/stats/stats.js" type="text/javascript">//</script>
</div>

</body>
</html>