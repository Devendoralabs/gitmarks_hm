<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
                      "http://www.w3.org/TR/REC-html40/loose.dtd">
<html>
<head>
  <title>Statistical Computing With Python</title>
  <meta name="GENERATOR" content="amaya V3.1">
  <meta http-equiv="Content-Type" content="text/html">
</head>

<body bgcolor="FFFFFF" text="000000">
<h1 align="center"><span style="font-style: italic">StatPy</span>:
Statistical Computing with Python</h1>

<p>Welcome to <cite>StatPy</cite>, a collection of resources to help you do
statistical computing with Python, with a special emphasis on astrostatistics
(statistics in astronomy). This web site is brand-spanking-new, and still very
much under construction; please be patient with our "dust" and check back
again frequently as building continues.</p>

<p><span style="font-style: italic; font-weight: bold">Python <span
style="font-style: normal; font-weight: normal">is a is an interpreted,
interactive, object-oriented programming language.  It is a "very high level
language" or "scripting language," often compared to Perl, Tcl, Scheme, and
Java.  It combines remarkable power with a very clear and simple syntax that
resembles the "pseudocode" one might use to describe the essentials of an
algorithm.  Implementations are availabe for free on all major (and many
minor) computing platforms.  Python is an "open source" project with a very
liberal license.</span></span></p>

<table border="1" width="96%" align="center" cellpadding="4">
  <tbody>
    <tr>
      <td>
        <table border="1" width="100%" rules="none" align="center">
          <tbody>
            <tr>
              <td><font size="+1"><b>Why Consider Python?</b></font>
                <ul>
                  <li>What is Python?</li>
                  <li>Python is a good general purpose language</li>
                  <li>Python is a good language for numerical computing</li>
                  <li>Python is a good language for education</li>
                  <li>Python's limitations</li>
                </ul>
              </td>
              <td><font size="+1"><b>Getting Started</b></font>
                <ul>
                  <li><a href="essentials.html">The essentials</a></li>
                  <li><a href="online_inst.html">Online instruction</a></li>
                  <li><a href="printed_inst.html">Printed instruction</a></li>
                  <li><a href="gotchas.html">Python "gotchas"</a></li>
                </ul>
              </td>
            </tr>
          </tbody>
        </table>
      </td>
    </tr>
    <tr>
      <td align="left"><font size="+1"><b>Going Further</b></font>
        <ul>
          <li>Resources for numerical computing
            <ul>
              <li><a href="http://www.scipy.org/">SciPy.org</a> (Hosted by Enthought.com; Travis Oliphant is the lead maintainer)
                <p>A recent project, SciPy is a unified collection of
open source libraries adding scientific computing capability
to Python.  "SciPy supplements the popular Numeric
module, gathering a variety of high level
science and engineering modules together as
a single package. Within SciPy are modules
for graphics and plotting, optimization,
integration, special functions, signal and image
processing, genetic algorithms, ODE solvers,
and others. There is also an experimental
"compiler" that takes a Numeric array
expression in Python and compiles it to C++
code on the fly. SciPy is developed concurrently
on both Linux and Windows. It has also been
compiled successfully on Sun, and should port
to most other platforms where Python is
available."  Some of the separate packages listed
below have been incorporated into SciPy.</p>
              </li>
              <li><a href="http://pylab.sourceforge.net/">Modules to enhance
                numerical Python</a> (Travis Oliphant)
                <p>This site offers a variety of extremely useful Python
                modules and extensions for scientific computing.  Most are
                Python interfaces to widely-used and well-tested C or FORTRAN
                libraries.  Problem areas addressed include: sparse matrices
                (interfaces to SPARSEKIT2 and SuperLU); special functions (an
                interface to CEPHES); FFTs (an interface to FFTW,
                complementing the FFT capability already in NumPy); and signal
                processing (convolutions and filters).  There is also a
                "Multipack" module with interfaces to selected algorithms from
                the ODEPACK, QUADPACK, and MINPACK libraries, and pure Python
                modules with selected algorithms for optimization, Gaussian
                quadrature, and orthogonal polynomials.  The extensions at
                this site are distributed as source for UNIX-like platforms,
                and RPMs for Linux platforms.  No Windows or MacOS ports are
                currently available.</p>
              </li>
              <li><a
                href="http://starship.python.net/crew/hinsen/scientific.html">ScientificPython</a>
                (Konrad Hinsen)
                <p>This package contains modules that implement basic geometry
                (vectors, tensors, transformations, vector and tensor fields),
                quaternions, automatic derivatives, (linear) interpolation,
                polynomials, elementary statistics, nonlinear least-squares
                fits, unit calculations, Fortran-compatible text formatting,
                3D visualization via VRML, and two Tk widgets for simple line
                plots and 3D wireframe models.</p>
              </li>
              <li><a href="http://matpy.sourceforge.net/">MatPy</a> (Huaiyu
                Zhu, admin)
                <p>MatPy is a Python package for numerical computation and
                plotting using a MatLab-like interface to the NumPy package,
                Oliphant's CEPHES interface (for special functions), and the
                Python GnuPlot interface.</p>
              </li>
              <li><a href="http://users.javanet.com/~othello/download/python.htm">Matfunc</a> (Raymond Hettinger)
                <p>Matfunc provides pure Python modules (no C extensions)
                   for elementwise operations, matrix operations, and
                   various types of curve fitting (polyomial, rational
                   functions, etc.).</p>
              </li>
              <li><a
                href="http://www.emsl.pnl.gov/pub/proj/tms/hpcc_actinides/pyGA/">Global
                Arrays Python Interface</a> (Robert Harrison)
                <p>The pyGA module provides a Python interface to the C Global
                Arrays (GA) library.  GA is a public-domain
                numerically-oriented, portable, parallel programming
                environment including distributed shared-memory with both
                one-sided and collective operations, message passing, and
                interfaces to parallel BLAS and linear algebra packages.  It
                runs on a wide variety of parallel processing platforms.</p>
              </li>
              <li>Sparse matrix packages:
                <ul>
                  <li><a href="http://pylab.sourceforge.net/">SparsePy
                    (SPARSEKIT2 and SuperLU)</a> (Travis Oliphant)</li>
                  <li><a
                    href="http://www.enme.ucalgary.ca/~nascheme/">sparsemodule</a>
                    (Neil Schemenauer)</li>
                </ul>
              </li>
              <li><a
                href="http://www.cs.washington.edu/research/constraints/cassowary/">Cassowary</a>
                (Greg Badros)
                <p>C++ constraint-solving toolkit (linear systems with
                equalities and inequalities), with a Python interface.</p>
              </li>
              <li><a
                href="http://www.python.org/topics/scicomp/recipes_in_python.html">Simple
                Recipes in Python</a> (William Park)
                <p>Pure Python translations of selected algorithms from
                <cite>Numerical Recipes</cite> by Press et al..  Includes
                elementary functions, polynomial operations, 1-D zero finding,
                Simpson's rule quadrature, vector operations, and FFT-based
                operations.</p>
              </li>
            </ul>
          </li>
          <li>Resources for statistical computing
            <ul>
              <li><a
                href="http://www.nmr.mgh.harvard.edu/Neural_Systems_Group/gary/python.html">stats.py</a>
                (Gary Strangman)
                <p>A collection of statistical functions, ranging from
                descriptive statistics (mean, median, histograms, variance,
                skew, kurtosis, etc.) to inferential statistics (t-tests,
                F-tests, chi-square, etc.). The functions are defined for
                operation on lists and, if Numeric is installed, also defined
                for array arguments.</p>
              </li>
              <li><a
                href="http://starship.python.net/crew/hinsen/scientific.html">ScientificPython</a>
                (Konrad Hinsen)
                <p>Hinsen's package includes modules implementing elementary
                statistical procedures (calculation of moments, correlation,
                and median; histograms) and nonlinear least-squares
                fitting.</p>
              </li>
              <li><a href="http://starship.python.net/crew/kernr/Projects.html">odr.py -- Orthogonal Distance Regression</a> (Robert Kern)
	      <p>This package wraps the Fortran-77 <a href="http://www.netlib.org/odrpack/index.html">ODRPACK</a> library
	      containing routines for performing a large variety of
	      least-squares regressions with an efficient trust-region
	      algorithm.
	      </p>
              </li>
              <li><a href="http://www.omegahat.org/RSPython/index.html">R/SPlus-Python Interface</a> (Omegahat Project)
	      <p>R and SPlus are data analysis packages that are very
popular among statisticians; there are many R/SPlus packages written by
statisticians implementing sophisticated methods.  R is an open source
package based on the commercial SPlus package.  This interface allows
Python code to call R functions, and R code to create Python objects and call Python functions and methods.  "This allows Python programmers unfamiliar with the syntax of R to easily use its functionality and vice versa. It also allows
data to be manipulated using Pythons tools and then passed to R's rich graphical and statistical tools."
	      </p>
              </li>
            </ul>
          </li>
          <li>Storing and retrieving numerical data
            <ul>
              <li>FITS (Flexible Image Transport System) format (the standard
                for astronomical data)
                <ul>
                  <li><a href="ftp://ra.stsci.edu/pub/barrett/">PyFITS</a>
                    (Paul Barrett/STScI)
                    <p>An object-oriented, easy-to-use interface to the FITS
                    file format.  Under development, but currently has good
                    handling of headers and binary tables..</p>
                  </li>
                  <li><a
                    href="http://ecf.hq.eso.org/~npirzkal/python/pcfitsio">pCFITSIO</a>
                    (Norbert Pirzkal/ESO)
                    <p>Python access to most of the functions in the CFITSIO
                    FITS file format library, produced using SWIG.  Includes a
                    FITSio module with a simplified Python interface to the
                    functions.</p>
                  </li>
                  <li><a href="http://archive.eso.org/saft/">Qfits</a>
                    (ESO/Nicolas Devillard)
                    <p>qfits is a stand-alone library written in ANSI C, that
                    takes care of the most usual stuff you want to do with
                    FITS files.  It offers very fast keyword queries in FITS
                    headers through the use of the mmap() system call on Unix.
                    It can be compiled as a Python extension, providing full
                    functionality via Python.</p>
                  </li>
                  <li><a
                    href="http://www.physics.uwa.edu.au/~andrew/">FITS</a>
                    (Andrew Williams)
                    <p>A FITS file class for Python. Currently only supports
                    reading and parsing FITS header cards.</p>
                  </li>
                </ul>
              </li>
              <li>netCDF format
                <ul>
                  <li><a
                    href="http://snow.cit.cornell.edu/noon/ncmodule.html">nc</a>
                    (Bill Noon)
                    <p>A Python module for accessing data in netCDF
                    format.</p>
                  </li>
                  <li><a
                    href="http://starship.python.net/crew/hinsen/scientific.html">ScientificPython</a>
                    (Konrad Hinsen)
                    <p>Among its many features (see above), ScientificPython
                    includes a module for accessing data files in netCDF
                    format.</p>
                  </li>
                </ul>
              </li>
              <li>Miscellaneous formats
                <ul>
                  <li><a href="http://pylab.sourceforge.net/">NumpyIO</a>
                    (Travis Oliphant)
                    <p>NumpyIO contains methods designed for reading and
                    writing large blocks of binary data into Numerical Python
                    arrays.  The author also has a class that uses NumpyIO to
                    access volume data in ANALYZE format.</p>
                  </li>
                  <li><a
                    href="http://starship.python.net/crew/hinsen/scientific.html">fortranio</a>
                    (Konrad Hinsen)
                    <p>An experimental module that reads and writes FORTRAN
                    binary files on Unix platforms.</p>
                  </li>
                  <li><a
                    href="http://www.nmr.mgh.harvard.edu/Neural_Systems_Group/gary/python.html">io</a>
                    (Gary Stagman)
                    <p>A collection of input/output routines for flat
                    space/tab delimited text files and "flat" binary files,
                    including some special file handlers for MRI files.</p>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li>Plotting and graphing with Python
            <ul>
              <li><a
                href="http://starship.python.net/crew/jhauser/plot-res.html">Plotting
                with Python</a> (Janko Hauser)
                <p>A useful annotated list of Python interfaces to popular
                plotting packages on various platforms, current as of the end
                of 1998.  The material below reflects developments since
                1998.</p>
              </li>
              <li><a
                href="ftp://cfa-ftp.harvard.edu/pub/ransom/">ppgplot/Pgplot</a>
                (Nick Patavalis/Scott Ransom)
                <p>Ransom's modification of Patavalis's Python interface to
                the pgplot plotting library.</p>
              </li>
              <li><a
                href="http://mayavi.sourceforge.net/">The MayaVi Data Visualizer</a>
                (Prabhu Ramachandran)
                <p>"MayaVi is a free, easy to use scientific data visualizer. It is written in Python and uses the amazing Visualization Toolkit
(VTK) for the graphics. It provides a GUI written using Tkinter. MayaVi is free and distributed under the GNU GPL. It
is also cross platform and should run on any platform where both Python and VTK are available (which is almost any
*nix, Mac OSX or Windows)."  It is available as a stand-alone application
and as a Python package.
</p>
              </li>
              <li><a
                href="http://www.idyll.org/~n8gray/code/index.html">gracePlot.py</a>
                (Nathan Gray)
                <p>This module provides a Python interface to the 
<a href="http://plasma-gate.weizmann.ac.il/Grace/">Grace</a>
package that implements 2-D interactive plotting.  Grace provides
GUI access to plot properties, allowing changes to the plot
on-the-fly.  This interface allows one to use Grace from a Python
prompt, and integrates the Numeric package with Grace.</p>
              </li>
              <li><a
                href="http://people.freebsd.org/~rhh/py-opendx/">Py-OpenDX</a>
                (Randall Hopper)
                <p>This package provides a Python interface to 
<a href="http://www.opendx.org/">Open-DX</a>,
the open source version of
the IBM Data Explorer (DX) "industrial-strength" scientific visualization package developed at IBM.</p>
              </li>
            </ul>
          </li>
          <li>Extending Python with C/C++/FORTRAN code
            <ul>
              <li><a
                href="http://starship.python.net/crew/hinsen/NumPyExtensions.html">Numerical
                Python Arrays in C Extension Modules</a> (Konrad Hinsen)</li>
              <li><a href="http://www.acl.lanl.gov/siloon/">SILOON</a> (Adv.
                Computing Lab, LANL)</li>
              <li><a href="http://pyfortran.sourceforge.net/">Pyfort</a> (Paul
                Dubois/LLNL)</li>
              <li>Sample CodeWarrior projects for extending MacPython</li>
            </ul>
          </li>
        </ul>
      </td>
    </tr>
    <tr>
      <td><font size="+1"><b>Application Examples</b></font>
        <ul>
          <li><a href="http://pyraf.stsci.edu/">PyRAF</a>
            (Perry Greenfield &amp; Rick White)
            <p>"PyRAF is a new command language for IRAF based on the Python scripting language. It is useful both for
interactive data analysis and for writing analysis scripts. PyRAF coexists with the current IRAF CL; no changes
need be (or should be) made to your installed IRAF system to use it. PyRAF has been developed by the Science
Software Group at the Space Telescope Science Institute."</p>
          </li>
          <li><a href="http://www.rhodesmill.org/pyephem/">PyEphem</a>
            (Brandon Rhodes)
            <p>PyEphem is a module for performing astronomical computations
            from the Python scripting language. Its primary purpose is to
            compute for an arbitrary date and location on earth the position
            of the sun, moon, a planet, or any asteroid or comet whose orbital
            elements are available. Additional functions are also included,
            including facilities to compute the angular separation between two
            objects in the sky, to determine the constellation in which an
            object lies, and to find the times at which any object rises,
            transits, and sets on a particular day.  It uses procedures from
            Elwood Downey's XEphem planetarium program.</p>
          </li>
          <li><a href="http://snooker.phys.cmu.edu/xassist">XAssist</a> (Andy
            Ptak/CMU)
            <p>XAssist is a package under development for the automation of
            extra-galactic X-ray data.  It's goal is to be capable of reducing
            and performing initial spectral, spatial, and temporal analysis of
            extra-galactic X-ray data from ROSAT, ASCA, XMM and Chandra.  It
            consists of low-level C++ code and a high level Python interface.
            The XIMGFIT module for  2-D image fitting to FITS data using PSFs
            is currently available.</p>
          </li>
          <li><a href="http://starship.python.net/crew/pavlos/">PyAstro</a>
            (Pavlos Christoforou)
            <p>An all python module that implements most of the algorithms in
            Peter Duffett-Smith's book <cite>Practical astronomy with your
            calculator</cite>.  Good for casual observations of planets.</p>
          </li>
          <li><a href="http://www.eso.org/eclipse">Eclipse-Python</a>
            (Nicolas Devillard)
	    <p>"Eclipse is a general-purpose image processing library
	    written in ANSI C
for portability and performance. It has been successfully used as a
basis for a number of VLT pipeline developments and has been reported
to be used extensively for other projects outside ESO (without ESO
support!). As a C library, eclipse is meant to be used as a basis for
specific instrument developments (pipelines, or data reduction
recipes). For convenience, an interface to Python has been produced
using SWIG, that allows the programming of data reduction recipes in a
high-level language.
This interface is offered today in two parts: a dynamic library
(c_eclipse.so) and a Python module (eclipse.py) which should shield
Python programmers from changes happening in the library. The Python
module offers a number of classes to deal with FITS images and cubes
(tables are there but not yet interfaced). The idea is not to offer a
new data analysis environment but an easy way of prototyping recipes
before they are later frozen into C code for deployment."</p>
          </li>
          <li><a href="http://astrolabe.sourceforge.net/">Astrolabe</a>
            (Bill McClain)
	    <p>"Astrolabe is a collection of subroutines and applications for calculating the positions of the sun, moon, planets and other
      celestial objects. The emphasis is on high accuracy over a several thousand year time span.  The subroutine library attempts to (someday) implement all the techniques described in Astronomical Algorithms, second
      edition 1998, by Jean Meeus."</p>
          </li>
        </ul>
      </td>
    </tr>
  </tbody>
</table>
</body>
</html>
